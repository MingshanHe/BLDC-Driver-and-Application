
BLDC_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080064d8  080064d8  000164d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800692c  0800692c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800692c  0800692c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800692c  0800692c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  08006b10  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006b10  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009288  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ed  00000000  00000000  0002948d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019336  00000000  00000000  0002c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6d6  00000000  00000000  000454a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008653a  00000000  00000000  00050b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d70b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d8  00000000  00000000  000d7108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080064bc 	.word	0x080064bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080064bc 	.word	0x080064bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>:
 *  Created on: Nov 24, 2022
 *      Author: hemingshan
 */
#include "magnetic_sensor.hpp"

AS5600::AS5600(I2C_HandleTypeDef &hi2c_, UART_HandleTypeDef &huart_)
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	226c      	movs	r2, #108	; 0x6c
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	705a      	strb	r2, [r3, #1]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	220d      	movs	r2, #13
 8000fac:	709a      	strb	r2, [r3, #2]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	220e      	movs	r2, #14
 8000fb2:	70da      	strb	r2, [r3, #3]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	711a      	strb	r2, [r3, #4]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	220b      	movs	r2, #11
 8000fbe:	715a      	strb	r2, [r3, #5]
{
	/* I2C1 Initialization*/
	hi2c = hi2c_;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	2254      	movs	r2, #84	; 0x54
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fb96 	bl	80036fc <memcpy>

	hi2c.Instance = I2C1;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x100>)
 8000fd4:	609a      	str	r2, [r3, #8]
	hi2c.Init.ClockSpeed = 100000;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x104>)
 8000fda:	60da      	str	r2, [r3, #12]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
	hi2c.Init.OwnAddress1 = 0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fee:	619a      	str	r2, [r3, #24]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
	hi2c.Init.OwnAddress2 = 0;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_I2C_Init(&hi2c) != HAL_OK)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3308      	adds	r3, #8
 800100c:	4618      	mov	r0, r3
 800100e:	f000 ff49 	bl	8001ea4 <HAL_I2C_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x96>
	{
		Error_Handler();
 8001022:	f000 fa43 	bl	80014ac <Error_Handler>
	}

	/* UART1 Initialization*/
	huart = huart_;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	335c      	adds	r3, #92	; 0x5c
 800102c:	4611      	mov	r1, r2
 800102e:	2244      	movs	r2, #68	; 0x44
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fb63 	bl	80036fc <memcpy>

	huart.Instance = USART1;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x108>)
 800103a:	65da      	str	r2, [r3, #92]	; 0x5c
	huart.Init.BaudRate = 115200;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001042:	661a      	str	r2, [r3, #96]	; 0x60
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	665a      	str	r2, [r3, #100]	; 0x64
	huart.Init.StopBits = UART_STOPBITS_1;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	669a      	str	r2, [r3, #104]	; 0x68
	huart.Init.Parity = UART_PARITY_NONE;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2200      	movs	r2, #0
 8001054:	66da      	str	r2, [r3, #108]	; 0x6c
	huart.Init.Mode = UART_MODE_TX_RX;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	220c      	movs	r2, #12
 800105a:	671a      	str	r2, [r3, #112]	; 0x70
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	675a      	str	r2, [r3, #116]	; 0x74
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	679a      	str	r2, [r3, #120]	; 0x78
	if (HAL_UART_Init(&huart) != HAL_OK)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	335c      	adds	r3, #92	; 0x5c
 800106c:	4618      	mov	r0, r3
 800106e:	f002 f963 	bl	8003338 <HAL_UART_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0xf6>
	{
		Error_Handler();
 8001082:	f000 fa13 	bl	80014ac <Error_Handler>
	}
}
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	000186a0 	.word	0x000186a0
 8001098:	40013800 	.word	0x40013800

0800109c <_ZN6AS56007ReadRegEh>:
	HAL_I2C_Master_Transmit(&hi2c,(AS5600_ADDR),&Data,1,10);
	HAL_I2C_Mem_Write(&hi2c,(AS5600_ADDR),Reg,1,&Data,1,100);
}

uint8_t AS5600::ReadReg(uint8_t Reg)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	uint8_t DataRead = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c,(AS5600_ADDR),Reg,1,&DataRead,1,100);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f103 0008 	add.w	r0, r3, #8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b299      	uxth	r1, r3
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f107 030f 	add.w	r3, r7, #15
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	f001 f82e 	bl	800212c <HAL_I2C_Mem_Read>

	return DataRead;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <_ZN6AS56008GetAngleEv>:
uint16_t AS5600::GetAngle(void)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	int Data = (int)((float)(ReadReg(ANGLE_L) + (ReadReg(ANGLE_H) << 8))/4096*360);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	791b      	ldrb	r3, [r3, #4]
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffd6 	bl	800109c <_ZN6AS56007ReadRegEh>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461c      	mov	r4, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	4619      	mov	r1, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffce 	bl	800109c <_ZN6AS56007ReadRegEh>
 8001100:	4603      	mov	r3, r0
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	4423      	add	r3, r4
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fd78 	bl	8000bfc <__aeabi_i2f>
 800110c:	4603      	mov	r3, r0
 800110e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe7a 	bl	8000e0c <__aeabi_fdiv>
 8001118:	4603      	mov	r3, r0
 800111a:	4912      	ldr	r1, [pc, #72]	; (8001164 <_ZN6AS56008GetAngleEv+0x88>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fdc1 	bl	8000ca4 <__aeabi_fmul>
 8001122:	4603      	mov	r3, r0
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff0d 	bl	8000f44 <__aeabi_f2iz>
 800112a:	4603      	mov	r3, r0
 800112c:	617b      	str	r3, [r7, #20]
#if DEBUG
	uint8_t buf[12];
	sprintf((char*)buf,"%d\r\n",Data);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <_ZN6AS56008GetAngleEv+0x8c>)
 8001136:	4618      	mov	r0, r3
 8001138:	f002 ff56 	bl	8003fe8 <siprintf>
	HAL_UART_Transmit(&huart, buf, 2, HAL_MAX_DELAY);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8001142:	f107 0108 	add.w	r1, r7, #8
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114a:	2202      	movs	r2, #2
 800114c:	f002 f941 	bl	80033d2 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001150:	2064      	movs	r0, #100	; 0x64
 8001152:	f000 fc03 	bl	800195c <HAL_Delay>
#endif
	return Data;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	b29b      	uxth	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	bf00      	nop
 8001164:	43b40000 	.word	0x43b40000
 8001168:	080064d8 	.word	0x080064d8

0800116c <_ZN6AS56009GetStatusEv>:

uint8_t AS5600::GetStatus(void)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
#if DEBUG
	uint8_t buf[12];
	sprintf((char*)buf,"%x\r\n",(ReadReg(STATUS) & 0x38));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	795b      	ldrb	r3, [r3, #5]
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff8e 	bl	800109c <_ZN6AS56007ReadRegEh>
 8001180:	4603      	mov	r3, r0
 8001182:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4929      	ldr	r1, [pc, #164]	; (8001230 <_ZN6AS56009GetStatusEv+0xc4>)
 800118c:	4618      	mov	r0, r3
 800118e:	f002 ff2b 	bl	8003fe8 <siprintf>
	if ((ReadReg(STATUS) & 0x38) == 0x20)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	795b      	ldrb	r3, [r3, #5]
 8001196:	4619      	mov	r1, r3
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff7f 	bl	800109c <_ZN6AS56007ReadRegEh>
 800119e:	4603      	mov	r3, r0
 80011a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01a      	beq.n	80011e8 <_ZN6AS56009GetStatusEv+0x7c>
	{
		strcpy((char*)buf, "Magnet!\r\n");
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <_ZN6AS56009GetStatusEv+0xc8>)
 80011b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ba:	c303      	stmia	r3!, {r0, r1}
 80011bc:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7fe ffc1 	bl	8000150 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f107 010c 	add.w	r1, r7, #12
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011da:	4620      	mov	r0, r4
 80011dc:	f002 f8f9 	bl	80033d2 <HAL_UART_Transmit>
		HAL_Delay(100);
 80011e0:	2064      	movs	r0, #100	; 0x64
 80011e2:	f000 fbbb 	bl	800195c <HAL_Delay>
 80011e6:	e014      	b.n	8001212 <_ZN6AS56009GetStatusEv+0xa6>
	}
	else{
		strcpy((char*)buf, "NO Magnet!\r\n");
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <_ZN6AS56009GetStatusEv+0xcc>)
 80011ee:	461c      	mov	r4, r3
 80011f0:	4613      	mov	r3, r2
 80011f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f4:	c407      	stmia	r4!, {r0, r1, r2}
 80011f6:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart, buf, 2, HAL_MAX_DELAY);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80011fe:	f107 010c 	add.w	r1, r7, #12
 8001202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001206:	2202      	movs	r2, #2
 8001208:	f002 f8e3 	bl	80033d2 <HAL_UART_Transmit>
		HAL_Delay(100);
 800120c:	2064      	movs	r0, #100	; 0x64
 800120e:	f000 fba5 	bl	800195c <HAL_Delay>
	}
#endif
	return ReadReg(STATUS) & 0x38;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	795b      	ldrb	r3, [r3, #5]
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff3f 	bl	800109c <_ZN6AS56007ReadRegEh>
 800121e:	4603      	mov	r3, r0
 8001220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001224:	b2db      	uxtb	r3, r3
}
 8001226:	4618      	mov	r0, r3
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	080064e0 	.word	0x080064e0
 8001234:	080064e8 	.word	0x080064e8
 8001238:	080064f4 	.word	0x080064f4

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0a8      	sub	sp, #160	; 0xa0
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f000 fb29 	bl	8001898 <HAL_Init>

  /* USER CODE BEGIN Init */
  AS5600 as5600(hi2c1, huart1);
 8001246:	463b      	mov	r3, r7
 8001248:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <main+0x64>)
 800124a:	4916      	ldr	r1, [pc, #88]	; (80012a4 <main+0x68>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe9f 	bl	8000f90 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f82d 	bl	80012b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 f8d3 	bl	8001400 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800125a:	f000 f86f 	bl	800133c <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 800125e:	f000 f8a1 	bl	80013a4 <_ZL19MX_USART1_UART_Initv>
//  HAL_TIMEx_PWMN_Start(&htim1, 	TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, 	TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim1, 	TIM_CHANNEL_3);


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <main+0x6c>)
 800126a:	f000 fe03 	bl	8001e74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <main+0x70>)
 8001276:	f000 fdfd 	bl	8001e74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001280:	480a      	ldr	r0, [pc, #40]	; (80012ac <main+0x70>)
 8001282:	f000 fdf7 	bl	8001e74 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  as5600.GetStatus();
 8001286:	463b      	mov	r3, r7
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff6f 	bl	800116c <_ZN6AS56009GetStatusEv>
	  as5600.GetAngle();
 800128e:	463b      	mov	r3, r7
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff23 	bl	80010dc <_ZN6AS56008GetAngleEv>
	  HAL_Delay(100);
 8001296:	2064      	movs	r0, #100	; 0x64
 8001298:	f000 fb60 	bl	800195c <HAL_Delay>
	  as5600.GetStatus();
 800129c:	e7f3      	b.n	8001286 <main+0x4a>
 800129e:	bf00      	nop
 80012a0:	2000024c 	.word	0x2000024c
 80012a4:	200001f8 	.word	0x200001f8
 80012a8:	40010c00 	.word	0x40010c00
 80012ac:	40010800 	.word	0x40010800

080012b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b090      	sub	sp, #64	; 0x40
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	2228      	movs	r2, #40	; 0x28
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fa2a 	bl	8003718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d6:	2301      	movs	r3, #1
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012da:	2310      	movs	r3, #16
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e2:	f107 0318 	add.w	r3, r7, #24
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fc0c 	bl	8002b04 <HAL_RCC_OscConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf14      	ite	ne
 80012f2:	2301      	movne	r3, #1
 80012f4:	2300      	moveq	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 80012fc:	f000 f8d6 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fe75 	bl	8003008 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 800132e:	f000 f8bd 	bl	80014ac <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3740      	adds	r7, #64	; 0x40
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 8001342:	4a16      	ldr	r2, [pc, #88]	; (800139c <_ZL12MX_I2C1_Initv+0x60>)
 8001344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 8001348:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <_ZL12MX_I2C1_Initv+0x64>)
 800134a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 800135a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <_ZL12MX_I2C1_Initv+0x5c>)
 800137a:	f000 fd93 	bl	8001ea4 <HAL_I2C_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800138e:	f000 f88d 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001f8 	.word	0x200001f8
 800139c:	40005400 	.word	0x40005400
 80013a0:	000186a0 	.word	0x000186a0

080013a4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_ZL19MX_USART1_UART_Initv+0x58>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013dc:	f001 ffac 	bl	8003338 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80013f0:	f000 f85c 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000024c 	.word	0x2000024c
 80013fc:	40013800 	.word	0x40013800

08001400 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <_ZL12MX_GPIO_Initv+0xa0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <_ZL12MX_GPIO_Initv+0xa0>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <_ZL12MX_GPIO_Initv+0xa0>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <_ZL12MX_GPIO_Initv+0xa0>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <_ZL12MX_GPIO_Initv+0xa0>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <_ZL12MX_GPIO_Initv+0xa0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800144a:	4816      	ldr	r0, [pc, #88]	; (80014a4 <_ZL12MX_GPIO_Initv+0xa4>)
 800144c:	f000 fd12 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <_ZL12MX_GPIO_Initv+0xa8>)
 8001458:	f000 fd0c 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800145c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <_ZL12MX_GPIO_Initv+0xa4>)
 8001476:	f000 fb79 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800147a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800147e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <_ZL12MX_GPIO_Initv+0xa8>)
 8001494:	f000 fb6a 	bl	8001b6c <HAL_GPIO_Init>

}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	40010800 	.word	0x40010800

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_MspInit+0x5c>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_MspInit+0x5c>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_MspInit+0x5c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_MspInit+0x5c>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <HAL_MspInit+0x5c>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_MspInit+0x5c>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_MspInit+0x60>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_MspInit+0x60>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000

0800151c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_I2C_MspInit+0x90>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d132      	bne.n	80015a2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_I2C_MspInit+0x94>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <HAL_I2C_MspInit+0x94>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_I2C_MspInit+0x94>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001554:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155a:	2312      	movs	r3, #18
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4812      	ldr	r0, [pc, #72]	; (80015b4 <HAL_I2C_MspInit+0x98>)
 800156a:	f000 faff 	bl	8001b6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_I2C_MspInit+0x9c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_I2C_MspInit+0x9c>)
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_I2C_MspInit+0x94>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_I2C_MspInit+0x94>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_I2C_MspInit+0x94>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40010000 	.word	0x40010000

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_UART_MspInit+0xa4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d13d      	bne.n	8001658 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <HAL_UART_MspInit+0xa8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_UART_MspInit+0xa8>)
 80015e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_UART_MspInit+0xa8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_UART_MspInit+0xa8>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <HAL_UART_MspInit+0xa8>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_UART_MspInit+0xa8>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4812      	ldr	r0, [pc, #72]	; (8001668 <HAL_UART_MspInit+0xac>)
 8001620:	f000 faa4 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <HAL_UART_MspInit+0xac>)
 8001638:	f000 fa98 	bl	8001b6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_UART_MspInit+0xb0>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_UART_MspInit+0xb0>)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40013800 	.word	0x40013800
 8001664:	40021000 	.word	0x40021000
 8001668:	40010c00 	.word	0x40010c00
 800166c:	40010000 	.word	0x40010000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <NMI_Handler+0x4>

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler+0x4>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler+0x4>

0800168e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b6:	f000 f935 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}

080016be <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <_kill>:

int _kill(int pid, int sig)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016d6:	f001 ffe7 	bl	80036a8 <__errno>
 80016da:	4603      	mov	r3, r0
 80016dc:	2216      	movs	r2, #22
 80016de:	601a      	str	r2, [r3, #0]
	return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_exit>:

void _exit (int status)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ffe7 	bl	80016cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80016fe:	e7fe      	b.n	80016fe <_exit+0x12>

08001700 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
	}

return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e009      	b.n	8001760 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf1      	blt.n	800174c <_write+0x12>
	}
	return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_close>:

int _close(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	return -1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001798:	605a      	str	r2, [r3, #4]
	return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <_isatty>:

int _isatty(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
	return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
	return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
	...

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f001 ff50 	bl	80036a8 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20005000 	.word	0x20005000
 8001834:	00000400 	.word	0x00000400
 8001838:	20000290 	.word	0x20000290
 800183c:	200002a8 	.word	0x200002a8

08001840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184e:	490d      	ldr	r1, [pc, #52]	; (8001884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001864:	4c0a      	ldr	r4, [pc, #40]	; (8001890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001872:	f7ff ffe5 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f001 ff1d 	bl	80036b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff fcdf 	bl	800123c <main>
  bx lr
 800187e:	4770      	bx	lr
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001888:	08006934 	.word	0x08006934
  ldr r2, =_sbss
 800188c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001890:	200002a8 	.word	0x200002a8

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_Init+0x28>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_Init+0x28>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f92b 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe00 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f935 	bl	8001b52 <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001900:	f000 f90b 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x1c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_IncTick+0x20>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a03      	ldr	r2, [pc, #12]	; (8001944 <HAL_IncTick+0x20>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000008 	.word	0x20000008
 8001944:	20000294 	.word	0x20000294

08001948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_GetTick+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000294 	.word	0x20000294

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fff0 	bl	8001948 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffe0 	bl	8001948 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae4:	f7ff ff90 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff49 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff5e 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff90 	bl	8001a5c <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5f 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffb0 	bl	8001ac0 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b08b      	sub	sp, #44	; 0x2c
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7e:	e169      	b.n	8001e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b80:	2201      	movs	r2, #1
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 8158 	bne.w	8001e4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4a9a      	ldr	r2, [pc, #616]	; (8001e0c <HAL_GPIO_Init+0x2a0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d05e      	beq.n	8001c66 <HAL_GPIO_Init+0xfa>
 8001ba8:	4a98      	ldr	r2, [pc, #608]	; (8001e0c <HAL_GPIO_Init+0x2a0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d875      	bhi.n	8001c9a <HAL_GPIO_Init+0x12e>
 8001bae:	4a98      	ldr	r2, [pc, #608]	; (8001e10 <HAL_GPIO_Init+0x2a4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d058      	beq.n	8001c66 <HAL_GPIO_Init+0xfa>
 8001bb4:	4a96      	ldr	r2, [pc, #600]	; (8001e10 <HAL_GPIO_Init+0x2a4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d86f      	bhi.n	8001c9a <HAL_GPIO_Init+0x12e>
 8001bba:	4a96      	ldr	r2, [pc, #600]	; (8001e14 <HAL_GPIO_Init+0x2a8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d052      	beq.n	8001c66 <HAL_GPIO_Init+0xfa>
 8001bc0:	4a94      	ldr	r2, [pc, #592]	; (8001e14 <HAL_GPIO_Init+0x2a8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d869      	bhi.n	8001c9a <HAL_GPIO_Init+0x12e>
 8001bc6:	4a94      	ldr	r2, [pc, #592]	; (8001e18 <HAL_GPIO_Init+0x2ac>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d04c      	beq.n	8001c66 <HAL_GPIO_Init+0xfa>
 8001bcc:	4a92      	ldr	r2, [pc, #584]	; (8001e18 <HAL_GPIO_Init+0x2ac>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d863      	bhi.n	8001c9a <HAL_GPIO_Init+0x12e>
 8001bd2:	4a92      	ldr	r2, [pc, #584]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d046      	beq.n	8001c66 <HAL_GPIO_Init+0xfa>
 8001bd8:	4a90      	ldr	r2, [pc, #576]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d85d      	bhi.n	8001c9a <HAL_GPIO_Init+0x12e>
 8001bde:	2b12      	cmp	r3, #18
 8001be0:	d82a      	bhi.n	8001c38 <HAL_GPIO_Init+0xcc>
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	d859      	bhi.n	8001c9a <HAL_GPIO_Init+0x12e>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <HAL_GPIO_Init+0x80>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c67 	.word	0x08001c67
 8001bf0:	08001c41 	.word	0x08001c41
 8001bf4:	08001c53 	.word	0x08001c53
 8001bf8:	08001c95 	.word	0x08001c95
 8001bfc:	08001c9b 	.word	0x08001c9b
 8001c00:	08001c9b 	.word	0x08001c9b
 8001c04:	08001c9b 	.word	0x08001c9b
 8001c08:	08001c9b 	.word	0x08001c9b
 8001c0c:	08001c9b 	.word	0x08001c9b
 8001c10:	08001c9b 	.word	0x08001c9b
 8001c14:	08001c9b 	.word	0x08001c9b
 8001c18:	08001c9b 	.word	0x08001c9b
 8001c1c:	08001c9b 	.word	0x08001c9b
 8001c20:	08001c9b 	.word	0x08001c9b
 8001c24:	08001c9b 	.word	0x08001c9b
 8001c28:	08001c9b 	.word	0x08001c9b
 8001c2c:	08001c9b 	.word	0x08001c9b
 8001c30:	08001c49 	.word	0x08001c49
 8001c34:	08001c5d 	.word	0x08001c5d
 8001c38:	4a79      	ldr	r2, [pc, #484]	; (8001e20 <HAL_GPIO_Init+0x2b4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c3e:	e02c      	b.n	8001c9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	623b      	str	r3, [r7, #32]
          break;
 8001c46:	e029      	b.n	8001c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e024      	b.n	8001c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	3308      	adds	r3, #8
 8001c58:	623b      	str	r3, [r7, #32]
          break;
 8001c5a:	e01f      	b.n	8001c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	330c      	adds	r3, #12
 8001c62:	623b      	str	r3, [r7, #32]
          break;
 8001c64:	e01a      	b.n	8001c9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	623b      	str	r3, [r7, #32]
          break;
 8001c72:	e013      	b.n	8001c9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	611a      	str	r2, [r3, #16]
          break;
 8001c86:	e009      	b.n	8001c9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	615a      	str	r2, [r3, #20]
          break;
 8001c92:	e003      	b.n	8001c9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
          break;
 8001c98:	e000      	b.n	8001c9c <HAL_GPIO_Init+0x130>
          break;
 8001c9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2bff      	cmp	r3, #255	; 0xff
 8001ca0:	d801      	bhi.n	8001ca6 <HAL_GPIO_Init+0x13a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	e001      	b.n	8001caa <HAL_GPIO_Init+0x13e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	d802      	bhi.n	8001cb8 <HAL_GPIO_Init+0x14c>
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	e002      	b.n	8001cbe <HAL_GPIO_Init+0x152>
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	3b08      	subs	r3, #8
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	6a39      	ldr	r1, [r7, #32]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80b1 	beq.w	8001e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_GPIO_Init+0x2b8>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_GPIO_Init+0x2b8>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b4a      	ldr	r3, [pc, #296]	; (8001e24 <HAL_GPIO_Init+0x2b8>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2bc>)
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a40      	ldr	r2, [pc, #256]	; (8001e2c <HAL_GPIO_Init+0x2c0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3f      	ldr	r2, [pc, #252]	; (8001e30 <HAL_GPIO_Init+0x2c4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_GPIO_Init+0x1e8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3e      	ldr	r2, [pc, #248]	; (8001e34 <HAL_GPIO_Init+0x2c8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x1e4>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3d      	ldr	r2, [pc, #244]	; (8001e38 <HAL_GPIO_Init+0x2cc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_GPIO_Init+0x1e0>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e006      	b.n	8001d5a <HAL_GPIO_Init+0x1ee>
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	e004      	b.n	8001d5a <HAL_GPIO_Init+0x1ee>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e002      	b.n	8001d5a <HAL_GPIO_Init+0x1ee>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_GPIO_Init+0x1ee>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5c:	f002 0203 	and.w	r2, r2, #3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4093      	lsls	r3, r2
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d6a:	492f      	ldr	r1, [pc, #188]	; (8001e28 <HAL_GPIO_Init+0x2bc>)
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	492c      	ldr	r1, [pc, #176]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4928      	ldr	r1, [pc, #160]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4922      	ldr	r1, [pc, #136]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	491e      	ldr	r1, [pc, #120]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	4918      	ldr	r1, [pc, #96]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4914      	ldr	r1, [pc, #80]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d021      	beq.n	8001e40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	490e      	ldr	r1, [pc, #56]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
 8001e08:	e021      	b.n	8001e4e <HAL_GPIO_Init+0x2e2>
 8001e0a:	bf00      	nop
 8001e0c:	10320000 	.word	0x10320000
 8001e10:	10310000 	.word	0x10310000
 8001e14:	10220000 	.word	0x10220000
 8001e18:	10210000 	.word	0x10210000
 8001e1c:	10120000 	.word	0x10120000
 8001e20:	10110000 	.word	0x10110000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40010800 	.word	0x40010800
 8001e30:	40010c00 	.word	0x40010c00
 8001e34:	40011000 	.word	0x40011000
 8001e38:	40011400 	.word	0x40011400
 8001e3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	4909      	ldr	r1, [pc, #36]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	3301      	adds	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f47f ae8e 	bne.w	8001b80 <HAL_GPIO_Init+0x14>
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	372c      	adds	r7, #44	; 0x2c
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	40010400 	.word	0x40010400

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	611a      	str	r2, [r3, #16]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e12b      	b.n	800210e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fb26 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2224      	movs	r2, #36	; 0x24
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f08:	f001 f9d0 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4a81      	ldr	r2, [pc, #516]	; (8002118 <HAL_I2C_Init+0x274>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d807      	bhi.n	8001f28 <HAL_I2C_Init+0x84>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4a80      	ldr	r2, [pc, #512]	; (800211c <HAL_I2C_Init+0x278>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	bf94      	ite	ls
 8001f20:	2301      	movls	r3, #1
 8001f22:	2300      	movhi	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	e006      	b.n	8001f36 <HAL_I2C_Init+0x92>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a7d      	ldr	r2, [pc, #500]	; (8002120 <HAL_I2C_Init+0x27c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	bf94      	ite	ls
 8001f30:	2301      	movls	r3, #1
 8001f32:	2300      	movhi	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0e7      	b.n	800210e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4a78      	ldr	r2, [pc, #480]	; (8002124 <HAL_I2C_Init+0x280>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9b      	lsrs	r3, r3, #18
 8001f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a6a      	ldr	r2, [pc, #424]	; (8002118 <HAL_I2C_Init+0x274>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d802      	bhi.n	8001f78 <HAL_I2C_Init+0xd4>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3301      	adds	r3, #1
 8001f76:	e009      	b.n	8001f8c <HAL_I2C_Init+0xe8>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	4a69      	ldr	r2, [pc, #420]	; (8002128 <HAL_I2C_Init+0x284>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	495c      	ldr	r1, [pc, #368]	; (8002118 <HAL_I2C_Init+0x274>)
 8001fa8:	428b      	cmp	r3, r1
 8001faa:	d819      	bhi.n	8001fe0 <HAL_I2C_Init+0x13c>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e59      	subs	r1, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fba:	1c59      	adds	r1, r3, #1
 8001fbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_I2C_Init+0x138>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1e59      	subs	r1, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fda:	e051      	b.n	8002080 <HAL_I2C_Init+0x1dc>
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e04f      	b.n	8002080 <HAL_I2C_Init+0x1dc>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d111      	bne.n	800200c <HAL_I2C_Init+0x168>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	440b      	add	r3, r1
 8001ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e012      	b.n	8002032 <HAL_I2C_Init+0x18e>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1e58      	subs	r0, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	0099      	lsls	r1, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002022:	3301      	adds	r3, #1
 8002024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Init+0x196>
 8002036:	2301      	movs	r3, #1
 8002038:	e022      	b.n	8002080 <HAL_I2C_Init+0x1dc>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10e      	bne.n	8002060 <HAL_I2C_Init+0x1bc>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1e58      	subs	r0, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	440b      	add	r3, r1
 8002050:	fbb0 f3f3 	udiv	r3, r0, r3
 8002054:	3301      	adds	r3, #1
 8002056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205e:	e00f      	b.n	8002080 <HAL_I2C_Init+0x1dc>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	0099      	lsls	r1, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	fbb0 f3f3 	udiv	r3, r0, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	6809      	ldr	r1, [r1, #0]
 8002084:	4313      	orrs	r3, r2
 8002086:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6911      	ldr	r1, [r2, #16]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68d2      	ldr	r2, [r2, #12]
 80020ba:	4311      	orrs	r1, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	430b      	orrs	r3, r1
 80020c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	000186a0 	.word	0x000186a0
 800211c:	001e847f 	.word	0x001e847f
 8002120:	003d08ff 	.word	0x003d08ff
 8002124:	431bde83 	.word	0x431bde83
 8002128:	10624dd3 	.word	0x10624dd3

0800212c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	4608      	mov	r0, r1
 8002136:	4611      	mov	r1, r2
 8002138:	461a      	mov	r2, r3
 800213a:	4603      	mov	r3, r0
 800213c:	817b      	strh	r3, [r7, #10]
 800213e:	460b      	mov	r3, r1
 8002140:	813b      	strh	r3, [r7, #8]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800214a:	f7ff fbfd 	bl	8001948 <HAL_GetTick>
 800214e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b20      	cmp	r3, #32
 800215a:	f040 8244 	bne.w	80025e6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2319      	movs	r3, #25
 8002164:	2201      	movs	r2, #1
 8002166:	4982      	ldr	r1, [pc, #520]	; (8002370 <HAL_I2C_Mem_Read+0x244>)
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fb2f 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
 8002176:	e237      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_I2C_Mem_Read+0x5a>
 8002182:	2302      	movs	r3, #2
 8002184:	e230      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d007      	beq.n	80021ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2222      	movs	r2, #34	; 0x22
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2240      	movs	r2, #64	; 0x40
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a62      	ldr	r2, [pc, #392]	; (8002374 <HAL_I2C_Mem_Read+0x248>)
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ee:	88f8      	ldrh	r0, [r7, #6]
 80021f0:	893a      	ldrh	r2, [r7, #8]
 80021f2:	8979      	ldrh	r1, [r7, #10]
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	4603      	mov	r3, r0
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f9fc 	bl	80025fc <I2C_RequestMemoryRead>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e1ec      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	2b00      	cmp	r3, #0
 8002214:	d113      	bne.n	800223e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e1c0      	b.n	80025c0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	2b01      	cmp	r3, #1
 8002244:	d11e      	bne.n	8002284 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002254:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002256:	b672      	cpsid	i
}
 8002258:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002280:	b662      	cpsie	i
}
 8002282:	e035      	b.n	80022f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	2b02      	cmp	r3, #2
 800228a:	d11e      	bne.n	80022ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800229a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800229c:	b672      	cpsid	i
}
 800229e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022c6:	b662      	cpsie	i
}
 80022c8:	e012      	b.n	80022f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022f0:	e166      	b.n	80025c0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	f200 811f 	bhi.w	800253a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	2b01      	cmp	r3, #1
 8002302:	d123      	bne.n	800234c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fb76 	bl	80029fa <I2C_WaitOnRXNEFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e167      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
 800234a:	e139      	b.n	80025c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	2b02      	cmp	r3, #2
 8002352:	d152      	bne.n	80023fa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	2200      	movs	r2, #0
 800235c:	4906      	ldr	r1, [pc, #24]	; (8002378 <HAL_I2C_Mem_Read+0x24c>)
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fa34 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e13c      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
 800236e:	bf00      	nop
 8002370:	00100002 	.word	0x00100002
 8002374:	ffff0000 	.word	0xffff0000
 8002378:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023c2:	b662      	cpsie	i
}
 80023c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f8:	e0e2      	b.n	80025c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002400:	2200      	movs	r2, #0
 8002402:	497b      	ldr	r1, [pc, #492]	; (80025f0 <HAL_I2C_Mem_Read+0x4c4>)
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f9e1 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0e9      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002422:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800245a:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_I2C_Mem_Read+0x4c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_I2C_Mem_Read+0x4cc>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0a1a      	lsrs	r2, r3, #8
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00da      	lsls	r2, r3, #3
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	3b01      	subs	r3, #1
 8002478:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d118      	bne.n	80024b2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80024a2:	b662      	cpsie	i
}
 80024a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e09a      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d1d9      	bne.n	8002474 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002502:	b662      	cpsie	i
}
 8002504:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002538:	e042      	b.n	80025c0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa5b 	bl	80029fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e04c      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b04      	cmp	r3, #4
 800258c:	d118      	bne.n	80025c0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f47f ae94 	bne.w	80022f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e000      	b.n	80025e8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
  }
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	00010004 	.word	0x00010004
 80025f4:	20000000 	.word	0x20000000
 80025f8:	14f8b589 	.word	0x14f8b589

080025fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4603      	mov	r3, r0
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	460b      	mov	r3, r1
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002624:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	2200      	movs	r2, #0
 800263e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f8c2 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265c:	d103      	bne.n	8002666 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0aa      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800266a:	897b      	ldrh	r3, [r7, #10]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002678:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	4952      	ldr	r1, [pc, #328]	; (80027c8 <I2C_RequestMemoryRead+0x1cc>)
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f8fa 	bl	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e097      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f964 	bl	8002978 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d107      	bne.n	80026ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e076      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d8:	893b      	ldrh	r3, [r7, #8]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]
 80026e2:	e021      	b.n	8002728 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f93e 	bl	8002978 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2b04      	cmp	r3, #4
 8002708:	d107      	bne.n	800271a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002718:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e050      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800271e:	893b      	ldrh	r3, [r7, #8]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272a:	6a39      	ldr	r1, [r7, #32]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f923 	bl	8002978 <I2C_WaitOnTXEFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b04      	cmp	r3, #4
 800273e:	d107      	bne.n	8002750 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e035      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002762:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	2200      	movs	r2, #0
 800276c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f82b 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278a:	d103      	bne.n	8002794 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e013      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002798:	897b      	ldrh	r3, [r7, #10]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	4906      	ldr	r1, [pc, #24]	; (80027c8 <I2C_RequestMemoryRead+0x1cc>)
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f863 	bl	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	00010002 	.word	0x00010002

080027cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027dc:	e025      	b.n	800282a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e4:	d021      	beq.n	800282a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7ff f8af 	bl	8001948 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e023      	b.n	8002872 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10d      	bne.n	8002850 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	e00c      	b.n	800286a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4013      	ands	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	429a      	cmp	r2, r3
 800286e:	d0b6      	beq.n	80027de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002888:	e051      	b.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002898:	d123      	bne.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f043 0204 	orr.w	r2, r3, #4
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e046      	b.n	8002970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e8:	d021      	beq.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7ff f82d 	bl	8001948 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e020      	b.n	8002970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10c      	bne.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e00b      	b.n	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	43da      	mvns	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4013      	ands	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d18d      	bne.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002984:	e02d      	b.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f88d 	bl	8002aa6 <I2C_IsAcknowledgeFailed>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e02d      	b.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299c:	d021      	beq.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7fe ffd3 	bl	8001948 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d116      	bne.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0220 	orr.w	r2, r3, #32
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d1ca      	bne.n	8002986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a06:	e042      	b.n	8002a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d119      	bne.n	8002a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f06f 0210 	mvn.w	r2, #16
 8002a1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e029      	b.n	8002a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4a:	f7fe ff7d 	bl	8001948 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d116      	bne.n	8002a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0220 	orr.w	r2, r3, #32
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d1b5      	bne.n	8002a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abc:	d11b      	bne.n	8002af6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e272      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8087 	beq.w	8002c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b24:	4b92      	ldr	r3, [pc, #584]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d00c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b30:	4b8f      	ldr	r3, [pc, #572]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d112      	bne.n	8002b62 <HAL_RCC_OscConfig+0x5e>
 8002b3c:	4b8c      	ldr	r3, [pc, #560]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d10b      	bne.n	8002b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4a:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d06c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x12c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d168      	bne.n	8002c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e24c      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x76>
 8002b6c:	4b80      	ldr	r3, [pc, #512]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a7f      	ldr	r2, [pc, #508]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	e02e      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x98>
 8002b82:	4b7b      	ldr	r3, [pc, #492]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a7a      	ldr	r2, [pc, #488]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b78      	ldr	r3, [pc, #480]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a77      	ldr	r2, [pc, #476]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xbc>
 8002ba6:	4b72      	ldr	r3, [pc, #456]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a71      	ldr	r2, [pc, #452]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002bc0:	4b6b      	ldr	r3, [pc, #428]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a6a      	ldr	r2, [pc, #424]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a67      	ldr	r2, [pc, #412]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe feb2 	bl	8001948 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe feae 	bl	8001948 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e200      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xe4>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fe9e 	bl	8001948 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fe9a 	bl	8001948 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1ec      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x10c>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c3e:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c4a:	4b49      	ldr	r3, [pc, #292]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x18c>
 8002c56:	4b46      	ldr	r3, [pc, #280]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x176>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1c0      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4939      	ldr	r1, [pc, #228]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fe53 	bl	8001948 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fe4f 	bl	8001948 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1a1      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4927      	ldr	r1, [pc, #156]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fe32 	bl	8001948 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fe2e 	bl	8001948 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e180      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d03a      	beq.n	8002d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d019      	beq.n	8002d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fe12 	bl	8001948 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe fe0e 	bl	8001948 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e160      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d46:	2001      	movs	r0, #1
 8002d48:	f000 fad8 	bl	80032fc <RCC_Delay>
 8002d4c:	e01c      	b.n	8002d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fe fdf8 	bl	8001948 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5a:	e00f      	b.n	8002d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fdf4 	bl	8001948 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d908      	bls.n	8002d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e146      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	42420000 	.word	0x42420000
 8002d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b92      	ldr	r3, [pc, #584]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e9      	bne.n	8002d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a6 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a87      	ldr	r2, [pc, #540]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	61d3      	str	r3, [r2, #28]
 8002db2:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b82      	ldr	r3, [pc, #520]	; (8002fcc <HAL_RCC_OscConfig+0x4c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b7f      	ldr	r3, [pc, #508]	; (8002fcc <HAL_RCC_OscConfig+0x4c8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7e      	ldr	r2, [pc, #504]	; (8002fcc <HAL_RCC_OscConfig+0x4c8>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fdb5 	bl	8001948 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe fdb1 	bl	8001948 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e103      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <HAL_RCC_OscConfig+0x4c8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x312>
 8002e08:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a6e      	ldr	r2, [pc, #440]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6213      	str	r3, [r2, #32]
 8002e14:	e02d      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x334>
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a69      	ldr	r2, [pc, #420]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a66      	ldr	r2, [pc, #408]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6213      	str	r3, [r2, #32]
 8002e36:	e01c      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d10c      	bne.n	8002e5a <HAL_RCC_OscConfig+0x356>
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a60      	ldr	r2, [pc, #384]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4a5d      	ldr	r2, [pc, #372]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6213      	str	r3, [r2, #32]
 8002e58:	e00b      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a5a      	ldr	r2, [pc, #360]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4a57      	ldr	r2, [pc, #348]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	f023 0304 	bic.w	r3, r3, #4
 8002e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d015      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe fd65 	bl	8001948 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	e00a      	b.n	8002e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7fe fd61 	bl	8001948 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e0b1      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ee      	beq.n	8002e82 <HAL_RCC_OscConfig+0x37e>
 8002ea4:	e014      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fd4f 	bl	8001948 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fd4b 	bl	8001948 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e09b      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ee      	bne.n	8002eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d105      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4a3b      	ldr	r2, [pc, #236]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8087 	beq.w	8002ffa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d061      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d146      	bne.n	8002f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f00:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fe fd1f 	bl	8001948 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe fd1b 	bl	8001948 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e06d      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d108      	bne.n	8002f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	4921      	ldr	r1, [pc, #132]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a19      	ldr	r1, [r3, #32]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	491b      	ldr	r1, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fcef 	bl	8001948 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe fceb 	bl	8001948 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e03d      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x46a>
 8002f8c:	e035      	b.n	8002ffa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_RCC_OscConfig+0x4cc>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fcd8 	bl	8001948 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe fcd4 	bl	8001948 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e026      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x498>
 8002fba:	e01e      	b.n	8002ffa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e019      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_OscConfig+0x500>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0d0      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d910      	bls.n	800304c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b67      	ldr	r3, [pc, #412]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0207 	bic.w	r2, r3, #7
 8003032:	4965      	ldr	r1, [pc, #404]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0b8      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a58      	ldr	r2, [pc, #352]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800306e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	494d      	ldr	r1, [pc, #308]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d040      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d115      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07f      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e073      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b3d      	ldr	r3, [pc, #244]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06b      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4936      	ldr	r1, [pc, #216]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fc26 	bl	8001948 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fe fc22 	bl	8001948 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e053      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d210      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 0207 	bic.w	r2, r3, #7
 800313e:	4922      	ldr	r1, [pc, #136]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e032      	b.n	80031be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4916      	ldr	r1, [pc, #88]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	490e      	ldr	r1, [pc, #56]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003196:	f000 f821 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 800319a:	4602      	mov	r2, r0
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	490a      	ldr	r1, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	5ccb      	ldrb	r3, [r1, r3]
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_RCC_ClockConfig+0x1cc>)
 80031b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1d0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fb84 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40022000 	.word	0x40022000
 80031cc:	40021000 	.word	0x40021000
 80031d0:	08006538 	.word	0x08006538
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000004 	.word	0x20000004

080031dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	b490      	push	{r4, r7}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031e2:	4b29      	ldr	r3, [pc, #164]	; (8003288 <HAL_RCC_GetSysClockFreq+0xac>)
 80031e4:	1d3c      	adds	r4, r7, #4
 80031e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031ec:	f240 2301 	movw	r3, #513	; 0x201
 80031f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003206:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b04      	cmp	r3, #4
 8003214:	d002      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x40>
 8003216:	2b08      	cmp	r3, #8
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x46>
 800321a:	e02b      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800321c:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <HAL_RCC_GetSysClockFreq+0xb4>)
 800321e:	623b      	str	r3, [r7, #32]
      break;
 8003220:	e02b      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	0c9b      	lsrs	r3, r3, #18
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	3328      	adds	r3, #40	; 0x28
 800322c:	443b      	add	r3, r7
 800322e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003232:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d012      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	0c5b      	lsrs	r3, r3, #17
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	3328      	adds	r3, #40	; 0x28
 800324a:	443b      	add	r3, r7
 800324c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003250:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003256:	fb03 f202 	mul.w	r2, r3, r2
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	e004      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	623b      	str	r3, [r7, #32]
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003276:	623b      	str	r3, [r7, #32]
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	6a3b      	ldr	r3, [r7, #32]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3728      	adds	r7, #40	; 0x28
 8003280:	46bd      	mov	sp, r7
 8003282:	bc90      	pop	{r4, r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	08006528 	.word	0x08006528
 800328c:	40021000 	.word	0x40021000
 8003290:	007a1200 	.word	0x007a1200
 8003294:	003d0900 	.word	0x003d0900

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff2 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08006548 	.word	0x08006548

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffde 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0adb      	lsrs	r3, r3, #11
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08006548 	.word	0x08006548

080032fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <RCC_Delay+0x34>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <RCC_Delay+0x38>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0a5b      	lsrs	r3, r3, #9
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003318:	bf00      	nop
  }
  while (Delay --);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1e5a      	subs	r2, r3, #1
 800331e:	60fa      	str	r2, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f9      	bne.n	8003318 <RCC_Delay+0x1c>
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	20000000 	.word	0x20000000
 8003334:	10624dd3 	.word	0x10624dd3

08003338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e03f      	b.n	80033ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe f92c 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800337a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f905 	bl	800358c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b08a      	sub	sp, #40	; 0x28
 80033d6:	af02      	add	r7, sp, #8
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d17c      	bne.n	80034ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_UART_Transmit+0x2c>
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e075      	b.n	80034ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_UART_Transmit+0x3e>
 800340c:	2302      	movs	r3, #2
 800340e:	e06e      	b.n	80034ee <HAL_UART_Transmit+0x11c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003426:	f7fe fa8f 	bl	8001948 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d108      	bne.n	8003454 <HAL_UART_Transmit+0x82>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003464:	e02a      	b.n	80034bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f840 	bl	80034f6 <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e036      	b.n	80034ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cf      	bne.n	8003466 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2140      	movs	r1, #64	; 0x40
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f810 	bl	80034f6 <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e006      	b.n	80034ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003506:	e02c      	b.n	8003562 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350e:	d028      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x30>
 8003516:	f7fe fa17 	bl	8001948 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	429a      	cmp	r2, r3
 8003524:	d21d      	bcs.n	8003562 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003534:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e00f      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	429a      	cmp	r2, r3
 800357e:	d0c3      	beq.n	8003508 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035c6:	f023 030c 	bic.w	r3, r3, #12
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <UART_SetConfig+0x114>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d103      	bne.n	80035fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff fe6e 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	e002      	b.n	8003602 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035fc:	f7ff fe56 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8003600:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	009a      	lsls	r2, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <UART_SetConfig+0x118>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	0119      	lsls	r1, r3, #4
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009a      	lsls	r2, r3, #2
 800362c:	441a      	add	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	fbb2 f2f3 	udiv	r2, r2, r3
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <UART_SetConfig+0x118>)
 800363a:	fba3 0302 	umull	r0, r3, r3, r2
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	2064      	movs	r0, #100	; 0x64
 8003642:	fb00 f303 	mul.w	r3, r0, r3
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	3332      	adds	r3, #50	; 0x32
 800364c:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <UART_SetConfig+0x118>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003658:	4419      	add	r1, r3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009a      	lsls	r2, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <UART_SetConfig+0x118>)
 8003672:	fba3 0302 	umull	r0, r3, r3, r2
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2064      	movs	r0, #100	; 0x64
 800367a:	fb00 f303 	mul.w	r3, r0, r3
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	3332      	adds	r3, #50	; 0x32
 8003684:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <UART_SetConfig+0x118>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	f003 020f 	and.w	r2, r3, #15
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	440a      	add	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40013800 	.word	0x40013800
 80036a4:	51eb851f 	.word	0x51eb851f

080036a8 <__errno>:
 80036a8:	4b01      	ldr	r3, [pc, #4]	; (80036b0 <__errno+0x8>)
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	2000000c 	.word	0x2000000c

080036b4 <__libc_init_array>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	2600      	movs	r6, #0
 80036b8:	4d0c      	ldr	r5, [pc, #48]	; (80036ec <__libc_init_array+0x38>)
 80036ba:	4c0d      	ldr	r4, [pc, #52]	; (80036f0 <__libc_init_array+0x3c>)
 80036bc:	1b64      	subs	r4, r4, r5
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	42a6      	cmp	r6, r4
 80036c2:	d109      	bne.n	80036d8 <__libc_init_array+0x24>
 80036c4:	f002 fefa 	bl	80064bc <_init>
 80036c8:	2600      	movs	r6, #0
 80036ca:	4d0a      	ldr	r5, [pc, #40]	; (80036f4 <__libc_init_array+0x40>)
 80036cc:	4c0a      	ldr	r4, [pc, #40]	; (80036f8 <__libc_init_array+0x44>)
 80036ce:	1b64      	subs	r4, r4, r5
 80036d0:	10a4      	asrs	r4, r4, #2
 80036d2:	42a6      	cmp	r6, r4
 80036d4:	d105      	bne.n	80036e2 <__libc_init_array+0x2e>
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036dc:	4798      	blx	r3
 80036de:	3601      	adds	r6, #1
 80036e0:	e7ee      	b.n	80036c0 <__libc_init_array+0xc>
 80036e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e6:	4798      	blx	r3
 80036e8:	3601      	adds	r6, #1
 80036ea:	e7f2      	b.n	80036d2 <__libc_init_array+0x1e>
 80036ec:	0800692c 	.word	0x0800692c
 80036f0:	0800692c 	.word	0x0800692c
 80036f4:	0800692c 	.word	0x0800692c
 80036f8:	08006930 	.word	0x08006930

080036fc <memcpy>:
 80036fc:	440a      	add	r2, r1
 80036fe:	4291      	cmp	r1, r2
 8003700:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003704:	d100      	bne.n	8003708 <memcpy+0xc>
 8003706:	4770      	bx	lr
 8003708:	b510      	push	{r4, lr}
 800370a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800370e:	4291      	cmp	r1, r2
 8003710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003714:	d1f9      	bne.n	800370a <memcpy+0xe>
 8003716:	bd10      	pop	{r4, pc}

08003718 <memset>:
 8003718:	4603      	mov	r3, r0
 800371a:	4402      	add	r2, r0
 800371c:	4293      	cmp	r3, r2
 800371e:	d100      	bne.n	8003722 <memset+0xa>
 8003720:	4770      	bx	lr
 8003722:	f803 1b01 	strb.w	r1, [r3], #1
 8003726:	e7f9      	b.n	800371c <memset+0x4>

08003728 <__cvt>:
 8003728:	2b00      	cmp	r3, #0
 800372a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800372e:	461f      	mov	r7, r3
 8003730:	bfbb      	ittet	lt
 8003732:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003736:	461f      	movlt	r7, r3
 8003738:	2300      	movge	r3, #0
 800373a:	232d      	movlt	r3, #45	; 0x2d
 800373c:	b088      	sub	sp, #32
 800373e:	4614      	mov	r4, r2
 8003740:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003742:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003744:	7013      	strb	r3, [r2, #0]
 8003746:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003748:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800374c:	f023 0820 	bic.w	r8, r3, #32
 8003750:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003754:	d005      	beq.n	8003762 <__cvt+0x3a>
 8003756:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800375a:	d100      	bne.n	800375e <__cvt+0x36>
 800375c:	3501      	adds	r5, #1
 800375e:	2302      	movs	r3, #2
 8003760:	e000      	b.n	8003764 <__cvt+0x3c>
 8003762:	2303      	movs	r3, #3
 8003764:	aa07      	add	r2, sp, #28
 8003766:	9204      	str	r2, [sp, #16]
 8003768:	aa06      	add	r2, sp, #24
 800376a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800376e:	e9cd 3500 	strd	r3, r5, [sp]
 8003772:	4622      	mov	r2, r4
 8003774:	463b      	mov	r3, r7
 8003776:	f000 fce3 	bl	8004140 <_dtoa_r>
 800377a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800377e:	4606      	mov	r6, r0
 8003780:	d102      	bne.n	8003788 <__cvt+0x60>
 8003782:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003784:	07db      	lsls	r3, r3, #31
 8003786:	d522      	bpl.n	80037ce <__cvt+0xa6>
 8003788:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800378c:	eb06 0905 	add.w	r9, r6, r5
 8003790:	d110      	bne.n	80037b4 <__cvt+0x8c>
 8003792:	7833      	ldrb	r3, [r6, #0]
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d10a      	bne.n	80037ae <__cvt+0x86>
 8003798:	2200      	movs	r2, #0
 800379a:	2300      	movs	r3, #0
 800379c:	4620      	mov	r0, r4
 800379e:	4639      	mov	r1, r7
 80037a0:	f7fd f902 	bl	80009a8 <__aeabi_dcmpeq>
 80037a4:	b918      	cbnz	r0, 80037ae <__cvt+0x86>
 80037a6:	f1c5 0501 	rsb	r5, r5, #1
 80037aa:	f8ca 5000 	str.w	r5, [sl]
 80037ae:	f8da 3000 	ldr.w	r3, [sl]
 80037b2:	4499      	add	r9, r3
 80037b4:	2200      	movs	r2, #0
 80037b6:	2300      	movs	r3, #0
 80037b8:	4620      	mov	r0, r4
 80037ba:	4639      	mov	r1, r7
 80037bc:	f7fd f8f4 	bl	80009a8 <__aeabi_dcmpeq>
 80037c0:	b108      	cbz	r0, 80037c6 <__cvt+0x9e>
 80037c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80037c6:	2230      	movs	r2, #48	; 0x30
 80037c8:	9b07      	ldr	r3, [sp, #28]
 80037ca:	454b      	cmp	r3, r9
 80037cc:	d307      	bcc.n	80037de <__cvt+0xb6>
 80037ce:	4630      	mov	r0, r6
 80037d0:	9b07      	ldr	r3, [sp, #28]
 80037d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80037d4:	1b9b      	subs	r3, r3, r6
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	b008      	add	sp, #32
 80037da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037de:	1c59      	adds	r1, r3, #1
 80037e0:	9107      	str	r1, [sp, #28]
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e7f0      	b.n	80037c8 <__cvt+0xa0>

080037e6 <__exponent>:
 80037e6:	4603      	mov	r3, r0
 80037e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037ea:	2900      	cmp	r1, #0
 80037ec:	f803 2b02 	strb.w	r2, [r3], #2
 80037f0:	bfb6      	itet	lt
 80037f2:	222d      	movlt	r2, #45	; 0x2d
 80037f4:	222b      	movge	r2, #43	; 0x2b
 80037f6:	4249      	neglt	r1, r1
 80037f8:	2909      	cmp	r1, #9
 80037fa:	7042      	strb	r2, [r0, #1]
 80037fc:	dd2b      	ble.n	8003856 <__exponent+0x70>
 80037fe:	f10d 0407 	add.w	r4, sp, #7
 8003802:	46a4      	mov	ip, r4
 8003804:	270a      	movs	r7, #10
 8003806:	fb91 f6f7 	sdiv	r6, r1, r7
 800380a:	460a      	mov	r2, r1
 800380c:	46a6      	mov	lr, r4
 800380e:	fb07 1516 	mls	r5, r7, r6, r1
 8003812:	2a63      	cmp	r2, #99	; 0x63
 8003814:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003818:	4631      	mov	r1, r6
 800381a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800381e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003822:	dcf0      	bgt.n	8003806 <__exponent+0x20>
 8003824:	3130      	adds	r1, #48	; 0x30
 8003826:	f1ae 0502 	sub.w	r5, lr, #2
 800382a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800382e:	4629      	mov	r1, r5
 8003830:	1c44      	adds	r4, r0, #1
 8003832:	4561      	cmp	r1, ip
 8003834:	d30a      	bcc.n	800384c <__exponent+0x66>
 8003836:	f10d 0209 	add.w	r2, sp, #9
 800383a:	eba2 020e 	sub.w	r2, r2, lr
 800383e:	4565      	cmp	r5, ip
 8003840:	bf88      	it	hi
 8003842:	2200      	movhi	r2, #0
 8003844:	4413      	add	r3, r2
 8003846:	1a18      	subs	r0, r3, r0
 8003848:	b003      	add	sp, #12
 800384a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800384c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003850:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003854:	e7ed      	b.n	8003832 <__exponent+0x4c>
 8003856:	2330      	movs	r3, #48	; 0x30
 8003858:	3130      	adds	r1, #48	; 0x30
 800385a:	7083      	strb	r3, [r0, #2]
 800385c:	70c1      	strb	r1, [r0, #3]
 800385e:	1d03      	adds	r3, r0, #4
 8003860:	e7f1      	b.n	8003846 <__exponent+0x60>
	...

08003864 <_printf_float>:
 8003864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003868:	b091      	sub	sp, #68	; 0x44
 800386a:	460c      	mov	r4, r1
 800386c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003870:	4616      	mov	r6, r2
 8003872:	461f      	mov	r7, r3
 8003874:	4605      	mov	r5, r0
 8003876:	f001 fa51 	bl	8004d1c <_localeconv_r>
 800387a:	6803      	ldr	r3, [r0, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	9309      	str	r3, [sp, #36]	; 0x24
 8003880:	f7fc fc66 	bl	8000150 <strlen>
 8003884:	2300      	movs	r3, #0
 8003886:	930e      	str	r3, [sp, #56]	; 0x38
 8003888:	f8d8 3000 	ldr.w	r3, [r8]
 800388c:	900a      	str	r0, [sp, #40]	; 0x28
 800388e:	3307      	adds	r3, #7
 8003890:	f023 0307 	bic.w	r3, r3, #7
 8003894:	f103 0208 	add.w	r2, r3, #8
 8003898:	f894 9018 	ldrb.w	r9, [r4, #24]
 800389c:	f8d4 b000 	ldr.w	fp, [r4]
 80038a0:	f8c8 2000 	str.w	r2, [r8]
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80038ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80038b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80038b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80038b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038ba:	4640      	mov	r0, r8
 80038bc:	4b9c      	ldr	r3, [pc, #624]	; (8003b30 <_printf_float+0x2cc>)
 80038be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038c0:	f7fd f8a4 	bl	8000a0c <__aeabi_dcmpun>
 80038c4:	bb70      	cbnz	r0, 8003924 <_printf_float+0xc0>
 80038c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038ca:	4640      	mov	r0, r8
 80038cc:	4b98      	ldr	r3, [pc, #608]	; (8003b30 <_printf_float+0x2cc>)
 80038ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038d0:	f7fd f87e 	bl	80009d0 <__aeabi_dcmple>
 80038d4:	bb30      	cbnz	r0, 8003924 <_printf_float+0xc0>
 80038d6:	2200      	movs	r2, #0
 80038d8:	2300      	movs	r3, #0
 80038da:	4640      	mov	r0, r8
 80038dc:	4651      	mov	r1, sl
 80038de:	f7fd f86d 	bl	80009bc <__aeabi_dcmplt>
 80038e2:	b110      	cbz	r0, 80038ea <_printf_float+0x86>
 80038e4:	232d      	movs	r3, #45	; 0x2d
 80038e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ea:	4b92      	ldr	r3, [pc, #584]	; (8003b34 <_printf_float+0x2d0>)
 80038ec:	4892      	ldr	r0, [pc, #584]	; (8003b38 <_printf_float+0x2d4>)
 80038ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80038f2:	bf94      	ite	ls
 80038f4:	4698      	movls	r8, r3
 80038f6:	4680      	movhi	r8, r0
 80038f8:	2303      	movs	r3, #3
 80038fa:	f04f 0a00 	mov.w	sl, #0
 80038fe:	6123      	str	r3, [r4, #16]
 8003900:	f02b 0304 	bic.w	r3, fp, #4
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	4633      	mov	r3, r6
 8003908:	4621      	mov	r1, r4
 800390a:	4628      	mov	r0, r5
 800390c:	9700      	str	r7, [sp, #0]
 800390e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003910:	f000 f9d4 	bl	8003cbc <_printf_common>
 8003914:	3001      	adds	r0, #1
 8003916:	f040 8090 	bne.w	8003a3a <_printf_float+0x1d6>
 800391a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800391e:	b011      	add	sp, #68	; 0x44
 8003920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003924:	4642      	mov	r2, r8
 8003926:	4653      	mov	r3, sl
 8003928:	4640      	mov	r0, r8
 800392a:	4651      	mov	r1, sl
 800392c:	f7fd f86e 	bl	8000a0c <__aeabi_dcmpun>
 8003930:	b148      	cbz	r0, 8003946 <_printf_float+0xe2>
 8003932:	f1ba 0f00 	cmp.w	sl, #0
 8003936:	bfb8      	it	lt
 8003938:	232d      	movlt	r3, #45	; 0x2d
 800393a:	4880      	ldr	r0, [pc, #512]	; (8003b3c <_printf_float+0x2d8>)
 800393c:	bfb8      	it	lt
 800393e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003942:	4b7f      	ldr	r3, [pc, #508]	; (8003b40 <_printf_float+0x2dc>)
 8003944:	e7d3      	b.n	80038ee <_printf_float+0x8a>
 8003946:	6863      	ldr	r3, [r4, #4]
 8003948:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	d142      	bne.n	80039d6 <_printf_float+0x172>
 8003950:	2306      	movs	r3, #6
 8003952:	6063      	str	r3, [r4, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	9206      	str	r2, [sp, #24]
 8003958:	aa0e      	add	r2, sp, #56	; 0x38
 800395a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800395e:	aa0d      	add	r2, sp, #52	; 0x34
 8003960:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003964:	9203      	str	r2, [sp, #12]
 8003966:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800396a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	4642      	mov	r2, r8
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	4628      	mov	r0, r5
 8003978:	4653      	mov	r3, sl
 800397a:	910b      	str	r1, [sp, #44]	; 0x2c
 800397c:	f7ff fed4 	bl	8003728 <__cvt>
 8003980:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003982:	4680      	mov	r8, r0
 8003984:	2947      	cmp	r1, #71	; 0x47
 8003986:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003988:	d108      	bne.n	800399c <_printf_float+0x138>
 800398a:	1cc8      	adds	r0, r1, #3
 800398c:	db02      	blt.n	8003994 <_printf_float+0x130>
 800398e:	6863      	ldr	r3, [r4, #4]
 8003990:	4299      	cmp	r1, r3
 8003992:	dd40      	ble.n	8003a16 <_printf_float+0x1b2>
 8003994:	f1a9 0902 	sub.w	r9, r9, #2
 8003998:	fa5f f989 	uxtb.w	r9, r9
 800399c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80039a0:	d81f      	bhi.n	80039e2 <_printf_float+0x17e>
 80039a2:	464a      	mov	r2, r9
 80039a4:	3901      	subs	r1, #1
 80039a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80039aa:	910d      	str	r1, [sp, #52]	; 0x34
 80039ac:	f7ff ff1b 	bl	80037e6 <__exponent>
 80039b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039b2:	4682      	mov	sl, r0
 80039b4:	1813      	adds	r3, r2, r0
 80039b6:	2a01      	cmp	r2, #1
 80039b8:	6123      	str	r3, [r4, #16]
 80039ba:	dc02      	bgt.n	80039c2 <_printf_float+0x15e>
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	07d2      	lsls	r2, r2, #31
 80039c0:	d501      	bpl.n	80039c6 <_printf_float+0x162>
 80039c2:	3301      	adds	r3, #1
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d09b      	beq.n	8003906 <_printf_float+0xa2>
 80039ce:	232d      	movs	r3, #45	; 0x2d
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d4:	e797      	b.n	8003906 <_printf_float+0xa2>
 80039d6:	2947      	cmp	r1, #71	; 0x47
 80039d8:	d1bc      	bne.n	8003954 <_printf_float+0xf0>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ba      	bne.n	8003954 <_printf_float+0xf0>
 80039de:	2301      	movs	r3, #1
 80039e0:	e7b7      	b.n	8003952 <_printf_float+0xee>
 80039e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80039e6:	d118      	bne.n	8003a1a <_printf_float+0x1b6>
 80039e8:	2900      	cmp	r1, #0
 80039ea:	6863      	ldr	r3, [r4, #4]
 80039ec:	dd0b      	ble.n	8003a06 <_printf_float+0x1a2>
 80039ee:	6121      	str	r1, [r4, #16]
 80039f0:	b913      	cbnz	r3, 80039f8 <_printf_float+0x194>
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	07d0      	lsls	r0, r2, #31
 80039f6:	d502      	bpl.n	80039fe <_printf_float+0x19a>
 80039f8:	3301      	adds	r3, #1
 80039fa:	440b      	add	r3, r1
 80039fc:	6123      	str	r3, [r4, #16]
 80039fe:	f04f 0a00 	mov.w	sl, #0
 8003a02:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a04:	e7df      	b.n	80039c6 <_printf_float+0x162>
 8003a06:	b913      	cbnz	r3, 8003a0e <_printf_float+0x1aa>
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	07d2      	lsls	r2, r2, #31
 8003a0c:	d501      	bpl.n	8003a12 <_printf_float+0x1ae>
 8003a0e:	3302      	adds	r3, #2
 8003a10:	e7f4      	b.n	80039fc <_printf_float+0x198>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e7f2      	b.n	80039fc <_printf_float+0x198>
 8003a16:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a1c:	4299      	cmp	r1, r3
 8003a1e:	db05      	blt.n	8003a2c <_printf_float+0x1c8>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	6121      	str	r1, [r4, #16]
 8003a24:	07d8      	lsls	r0, r3, #31
 8003a26:	d5ea      	bpl.n	80039fe <_printf_float+0x19a>
 8003a28:	1c4b      	adds	r3, r1, #1
 8003a2a:	e7e7      	b.n	80039fc <_printf_float+0x198>
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	bfcc      	ite	gt
 8003a30:	2201      	movgt	r2, #1
 8003a32:	f1c1 0202 	rsble	r2, r1, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	e7e0      	b.n	80039fc <_printf_float+0x198>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	055a      	lsls	r2, r3, #21
 8003a3e:	d407      	bmi.n	8003a50 <_printf_float+0x1ec>
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	4642      	mov	r2, r8
 8003a44:	4631      	mov	r1, r6
 8003a46:	4628      	mov	r0, r5
 8003a48:	47b8      	blx	r7
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d12b      	bne.n	8003aa6 <_printf_float+0x242>
 8003a4e:	e764      	b.n	800391a <_printf_float+0xb6>
 8003a50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a54:	f240 80dd 	bls.w	8003c12 <_printf_float+0x3ae>
 8003a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f7fc ffa2 	bl	80009a8 <__aeabi_dcmpeq>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d033      	beq.n	8003ad0 <_printf_float+0x26c>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	4a35      	ldr	r2, [pc, #212]	; (8003b44 <_printf_float+0x2e0>)
 8003a70:	47b8      	blx	r7
 8003a72:	3001      	adds	r0, #1
 8003a74:	f43f af51 	beq.w	800391a <_printf_float+0xb6>
 8003a78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	db02      	blt.n	8003a86 <_printf_float+0x222>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	07d8      	lsls	r0, r3, #31
 8003a84:	d50f      	bpl.n	8003aa6 <_printf_float+0x242>
 8003a86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	47b8      	blx	r7
 8003a90:	3001      	adds	r0, #1
 8003a92:	f43f af42 	beq.w	800391a <_printf_float+0xb6>
 8003a96:	f04f 0800 	mov.w	r8, #0
 8003a9a:	f104 091a 	add.w	r9, r4, #26
 8003a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	4543      	cmp	r3, r8
 8003aa4:	dc09      	bgt.n	8003aba <_printf_float+0x256>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	079b      	lsls	r3, r3, #30
 8003aaa:	f100 8102 	bmi.w	8003cb2 <_printf_float+0x44e>
 8003aae:	68e0      	ldr	r0, [r4, #12]
 8003ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ab2:	4298      	cmp	r0, r3
 8003ab4:	bfb8      	it	lt
 8003ab6:	4618      	movlt	r0, r3
 8003ab8:	e731      	b.n	800391e <_printf_float+0xba>
 8003aba:	2301      	movs	r3, #1
 8003abc:	464a      	mov	r2, r9
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b8      	blx	r7
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	f43f af28 	beq.w	800391a <_printf_float+0xb6>
 8003aca:	f108 0801 	add.w	r8, r8, #1
 8003ace:	e7e6      	b.n	8003a9e <_printf_float+0x23a>
 8003ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	dc38      	bgt.n	8003b48 <_printf_float+0x2e4>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	4631      	mov	r1, r6
 8003ada:	4628      	mov	r0, r5
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <_printf_float+0x2e0>)
 8003ade:	47b8      	blx	r7
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	f43f af1a 	beq.w	800391a <_printf_float+0xb6>
 8003ae6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003aea:	4313      	orrs	r3, r2
 8003aec:	d102      	bne.n	8003af4 <_printf_float+0x290>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	07d9      	lsls	r1, r3, #31
 8003af2:	d5d8      	bpl.n	8003aa6 <_printf_float+0x242>
 8003af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003af8:	4631      	mov	r1, r6
 8003afa:	4628      	mov	r0, r5
 8003afc:	47b8      	blx	r7
 8003afe:	3001      	adds	r0, #1
 8003b00:	f43f af0b 	beq.w	800391a <_printf_float+0xb6>
 8003b04:	f04f 0900 	mov.w	r9, #0
 8003b08:	f104 0a1a 	add.w	sl, r4, #26
 8003b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b0e:	425b      	negs	r3, r3
 8003b10:	454b      	cmp	r3, r9
 8003b12:	dc01      	bgt.n	8003b18 <_printf_float+0x2b4>
 8003b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b16:	e794      	b.n	8003a42 <_printf_float+0x1de>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	4652      	mov	r2, sl
 8003b1c:	4631      	mov	r1, r6
 8003b1e:	4628      	mov	r0, r5
 8003b20:	47b8      	blx	r7
 8003b22:	3001      	adds	r0, #1
 8003b24:	f43f aef9 	beq.w	800391a <_printf_float+0xb6>
 8003b28:	f109 0901 	add.w	r9, r9, #1
 8003b2c:	e7ee      	b.n	8003b0c <_printf_float+0x2a8>
 8003b2e:	bf00      	nop
 8003b30:	7fefffff 	.word	0x7fefffff
 8003b34:	08006554 	.word	0x08006554
 8003b38:	08006558 	.word	0x08006558
 8003b3c:	08006560 	.word	0x08006560
 8003b40:	0800655c 	.word	0x0800655c
 8003b44:	08006564 	.word	0x08006564
 8003b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	bfa8      	it	ge
 8003b50:	461a      	movge	r2, r3
 8003b52:	2a00      	cmp	r2, #0
 8003b54:	4691      	mov	r9, r2
 8003b56:	dc37      	bgt.n	8003bc8 <_printf_float+0x364>
 8003b58:	f04f 0b00 	mov.w	fp, #0
 8003b5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b60:	f104 021a 	add.w	r2, r4, #26
 8003b64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b68:	ebaa 0309 	sub.w	r3, sl, r9
 8003b6c:	455b      	cmp	r3, fp
 8003b6e:	dc33      	bgt.n	8003bd8 <_printf_float+0x374>
 8003b70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b74:	429a      	cmp	r2, r3
 8003b76:	db3b      	blt.n	8003bf0 <_printf_float+0x38c>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	07da      	lsls	r2, r3, #31
 8003b7c:	d438      	bmi.n	8003bf0 <_printf_float+0x38c>
 8003b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b82:	eba3 020a 	sub.w	r2, r3, sl
 8003b86:	eba3 0901 	sub.w	r9, r3, r1
 8003b8a:	4591      	cmp	r9, r2
 8003b8c:	bfa8      	it	ge
 8003b8e:	4691      	movge	r9, r2
 8003b90:	f1b9 0f00 	cmp.w	r9, #0
 8003b94:	dc34      	bgt.n	8003c00 <_printf_float+0x39c>
 8003b96:	f04f 0800 	mov.w	r8, #0
 8003b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b9e:	f104 0a1a 	add.w	sl, r4, #26
 8003ba2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	eba3 0309 	sub.w	r3, r3, r9
 8003bac:	4543      	cmp	r3, r8
 8003bae:	f77f af7a 	ble.w	8003aa6 <_printf_float+0x242>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4652      	mov	r2, sl
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4628      	mov	r0, r5
 8003bba:	47b8      	blx	r7
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	f43f aeac 	beq.w	800391a <_printf_float+0xb6>
 8003bc2:	f108 0801 	add.w	r8, r8, #1
 8003bc6:	e7ec      	b.n	8003ba2 <_printf_float+0x33e>
 8003bc8:	4613      	mov	r3, r2
 8003bca:	4631      	mov	r1, r6
 8003bcc:	4642      	mov	r2, r8
 8003bce:	4628      	mov	r0, r5
 8003bd0:	47b8      	blx	r7
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d1c0      	bne.n	8003b58 <_printf_float+0x2f4>
 8003bd6:	e6a0      	b.n	800391a <_printf_float+0xb6>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4631      	mov	r1, r6
 8003bdc:	4628      	mov	r0, r5
 8003bde:	920b      	str	r2, [sp, #44]	; 0x2c
 8003be0:	47b8      	blx	r7
 8003be2:	3001      	adds	r0, #1
 8003be4:	f43f ae99 	beq.w	800391a <_printf_float+0xb6>
 8003be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bea:	f10b 0b01 	add.w	fp, fp, #1
 8003bee:	e7b9      	b.n	8003b64 <_printf_float+0x300>
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	47b8      	blx	r7
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d1bf      	bne.n	8003b7e <_printf_float+0x31a>
 8003bfe:	e68c      	b.n	800391a <_printf_float+0xb6>
 8003c00:	464b      	mov	r3, r9
 8003c02:	4631      	mov	r1, r6
 8003c04:	4628      	mov	r0, r5
 8003c06:	eb08 020a 	add.w	r2, r8, sl
 8003c0a:	47b8      	blx	r7
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d1c2      	bne.n	8003b96 <_printf_float+0x332>
 8003c10:	e683      	b.n	800391a <_printf_float+0xb6>
 8003c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c14:	2a01      	cmp	r2, #1
 8003c16:	dc01      	bgt.n	8003c1c <_printf_float+0x3b8>
 8003c18:	07db      	lsls	r3, r3, #31
 8003c1a:	d537      	bpl.n	8003c8c <_printf_float+0x428>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4642      	mov	r2, r8
 8003c20:	4631      	mov	r1, r6
 8003c22:	4628      	mov	r0, r5
 8003c24:	47b8      	blx	r7
 8003c26:	3001      	adds	r0, #1
 8003c28:	f43f ae77 	beq.w	800391a <_printf_float+0xb6>
 8003c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c30:	4631      	mov	r1, r6
 8003c32:	4628      	mov	r0, r5
 8003c34:	47b8      	blx	r7
 8003c36:	3001      	adds	r0, #1
 8003c38:	f43f ae6f 	beq.w	800391a <_printf_float+0xb6>
 8003c3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c40:	2200      	movs	r2, #0
 8003c42:	2300      	movs	r3, #0
 8003c44:	f7fc feb0 	bl	80009a8 <__aeabi_dcmpeq>
 8003c48:	b9d8      	cbnz	r0, 8003c82 <_printf_float+0x41e>
 8003c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c4c:	f108 0201 	add.w	r2, r8, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	4631      	mov	r1, r6
 8003c54:	4628      	mov	r0, r5
 8003c56:	47b8      	blx	r7
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d10e      	bne.n	8003c7a <_printf_float+0x416>
 8003c5c:	e65d      	b.n	800391a <_printf_float+0xb6>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	464a      	mov	r2, r9
 8003c62:	4631      	mov	r1, r6
 8003c64:	4628      	mov	r0, r5
 8003c66:	47b8      	blx	r7
 8003c68:	3001      	adds	r0, #1
 8003c6a:	f43f ae56 	beq.w	800391a <_printf_float+0xb6>
 8003c6e:	f108 0801 	add.w	r8, r8, #1
 8003c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c74:	3b01      	subs	r3, #1
 8003c76:	4543      	cmp	r3, r8
 8003c78:	dcf1      	bgt.n	8003c5e <_printf_float+0x3fa>
 8003c7a:	4653      	mov	r3, sl
 8003c7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c80:	e6e0      	b.n	8003a44 <_printf_float+0x1e0>
 8003c82:	f04f 0800 	mov.w	r8, #0
 8003c86:	f104 091a 	add.w	r9, r4, #26
 8003c8a:	e7f2      	b.n	8003c72 <_printf_float+0x40e>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4642      	mov	r2, r8
 8003c90:	e7df      	b.n	8003c52 <_printf_float+0x3ee>
 8003c92:	2301      	movs	r3, #1
 8003c94:	464a      	mov	r2, r9
 8003c96:	4631      	mov	r1, r6
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b8      	blx	r7
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f43f ae3c 	beq.w	800391a <_printf_float+0xb6>
 8003ca2:	f108 0801 	add.w	r8, r8, #1
 8003ca6:	68e3      	ldr	r3, [r4, #12]
 8003ca8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003caa:	1a5b      	subs	r3, r3, r1
 8003cac:	4543      	cmp	r3, r8
 8003cae:	dcf0      	bgt.n	8003c92 <_printf_float+0x42e>
 8003cb0:	e6fd      	b.n	8003aae <_printf_float+0x24a>
 8003cb2:	f04f 0800 	mov.w	r8, #0
 8003cb6:	f104 0919 	add.w	r9, r4, #25
 8003cba:	e7f4      	b.n	8003ca6 <_printf_float+0x442>

08003cbc <_printf_common>:
 8003cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc0:	4616      	mov	r6, r2
 8003cc2:	4699      	mov	r9, r3
 8003cc4:	688a      	ldr	r2, [r1, #8]
 8003cc6:	690b      	ldr	r3, [r1, #16]
 8003cc8:	4607      	mov	r7, r0
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bfb8      	it	lt
 8003cce:	4613      	movlt	r3, r2
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cdc:	b10a      	cbz	r2, 8003ce2 <_printf_common+0x26>
 8003cde:	3301      	adds	r3, #1
 8003ce0:	6033      	str	r3, [r6, #0]
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	0699      	lsls	r1, r3, #26
 8003ce6:	bf42      	ittt	mi
 8003ce8:	6833      	ldrmi	r3, [r6, #0]
 8003cea:	3302      	addmi	r3, #2
 8003cec:	6033      	strmi	r3, [r6, #0]
 8003cee:	6825      	ldr	r5, [r4, #0]
 8003cf0:	f015 0506 	ands.w	r5, r5, #6
 8003cf4:	d106      	bne.n	8003d04 <_printf_common+0x48>
 8003cf6:	f104 0a19 	add.w	sl, r4, #25
 8003cfa:	68e3      	ldr	r3, [r4, #12]
 8003cfc:	6832      	ldr	r2, [r6, #0]
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	42ab      	cmp	r3, r5
 8003d02:	dc28      	bgt.n	8003d56 <_printf_common+0x9a>
 8003d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d08:	1e13      	subs	r3, r2, #0
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	bf18      	it	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	0692      	lsls	r2, r2, #26
 8003d12:	d42d      	bmi.n	8003d70 <_printf_common+0xb4>
 8003d14:	4649      	mov	r1, r9
 8003d16:	4638      	mov	r0, r7
 8003d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d1c:	47c0      	blx	r8
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d020      	beq.n	8003d64 <_printf_common+0xa8>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	68e5      	ldr	r5, [r4, #12]
 8003d26:	f003 0306 	and.w	r3, r3, #6
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf18      	it	ne
 8003d2e:	2500      	movne	r5, #0
 8003d30:	6832      	ldr	r2, [r6, #0]
 8003d32:	f04f 0600 	mov.w	r6, #0
 8003d36:	68a3      	ldr	r3, [r4, #8]
 8003d38:	bf08      	it	eq
 8003d3a:	1aad      	subeq	r5, r5, r2
 8003d3c:	6922      	ldr	r2, [r4, #16]
 8003d3e:	bf08      	it	eq
 8003d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d44:	4293      	cmp	r3, r2
 8003d46:	bfc4      	itt	gt
 8003d48:	1a9b      	subgt	r3, r3, r2
 8003d4a:	18ed      	addgt	r5, r5, r3
 8003d4c:	341a      	adds	r4, #26
 8003d4e:	42b5      	cmp	r5, r6
 8003d50:	d11a      	bne.n	8003d88 <_printf_common+0xcc>
 8003d52:	2000      	movs	r0, #0
 8003d54:	e008      	b.n	8003d68 <_printf_common+0xac>
 8003d56:	2301      	movs	r3, #1
 8003d58:	4652      	mov	r2, sl
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	47c0      	blx	r8
 8003d60:	3001      	adds	r0, #1
 8003d62:	d103      	bne.n	8003d6c <_printf_common+0xb0>
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6c:	3501      	adds	r5, #1
 8003d6e:	e7c4      	b.n	8003cfa <_printf_common+0x3e>
 8003d70:	2030      	movs	r0, #48	; 0x30
 8003d72:	18e1      	adds	r1, r4, r3
 8003d74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d7e:	4422      	add	r2, r4
 8003d80:	3302      	adds	r3, #2
 8003d82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d86:	e7c5      	b.n	8003d14 <_printf_common+0x58>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	4638      	mov	r0, r7
 8003d90:	47c0      	blx	r8
 8003d92:	3001      	adds	r0, #1
 8003d94:	d0e6      	beq.n	8003d64 <_printf_common+0xa8>
 8003d96:	3601      	adds	r6, #1
 8003d98:	e7d9      	b.n	8003d4e <_printf_common+0x92>
	...

08003d9c <_printf_i>:
 8003d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003da0:	7e0f      	ldrb	r7, [r1, #24]
 8003da2:	4691      	mov	r9, r2
 8003da4:	2f78      	cmp	r7, #120	; 0x78
 8003da6:	4680      	mov	r8, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	469a      	mov	sl, r3
 8003dac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003db2:	d807      	bhi.n	8003dc4 <_printf_i+0x28>
 8003db4:	2f62      	cmp	r7, #98	; 0x62
 8003db6:	d80a      	bhi.n	8003dce <_printf_i+0x32>
 8003db8:	2f00      	cmp	r7, #0
 8003dba:	f000 80d9 	beq.w	8003f70 <_printf_i+0x1d4>
 8003dbe:	2f58      	cmp	r7, #88	; 0x58
 8003dc0:	f000 80a4 	beq.w	8003f0c <_printf_i+0x170>
 8003dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dcc:	e03a      	b.n	8003e44 <_printf_i+0xa8>
 8003dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dd2:	2b15      	cmp	r3, #21
 8003dd4:	d8f6      	bhi.n	8003dc4 <_printf_i+0x28>
 8003dd6:	a101      	add	r1, pc, #4	; (adr r1, 8003ddc <_printf_i+0x40>)
 8003dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ddc:	08003e35 	.word	0x08003e35
 8003de0:	08003e49 	.word	0x08003e49
 8003de4:	08003dc5 	.word	0x08003dc5
 8003de8:	08003dc5 	.word	0x08003dc5
 8003dec:	08003dc5 	.word	0x08003dc5
 8003df0:	08003dc5 	.word	0x08003dc5
 8003df4:	08003e49 	.word	0x08003e49
 8003df8:	08003dc5 	.word	0x08003dc5
 8003dfc:	08003dc5 	.word	0x08003dc5
 8003e00:	08003dc5 	.word	0x08003dc5
 8003e04:	08003dc5 	.word	0x08003dc5
 8003e08:	08003f57 	.word	0x08003f57
 8003e0c:	08003e79 	.word	0x08003e79
 8003e10:	08003f39 	.word	0x08003f39
 8003e14:	08003dc5 	.word	0x08003dc5
 8003e18:	08003dc5 	.word	0x08003dc5
 8003e1c:	08003f79 	.word	0x08003f79
 8003e20:	08003dc5 	.word	0x08003dc5
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003dc5 	.word	0x08003dc5
 8003e2c:	08003dc5 	.word	0x08003dc5
 8003e30:	08003f41 	.word	0x08003f41
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	1d1a      	adds	r2, r3, #4
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	602a      	str	r2, [r5, #0]
 8003e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0a4      	b.n	8003f92 <_printf_i+0x1f6>
 8003e48:	6820      	ldr	r0, [r4, #0]
 8003e4a:	6829      	ldr	r1, [r5, #0]
 8003e4c:	0606      	lsls	r6, r0, #24
 8003e4e:	f101 0304 	add.w	r3, r1, #4
 8003e52:	d50a      	bpl.n	8003e6a <_printf_i+0xce>
 8003e54:	680e      	ldr	r6, [r1, #0]
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	2e00      	cmp	r6, #0
 8003e5a:	da03      	bge.n	8003e64 <_printf_i+0xc8>
 8003e5c:	232d      	movs	r3, #45	; 0x2d
 8003e5e:	4276      	negs	r6, r6
 8003e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e64:	230a      	movs	r3, #10
 8003e66:	485e      	ldr	r0, [pc, #376]	; (8003fe0 <_printf_i+0x244>)
 8003e68:	e019      	b.n	8003e9e <_printf_i+0x102>
 8003e6a:	680e      	ldr	r6, [r1, #0]
 8003e6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	bf18      	it	ne
 8003e74:	b236      	sxthne	r6, r6
 8003e76:	e7ef      	b.n	8003e58 <_printf_i+0xbc>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	6029      	str	r1, [r5, #0]
 8003e80:	0601      	lsls	r1, r0, #24
 8003e82:	d501      	bpl.n	8003e88 <_printf_i+0xec>
 8003e84:	681e      	ldr	r6, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <_printf_i+0xf2>
 8003e88:	0646      	lsls	r6, r0, #25
 8003e8a:	d5fb      	bpl.n	8003e84 <_printf_i+0xe8>
 8003e8c:	881e      	ldrh	r6, [r3, #0]
 8003e8e:	2f6f      	cmp	r7, #111	; 0x6f
 8003e90:	bf0c      	ite	eq
 8003e92:	2308      	moveq	r3, #8
 8003e94:	230a      	movne	r3, #10
 8003e96:	4852      	ldr	r0, [pc, #328]	; (8003fe0 <_printf_i+0x244>)
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e9e:	6865      	ldr	r5, [r4, #4]
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	bfa8      	it	ge
 8003ea4:	6821      	ldrge	r1, [r4, #0]
 8003ea6:	60a5      	str	r5, [r4, #8]
 8003ea8:	bfa4      	itt	ge
 8003eaa:	f021 0104 	bicge.w	r1, r1, #4
 8003eae:	6021      	strge	r1, [r4, #0]
 8003eb0:	b90e      	cbnz	r6, 8003eb6 <_printf_i+0x11a>
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	d04d      	beq.n	8003f52 <_printf_i+0x1b6>
 8003eb6:	4615      	mov	r5, r2
 8003eb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ebc:	fb03 6711 	mls	r7, r3, r1, r6
 8003ec0:	5dc7      	ldrb	r7, [r0, r7]
 8003ec2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ec6:	4637      	mov	r7, r6
 8003ec8:	42bb      	cmp	r3, r7
 8003eca:	460e      	mov	r6, r1
 8003ecc:	d9f4      	bls.n	8003eb8 <_printf_i+0x11c>
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d10b      	bne.n	8003eea <_printf_i+0x14e>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	07de      	lsls	r6, r3, #31
 8003ed6:	d508      	bpl.n	8003eea <_printf_i+0x14e>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	6861      	ldr	r1, [r4, #4]
 8003edc:	4299      	cmp	r1, r3
 8003ede:	bfde      	ittt	le
 8003ee0:	2330      	movle	r3, #48	; 0x30
 8003ee2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ee6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003eea:	1b52      	subs	r2, r2, r5
 8003eec:	6122      	str	r2, [r4, #16]
 8003eee:	464b      	mov	r3, r9
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	f8cd a000 	str.w	sl, [sp]
 8003ef8:	aa03      	add	r2, sp, #12
 8003efa:	f7ff fedf 	bl	8003cbc <_printf_common>
 8003efe:	3001      	adds	r0, #1
 8003f00:	d14c      	bne.n	8003f9c <_printf_i+0x200>
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f06:	b004      	add	sp, #16
 8003f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0c:	4834      	ldr	r0, [pc, #208]	; (8003fe0 <_printf_i+0x244>)
 8003f0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f12:	6829      	ldr	r1, [r5, #0]
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f1a:	6029      	str	r1, [r5, #0]
 8003f1c:	061d      	lsls	r5, r3, #24
 8003f1e:	d514      	bpl.n	8003f4a <_printf_i+0x1ae>
 8003f20:	07df      	lsls	r7, r3, #31
 8003f22:	bf44      	itt	mi
 8003f24:	f043 0320 	orrmi.w	r3, r3, #32
 8003f28:	6023      	strmi	r3, [r4, #0]
 8003f2a:	b91e      	cbnz	r6, 8003f34 <_printf_i+0x198>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	f023 0320 	bic.w	r3, r3, #32
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	2310      	movs	r3, #16
 8003f36:	e7af      	b.n	8003e98 <_printf_i+0xfc>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	f043 0320 	orr.w	r3, r3, #32
 8003f3e:	6023      	str	r3, [r4, #0]
 8003f40:	2378      	movs	r3, #120	; 0x78
 8003f42:	4828      	ldr	r0, [pc, #160]	; (8003fe4 <_printf_i+0x248>)
 8003f44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f48:	e7e3      	b.n	8003f12 <_printf_i+0x176>
 8003f4a:	0659      	lsls	r1, r3, #25
 8003f4c:	bf48      	it	mi
 8003f4e:	b2b6      	uxthmi	r6, r6
 8003f50:	e7e6      	b.n	8003f20 <_printf_i+0x184>
 8003f52:	4615      	mov	r5, r2
 8003f54:	e7bb      	b.n	8003ece <_printf_i+0x132>
 8003f56:	682b      	ldr	r3, [r5, #0]
 8003f58:	6826      	ldr	r6, [r4, #0]
 8003f5a:	1d18      	adds	r0, r3, #4
 8003f5c:	6961      	ldr	r1, [r4, #20]
 8003f5e:	6028      	str	r0, [r5, #0]
 8003f60:	0635      	lsls	r5, r6, #24
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	d501      	bpl.n	8003f6a <_printf_i+0x1ce>
 8003f66:	6019      	str	r1, [r3, #0]
 8003f68:	e002      	b.n	8003f70 <_printf_i+0x1d4>
 8003f6a:	0670      	lsls	r0, r6, #25
 8003f6c:	d5fb      	bpl.n	8003f66 <_printf_i+0x1ca>
 8003f6e:	8019      	strh	r1, [r3, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	4615      	mov	r5, r2
 8003f74:	6123      	str	r3, [r4, #16]
 8003f76:	e7ba      	b.n	8003eee <_printf_i+0x152>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	1d1a      	adds	r2, r3, #4
 8003f7e:	602a      	str	r2, [r5, #0]
 8003f80:	681d      	ldr	r5, [r3, #0]
 8003f82:	6862      	ldr	r2, [r4, #4]
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 fed5 	bl	8004d34 <memchr>
 8003f8a:	b108      	cbz	r0, 8003f90 <_printf_i+0x1f4>
 8003f8c:	1b40      	subs	r0, r0, r5
 8003f8e:	6060      	str	r0, [r4, #4]
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	2300      	movs	r3, #0
 8003f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f9a:	e7a8      	b.n	8003eee <_printf_i+0x152>
 8003f9c:	462a      	mov	r2, r5
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	6923      	ldr	r3, [r4, #16]
 8003fa4:	47d0      	blx	sl
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d0ab      	beq.n	8003f02 <_printf_i+0x166>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	079b      	lsls	r3, r3, #30
 8003fae:	d413      	bmi.n	8003fd8 <_printf_i+0x23c>
 8003fb0:	68e0      	ldr	r0, [r4, #12]
 8003fb2:	9b03      	ldr	r3, [sp, #12]
 8003fb4:	4298      	cmp	r0, r3
 8003fb6:	bfb8      	it	lt
 8003fb8:	4618      	movlt	r0, r3
 8003fba:	e7a4      	b.n	8003f06 <_printf_i+0x16a>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4632      	mov	r2, r6
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	47d0      	blx	sl
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d09b      	beq.n	8003f02 <_printf_i+0x166>
 8003fca:	3501      	adds	r5, #1
 8003fcc:	68e3      	ldr	r3, [r4, #12]
 8003fce:	9903      	ldr	r1, [sp, #12]
 8003fd0:	1a5b      	subs	r3, r3, r1
 8003fd2:	42ab      	cmp	r3, r5
 8003fd4:	dcf2      	bgt.n	8003fbc <_printf_i+0x220>
 8003fd6:	e7eb      	b.n	8003fb0 <_printf_i+0x214>
 8003fd8:	2500      	movs	r5, #0
 8003fda:	f104 0619 	add.w	r6, r4, #25
 8003fde:	e7f5      	b.n	8003fcc <_printf_i+0x230>
 8003fe0:	08006566 	.word	0x08006566
 8003fe4:	08006577 	.word	0x08006577

08003fe8 <siprintf>:
 8003fe8:	b40e      	push	{r1, r2, r3}
 8003fea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fee:	b500      	push	{lr}
 8003ff0:	b09c      	sub	sp, #112	; 0x70
 8003ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ff4:	9002      	str	r0, [sp, #8]
 8003ff6:	9006      	str	r0, [sp, #24]
 8003ff8:	9107      	str	r1, [sp, #28]
 8003ffa:	9104      	str	r1, [sp, #16]
 8003ffc:	4808      	ldr	r0, [pc, #32]	; (8004020 <siprintf+0x38>)
 8003ffe:	4909      	ldr	r1, [pc, #36]	; (8004024 <siprintf+0x3c>)
 8004000:	f853 2b04 	ldr.w	r2, [r3], #4
 8004004:	9105      	str	r1, [sp, #20]
 8004006:	6800      	ldr	r0, [r0, #0]
 8004008:	a902      	add	r1, sp, #8
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	f001 fb6e 	bl	80056ec <_svfiprintf_r>
 8004010:	2200      	movs	r2, #0
 8004012:	9b02      	ldr	r3, [sp, #8]
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	b01c      	add	sp, #112	; 0x70
 8004018:	f85d eb04 	ldr.w	lr, [sp], #4
 800401c:	b003      	add	sp, #12
 800401e:	4770      	bx	lr
 8004020:	2000000c 	.word	0x2000000c
 8004024:	ffff0208 	.word	0xffff0208

08004028 <quorem>:
 8004028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	6903      	ldr	r3, [r0, #16]
 800402e:	690c      	ldr	r4, [r1, #16]
 8004030:	4607      	mov	r7, r0
 8004032:	42a3      	cmp	r3, r4
 8004034:	f2c0 8082 	blt.w	800413c <quorem+0x114>
 8004038:	3c01      	subs	r4, #1
 800403a:	f100 0514 	add.w	r5, r0, #20
 800403e:	f101 0814 	add.w	r8, r1, #20
 8004042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800404c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004050:	3301      	adds	r3, #1
 8004052:	429a      	cmp	r2, r3
 8004054:	fbb2 f6f3 	udiv	r6, r2, r3
 8004058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800405c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004060:	d331      	bcc.n	80040c6 <quorem+0x9e>
 8004062:	f04f 0e00 	mov.w	lr, #0
 8004066:	4640      	mov	r0, r8
 8004068:	46ac      	mov	ip, r5
 800406a:	46f2      	mov	sl, lr
 800406c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004070:	b293      	uxth	r3, r2
 8004072:	fb06 e303 	mla	r3, r6, r3, lr
 8004076:	0c12      	lsrs	r2, r2, #16
 8004078:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800407c:	b29b      	uxth	r3, r3
 800407e:	fb06 e202 	mla	r2, r6, r2, lr
 8004082:	ebaa 0303 	sub.w	r3, sl, r3
 8004086:	f8dc a000 	ldr.w	sl, [ip]
 800408a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800408e:	fa1f fa8a 	uxth.w	sl, sl
 8004092:	4453      	add	r3, sl
 8004094:	f8dc a000 	ldr.w	sl, [ip]
 8004098:	b292      	uxth	r2, r2
 800409a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800409e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040a8:	4581      	cmp	r9, r0
 80040aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80040ae:	f84c 3b04 	str.w	r3, [ip], #4
 80040b2:	d2db      	bcs.n	800406c <quorem+0x44>
 80040b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80040b8:	b92b      	cbnz	r3, 80040c6 <quorem+0x9e>
 80040ba:	9b01      	ldr	r3, [sp, #4]
 80040bc:	3b04      	subs	r3, #4
 80040be:	429d      	cmp	r5, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	d32f      	bcc.n	8004124 <quorem+0xfc>
 80040c4:	613c      	str	r4, [r7, #16]
 80040c6:	4638      	mov	r0, r7
 80040c8:	f001 f8c0 	bl	800524c <__mcmp>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	db25      	blt.n	800411c <quorem+0xf4>
 80040d0:	4628      	mov	r0, r5
 80040d2:	f04f 0c00 	mov.w	ip, #0
 80040d6:	3601      	adds	r6, #1
 80040d8:	f858 1b04 	ldr.w	r1, [r8], #4
 80040dc:	f8d0 e000 	ldr.w	lr, [r0]
 80040e0:	b28b      	uxth	r3, r1
 80040e2:	ebac 0303 	sub.w	r3, ip, r3
 80040e6:	fa1f f28e 	uxth.w	r2, lr
 80040ea:	4413      	add	r3, r2
 80040ec:	0c0a      	lsrs	r2, r1, #16
 80040ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80040f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040fc:	45c1      	cmp	r9, r8
 80040fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004102:	f840 3b04 	str.w	r3, [r0], #4
 8004106:	d2e7      	bcs.n	80040d8 <quorem+0xb0>
 8004108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800410c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004110:	b922      	cbnz	r2, 800411c <quorem+0xf4>
 8004112:	3b04      	subs	r3, #4
 8004114:	429d      	cmp	r5, r3
 8004116:	461a      	mov	r2, r3
 8004118:	d30a      	bcc.n	8004130 <quorem+0x108>
 800411a:	613c      	str	r4, [r7, #16]
 800411c:	4630      	mov	r0, r6
 800411e:	b003      	add	sp, #12
 8004120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	3b04      	subs	r3, #4
 8004128:	2a00      	cmp	r2, #0
 800412a:	d1cb      	bne.n	80040c4 <quorem+0x9c>
 800412c:	3c01      	subs	r4, #1
 800412e:	e7c6      	b.n	80040be <quorem+0x96>
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	3b04      	subs	r3, #4
 8004134:	2a00      	cmp	r2, #0
 8004136:	d1f0      	bne.n	800411a <quorem+0xf2>
 8004138:	3c01      	subs	r4, #1
 800413a:	e7eb      	b.n	8004114 <quorem+0xec>
 800413c:	2000      	movs	r0, #0
 800413e:	e7ee      	b.n	800411e <quorem+0xf6>

08004140 <_dtoa_r>:
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	4616      	mov	r6, r2
 8004146:	461f      	mov	r7, r3
 8004148:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800414a:	b099      	sub	sp, #100	; 0x64
 800414c:	4605      	mov	r5, r0
 800414e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004152:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004156:	b974      	cbnz	r4, 8004176 <_dtoa_r+0x36>
 8004158:	2010      	movs	r0, #16
 800415a:	f000 fde3 	bl	8004d24 <malloc>
 800415e:	4602      	mov	r2, r0
 8004160:	6268      	str	r0, [r5, #36]	; 0x24
 8004162:	b920      	cbnz	r0, 800416e <_dtoa_r+0x2e>
 8004164:	21ea      	movs	r1, #234	; 0xea
 8004166:	4ba8      	ldr	r3, [pc, #672]	; (8004408 <_dtoa_r+0x2c8>)
 8004168:	48a8      	ldr	r0, [pc, #672]	; (800440c <_dtoa_r+0x2cc>)
 800416a:	f001 fbcf 	bl	800590c <__assert_func>
 800416e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004172:	6004      	str	r4, [r0, #0]
 8004174:	60c4      	str	r4, [r0, #12]
 8004176:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	b151      	cbz	r1, 8004192 <_dtoa_r+0x52>
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	2301      	movs	r3, #1
 8004180:	4093      	lsls	r3, r2
 8004182:	604a      	str	r2, [r1, #4]
 8004184:	608b      	str	r3, [r1, #8]
 8004186:	4628      	mov	r0, r5
 8004188:	f000 fe22 	bl	8004dd0 <_Bfree>
 800418c:	2200      	movs	r2, #0
 800418e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	1e3b      	subs	r3, r7, #0
 8004194:	bfaf      	iteee	ge
 8004196:	2300      	movge	r3, #0
 8004198:	2201      	movlt	r2, #1
 800419a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800419e:	9305      	strlt	r3, [sp, #20]
 80041a0:	bfa8      	it	ge
 80041a2:	f8c8 3000 	strge.w	r3, [r8]
 80041a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80041aa:	4b99      	ldr	r3, [pc, #612]	; (8004410 <_dtoa_r+0x2d0>)
 80041ac:	bfb8      	it	lt
 80041ae:	f8c8 2000 	strlt.w	r2, [r8]
 80041b2:	ea33 0309 	bics.w	r3, r3, r9
 80041b6:	d119      	bne.n	80041ec <_dtoa_r+0xac>
 80041b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80041bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80041c4:	4333      	orrs	r3, r6
 80041c6:	f000 857f 	beq.w	8004cc8 <_dtoa_r+0xb88>
 80041ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80041cc:	b953      	cbnz	r3, 80041e4 <_dtoa_r+0xa4>
 80041ce:	4b91      	ldr	r3, [pc, #580]	; (8004414 <_dtoa_r+0x2d4>)
 80041d0:	e022      	b.n	8004218 <_dtoa_r+0xd8>
 80041d2:	4b91      	ldr	r3, [pc, #580]	; (8004418 <_dtoa_r+0x2d8>)
 80041d4:	9303      	str	r3, [sp, #12]
 80041d6:	3308      	adds	r3, #8
 80041d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	9803      	ldr	r0, [sp, #12]
 80041de:	b019      	add	sp, #100	; 0x64
 80041e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e4:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <_dtoa_r+0x2d4>)
 80041e6:	9303      	str	r3, [sp, #12]
 80041e8:	3303      	adds	r3, #3
 80041ea:	e7f5      	b.n	80041d8 <_dtoa_r+0x98>
 80041ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80041f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80041f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041f8:	2200      	movs	r2, #0
 80041fa:	2300      	movs	r3, #0
 80041fc:	f7fc fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8004200:	4680      	mov	r8, r0
 8004202:	b158      	cbz	r0, 800421c <_dtoa_r+0xdc>
 8004204:	2301      	movs	r3, #1
 8004206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 8558 	beq.w	8004cc2 <_dtoa_r+0xb82>
 8004212:	4882      	ldr	r0, [pc, #520]	; (800441c <_dtoa_r+0x2dc>)
 8004214:	6018      	str	r0, [r3, #0]
 8004216:	1e43      	subs	r3, r0, #1
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	e7df      	b.n	80041dc <_dtoa_r+0x9c>
 800421c:	ab16      	add	r3, sp, #88	; 0x58
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	ab17      	add	r3, sp, #92	; 0x5c
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	4628      	mov	r0, r5
 8004226:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800422a:	f001 f8b7 	bl	800539c <__d2b>
 800422e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004232:	4683      	mov	fp, r0
 8004234:	2c00      	cmp	r4, #0
 8004236:	d07f      	beq.n	8004338 <_dtoa_r+0x1f8>
 8004238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800423c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800423e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004246:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800424a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800424e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004252:	2200      	movs	r2, #0
 8004254:	4b72      	ldr	r3, [pc, #456]	; (8004420 <_dtoa_r+0x2e0>)
 8004256:	f7fb ff87 	bl	8000168 <__aeabi_dsub>
 800425a:	a365      	add	r3, pc, #404	; (adr r3, 80043f0 <_dtoa_r+0x2b0>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fc f93a 	bl	80004d8 <__aeabi_dmul>
 8004264:	a364      	add	r3, pc, #400	; (adr r3, 80043f8 <_dtoa_r+0x2b8>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f7fb ff7f 	bl	800016c <__adddf3>
 800426e:	4606      	mov	r6, r0
 8004270:	4620      	mov	r0, r4
 8004272:	460f      	mov	r7, r1
 8004274:	f7fc f8c6 	bl	8000404 <__aeabi_i2d>
 8004278:	a361      	add	r3, pc, #388	; (adr r3, 8004400 <_dtoa_r+0x2c0>)
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f7fc f92b 	bl	80004d8 <__aeabi_dmul>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4630      	mov	r0, r6
 8004288:	4639      	mov	r1, r7
 800428a:	f7fb ff6f 	bl	800016c <__adddf3>
 800428e:	4606      	mov	r6, r0
 8004290:	460f      	mov	r7, r1
 8004292:	f7fc fbd1 	bl	8000a38 <__aeabi_d2iz>
 8004296:	2200      	movs	r2, #0
 8004298:	4682      	mov	sl, r0
 800429a:	2300      	movs	r3, #0
 800429c:	4630      	mov	r0, r6
 800429e:	4639      	mov	r1, r7
 80042a0:	f7fc fb8c 	bl	80009bc <__aeabi_dcmplt>
 80042a4:	b148      	cbz	r0, 80042ba <_dtoa_r+0x17a>
 80042a6:	4650      	mov	r0, sl
 80042a8:	f7fc f8ac 	bl	8000404 <__aeabi_i2d>
 80042ac:	4632      	mov	r2, r6
 80042ae:	463b      	mov	r3, r7
 80042b0:	f7fc fb7a 	bl	80009a8 <__aeabi_dcmpeq>
 80042b4:	b908      	cbnz	r0, 80042ba <_dtoa_r+0x17a>
 80042b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80042ba:	f1ba 0f16 	cmp.w	sl, #22
 80042be:	d858      	bhi.n	8004372 <_dtoa_r+0x232>
 80042c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042c4:	4b57      	ldr	r3, [pc, #348]	; (8004424 <_dtoa_r+0x2e4>)
 80042c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fc fb75 	bl	80009bc <__aeabi_dcmplt>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d04f      	beq.n	8004376 <_dtoa_r+0x236>
 80042d6:	2300      	movs	r3, #0
 80042d8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80042dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80042de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80042e0:	1b1c      	subs	r4, r3, r4
 80042e2:	1e63      	subs	r3, r4, #1
 80042e4:	9309      	str	r3, [sp, #36]	; 0x24
 80042e6:	bf49      	itett	mi
 80042e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80042ec:	2300      	movpl	r3, #0
 80042ee:	9306      	strmi	r3, [sp, #24]
 80042f0:	2300      	movmi	r3, #0
 80042f2:	bf54      	ite	pl
 80042f4:	9306      	strpl	r3, [sp, #24]
 80042f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80042f8:	f1ba 0f00 	cmp.w	sl, #0
 80042fc:	db3d      	blt.n	800437a <_dtoa_r+0x23a>
 80042fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004300:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004304:	4453      	add	r3, sl
 8004306:	9309      	str	r3, [sp, #36]	; 0x24
 8004308:	2300      	movs	r3, #0
 800430a:	930a      	str	r3, [sp, #40]	; 0x28
 800430c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800430e:	2b09      	cmp	r3, #9
 8004310:	f200 808c 	bhi.w	800442c <_dtoa_r+0x2ec>
 8004314:	2b05      	cmp	r3, #5
 8004316:	bfc4      	itt	gt
 8004318:	3b04      	subgt	r3, #4
 800431a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800431c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800431e:	bfc8      	it	gt
 8004320:	2400      	movgt	r4, #0
 8004322:	f1a3 0302 	sub.w	r3, r3, #2
 8004326:	bfd8      	it	le
 8004328:	2401      	movle	r4, #1
 800432a:	2b03      	cmp	r3, #3
 800432c:	f200 808a 	bhi.w	8004444 <_dtoa_r+0x304>
 8004330:	e8df f003 	tbb	[pc, r3]
 8004334:	5b4d4f2d 	.word	0x5b4d4f2d
 8004338:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800433c:	441c      	add	r4, r3
 800433e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004342:	2b20      	cmp	r3, #32
 8004344:	bfc3      	ittte	gt
 8004346:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800434a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800434e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004352:	f1c3 0320 	rsble	r3, r3, #32
 8004356:	bfc6      	itte	gt
 8004358:	fa26 f000 	lsrgt.w	r0, r6, r0
 800435c:	4318      	orrgt	r0, r3
 800435e:	fa06 f003 	lslle.w	r0, r6, r3
 8004362:	f7fc f83f 	bl	80003e4 <__aeabi_ui2d>
 8004366:	2301      	movs	r3, #1
 8004368:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800436c:	3c01      	subs	r4, #1
 800436e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004370:	e76f      	b.n	8004252 <_dtoa_r+0x112>
 8004372:	2301      	movs	r3, #1
 8004374:	e7b2      	b.n	80042dc <_dtoa_r+0x19c>
 8004376:	900f      	str	r0, [sp, #60]	; 0x3c
 8004378:	e7b1      	b.n	80042de <_dtoa_r+0x19e>
 800437a:	9b06      	ldr	r3, [sp, #24]
 800437c:	eba3 030a 	sub.w	r3, r3, sl
 8004380:	9306      	str	r3, [sp, #24]
 8004382:	f1ca 0300 	rsb	r3, sl, #0
 8004386:	930a      	str	r3, [sp, #40]	; 0x28
 8004388:	2300      	movs	r3, #0
 800438a:	930e      	str	r3, [sp, #56]	; 0x38
 800438c:	e7be      	b.n	800430c <_dtoa_r+0x1cc>
 800438e:	2300      	movs	r3, #0
 8004390:	930b      	str	r3, [sp, #44]	; 0x2c
 8004392:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004394:	2b00      	cmp	r3, #0
 8004396:	dc58      	bgt.n	800444a <_dtoa_r+0x30a>
 8004398:	f04f 0901 	mov.w	r9, #1
 800439c:	464b      	mov	r3, r9
 800439e:	f8cd 9020 	str.w	r9, [sp, #32]
 80043a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80043a6:	2200      	movs	r2, #0
 80043a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80043aa:	6042      	str	r2, [r0, #4]
 80043ac:	2204      	movs	r2, #4
 80043ae:	f102 0614 	add.w	r6, r2, #20
 80043b2:	429e      	cmp	r6, r3
 80043b4:	6841      	ldr	r1, [r0, #4]
 80043b6:	d94e      	bls.n	8004456 <_dtoa_r+0x316>
 80043b8:	4628      	mov	r0, r5
 80043ba:	f000 fcc9 	bl	8004d50 <_Balloc>
 80043be:	9003      	str	r0, [sp, #12]
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d14c      	bne.n	800445e <_dtoa_r+0x31e>
 80043c4:	4602      	mov	r2, r0
 80043c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80043ca:	4b17      	ldr	r3, [pc, #92]	; (8004428 <_dtoa_r+0x2e8>)
 80043cc:	e6cc      	b.n	8004168 <_dtoa_r+0x28>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e7de      	b.n	8004390 <_dtoa_r+0x250>
 80043d2:	2300      	movs	r3, #0
 80043d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80043d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043d8:	eb0a 0903 	add.w	r9, sl, r3
 80043dc:	f109 0301 	add.w	r3, r9, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	9308      	str	r3, [sp, #32]
 80043e4:	bfb8      	it	lt
 80043e6:	2301      	movlt	r3, #1
 80043e8:	e7dd      	b.n	80043a6 <_dtoa_r+0x266>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e7f2      	b.n	80043d4 <_dtoa_r+0x294>
 80043ee:	bf00      	nop
 80043f0:	636f4361 	.word	0x636f4361
 80043f4:	3fd287a7 	.word	0x3fd287a7
 80043f8:	8b60c8b3 	.word	0x8b60c8b3
 80043fc:	3fc68a28 	.word	0x3fc68a28
 8004400:	509f79fb 	.word	0x509f79fb
 8004404:	3fd34413 	.word	0x3fd34413
 8004408:	08006595 	.word	0x08006595
 800440c:	080065ac 	.word	0x080065ac
 8004410:	7ff00000 	.word	0x7ff00000
 8004414:	08006591 	.word	0x08006591
 8004418:	08006588 	.word	0x08006588
 800441c:	08006565 	.word	0x08006565
 8004420:	3ff80000 	.word	0x3ff80000
 8004424:	080066a0 	.word	0x080066a0
 8004428:	08006607 	.word	0x08006607
 800442c:	2401      	movs	r4, #1
 800442e:	2300      	movs	r3, #0
 8004430:	940b      	str	r4, [sp, #44]	; 0x2c
 8004432:	9322      	str	r3, [sp, #136]	; 0x88
 8004434:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004438:	2200      	movs	r2, #0
 800443a:	2312      	movs	r3, #18
 800443c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004440:	9223      	str	r2, [sp, #140]	; 0x8c
 8004442:	e7b0      	b.n	80043a6 <_dtoa_r+0x266>
 8004444:	2301      	movs	r3, #1
 8004446:	930b      	str	r3, [sp, #44]	; 0x2c
 8004448:	e7f4      	b.n	8004434 <_dtoa_r+0x2f4>
 800444a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800444e:	464b      	mov	r3, r9
 8004450:	f8cd 9020 	str.w	r9, [sp, #32]
 8004454:	e7a7      	b.n	80043a6 <_dtoa_r+0x266>
 8004456:	3101      	adds	r1, #1
 8004458:	6041      	str	r1, [r0, #4]
 800445a:	0052      	lsls	r2, r2, #1
 800445c:	e7a7      	b.n	80043ae <_dtoa_r+0x26e>
 800445e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004460:	9a03      	ldr	r2, [sp, #12]
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	9b08      	ldr	r3, [sp, #32]
 8004466:	2b0e      	cmp	r3, #14
 8004468:	f200 80a8 	bhi.w	80045bc <_dtoa_r+0x47c>
 800446c:	2c00      	cmp	r4, #0
 800446e:	f000 80a5 	beq.w	80045bc <_dtoa_r+0x47c>
 8004472:	f1ba 0f00 	cmp.w	sl, #0
 8004476:	dd34      	ble.n	80044e2 <_dtoa_r+0x3a2>
 8004478:	4a9a      	ldr	r2, [pc, #616]	; (80046e4 <_dtoa_r+0x5a4>)
 800447a:	f00a 030f 	and.w	r3, sl, #15
 800447e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004482:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004486:	e9d3 3400 	ldrd	r3, r4, [r3]
 800448a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800448e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004492:	d016      	beq.n	80044c2 <_dtoa_r+0x382>
 8004494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004498:	4b93      	ldr	r3, [pc, #588]	; (80046e8 <_dtoa_r+0x5a8>)
 800449a:	2703      	movs	r7, #3
 800449c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044a0:	f7fc f944 	bl	800072c <__aeabi_ddiv>
 80044a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044a8:	f004 040f 	and.w	r4, r4, #15
 80044ac:	4e8e      	ldr	r6, [pc, #568]	; (80046e8 <_dtoa_r+0x5a8>)
 80044ae:	b954      	cbnz	r4, 80044c6 <_dtoa_r+0x386>
 80044b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044b8:	f7fc f938 	bl	800072c <__aeabi_ddiv>
 80044bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044c0:	e029      	b.n	8004516 <_dtoa_r+0x3d6>
 80044c2:	2702      	movs	r7, #2
 80044c4:	e7f2      	b.n	80044ac <_dtoa_r+0x36c>
 80044c6:	07e1      	lsls	r1, r4, #31
 80044c8:	d508      	bpl.n	80044dc <_dtoa_r+0x39c>
 80044ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80044ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044d2:	f7fc f801 	bl	80004d8 <__aeabi_dmul>
 80044d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044da:	3701      	adds	r7, #1
 80044dc:	1064      	asrs	r4, r4, #1
 80044de:	3608      	adds	r6, #8
 80044e0:	e7e5      	b.n	80044ae <_dtoa_r+0x36e>
 80044e2:	f000 80a5 	beq.w	8004630 <_dtoa_r+0x4f0>
 80044e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044ea:	f1ca 0400 	rsb	r4, sl, #0
 80044ee:	4b7d      	ldr	r3, [pc, #500]	; (80046e4 <_dtoa_r+0x5a4>)
 80044f0:	f004 020f 	and.w	r2, r4, #15
 80044f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fb ffec 	bl	80004d8 <__aeabi_dmul>
 8004500:	2702      	movs	r7, #2
 8004502:	2300      	movs	r3, #0
 8004504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004508:	4e77      	ldr	r6, [pc, #476]	; (80046e8 <_dtoa_r+0x5a8>)
 800450a:	1124      	asrs	r4, r4, #4
 800450c:	2c00      	cmp	r4, #0
 800450e:	f040 8084 	bne.w	800461a <_dtoa_r+0x4da>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1d2      	bne.n	80044bc <_dtoa_r+0x37c>
 8004516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 808b 	beq.w	8004634 <_dtoa_r+0x4f4>
 800451e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004522:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004526:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800452a:	2200      	movs	r2, #0
 800452c:	4b6f      	ldr	r3, [pc, #444]	; (80046ec <_dtoa_r+0x5ac>)
 800452e:	f7fc fa45 	bl	80009bc <__aeabi_dcmplt>
 8004532:	2800      	cmp	r0, #0
 8004534:	d07e      	beq.n	8004634 <_dtoa_r+0x4f4>
 8004536:	9b08      	ldr	r3, [sp, #32]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d07b      	beq.n	8004634 <_dtoa_r+0x4f4>
 800453c:	f1b9 0f00 	cmp.w	r9, #0
 8004540:	dd38      	ble.n	80045b4 <_dtoa_r+0x474>
 8004542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004546:	2200      	movs	r2, #0
 8004548:	4b69      	ldr	r3, [pc, #420]	; (80046f0 <_dtoa_r+0x5b0>)
 800454a:	f7fb ffc5 	bl	80004d8 <__aeabi_dmul>
 800454e:	464c      	mov	r4, r9
 8004550:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004554:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004558:	3701      	adds	r7, #1
 800455a:	4638      	mov	r0, r7
 800455c:	f7fb ff52 	bl	8000404 <__aeabi_i2d>
 8004560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004564:	f7fb ffb8 	bl	80004d8 <__aeabi_dmul>
 8004568:	2200      	movs	r2, #0
 800456a:	4b62      	ldr	r3, [pc, #392]	; (80046f4 <_dtoa_r+0x5b4>)
 800456c:	f7fb fdfe 	bl	800016c <__adddf3>
 8004570:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004574:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004578:	9611      	str	r6, [sp, #68]	; 0x44
 800457a:	2c00      	cmp	r4, #0
 800457c:	d15d      	bne.n	800463a <_dtoa_r+0x4fa>
 800457e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004582:	2200      	movs	r2, #0
 8004584:	4b5c      	ldr	r3, [pc, #368]	; (80046f8 <_dtoa_r+0x5b8>)
 8004586:	f7fb fdef 	bl	8000168 <__aeabi_dsub>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004592:	4633      	mov	r3, r6
 8004594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004596:	f7fc fa2f 	bl	80009f8 <__aeabi_dcmpgt>
 800459a:	2800      	cmp	r0, #0
 800459c:	f040 829c 	bne.w	8004ad8 <_dtoa_r+0x998>
 80045a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80045aa:	f7fc fa07 	bl	80009bc <__aeabi_dcmplt>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f040 8290 	bne.w	8004ad4 <_dtoa_r+0x994>
 80045b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80045b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80045bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f2c0 8152 	blt.w	8004868 <_dtoa_r+0x728>
 80045c4:	f1ba 0f0e 	cmp.w	sl, #14
 80045c8:	f300 814e 	bgt.w	8004868 <_dtoa_r+0x728>
 80045cc:	4b45      	ldr	r3, [pc, #276]	; (80046e4 <_dtoa_r+0x5a4>)
 80045ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80045d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80045da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f280 80db 	bge.w	8004798 <_dtoa_r+0x658>
 80045e2:	9b08      	ldr	r3, [sp, #32]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f300 80d7 	bgt.w	8004798 <_dtoa_r+0x658>
 80045ea:	f040 8272 	bne.w	8004ad2 <_dtoa_r+0x992>
 80045ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045f2:	2200      	movs	r2, #0
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <_dtoa_r+0x5b8>)
 80045f6:	f7fb ff6f 	bl	80004d8 <__aeabi_dmul>
 80045fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045fe:	f7fc f9f1 	bl	80009e4 <__aeabi_dcmpge>
 8004602:	9c08      	ldr	r4, [sp, #32]
 8004604:	4626      	mov	r6, r4
 8004606:	2800      	cmp	r0, #0
 8004608:	f040 8248 	bne.w	8004a9c <_dtoa_r+0x95c>
 800460c:	2331      	movs	r3, #49	; 0x31
 800460e:	9f03      	ldr	r7, [sp, #12]
 8004610:	f10a 0a01 	add.w	sl, sl, #1
 8004614:	f807 3b01 	strb.w	r3, [r7], #1
 8004618:	e244      	b.n	8004aa4 <_dtoa_r+0x964>
 800461a:	07e2      	lsls	r2, r4, #31
 800461c:	d505      	bpl.n	800462a <_dtoa_r+0x4ea>
 800461e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004622:	f7fb ff59 	bl	80004d8 <__aeabi_dmul>
 8004626:	2301      	movs	r3, #1
 8004628:	3701      	adds	r7, #1
 800462a:	1064      	asrs	r4, r4, #1
 800462c:	3608      	adds	r6, #8
 800462e:	e76d      	b.n	800450c <_dtoa_r+0x3cc>
 8004630:	2702      	movs	r7, #2
 8004632:	e770      	b.n	8004516 <_dtoa_r+0x3d6>
 8004634:	46d0      	mov	r8, sl
 8004636:	9c08      	ldr	r4, [sp, #32]
 8004638:	e78f      	b.n	800455a <_dtoa_r+0x41a>
 800463a:	9903      	ldr	r1, [sp, #12]
 800463c:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <_dtoa_r+0x5a4>)
 800463e:	4421      	add	r1, r4
 8004640:	9112      	str	r1, [sp, #72]	; 0x48
 8004642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004644:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004648:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800464c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004650:	2900      	cmp	r1, #0
 8004652:	d055      	beq.n	8004700 <_dtoa_r+0x5c0>
 8004654:	2000      	movs	r0, #0
 8004656:	4929      	ldr	r1, [pc, #164]	; (80046fc <_dtoa_r+0x5bc>)
 8004658:	f7fc f868 	bl	800072c <__aeabi_ddiv>
 800465c:	463b      	mov	r3, r7
 800465e:	4632      	mov	r2, r6
 8004660:	f7fb fd82 	bl	8000168 <__aeabi_dsub>
 8004664:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004668:	9f03      	ldr	r7, [sp, #12]
 800466a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800466e:	f7fc f9e3 	bl	8000a38 <__aeabi_d2iz>
 8004672:	4604      	mov	r4, r0
 8004674:	f7fb fec6 	bl	8000404 <__aeabi_i2d>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004680:	f7fb fd72 	bl	8000168 <__aeabi_dsub>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	3430      	adds	r4, #48	; 0x30
 800468a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800468e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004692:	f807 4b01 	strb.w	r4, [r7], #1
 8004696:	f7fc f991 	bl	80009bc <__aeabi_dcmplt>
 800469a:	2800      	cmp	r0, #0
 800469c:	d174      	bne.n	8004788 <_dtoa_r+0x648>
 800469e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046a2:	2000      	movs	r0, #0
 80046a4:	4911      	ldr	r1, [pc, #68]	; (80046ec <_dtoa_r+0x5ac>)
 80046a6:	f7fb fd5f 	bl	8000168 <__aeabi_dsub>
 80046aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046ae:	f7fc f985 	bl	80009bc <__aeabi_dcmplt>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	f040 80b7 	bne.w	8004826 <_dtoa_r+0x6e6>
 80046b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046ba:	429f      	cmp	r7, r3
 80046bc:	f43f af7a 	beq.w	80045b4 <_dtoa_r+0x474>
 80046c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046c4:	2200      	movs	r2, #0
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <_dtoa_r+0x5b0>)
 80046c8:	f7fb ff06 	bl	80004d8 <__aeabi_dmul>
 80046cc:	2200      	movs	r2, #0
 80046ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <_dtoa_r+0x5b0>)
 80046d8:	f7fb fefe 	bl	80004d8 <__aeabi_dmul>
 80046dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046e0:	e7c3      	b.n	800466a <_dtoa_r+0x52a>
 80046e2:	bf00      	nop
 80046e4:	080066a0 	.word	0x080066a0
 80046e8:	08006678 	.word	0x08006678
 80046ec:	3ff00000 	.word	0x3ff00000
 80046f0:	40240000 	.word	0x40240000
 80046f4:	401c0000 	.word	0x401c0000
 80046f8:	40140000 	.word	0x40140000
 80046fc:	3fe00000 	.word	0x3fe00000
 8004700:	4630      	mov	r0, r6
 8004702:	4639      	mov	r1, r7
 8004704:	f7fb fee8 	bl	80004d8 <__aeabi_dmul>
 8004708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800470a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800470e:	9c03      	ldr	r4, [sp, #12]
 8004710:	9314      	str	r3, [sp, #80]	; 0x50
 8004712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004716:	f7fc f98f 	bl	8000a38 <__aeabi_d2iz>
 800471a:	9015      	str	r0, [sp, #84]	; 0x54
 800471c:	f7fb fe72 	bl	8000404 <__aeabi_i2d>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004728:	f7fb fd1e 	bl	8000168 <__aeabi_dsub>
 800472c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800472e:	4606      	mov	r6, r0
 8004730:	3330      	adds	r3, #48	; 0x30
 8004732:	f804 3b01 	strb.w	r3, [r4], #1
 8004736:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004738:	460f      	mov	r7, r1
 800473a:	429c      	cmp	r4, r3
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	d124      	bne.n	800478c <_dtoa_r+0x64c>
 8004742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004746:	4bb0      	ldr	r3, [pc, #704]	; (8004a08 <_dtoa_r+0x8c8>)
 8004748:	f7fb fd10 	bl	800016c <__adddf3>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4630      	mov	r0, r6
 8004752:	4639      	mov	r1, r7
 8004754:	f7fc f950 	bl	80009f8 <__aeabi_dcmpgt>
 8004758:	2800      	cmp	r0, #0
 800475a:	d163      	bne.n	8004824 <_dtoa_r+0x6e4>
 800475c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004760:	2000      	movs	r0, #0
 8004762:	49a9      	ldr	r1, [pc, #676]	; (8004a08 <_dtoa_r+0x8c8>)
 8004764:	f7fb fd00 	bl	8000168 <__aeabi_dsub>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4630      	mov	r0, r6
 800476e:	4639      	mov	r1, r7
 8004770:	f7fc f924 	bl	80009bc <__aeabi_dcmplt>
 8004774:	2800      	cmp	r0, #0
 8004776:	f43f af1d 	beq.w	80045b4 <_dtoa_r+0x474>
 800477a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800477c:	1e7b      	subs	r3, r7, #1
 800477e:	9314      	str	r3, [sp, #80]	; 0x50
 8004780:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d0f8      	beq.n	800477a <_dtoa_r+0x63a>
 8004788:	46c2      	mov	sl, r8
 800478a:	e03b      	b.n	8004804 <_dtoa_r+0x6c4>
 800478c:	4b9f      	ldr	r3, [pc, #636]	; (8004a0c <_dtoa_r+0x8cc>)
 800478e:	f7fb fea3 	bl	80004d8 <__aeabi_dmul>
 8004792:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004796:	e7bc      	b.n	8004712 <_dtoa_r+0x5d2>
 8004798:	9f03      	ldr	r7, [sp, #12]
 800479a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800479e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047a2:	4640      	mov	r0, r8
 80047a4:	4649      	mov	r1, r9
 80047a6:	f7fb ffc1 	bl	800072c <__aeabi_ddiv>
 80047aa:	f7fc f945 	bl	8000a38 <__aeabi_d2iz>
 80047ae:	4604      	mov	r4, r0
 80047b0:	f7fb fe28 	bl	8000404 <__aeabi_i2d>
 80047b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047b8:	f7fb fe8e 	bl	80004d8 <__aeabi_dmul>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4640      	mov	r0, r8
 80047c2:	4649      	mov	r1, r9
 80047c4:	f7fb fcd0 	bl	8000168 <__aeabi_dsub>
 80047c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80047cc:	f807 6b01 	strb.w	r6, [r7], #1
 80047d0:	9e03      	ldr	r6, [sp, #12]
 80047d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80047d6:	1bbe      	subs	r6, r7, r6
 80047d8:	45b4      	cmp	ip, r6
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	d136      	bne.n	800484e <_dtoa_r+0x70e>
 80047e0:	f7fb fcc4 	bl	800016c <__adddf3>
 80047e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047e8:	4680      	mov	r8, r0
 80047ea:	4689      	mov	r9, r1
 80047ec:	f7fc f904 	bl	80009f8 <__aeabi_dcmpgt>
 80047f0:	bb58      	cbnz	r0, 800484a <_dtoa_r+0x70a>
 80047f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047f6:	4640      	mov	r0, r8
 80047f8:	4649      	mov	r1, r9
 80047fa:	f7fc f8d5 	bl	80009a8 <__aeabi_dcmpeq>
 80047fe:	b108      	cbz	r0, 8004804 <_dtoa_r+0x6c4>
 8004800:	07e1      	lsls	r1, r4, #31
 8004802:	d422      	bmi.n	800484a <_dtoa_r+0x70a>
 8004804:	4628      	mov	r0, r5
 8004806:	4659      	mov	r1, fp
 8004808:	f000 fae2 	bl	8004dd0 <_Bfree>
 800480c:	2300      	movs	r3, #0
 800480e:	703b      	strb	r3, [r7, #0]
 8004810:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004812:	f10a 0001 	add.w	r0, sl, #1
 8004816:	6018      	str	r0, [r3, #0]
 8004818:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800481a:	2b00      	cmp	r3, #0
 800481c:	f43f acde 	beq.w	80041dc <_dtoa_r+0x9c>
 8004820:	601f      	str	r7, [r3, #0]
 8004822:	e4db      	b.n	80041dc <_dtoa_r+0x9c>
 8004824:	4627      	mov	r7, r4
 8004826:	463b      	mov	r3, r7
 8004828:	461f      	mov	r7, r3
 800482a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800482e:	2a39      	cmp	r2, #57	; 0x39
 8004830:	d107      	bne.n	8004842 <_dtoa_r+0x702>
 8004832:	9a03      	ldr	r2, [sp, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d1f7      	bne.n	8004828 <_dtoa_r+0x6e8>
 8004838:	2230      	movs	r2, #48	; 0x30
 800483a:	9903      	ldr	r1, [sp, #12]
 800483c:	f108 0801 	add.w	r8, r8, #1
 8004840:	700a      	strb	r2, [r1, #0]
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	3201      	adds	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	e79e      	b.n	8004788 <_dtoa_r+0x648>
 800484a:	46d0      	mov	r8, sl
 800484c:	e7eb      	b.n	8004826 <_dtoa_r+0x6e6>
 800484e:	2200      	movs	r2, #0
 8004850:	4b6e      	ldr	r3, [pc, #440]	; (8004a0c <_dtoa_r+0x8cc>)
 8004852:	f7fb fe41 	bl	80004d8 <__aeabi_dmul>
 8004856:	2200      	movs	r2, #0
 8004858:	2300      	movs	r3, #0
 800485a:	4680      	mov	r8, r0
 800485c:	4689      	mov	r9, r1
 800485e:	f7fc f8a3 	bl	80009a8 <__aeabi_dcmpeq>
 8004862:	2800      	cmp	r0, #0
 8004864:	d09b      	beq.n	800479e <_dtoa_r+0x65e>
 8004866:	e7cd      	b.n	8004804 <_dtoa_r+0x6c4>
 8004868:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800486a:	2a00      	cmp	r2, #0
 800486c:	f000 80d0 	beq.w	8004a10 <_dtoa_r+0x8d0>
 8004870:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004872:	2a01      	cmp	r2, #1
 8004874:	f300 80ae 	bgt.w	80049d4 <_dtoa_r+0x894>
 8004878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800487a:	2a00      	cmp	r2, #0
 800487c:	f000 80a6 	beq.w	80049cc <_dtoa_r+0x88c>
 8004880:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004884:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004886:	9f06      	ldr	r7, [sp, #24]
 8004888:	9a06      	ldr	r2, [sp, #24]
 800488a:	2101      	movs	r1, #1
 800488c:	441a      	add	r2, r3
 800488e:	9206      	str	r2, [sp, #24]
 8004890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004892:	4628      	mov	r0, r5
 8004894:	441a      	add	r2, r3
 8004896:	9209      	str	r2, [sp, #36]	; 0x24
 8004898:	f000 fb50 	bl	8004f3c <__i2b>
 800489c:	4606      	mov	r6, r0
 800489e:	2f00      	cmp	r7, #0
 80048a0:	dd0c      	ble.n	80048bc <_dtoa_r+0x77c>
 80048a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	dd09      	ble.n	80048bc <_dtoa_r+0x77c>
 80048a8:	42bb      	cmp	r3, r7
 80048aa:	bfa8      	it	ge
 80048ac:	463b      	movge	r3, r7
 80048ae:	9a06      	ldr	r2, [sp, #24]
 80048b0:	1aff      	subs	r7, r7, r3
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	9206      	str	r2, [sp, #24]
 80048b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	9309      	str	r3, [sp, #36]	; 0x24
 80048bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048be:	b1f3      	cbz	r3, 80048fe <_dtoa_r+0x7be>
 80048c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80a8 	beq.w	8004a18 <_dtoa_r+0x8d8>
 80048c8:	2c00      	cmp	r4, #0
 80048ca:	dd10      	ble.n	80048ee <_dtoa_r+0x7ae>
 80048cc:	4631      	mov	r1, r6
 80048ce:	4622      	mov	r2, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 fbf1 	bl	80050b8 <__pow5mult>
 80048d6:	465a      	mov	r2, fp
 80048d8:	4601      	mov	r1, r0
 80048da:	4606      	mov	r6, r0
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 fb43 	bl	8004f68 <__multiply>
 80048e2:	4680      	mov	r8, r0
 80048e4:	4659      	mov	r1, fp
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 fa72 	bl	8004dd0 <_Bfree>
 80048ec:	46c3      	mov	fp, r8
 80048ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f0:	1b1a      	subs	r2, r3, r4
 80048f2:	d004      	beq.n	80048fe <_dtoa_r+0x7be>
 80048f4:	4659      	mov	r1, fp
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 fbde 	bl	80050b8 <__pow5mult>
 80048fc:	4683      	mov	fp, r0
 80048fe:	2101      	movs	r1, #1
 8004900:	4628      	mov	r0, r5
 8004902:	f000 fb1b 	bl	8004f3c <__i2b>
 8004906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004908:	4604      	mov	r4, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	f340 8086 	ble.w	8004a1c <_dtoa_r+0x8dc>
 8004910:	461a      	mov	r2, r3
 8004912:	4601      	mov	r1, r0
 8004914:	4628      	mov	r0, r5
 8004916:	f000 fbcf 	bl	80050b8 <__pow5mult>
 800491a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800491c:	4604      	mov	r4, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	dd7f      	ble.n	8004a22 <_dtoa_r+0x8e2>
 8004922:	f04f 0800 	mov.w	r8, #0
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800492c:	6918      	ldr	r0, [r3, #16]
 800492e:	f000 fab7 	bl	8004ea0 <__hi0bits>
 8004932:	f1c0 0020 	rsb	r0, r0, #32
 8004936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004938:	4418      	add	r0, r3
 800493a:	f010 001f 	ands.w	r0, r0, #31
 800493e:	f000 8092 	beq.w	8004a66 <_dtoa_r+0x926>
 8004942:	f1c0 0320 	rsb	r3, r0, #32
 8004946:	2b04      	cmp	r3, #4
 8004948:	f340 808a 	ble.w	8004a60 <_dtoa_r+0x920>
 800494c:	f1c0 001c 	rsb	r0, r0, #28
 8004950:	9b06      	ldr	r3, [sp, #24]
 8004952:	4407      	add	r7, r0
 8004954:	4403      	add	r3, r0
 8004956:	9306      	str	r3, [sp, #24]
 8004958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495a:	4403      	add	r3, r0
 800495c:	9309      	str	r3, [sp, #36]	; 0x24
 800495e:	9b06      	ldr	r3, [sp, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	dd05      	ble.n	8004970 <_dtoa_r+0x830>
 8004964:	4659      	mov	r1, fp
 8004966:	461a      	mov	r2, r3
 8004968:	4628      	mov	r0, r5
 800496a:	f000 fbff 	bl	800516c <__lshift>
 800496e:	4683      	mov	fp, r0
 8004970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	dd05      	ble.n	8004982 <_dtoa_r+0x842>
 8004976:	4621      	mov	r1, r4
 8004978:	461a      	mov	r2, r3
 800497a:	4628      	mov	r0, r5
 800497c:	f000 fbf6 	bl	800516c <__lshift>
 8004980:	4604      	mov	r4, r0
 8004982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d070      	beq.n	8004a6a <_dtoa_r+0x92a>
 8004988:	4621      	mov	r1, r4
 800498a:	4658      	mov	r0, fp
 800498c:	f000 fc5e 	bl	800524c <__mcmp>
 8004990:	2800      	cmp	r0, #0
 8004992:	da6a      	bge.n	8004a6a <_dtoa_r+0x92a>
 8004994:	2300      	movs	r3, #0
 8004996:	4659      	mov	r1, fp
 8004998:	220a      	movs	r2, #10
 800499a:	4628      	mov	r0, r5
 800499c:	f000 fa3a 	bl	8004e14 <__multadd>
 80049a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a2:	4683      	mov	fp, r0
 80049a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8194 	beq.w	8004cd6 <_dtoa_r+0xb96>
 80049ae:	4631      	mov	r1, r6
 80049b0:	2300      	movs	r3, #0
 80049b2:	220a      	movs	r2, #10
 80049b4:	4628      	mov	r0, r5
 80049b6:	f000 fa2d 	bl	8004e14 <__multadd>
 80049ba:	f1b9 0f00 	cmp.w	r9, #0
 80049be:	4606      	mov	r6, r0
 80049c0:	f300 8093 	bgt.w	8004aea <_dtoa_r+0x9aa>
 80049c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	dc57      	bgt.n	8004a7a <_dtoa_r+0x93a>
 80049ca:	e08e      	b.n	8004aea <_dtoa_r+0x9aa>
 80049cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80049ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80049d2:	e757      	b.n	8004884 <_dtoa_r+0x744>
 80049d4:	9b08      	ldr	r3, [sp, #32]
 80049d6:	1e5c      	subs	r4, r3, #1
 80049d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049da:	42a3      	cmp	r3, r4
 80049dc:	bfb7      	itett	lt
 80049de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80049e0:	1b1c      	subge	r4, r3, r4
 80049e2:	1ae2      	sublt	r2, r4, r3
 80049e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80049e6:	bfbe      	ittt	lt
 80049e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80049ea:	189b      	addlt	r3, r3, r2
 80049ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80049ee:	9b08      	ldr	r3, [sp, #32]
 80049f0:	bfb8      	it	lt
 80049f2:	2400      	movlt	r4, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bfbb      	ittet	lt
 80049f8:	9b06      	ldrlt	r3, [sp, #24]
 80049fa:	9a08      	ldrlt	r2, [sp, #32]
 80049fc:	9f06      	ldrge	r7, [sp, #24]
 80049fe:	1a9f      	sublt	r7, r3, r2
 8004a00:	bfac      	ite	ge
 8004a02:	9b08      	ldrge	r3, [sp, #32]
 8004a04:	2300      	movlt	r3, #0
 8004a06:	e73f      	b.n	8004888 <_dtoa_r+0x748>
 8004a08:	3fe00000 	.word	0x3fe00000
 8004a0c:	40240000 	.word	0x40240000
 8004a10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a12:	9f06      	ldr	r7, [sp, #24]
 8004a14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004a16:	e742      	b.n	800489e <_dtoa_r+0x75e>
 8004a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a1a:	e76b      	b.n	80048f4 <_dtoa_r+0x7b4>
 8004a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	dc19      	bgt.n	8004a56 <_dtoa_r+0x916>
 8004a22:	9b04      	ldr	r3, [sp, #16]
 8004a24:	b9bb      	cbnz	r3, 8004a56 <_dtoa_r+0x916>
 8004a26:	9b05      	ldr	r3, [sp, #20]
 8004a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a2c:	b99b      	cbnz	r3, 8004a56 <_dtoa_r+0x916>
 8004a2e:	9b05      	ldr	r3, [sp, #20]
 8004a30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a34:	0d1b      	lsrs	r3, r3, #20
 8004a36:	051b      	lsls	r3, r3, #20
 8004a38:	b183      	cbz	r3, 8004a5c <_dtoa_r+0x91c>
 8004a3a:	f04f 0801 	mov.w	r8, #1
 8004a3e:	9b06      	ldr	r3, [sp, #24]
 8004a40:	3301      	adds	r3, #1
 8004a42:	9306      	str	r3, [sp, #24]
 8004a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a46:	3301      	adds	r3, #1
 8004a48:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f af6a 	bne.w	8004926 <_dtoa_r+0x7e6>
 8004a52:	2001      	movs	r0, #1
 8004a54:	e76f      	b.n	8004936 <_dtoa_r+0x7f6>
 8004a56:	f04f 0800 	mov.w	r8, #0
 8004a5a:	e7f6      	b.n	8004a4a <_dtoa_r+0x90a>
 8004a5c:	4698      	mov	r8, r3
 8004a5e:	e7f4      	b.n	8004a4a <_dtoa_r+0x90a>
 8004a60:	f43f af7d 	beq.w	800495e <_dtoa_r+0x81e>
 8004a64:	4618      	mov	r0, r3
 8004a66:	301c      	adds	r0, #28
 8004a68:	e772      	b.n	8004950 <_dtoa_r+0x810>
 8004a6a:	9b08      	ldr	r3, [sp, #32]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dc36      	bgt.n	8004ade <_dtoa_r+0x99e>
 8004a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	dd33      	ble.n	8004ade <_dtoa_r+0x99e>
 8004a76:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a7a:	f1b9 0f00 	cmp.w	r9, #0
 8004a7e:	d10d      	bne.n	8004a9c <_dtoa_r+0x95c>
 8004a80:	4621      	mov	r1, r4
 8004a82:	464b      	mov	r3, r9
 8004a84:	2205      	movs	r2, #5
 8004a86:	4628      	mov	r0, r5
 8004a88:	f000 f9c4 	bl	8004e14 <__multadd>
 8004a8c:	4601      	mov	r1, r0
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4658      	mov	r0, fp
 8004a92:	f000 fbdb 	bl	800524c <__mcmp>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	f73f adb8 	bgt.w	800460c <_dtoa_r+0x4cc>
 8004a9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a9e:	9f03      	ldr	r7, [sp, #12]
 8004aa0:	ea6f 0a03 	mvn.w	sl, r3
 8004aa4:	f04f 0800 	mov.w	r8, #0
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f990 	bl	8004dd0 <_Bfree>
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	f43f aea7 	beq.w	8004804 <_dtoa_r+0x6c4>
 8004ab6:	f1b8 0f00 	cmp.w	r8, #0
 8004aba:	d005      	beq.n	8004ac8 <_dtoa_r+0x988>
 8004abc:	45b0      	cmp	r8, r6
 8004abe:	d003      	beq.n	8004ac8 <_dtoa_r+0x988>
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 f984 	bl	8004dd0 <_Bfree>
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 f980 	bl	8004dd0 <_Bfree>
 8004ad0:	e698      	b.n	8004804 <_dtoa_r+0x6c4>
 8004ad2:	2400      	movs	r4, #0
 8004ad4:	4626      	mov	r6, r4
 8004ad6:	e7e1      	b.n	8004a9c <_dtoa_r+0x95c>
 8004ad8:	46c2      	mov	sl, r8
 8004ada:	4626      	mov	r6, r4
 8004adc:	e596      	b.n	800460c <_dtoa_r+0x4cc>
 8004ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80fd 	beq.w	8004ce4 <_dtoa_r+0xba4>
 8004aea:	2f00      	cmp	r7, #0
 8004aec:	dd05      	ble.n	8004afa <_dtoa_r+0x9ba>
 8004aee:	4631      	mov	r1, r6
 8004af0:	463a      	mov	r2, r7
 8004af2:	4628      	mov	r0, r5
 8004af4:	f000 fb3a 	bl	800516c <__lshift>
 8004af8:	4606      	mov	r6, r0
 8004afa:	f1b8 0f00 	cmp.w	r8, #0
 8004afe:	d05c      	beq.n	8004bba <_dtoa_r+0xa7a>
 8004b00:	4628      	mov	r0, r5
 8004b02:	6871      	ldr	r1, [r6, #4]
 8004b04:	f000 f924 	bl	8004d50 <_Balloc>
 8004b08:	4607      	mov	r7, r0
 8004b0a:	b928      	cbnz	r0, 8004b18 <_dtoa_r+0x9d8>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b12:	4b7f      	ldr	r3, [pc, #508]	; (8004d10 <_dtoa_r+0xbd0>)
 8004b14:	f7ff bb28 	b.w	8004168 <_dtoa_r+0x28>
 8004b18:	6932      	ldr	r2, [r6, #16]
 8004b1a:	f106 010c 	add.w	r1, r6, #12
 8004b1e:	3202      	adds	r2, #2
 8004b20:	0092      	lsls	r2, r2, #2
 8004b22:	300c      	adds	r0, #12
 8004b24:	f7fe fdea 	bl	80036fc <memcpy>
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4639      	mov	r1, r7
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 fb1d 	bl	800516c <__lshift>
 8004b32:	46b0      	mov	r8, r6
 8004b34:	4606      	mov	r6, r0
 8004b36:	9b03      	ldr	r3, [sp, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	9308      	str	r3, [sp, #32]
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	444b      	add	r3, r9
 8004b40:	930a      	str	r3, [sp, #40]	; 0x28
 8004b42:	9b04      	ldr	r3, [sp, #16]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4a:	9b08      	ldr	r3, [sp, #32]
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	4658      	mov	r0, fp
 8004b52:	9304      	str	r3, [sp, #16]
 8004b54:	f7ff fa68 	bl	8004028 <quorem>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	3330      	adds	r3, #48	; 0x30
 8004b5e:	9006      	str	r0, [sp, #24]
 8004b60:	4658      	mov	r0, fp
 8004b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b64:	f000 fb72 	bl	800524c <__mcmp>
 8004b68:	4632      	mov	r2, r6
 8004b6a:	4681      	mov	r9, r0
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 fb88 	bl	8005284 <__mdiff>
 8004b74:	68c2      	ldr	r2, [r0, #12]
 8004b76:	4607      	mov	r7, r0
 8004b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b7a:	bb02      	cbnz	r2, 8004bbe <_dtoa_r+0xa7e>
 8004b7c:	4601      	mov	r1, r0
 8004b7e:	4658      	mov	r0, fp
 8004b80:	f000 fb64 	bl	800524c <__mcmp>
 8004b84:	4602      	mov	r2, r0
 8004b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b88:	4639      	mov	r1, r7
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004b90:	f000 f91e 	bl	8004dd0 <_Bfree>
 8004b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b98:	9f08      	ldr	r7, [sp, #32]
 8004b9a:	ea43 0102 	orr.w	r1, r3, r2
 8004b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ba4:	d10d      	bne.n	8004bc2 <_dtoa_r+0xa82>
 8004ba6:	2b39      	cmp	r3, #57	; 0x39
 8004ba8:	d029      	beq.n	8004bfe <_dtoa_r+0xabe>
 8004baa:	f1b9 0f00 	cmp.w	r9, #0
 8004bae:	dd01      	ble.n	8004bb4 <_dtoa_r+0xa74>
 8004bb0:	9b06      	ldr	r3, [sp, #24]
 8004bb2:	3331      	adds	r3, #49	; 0x31
 8004bb4:	9a04      	ldr	r2, [sp, #16]
 8004bb6:	7013      	strb	r3, [r2, #0]
 8004bb8:	e776      	b.n	8004aa8 <_dtoa_r+0x968>
 8004bba:	4630      	mov	r0, r6
 8004bbc:	e7b9      	b.n	8004b32 <_dtoa_r+0x9f2>
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	e7e2      	b.n	8004b88 <_dtoa_r+0xa48>
 8004bc2:	f1b9 0f00 	cmp.w	r9, #0
 8004bc6:	db06      	blt.n	8004bd6 <_dtoa_r+0xa96>
 8004bc8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004bca:	ea41 0909 	orr.w	r9, r1, r9
 8004bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bd0:	ea59 0101 	orrs.w	r1, r9, r1
 8004bd4:	d120      	bne.n	8004c18 <_dtoa_r+0xad8>
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	ddec      	ble.n	8004bb4 <_dtoa_r+0xa74>
 8004bda:	4659      	mov	r1, fp
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4628      	mov	r0, r5
 8004be0:	9308      	str	r3, [sp, #32]
 8004be2:	f000 fac3 	bl	800516c <__lshift>
 8004be6:	4621      	mov	r1, r4
 8004be8:	4683      	mov	fp, r0
 8004bea:	f000 fb2f 	bl	800524c <__mcmp>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	9b08      	ldr	r3, [sp, #32]
 8004bf2:	dc02      	bgt.n	8004bfa <_dtoa_r+0xaba>
 8004bf4:	d1de      	bne.n	8004bb4 <_dtoa_r+0xa74>
 8004bf6:	07da      	lsls	r2, r3, #31
 8004bf8:	d5dc      	bpl.n	8004bb4 <_dtoa_r+0xa74>
 8004bfa:	2b39      	cmp	r3, #57	; 0x39
 8004bfc:	d1d8      	bne.n	8004bb0 <_dtoa_r+0xa70>
 8004bfe:	2339      	movs	r3, #57	; 0x39
 8004c00:	9a04      	ldr	r2, [sp, #16]
 8004c02:	7013      	strb	r3, [r2, #0]
 8004c04:	463b      	mov	r3, r7
 8004c06:	461f      	mov	r7, r3
 8004c08:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	2a39      	cmp	r2, #57	; 0x39
 8004c10:	d050      	beq.n	8004cb4 <_dtoa_r+0xb74>
 8004c12:	3201      	adds	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e747      	b.n	8004aa8 <_dtoa_r+0x968>
 8004c18:	2a00      	cmp	r2, #0
 8004c1a:	dd03      	ble.n	8004c24 <_dtoa_r+0xae4>
 8004c1c:	2b39      	cmp	r3, #57	; 0x39
 8004c1e:	d0ee      	beq.n	8004bfe <_dtoa_r+0xabe>
 8004c20:	3301      	adds	r3, #1
 8004c22:	e7c7      	b.n	8004bb4 <_dtoa_r+0xa74>
 8004c24:	9a08      	ldr	r2, [sp, #32]
 8004c26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c2c:	428a      	cmp	r2, r1
 8004c2e:	d02a      	beq.n	8004c86 <_dtoa_r+0xb46>
 8004c30:	4659      	mov	r1, fp
 8004c32:	2300      	movs	r3, #0
 8004c34:	220a      	movs	r2, #10
 8004c36:	4628      	mov	r0, r5
 8004c38:	f000 f8ec 	bl	8004e14 <__multadd>
 8004c3c:	45b0      	cmp	r8, r6
 8004c3e:	4683      	mov	fp, r0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	f04f 020a 	mov.w	r2, #10
 8004c48:	4641      	mov	r1, r8
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	d107      	bne.n	8004c5e <_dtoa_r+0xb1e>
 8004c4e:	f000 f8e1 	bl	8004e14 <__multadd>
 8004c52:	4680      	mov	r8, r0
 8004c54:	4606      	mov	r6, r0
 8004c56:	9b08      	ldr	r3, [sp, #32]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	9308      	str	r3, [sp, #32]
 8004c5c:	e775      	b.n	8004b4a <_dtoa_r+0xa0a>
 8004c5e:	f000 f8d9 	bl	8004e14 <__multadd>
 8004c62:	4631      	mov	r1, r6
 8004c64:	4680      	mov	r8, r0
 8004c66:	2300      	movs	r3, #0
 8004c68:	220a      	movs	r2, #10
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 f8d2 	bl	8004e14 <__multadd>
 8004c70:	4606      	mov	r6, r0
 8004c72:	e7f0      	b.n	8004c56 <_dtoa_r+0xb16>
 8004c74:	f1b9 0f00 	cmp.w	r9, #0
 8004c78:	bfcc      	ite	gt
 8004c7a:	464f      	movgt	r7, r9
 8004c7c:	2701      	movle	r7, #1
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	9a03      	ldr	r2, [sp, #12]
 8004c84:	4417      	add	r7, r2
 8004c86:	4659      	mov	r1, fp
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	9308      	str	r3, [sp, #32]
 8004c8e:	f000 fa6d 	bl	800516c <__lshift>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4683      	mov	fp, r0
 8004c96:	f000 fad9 	bl	800524c <__mcmp>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	dcb2      	bgt.n	8004c04 <_dtoa_r+0xac4>
 8004c9e:	d102      	bne.n	8004ca6 <_dtoa_r+0xb66>
 8004ca0:	9b08      	ldr	r3, [sp, #32]
 8004ca2:	07db      	lsls	r3, r3, #31
 8004ca4:	d4ae      	bmi.n	8004c04 <_dtoa_r+0xac4>
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	461f      	mov	r7, r3
 8004caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cae:	2a30      	cmp	r2, #48	; 0x30
 8004cb0:	d0fa      	beq.n	8004ca8 <_dtoa_r+0xb68>
 8004cb2:	e6f9      	b.n	8004aa8 <_dtoa_r+0x968>
 8004cb4:	9a03      	ldr	r2, [sp, #12]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d1a5      	bne.n	8004c06 <_dtoa_r+0xac6>
 8004cba:	2331      	movs	r3, #49	; 0x31
 8004cbc:	f10a 0a01 	add.w	sl, sl, #1
 8004cc0:	e779      	b.n	8004bb6 <_dtoa_r+0xa76>
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <_dtoa_r+0xbd4>)
 8004cc4:	f7ff baa8 	b.w	8004218 <_dtoa_r+0xd8>
 8004cc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f47f aa81 	bne.w	80041d2 <_dtoa_r+0x92>
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <_dtoa_r+0xbd8>)
 8004cd2:	f7ff baa1 	b.w	8004218 <_dtoa_r+0xd8>
 8004cd6:	f1b9 0f00 	cmp.w	r9, #0
 8004cda:	dc03      	bgt.n	8004ce4 <_dtoa_r+0xba4>
 8004cdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	f73f aecb 	bgt.w	8004a7a <_dtoa_r+0x93a>
 8004ce4:	9f03      	ldr	r7, [sp, #12]
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4658      	mov	r0, fp
 8004cea:	f7ff f99d 	bl	8004028 <quorem>
 8004cee:	9a03      	ldr	r2, [sp, #12]
 8004cf0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004cf4:	f807 3b01 	strb.w	r3, [r7], #1
 8004cf8:	1aba      	subs	r2, r7, r2
 8004cfa:	4591      	cmp	r9, r2
 8004cfc:	ddba      	ble.n	8004c74 <_dtoa_r+0xb34>
 8004cfe:	4659      	mov	r1, fp
 8004d00:	2300      	movs	r3, #0
 8004d02:	220a      	movs	r2, #10
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 f885 	bl	8004e14 <__multadd>
 8004d0a:	4683      	mov	fp, r0
 8004d0c:	e7eb      	b.n	8004ce6 <_dtoa_r+0xba6>
 8004d0e:	bf00      	nop
 8004d10:	08006607 	.word	0x08006607
 8004d14:	08006564 	.word	0x08006564
 8004d18:	08006588 	.word	0x08006588

08004d1c <_localeconv_r>:
 8004d1c:	4800      	ldr	r0, [pc, #0]	; (8004d20 <_localeconv_r+0x4>)
 8004d1e:	4770      	bx	lr
 8004d20:	20000160 	.word	0x20000160

08004d24 <malloc>:
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <malloc+0xc>)
 8004d26:	4601      	mov	r1, r0
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	f000 bc0f 	b.w	800554c <_malloc_r>
 8004d2e:	bf00      	nop
 8004d30:	2000000c 	.word	0x2000000c

08004d34 <memchr>:
 8004d34:	4603      	mov	r3, r0
 8004d36:	b510      	push	{r4, lr}
 8004d38:	b2c9      	uxtb	r1, r1
 8004d3a:	4402      	add	r2, r0
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	d101      	bne.n	8004d46 <memchr+0x12>
 8004d42:	2000      	movs	r0, #0
 8004d44:	e003      	b.n	8004d4e <memchr+0x1a>
 8004d46:	7804      	ldrb	r4, [r0, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	428c      	cmp	r4, r1
 8004d4c:	d1f6      	bne.n	8004d3c <memchr+0x8>
 8004d4e:	bd10      	pop	{r4, pc}

08004d50 <_Balloc>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d54:	4604      	mov	r4, r0
 8004d56:	460d      	mov	r5, r1
 8004d58:	b976      	cbnz	r6, 8004d78 <_Balloc+0x28>
 8004d5a:	2010      	movs	r0, #16
 8004d5c:	f7ff ffe2 	bl	8004d24 <malloc>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6260      	str	r0, [r4, #36]	; 0x24
 8004d64:	b920      	cbnz	r0, 8004d70 <_Balloc+0x20>
 8004d66:	2166      	movs	r1, #102	; 0x66
 8004d68:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <_Balloc+0x78>)
 8004d6a:	4818      	ldr	r0, [pc, #96]	; (8004dcc <_Balloc+0x7c>)
 8004d6c:	f000 fdce 	bl	800590c <__assert_func>
 8004d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d74:	6006      	str	r6, [r0, #0]
 8004d76:	60c6      	str	r6, [r0, #12]
 8004d78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d7a:	68f3      	ldr	r3, [r6, #12]
 8004d7c:	b183      	cbz	r3, 8004da0 <_Balloc+0x50>
 8004d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d86:	b9b8      	cbnz	r0, 8004db8 <_Balloc+0x68>
 8004d88:	2101      	movs	r1, #1
 8004d8a:	fa01 f605 	lsl.w	r6, r1, r5
 8004d8e:	1d72      	adds	r2, r6, #5
 8004d90:	4620      	mov	r0, r4
 8004d92:	0092      	lsls	r2, r2, #2
 8004d94:	f000 fb5e 	bl	8005454 <_calloc_r>
 8004d98:	b160      	cbz	r0, 8004db4 <_Balloc+0x64>
 8004d9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d9e:	e00e      	b.n	8004dbe <_Balloc+0x6e>
 8004da0:	2221      	movs	r2, #33	; 0x21
 8004da2:	2104      	movs	r1, #4
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 fb55 	bl	8005454 <_calloc_r>
 8004daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dac:	60f0      	str	r0, [r6, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e4      	bne.n	8004d7e <_Balloc+0x2e>
 8004db4:	2000      	movs	r0, #0
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	6802      	ldr	r2, [r0, #0]
 8004dba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004dc4:	e7f7      	b.n	8004db6 <_Balloc+0x66>
 8004dc6:	bf00      	nop
 8004dc8:	08006595 	.word	0x08006595
 8004dcc:	08006618 	.word	0x08006618

08004dd0 <_Bfree>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	b976      	cbnz	r6, 8004df8 <_Bfree+0x28>
 8004dda:	2010      	movs	r0, #16
 8004ddc:	f7ff ffa2 	bl	8004d24 <malloc>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6268      	str	r0, [r5, #36]	; 0x24
 8004de4:	b920      	cbnz	r0, 8004df0 <_Bfree+0x20>
 8004de6:	218a      	movs	r1, #138	; 0x8a
 8004de8:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <_Bfree+0x3c>)
 8004dea:	4809      	ldr	r0, [pc, #36]	; (8004e10 <_Bfree+0x40>)
 8004dec:	f000 fd8e 	bl	800590c <__assert_func>
 8004df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004df4:	6006      	str	r6, [r0, #0]
 8004df6:	60c6      	str	r6, [r0, #12]
 8004df8:	b13c      	cbz	r4, 8004e0a <_Bfree+0x3a>
 8004dfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dfc:	6862      	ldr	r2, [r4, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e04:	6021      	str	r1, [r4, #0]
 8004e06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	08006595 	.word	0x08006595
 8004e10:	08006618 	.word	0x08006618

08004e14 <__multadd>:
 8004e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e18:	4607      	mov	r7, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	461e      	mov	r6, r3
 8004e1e:	2000      	movs	r0, #0
 8004e20:	690d      	ldr	r5, [r1, #16]
 8004e22:	f101 0c14 	add.w	ip, r1, #20
 8004e26:	f8dc 3000 	ldr.w	r3, [ip]
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	b299      	uxth	r1, r3
 8004e2e:	fb02 6101 	mla	r1, r2, r1, r6
 8004e32:	0c1e      	lsrs	r6, r3, #16
 8004e34:	0c0b      	lsrs	r3, r1, #16
 8004e36:	fb02 3306 	mla	r3, r2, r6, r3
 8004e3a:	b289      	uxth	r1, r1
 8004e3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e40:	4285      	cmp	r5, r0
 8004e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e46:	f84c 1b04 	str.w	r1, [ip], #4
 8004e4a:	dcec      	bgt.n	8004e26 <__multadd+0x12>
 8004e4c:	b30e      	cbz	r6, 8004e92 <__multadd+0x7e>
 8004e4e:	68a3      	ldr	r3, [r4, #8]
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dc19      	bgt.n	8004e88 <__multadd+0x74>
 8004e54:	6861      	ldr	r1, [r4, #4]
 8004e56:	4638      	mov	r0, r7
 8004e58:	3101      	adds	r1, #1
 8004e5a:	f7ff ff79 	bl	8004d50 <_Balloc>
 8004e5e:	4680      	mov	r8, r0
 8004e60:	b928      	cbnz	r0, 8004e6e <__multadd+0x5a>
 8004e62:	4602      	mov	r2, r0
 8004e64:	21b5      	movs	r1, #181	; 0xb5
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <__multadd+0x84>)
 8004e68:	480c      	ldr	r0, [pc, #48]	; (8004e9c <__multadd+0x88>)
 8004e6a:	f000 fd4f 	bl	800590c <__assert_func>
 8004e6e:	6922      	ldr	r2, [r4, #16]
 8004e70:	f104 010c 	add.w	r1, r4, #12
 8004e74:	3202      	adds	r2, #2
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	300c      	adds	r0, #12
 8004e7a:	f7fe fc3f 	bl	80036fc <memcpy>
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff ffa5 	bl	8004dd0 <_Bfree>
 8004e86:	4644      	mov	r4, r8
 8004e88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	615e      	str	r6, [r3, #20]
 8004e90:	6125      	str	r5, [r4, #16]
 8004e92:	4620      	mov	r0, r4
 8004e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e98:	08006607 	.word	0x08006607
 8004e9c:	08006618 	.word	0x08006618

08004ea0 <__hi0bits>:
 8004ea0:	0c02      	lsrs	r2, r0, #16
 8004ea2:	0412      	lsls	r2, r2, #16
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	b9ca      	cbnz	r2, 8004edc <__hi0bits+0x3c>
 8004ea8:	0403      	lsls	r3, r0, #16
 8004eaa:	2010      	movs	r0, #16
 8004eac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004eb0:	bf04      	itt	eq
 8004eb2:	021b      	lsleq	r3, r3, #8
 8004eb4:	3008      	addeq	r0, #8
 8004eb6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004eba:	bf04      	itt	eq
 8004ebc:	011b      	lsleq	r3, r3, #4
 8004ebe:	3004      	addeq	r0, #4
 8004ec0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004ec4:	bf04      	itt	eq
 8004ec6:	009b      	lsleq	r3, r3, #2
 8004ec8:	3002      	addeq	r0, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	db05      	blt.n	8004eda <__hi0bits+0x3a>
 8004ece:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004ed2:	f100 0001 	add.w	r0, r0, #1
 8004ed6:	bf08      	it	eq
 8004ed8:	2020      	moveq	r0, #32
 8004eda:	4770      	bx	lr
 8004edc:	2000      	movs	r0, #0
 8004ede:	e7e5      	b.n	8004eac <__hi0bits+0xc>

08004ee0 <__lo0bits>:
 8004ee0:	6803      	ldr	r3, [r0, #0]
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	f013 0007 	ands.w	r0, r3, #7
 8004ee8:	d00b      	beq.n	8004f02 <__lo0bits+0x22>
 8004eea:	07d9      	lsls	r1, r3, #31
 8004eec:	d421      	bmi.n	8004f32 <__lo0bits+0x52>
 8004eee:	0798      	lsls	r0, r3, #30
 8004ef0:	bf49      	itett	mi
 8004ef2:	085b      	lsrmi	r3, r3, #1
 8004ef4:	089b      	lsrpl	r3, r3, #2
 8004ef6:	2001      	movmi	r0, #1
 8004ef8:	6013      	strmi	r3, [r2, #0]
 8004efa:	bf5c      	itt	pl
 8004efc:	2002      	movpl	r0, #2
 8004efe:	6013      	strpl	r3, [r2, #0]
 8004f00:	4770      	bx	lr
 8004f02:	b299      	uxth	r1, r3
 8004f04:	b909      	cbnz	r1, 8004f0a <__lo0bits+0x2a>
 8004f06:	2010      	movs	r0, #16
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	b2d9      	uxtb	r1, r3
 8004f0c:	b909      	cbnz	r1, 8004f12 <__lo0bits+0x32>
 8004f0e:	3008      	adds	r0, #8
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	0719      	lsls	r1, r3, #28
 8004f14:	bf04      	itt	eq
 8004f16:	091b      	lsreq	r3, r3, #4
 8004f18:	3004      	addeq	r0, #4
 8004f1a:	0799      	lsls	r1, r3, #30
 8004f1c:	bf04      	itt	eq
 8004f1e:	089b      	lsreq	r3, r3, #2
 8004f20:	3002      	addeq	r0, #2
 8004f22:	07d9      	lsls	r1, r3, #31
 8004f24:	d403      	bmi.n	8004f2e <__lo0bits+0x4e>
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	f100 0001 	add.w	r0, r0, #1
 8004f2c:	d003      	beq.n	8004f36 <__lo0bits+0x56>
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4770      	bx	lr
 8004f32:	2000      	movs	r0, #0
 8004f34:	4770      	bx	lr
 8004f36:	2020      	movs	r0, #32
 8004f38:	4770      	bx	lr
	...

08004f3c <__i2b>:
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	460c      	mov	r4, r1
 8004f40:	2101      	movs	r1, #1
 8004f42:	f7ff ff05 	bl	8004d50 <_Balloc>
 8004f46:	4602      	mov	r2, r0
 8004f48:	b928      	cbnz	r0, 8004f56 <__i2b+0x1a>
 8004f4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <__i2b+0x24>)
 8004f50:	4804      	ldr	r0, [pc, #16]	; (8004f64 <__i2b+0x28>)
 8004f52:	f000 fcdb 	bl	800590c <__assert_func>
 8004f56:	2301      	movs	r3, #1
 8004f58:	6144      	str	r4, [r0, #20]
 8004f5a:	6103      	str	r3, [r0, #16]
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	bf00      	nop
 8004f60:	08006607 	.word	0x08006607
 8004f64:	08006618 	.word	0x08006618

08004f68 <__multiply>:
 8004f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6c:	4691      	mov	r9, r2
 8004f6e:	690a      	ldr	r2, [r1, #16]
 8004f70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f74:	460c      	mov	r4, r1
 8004f76:	429a      	cmp	r2, r3
 8004f78:	bfbe      	ittt	lt
 8004f7a:	460b      	movlt	r3, r1
 8004f7c:	464c      	movlt	r4, r9
 8004f7e:	4699      	movlt	r9, r3
 8004f80:	6927      	ldr	r7, [r4, #16]
 8004f82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	6861      	ldr	r1, [r4, #4]
 8004f8a:	eb07 060a 	add.w	r6, r7, sl
 8004f8e:	42b3      	cmp	r3, r6
 8004f90:	b085      	sub	sp, #20
 8004f92:	bfb8      	it	lt
 8004f94:	3101      	addlt	r1, #1
 8004f96:	f7ff fedb 	bl	8004d50 <_Balloc>
 8004f9a:	b930      	cbnz	r0, 8004faa <__multiply+0x42>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f240 115d 	movw	r1, #349	; 0x15d
 8004fa2:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <__multiply+0x148>)
 8004fa4:	4843      	ldr	r0, [pc, #268]	; (80050b4 <__multiply+0x14c>)
 8004fa6:	f000 fcb1 	bl	800590c <__assert_func>
 8004faa:	f100 0514 	add.w	r5, r0, #20
 8004fae:	462b      	mov	r3, r5
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004fb6:	4543      	cmp	r3, r8
 8004fb8:	d321      	bcc.n	8004ffe <__multiply+0x96>
 8004fba:	f104 0314 	add.w	r3, r4, #20
 8004fbe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004fc2:	f109 0314 	add.w	r3, r9, #20
 8004fc6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004fca:	9202      	str	r2, [sp, #8]
 8004fcc:	1b3a      	subs	r2, r7, r4
 8004fce:	3a15      	subs	r2, #21
 8004fd0:	f022 0203 	bic.w	r2, r2, #3
 8004fd4:	3204      	adds	r2, #4
 8004fd6:	f104 0115 	add.w	r1, r4, #21
 8004fda:	428f      	cmp	r7, r1
 8004fdc:	bf38      	it	cc
 8004fde:	2204      	movcc	r2, #4
 8004fe0:	9201      	str	r2, [sp, #4]
 8004fe2:	9a02      	ldr	r2, [sp, #8]
 8004fe4:	9303      	str	r3, [sp, #12]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d80c      	bhi.n	8005004 <__multiply+0x9c>
 8004fea:	2e00      	cmp	r6, #0
 8004fec:	dd03      	ble.n	8004ff6 <__multiply+0x8e>
 8004fee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d059      	beq.n	80050aa <__multiply+0x142>
 8004ff6:	6106      	str	r6, [r0, #16]
 8004ff8:	b005      	add	sp, #20
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffe:	f843 2b04 	str.w	r2, [r3], #4
 8005002:	e7d8      	b.n	8004fb6 <__multiply+0x4e>
 8005004:	f8b3 a000 	ldrh.w	sl, [r3]
 8005008:	f1ba 0f00 	cmp.w	sl, #0
 800500c:	d023      	beq.n	8005056 <__multiply+0xee>
 800500e:	46a9      	mov	r9, r5
 8005010:	f04f 0c00 	mov.w	ip, #0
 8005014:	f104 0e14 	add.w	lr, r4, #20
 8005018:	f85e 2b04 	ldr.w	r2, [lr], #4
 800501c:	f8d9 1000 	ldr.w	r1, [r9]
 8005020:	fa1f fb82 	uxth.w	fp, r2
 8005024:	b289      	uxth	r1, r1
 8005026:	fb0a 110b 	mla	r1, sl, fp, r1
 800502a:	4461      	add	r1, ip
 800502c:	f8d9 c000 	ldr.w	ip, [r9]
 8005030:	0c12      	lsrs	r2, r2, #16
 8005032:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005036:	fb0a c202 	mla	r2, sl, r2, ip
 800503a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800503e:	b289      	uxth	r1, r1
 8005040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005044:	4577      	cmp	r7, lr
 8005046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800504a:	f849 1b04 	str.w	r1, [r9], #4
 800504e:	d8e3      	bhi.n	8005018 <__multiply+0xb0>
 8005050:	9a01      	ldr	r2, [sp, #4]
 8005052:	f845 c002 	str.w	ip, [r5, r2]
 8005056:	9a03      	ldr	r2, [sp, #12]
 8005058:	3304      	adds	r3, #4
 800505a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800505e:	f1b9 0f00 	cmp.w	r9, #0
 8005062:	d020      	beq.n	80050a6 <__multiply+0x13e>
 8005064:	46ae      	mov	lr, r5
 8005066:	f04f 0a00 	mov.w	sl, #0
 800506a:	6829      	ldr	r1, [r5, #0]
 800506c:	f104 0c14 	add.w	ip, r4, #20
 8005070:	f8bc b000 	ldrh.w	fp, [ip]
 8005074:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005078:	b289      	uxth	r1, r1
 800507a:	fb09 220b 	mla	r2, r9, fp, r2
 800507e:	4492      	add	sl, r2
 8005080:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005084:	f84e 1b04 	str.w	r1, [lr], #4
 8005088:	f85c 2b04 	ldr.w	r2, [ip], #4
 800508c:	f8be 1000 	ldrh.w	r1, [lr]
 8005090:	0c12      	lsrs	r2, r2, #16
 8005092:	fb09 1102 	mla	r1, r9, r2, r1
 8005096:	4567      	cmp	r7, ip
 8005098:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800509c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050a0:	d8e6      	bhi.n	8005070 <__multiply+0x108>
 80050a2:	9a01      	ldr	r2, [sp, #4]
 80050a4:	50a9      	str	r1, [r5, r2]
 80050a6:	3504      	adds	r5, #4
 80050a8:	e79b      	b.n	8004fe2 <__multiply+0x7a>
 80050aa:	3e01      	subs	r6, #1
 80050ac:	e79d      	b.n	8004fea <__multiply+0x82>
 80050ae:	bf00      	nop
 80050b0:	08006607 	.word	0x08006607
 80050b4:	08006618 	.word	0x08006618

080050b8 <__pow5mult>:
 80050b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050bc:	4615      	mov	r5, r2
 80050be:	f012 0203 	ands.w	r2, r2, #3
 80050c2:	4606      	mov	r6, r0
 80050c4:	460f      	mov	r7, r1
 80050c6:	d007      	beq.n	80050d8 <__pow5mult+0x20>
 80050c8:	4c25      	ldr	r4, [pc, #148]	; (8005160 <__pow5mult+0xa8>)
 80050ca:	3a01      	subs	r2, #1
 80050cc:	2300      	movs	r3, #0
 80050ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050d2:	f7ff fe9f 	bl	8004e14 <__multadd>
 80050d6:	4607      	mov	r7, r0
 80050d8:	10ad      	asrs	r5, r5, #2
 80050da:	d03d      	beq.n	8005158 <__pow5mult+0xa0>
 80050dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80050de:	b97c      	cbnz	r4, 8005100 <__pow5mult+0x48>
 80050e0:	2010      	movs	r0, #16
 80050e2:	f7ff fe1f 	bl	8004d24 <malloc>
 80050e6:	4602      	mov	r2, r0
 80050e8:	6270      	str	r0, [r6, #36]	; 0x24
 80050ea:	b928      	cbnz	r0, 80050f8 <__pow5mult+0x40>
 80050ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80050f0:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <__pow5mult+0xac>)
 80050f2:	481d      	ldr	r0, [pc, #116]	; (8005168 <__pow5mult+0xb0>)
 80050f4:	f000 fc0a 	bl	800590c <__assert_func>
 80050f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050fc:	6004      	str	r4, [r0, #0]
 80050fe:	60c4      	str	r4, [r0, #12]
 8005100:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005108:	b94c      	cbnz	r4, 800511e <__pow5mult+0x66>
 800510a:	f240 2171 	movw	r1, #625	; 0x271
 800510e:	4630      	mov	r0, r6
 8005110:	f7ff ff14 	bl	8004f3c <__i2b>
 8005114:	2300      	movs	r3, #0
 8005116:	4604      	mov	r4, r0
 8005118:	f8c8 0008 	str.w	r0, [r8, #8]
 800511c:	6003      	str	r3, [r0, #0]
 800511e:	f04f 0900 	mov.w	r9, #0
 8005122:	07eb      	lsls	r3, r5, #31
 8005124:	d50a      	bpl.n	800513c <__pow5mult+0x84>
 8005126:	4639      	mov	r1, r7
 8005128:	4622      	mov	r2, r4
 800512a:	4630      	mov	r0, r6
 800512c:	f7ff ff1c 	bl	8004f68 <__multiply>
 8005130:	4680      	mov	r8, r0
 8005132:	4639      	mov	r1, r7
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff fe4b 	bl	8004dd0 <_Bfree>
 800513a:	4647      	mov	r7, r8
 800513c:	106d      	asrs	r5, r5, #1
 800513e:	d00b      	beq.n	8005158 <__pow5mult+0xa0>
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	b938      	cbnz	r0, 8005154 <__pow5mult+0x9c>
 8005144:	4622      	mov	r2, r4
 8005146:	4621      	mov	r1, r4
 8005148:	4630      	mov	r0, r6
 800514a:	f7ff ff0d 	bl	8004f68 <__multiply>
 800514e:	6020      	str	r0, [r4, #0]
 8005150:	f8c0 9000 	str.w	r9, [r0]
 8005154:	4604      	mov	r4, r0
 8005156:	e7e4      	b.n	8005122 <__pow5mult+0x6a>
 8005158:	4638      	mov	r0, r7
 800515a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515e:	bf00      	nop
 8005160:	08006768 	.word	0x08006768
 8005164:	08006595 	.word	0x08006595
 8005168:	08006618 	.word	0x08006618

0800516c <__lshift>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	4607      	mov	r7, r0
 8005174:	4691      	mov	r9, r2
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	6849      	ldr	r1, [r1, #4]
 800517a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800517e:	68a3      	ldr	r3, [r4, #8]
 8005180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005184:	f108 0601 	add.w	r6, r8, #1
 8005188:	42b3      	cmp	r3, r6
 800518a:	db0b      	blt.n	80051a4 <__lshift+0x38>
 800518c:	4638      	mov	r0, r7
 800518e:	f7ff fddf 	bl	8004d50 <_Balloc>
 8005192:	4605      	mov	r5, r0
 8005194:	b948      	cbnz	r0, 80051aa <__lshift+0x3e>
 8005196:	4602      	mov	r2, r0
 8005198:	f240 11d9 	movw	r1, #473	; 0x1d9
 800519c:	4b29      	ldr	r3, [pc, #164]	; (8005244 <__lshift+0xd8>)
 800519e:	482a      	ldr	r0, [pc, #168]	; (8005248 <__lshift+0xdc>)
 80051a0:	f000 fbb4 	bl	800590c <__assert_func>
 80051a4:	3101      	adds	r1, #1
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	e7ee      	b.n	8005188 <__lshift+0x1c>
 80051aa:	2300      	movs	r3, #0
 80051ac:	f100 0114 	add.w	r1, r0, #20
 80051b0:	f100 0210 	add.w	r2, r0, #16
 80051b4:	4618      	mov	r0, r3
 80051b6:	4553      	cmp	r3, sl
 80051b8:	db37      	blt.n	800522a <__lshift+0xbe>
 80051ba:	6920      	ldr	r0, [r4, #16]
 80051bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051c0:	f104 0314 	add.w	r3, r4, #20
 80051c4:	f019 091f 	ands.w	r9, r9, #31
 80051c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80051d0:	d02f      	beq.n	8005232 <__lshift+0xc6>
 80051d2:	468a      	mov	sl, r1
 80051d4:	f04f 0c00 	mov.w	ip, #0
 80051d8:	f1c9 0e20 	rsb	lr, r9, #32
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	fa02 f209 	lsl.w	r2, r2, r9
 80051e2:	ea42 020c 	orr.w	r2, r2, ip
 80051e6:	f84a 2b04 	str.w	r2, [sl], #4
 80051ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ee:	4298      	cmp	r0, r3
 80051f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80051f4:	d8f2      	bhi.n	80051dc <__lshift+0x70>
 80051f6:	1b03      	subs	r3, r0, r4
 80051f8:	3b15      	subs	r3, #21
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	3304      	adds	r3, #4
 8005200:	f104 0215 	add.w	r2, r4, #21
 8005204:	4290      	cmp	r0, r2
 8005206:	bf38      	it	cc
 8005208:	2304      	movcc	r3, #4
 800520a:	f841 c003 	str.w	ip, [r1, r3]
 800520e:	f1bc 0f00 	cmp.w	ip, #0
 8005212:	d001      	beq.n	8005218 <__lshift+0xac>
 8005214:	f108 0602 	add.w	r6, r8, #2
 8005218:	3e01      	subs	r6, #1
 800521a:	4638      	mov	r0, r7
 800521c:	4621      	mov	r1, r4
 800521e:	612e      	str	r6, [r5, #16]
 8005220:	f7ff fdd6 	bl	8004dd0 <_Bfree>
 8005224:	4628      	mov	r0, r5
 8005226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522a:	f842 0f04 	str.w	r0, [r2, #4]!
 800522e:	3301      	adds	r3, #1
 8005230:	e7c1      	b.n	80051b6 <__lshift+0x4a>
 8005232:	3904      	subs	r1, #4
 8005234:	f853 2b04 	ldr.w	r2, [r3], #4
 8005238:	4298      	cmp	r0, r3
 800523a:	f841 2f04 	str.w	r2, [r1, #4]!
 800523e:	d8f9      	bhi.n	8005234 <__lshift+0xc8>
 8005240:	e7ea      	b.n	8005218 <__lshift+0xac>
 8005242:	bf00      	nop
 8005244:	08006607 	.word	0x08006607
 8005248:	08006618 	.word	0x08006618

0800524c <__mcmp>:
 800524c:	4603      	mov	r3, r0
 800524e:	690a      	ldr	r2, [r1, #16]
 8005250:	6900      	ldr	r0, [r0, #16]
 8005252:	b530      	push	{r4, r5, lr}
 8005254:	1a80      	subs	r0, r0, r2
 8005256:	d10d      	bne.n	8005274 <__mcmp+0x28>
 8005258:	3314      	adds	r3, #20
 800525a:	3114      	adds	r1, #20
 800525c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800526c:	4295      	cmp	r5, r2
 800526e:	d002      	beq.n	8005276 <__mcmp+0x2a>
 8005270:	d304      	bcc.n	800527c <__mcmp+0x30>
 8005272:	2001      	movs	r0, #1
 8005274:	bd30      	pop	{r4, r5, pc}
 8005276:	42a3      	cmp	r3, r4
 8005278:	d3f4      	bcc.n	8005264 <__mcmp+0x18>
 800527a:	e7fb      	b.n	8005274 <__mcmp+0x28>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005280:	e7f8      	b.n	8005274 <__mcmp+0x28>
	...

08005284 <__mdiff>:
 8005284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	460d      	mov	r5, r1
 800528a:	4607      	mov	r7, r0
 800528c:	4611      	mov	r1, r2
 800528e:	4628      	mov	r0, r5
 8005290:	4614      	mov	r4, r2
 8005292:	f7ff ffdb 	bl	800524c <__mcmp>
 8005296:	1e06      	subs	r6, r0, #0
 8005298:	d111      	bne.n	80052be <__mdiff+0x3a>
 800529a:	4631      	mov	r1, r6
 800529c:	4638      	mov	r0, r7
 800529e:	f7ff fd57 	bl	8004d50 <_Balloc>
 80052a2:	4602      	mov	r2, r0
 80052a4:	b928      	cbnz	r0, 80052b2 <__mdiff+0x2e>
 80052a6:	f240 2132 	movw	r1, #562	; 0x232
 80052aa:	4b3a      	ldr	r3, [pc, #232]	; (8005394 <__mdiff+0x110>)
 80052ac:	483a      	ldr	r0, [pc, #232]	; (8005398 <__mdiff+0x114>)
 80052ae:	f000 fb2d 	bl	800590c <__assert_func>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80052b8:	4610      	mov	r0, r2
 80052ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052be:	bfa4      	itt	ge
 80052c0:	4623      	movge	r3, r4
 80052c2:	462c      	movge	r4, r5
 80052c4:	4638      	mov	r0, r7
 80052c6:	6861      	ldr	r1, [r4, #4]
 80052c8:	bfa6      	itte	ge
 80052ca:	461d      	movge	r5, r3
 80052cc:	2600      	movge	r6, #0
 80052ce:	2601      	movlt	r6, #1
 80052d0:	f7ff fd3e 	bl	8004d50 <_Balloc>
 80052d4:	4602      	mov	r2, r0
 80052d6:	b918      	cbnz	r0, 80052e0 <__mdiff+0x5c>
 80052d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80052dc:	4b2d      	ldr	r3, [pc, #180]	; (8005394 <__mdiff+0x110>)
 80052de:	e7e5      	b.n	80052ac <__mdiff+0x28>
 80052e0:	f102 0814 	add.w	r8, r2, #20
 80052e4:	46c2      	mov	sl, r8
 80052e6:	f04f 0c00 	mov.w	ip, #0
 80052ea:	6927      	ldr	r7, [r4, #16]
 80052ec:	60c6      	str	r6, [r0, #12]
 80052ee:	692e      	ldr	r6, [r5, #16]
 80052f0:	f104 0014 	add.w	r0, r4, #20
 80052f4:	f105 0914 	add.w	r9, r5, #20
 80052f8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80052fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005300:	3410      	adds	r4, #16
 8005302:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005306:	f859 3b04 	ldr.w	r3, [r9], #4
 800530a:	fa1f f18b 	uxth.w	r1, fp
 800530e:	448c      	add	ip, r1
 8005310:	b299      	uxth	r1, r3
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	ebac 0101 	sub.w	r1, ip, r1
 8005318:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800531c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005320:	b289      	uxth	r1, r1
 8005322:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005326:	454e      	cmp	r6, r9
 8005328:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800532c:	f84a 3b04 	str.w	r3, [sl], #4
 8005330:	d8e7      	bhi.n	8005302 <__mdiff+0x7e>
 8005332:	1b73      	subs	r3, r6, r5
 8005334:	3b15      	subs	r3, #21
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	3515      	adds	r5, #21
 800533c:	3304      	adds	r3, #4
 800533e:	42ae      	cmp	r6, r5
 8005340:	bf38      	it	cc
 8005342:	2304      	movcc	r3, #4
 8005344:	4418      	add	r0, r3
 8005346:	4443      	add	r3, r8
 8005348:	461e      	mov	r6, r3
 800534a:	4605      	mov	r5, r0
 800534c:	4575      	cmp	r5, lr
 800534e:	d30e      	bcc.n	800536e <__mdiff+0xea>
 8005350:	f10e 0103 	add.w	r1, lr, #3
 8005354:	1a09      	subs	r1, r1, r0
 8005356:	f021 0103 	bic.w	r1, r1, #3
 800535a:	3803      	subs	r0, #3
 800535c:	4586      	cmp	lr, r0
 800535e:	bf38      	it	cc
 8005360:	2100      	movcc	r1, #0
 8005362:	4419      	add	r1, r3
 8005364:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005368:	b18b      	cbz	r3, 800538e <__mdiff+0x10a>
 800536a:	6117      	str	r7, [r2, #16]
 800536c:	e7a4      	b.n	80052b8 <__mdiff+0x34>
 800536e:	f855 8b04 	ldr.w	r8, [r5], #4
 8005372:	fa1f f188 	uxth.w	r1, r8
 8005376:	4461      	add	r1, ip
 8005378:	140c      	asrs	r4, r1, #16
 800537a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800537e:	b289      	uxth	r1, r1
 8005380:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005384:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005388:	f846 1b04 	str.w	r1, [r6], #4
 800538c:	e7de      	b.n	800534c <__mdiff+0xc8>
 800538e:	3f01      	subs	r7, #1
 8005390:	e7e8      	b.n	8005364 <__mdiff+0xe0>
 8005392:	bf00      	nop
 8005394:	08006607 	.word	0x08006607
 8005398:	08006618 	.word	0x08006618

0800539c <__d2b>:
 800539c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80053a0:	2101      	movs	r1, #1
 80053a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80053a6:	4690      	mov	r8, r2
 80053a8:	461d      	mov	r5, r3
 80053aa:	f7ff fcd1 	bl	8004d50 <_Balloc>
 80053ae:	4604      	mov	r4, r0
 80053b0:	b930      	cbnz	r0, 80053c0 <__d2b+0x24>
 80053b2:	4602      	mov	r2, r0
 80053b4:	f240 310a 	movw	r1, #778	; 0x30a
 80053b8:	4b24      	ldr	r3, [pc, #144]	; (800544c <__d2b+0xb0>)
 80053ba:	4825      	ldr	r0, [pc, #148]	; (8005450 <__d2b+0xb4>)
 80053bc:	f000 faa6 	bl	800590c <__assert_func>
 80053c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80053c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80053c8:	bb2d      	cbnz	r5, 8005416 <__d2b+0x7a>
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	f1b8 0300 	subs.w	r3, r8, #0
 80053d0:	d026      	beq.n	8005420 <__d2b+0x84>
 80053d2:	4668      	mov	r0, sp
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	f7ff fd83 	bl	8004ee0 <__lo0bits>
 80053da:	9900      	ldr	r1, [sp, #0]
 80053dc:	b1f0      	cbz	r0, 800541c <__d2b+0x80>
 80053de:	9a01      	ldr	r2, [sp, #4]
 80053e0:	f1c0 0320 	rsb	r3, r0, #32
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	430b      	orrs	r3, r1
 80053ea:	40c2      	lsrs	r2, r0
 80053ec:	6163      	str	r3, [r4, #20]
 80053ee:	9201      	str	r2, [sp, #4]
 80053f0:	9b01      	ldr	r3, [sp, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf14      	ite	ne
 80053f6:	2102      	movne	r1, #2
 80053f8:	2101      	moveq	r1, #1
 80053fa:	61a3      	str	r3, [r4, #24]
 80053fc:	6121      	str	r1, [r4, #16]
 80053fe:	b1c5      	cbz	r5, 8005432 <__d2b+0x96>
 8005400:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005404:	4405      	add	r5, r0
 8005406:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800540a:	603d      	str	r5, [r7, #0]
 800540c:	6030      	str	r0, [r6, #0]
 800540e:	4620      	mov	r0, r4
 8005410:	b002      	add	sp, #8
 8005412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541a:	e7d6      	b.n	80053ca <__d2b+0x2e>
 800541c:	6161      	str	r1, [r4, #20]
 800541e:	e7e7      	b.n	80053f0 <__d2b+0x54>
 8005420:	a801      	add	r0, sp, #4
 8005422:	f7ff fd5d 	bl	8004ee0 <__lo0bits>
 8005426:	2101      	movs	r1, #1
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	6121      	str	r1, [r4, #16]
 800542c:	6163      	str	r3, [r4, #20]
 800542e:	3020      	adds	r0, #32
 8005430:	e7e5      	b.n	80053fe <__d2b+0x62>
 8005432:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005436:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800543a:	6038      	str	r0, [r7, #0]
 800543c:	6918      	ldr	r0, [r3, #16]
 800543e:	f7ff fd2f 	bl	8004ea0 <__hi0bits>
 8005442:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005446:	6031      	str	r1, [r6, #0]
 8005448:	e7e1      	b.n	800540e <__d2b+0x72>
 800544a:	bf00      	nop
 800544c:	08006607 	.word	0x08006607
 8005450:	08006618 	.word	0x08006618

08005454 <_calloc_r>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	fba1 5402 	umull	r5, r4, r1, r2
 800545a:	b934      	cbnz	r4, 800546a <_calloc_r+0x16>
 800545c:	4629      	mov	r1, r5
 800545e:	f000 f875 	bl	800554c <_malloc_r>
 8005462:	4606      	mov	r6, r0
 8005464:	b928      	cbnz	r0, 8005472 <_calloc_r+0x1e>
 8005466:	4630      	mov	r0, r6
 8005468:	bd70      	pop	{r4, r5, r6, pc}
 800546a:	220c      	movs	r2, #12
 800546c:	2600      	movs	r6, #0
 800546e:	6002      	str	r2, [r0, #0]
 8005470:	e7f9      	b.n	8005466 <_calloc_r+0x12>
 8005472:	462a      	mov	r2, r5
 8005474:	4621      	mov	r1, r4
 8005476:	f7fe f94f 	bl	8003718 <memset>
 800547a:	e7f4      	b.n	8005466 <_calloc_r+0x12>

0800547c <_free_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4605      	mov	r5, r0
 8005480:	2900      	cmp	r1, #0
 8005482:	d040      	beq.n	8005506 <_free_r+0x8a>
 8005484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005488:	1f0c      	subs	r4, r1, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	bfb8      	it	lt
 800548e:	18e4      	addlt	r4, r4, r3
 8005490:	f000 fa98 	bl	80059c4 <__malloc_lock>
 8005494:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <_free_r+0x8c>)
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	b933      	cbnz	r3, 80054a8 <_free_r+0x2c>
 800549a:	6063      	str	r3, [r4, #4]
 800549c:	6014      	str	r4, [r2, #0]
 800549e:	4628      	mov	r0, r5
 80054a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054a4:	f000 ba94 	b.w	80059d0 <__malloc_unlock>
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	d908      	bls.n	80054be <_free_r+0x42>
 80054ac:	6820      	ldr	r0, [r4, #0]
 80054ae:	1821      	adds	r1, r4, r0
 80054b0:	428b      	cmp	r3, r1
 80054b2:	bf01      	itttt	eq
 80054b4:	6819      	ldreq	r1, [r3, #0]
 80054b6:	685b      	ldreq	r3, [r3, #4]
 80054b8:	1809      	addeq	r1, r1, r0
 80054ba:	6021      	streq	r1, [r4, #0]
 80054bc:	e7ed      	b.n	800549a <_free_r+0x1e>
 80054be:	461a      	mov	r2, r3
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	b10b      	cbz	r3, 80054c8 <_free_r+0x4c>
 80054c4:	42a3      	cmp	r3, r4
 80054c6:	d9fa      	bls.n	80054be <_free_r+0x42>
 80054c8:	6811      	ldr	r1, [r2, #0]
 80054ca:	1850      	adds	r0, r2, r1
 80054cc:	42a0      	cmp	r0, r4
 80054ce:	d10b      	bne.n	80054e8 <_free_r+0x6c>
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	4401      	add	r1, r0
 80054d4:	1850      	adds	r0, r2, r1
 80054d6:	4283      	cmp	r3, r0
 80054d8:	6011      	str	r1, [r2, #0]
 80054da:	d1e0      	bne.n	800549e <_free_r+0x22>
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4401      	add	r1, r0
 80054e2:	6011      	str	r1, [r2, #0]
 80054e4:	6053      	str	r3, [r2, #4]
 80054e6:	e7da      	b.n	800549e <_free_r+0x22>
 80054e8:	d902      	bls.n	80054f0 <_free_r+0x74>
 80054ea:	230c      	movs	r3, #12
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	e7d6      	b.n	800549e <_free_r+0x22>
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	1821      	adds	r1, r4, r0
 80054f4:	428b      	cmp	r3, r1
 80054f6:	bf01      	itttt	eq
 80054f8:	6819      	ldreq	r1, [r3, #0]
 80054fa:	685b      	ldreq	r3, [r3, #4]
 80054fc:	1809      	addeq	r1, r1, r0
 80054fe:	6021      	streq	r1, [r4, #0]
 8005500:	6063      	str	r3, [r4, #4]
 8005502:	6054      	str	r4, [r2, #4]
 8005504:	e7cb      	b.n	800549e <_free_r+0x22>
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	20000298 	.word	0x20000298

0800550c <sbrk_aligned>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4e0e      	ldr	r6, [pc, #56]	; (8005548 <sbrk_aligned+0x3c>)
 8005510:	460c      	mov	r4, r1
 8005512:	6831      	ldr	r1, [r6, #0]
 8005514:	4605      	mov	r5, r0
 8005516:	b911      	cbnz	r1, 800551e <sbrk_aligned+0x12>
 8005518:	f000 f9e8 	bl	80058ec <_sbrk_r>
 800551c:	6030      	str	r0, [r6, #0]
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 f9e3 	bl	80058ec <_sbrk_r>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	d00a      	beq.n	8005540 <sbrk_aligned+0x34>
 800552a:	1cc4      	adds	r4, r0, #3
 800552c:	f024 0403 	bic.w	r4, r4, #3
 8005530:	42a0      	cmp	r0, r4
 8005532:	d007      	beq.n	8005544 <sbrk_aligned+0x38>
 8005534:	1a21      	subs	r1, r4, r0
 8005536:	4628      	mov	r0, r5
 8005538:	f000 f9d8 	bl	80058ec <_sbrk_r>
 800553c:	3001      	adds	r0, #1
 800553e:	d101      	bne.n	8005544 <sbrk_aligned+0x38>
 8005540:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005544:	4620      	mov	r0, r4
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	2000029c 	.word	0x2000029c

0800554c <_malloc_r>:
 800554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005550:	1ccd      	adds	r5, r1, #3
 8005552:	f025 0503 	bic.w	r5, r5, #3
 8005556:	3508      	adds	r5, #8
 8005558:	2d0c      	cmp	r5, #12
 800555a:	bf38      	it	cc
 800555c:	250c      	movcc	r5, #12
 800555e:	2d00      	cmp	r5, #0
 8005560:	4607      	mov	r7, r0
 8005562:	db01      	blt.n	8005568 <_malloc_r+0x1c>
 8005564:	42a9      	cmp	r1, r5
 8005566:	d905      	bls.n	8005574 <_malloc_r+0x28>
 8005568:	230c      	movs	r3, #12
 800556a:	2600      	movs	r6, #0
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4630      	mov	r0, r6
 8005570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005574:	4e2e      	ldr	r6, [pc, #184]	; (8005630 <_malloc_r+0xe4>)
 8005576:	f000 fa25 	bl	80059c4 <__malloc_lock>
 800557a:	6833      	ldr	r3, [r6, #0]
 800557c:	461c      	mov	r4, r3
 800557e:	bb34      	cbnz	r4, 80055ce <_malloc_r+0x82>
 8005580:	4629      	mov	r1, r5
 8005582:	4638      	mov	r0, r7
 8005584:	f7ff ffc2 	bl	800550c <sbrk_aligned>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	4604      	mov	r4, r0
 800558c:	d14d      	bne.n	800562a <_malloc_r+0xde>
 800558e:	6834      	ldr	r4, [r6, #0]
 8005590:	4626      	mov	r6, r4
 8005592:	2e00      	cmp	r6, #0
 8005594:	d140      	bne.n	8005618 <_malloc_r+0xcc>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4631      	mov	r1, r6
 800559a:	4638      	mov	r0, r7
 800559c:	eb04 0803 	add.w	r8, r4, r3
 80055a0:	f000 f9a4 	bl	80058ec <_sbrk_r>
 80055a4:	4580      	cmp	r8, r0
 80055a6:	d13a      	bne.n	800561e <_malloc_r+0xd2>
 80055a8:	6821      	ldr	r1, [r4, #0]
 80055aa:	3503      	adds	r5, #3
 80055ac:	1a6d      	subs	r5, r5, r1
 80055ae:	f025 0503 	bic.w	r5, r5, #3
 80055b2:	3508      	adds	r5, #8
 80055b4:	2d0c      	cmp	r5, #12
 80055b6:	bf38      	it	cc
 80055b8:	250c      	movcc	r5, #12
 80055ba:	4638      	mov	r0, r7
 80055bc:	4629      	mov	r1, r5
 80055be:	f7ff ffa5 	bl	800550c <sbrk_aligned>
 80055c2:	3001      	adds	r0, #1
 80055c4:	d02b      	beq.n	800561e <_malloc_r+0xd2>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	442b      	add	r3, r5
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	e00e      	b.n	80055ec <_malloc_r+0xa0>
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	1b52      	subs	r2, r2, r5
 80055d2:	d41e      	bmi.n	8005612 <_malloc_r+0xc6>
 80055d4:	2a0b      	cmp	r2, #11
 80055d6:	d916      	bls.n	8005606 <_malloc_r+0xba>
 80055d8:	1961      	adds	r1, r4, r5
 80055da:	42a3      	cmp	r3, r4
 80055dc:	6025      	str	r5, [r4, #0]
 80055de:	bf18      	it	ne
 80055e0:	6059      	strne	r1, [r3, #4]
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	bf08      	it	eq
 80055e6:	6031      	streq	r1, [r6, #0]
 80055e8:	5162      	str	r2, [r4, r5]
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	4638      	mov	r0, r7
 80055ee:	f104 060b 	add.w	r6, r4, #11
 80055f2:	f000 f9ed 	bl	80059d0 <__malloc_unlock>
 80055f6:	f026 0607 	bic.w	r6, r6, #7
 80055fa:	1d23      	adds	r3, r4, #4
 80055fc:	1af2      	subs	r2, r6, r3
 80055fe:	d0b6      	beq.n	800556e <_malloc_r+0x22>
 8005600:	1b9b      	subs	r3, r3, r6
 8005602:	50a3      	str	r3, [r4, r2]
 8005604:	e7b3      	b.n	800556e <_malloc_r+0x22>
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	42a3      	cmp	r3, r4
 800560a:	bf0c      	ite	eq
 800560c:	6032      	streq	r2, [r6, #0]
 800560e:	605a      	strne	r2, [r3, #4]
 8005610:	e7ec      	b.n	80055ec <_malloc_r+0xa0>
 8005612:	4623      	mov	r3, r4
 8005614:	6864      	ldr	r4, [r4, #4]
 8005616:	e7b2      	b.n	800557e <_malloc_r+0x32>
 8005618:	4634      	mov	r4, r6
 800561a:	6876      	ldr	r6, [r6, #4]
 800561c:	e7b9      	b.n	8005592 <_malloc_r+0x46>
 800561e:	230c      	movs	r3, #12
 8005620:	4638      	mov	r0, r7
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	f000 f9d4 	bl	80059d0 <__malloc_unlock>
 8005628:	e7a1      	b.n	800556e <_malloc_r+0x22>
 800562a:	6025      	str	r5, [r4, #0]
 800562c:	e7de      	b.n	80055ec <_malloc_r+0xa0>
 800562e:	bf00      	nop
 8005630:	20000298 	.word	0x20000298

08005634 <__ssputs_r>:
 8005634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	688e      	ldr	r6, [r1, #8]
 800563a:	4682      	mov	sl, r0
 800563c:	429e      	cmp	r6, r3
 800563e:	460c      	mov	r4, r1
 8005640:	4690      	mov	r8, r2
 8005642:	461f      	mov	r7, r3
 8005644:	d838      	bhi.n	80056b8 <__ssputs_r+0x84>
 8005646:	898a      	ldrh	r2, [r1, #12]
 8005648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800564c:	d032      	beq.n	80056b4 <__ssputs_r+0x80>
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	6909      	ldr	r1, [r1, #16]
 8005652:	3301      	adds	r3, #1
 8005654:	eba5 0901 	sub.w	r9, r5, r1
 8005658:	6965      	ldr	r5, [r4, #20]
 800565a:	444b      	add	r3, r9
 800565c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005664:	106d      	asrs	r5, r5, #1
 8005666:	429d      	cmp	r5, r3
 8005668:	bf38      	it	cc
 800566a:	461d      	movcc	r5, r3
 800566c:	0553      	lsls	r3, r2, #21
 800566e:	d531      	bpl.n	80056d4 <__ssputs_r+0xa0>
 8005670:	4629      	mov	r1, r5
 8005672:	f7ff ff6b 	bl	800554c <_malloc_r>
 8005676:	4606      	mov	r6, r0
 8005678:	b950      	cbnz	r0, 8005690 <__ssputs_r+0x5c>
 800567a:	230c      	movs	r3, #12
 800567c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005680:	f8ca 3000 	str.w	r3, [sl]
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	464a      	mov	r2, r9
 8005692:	6921      	ldr	r1, [r4, #16]
 8005694:	f7fe f832 	bl	80036fc <memcpy>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	6126      	str	r6, [r4, #16]
 80056a6:	444e      	add	r6, r9
 80056a8:	6026      	str	r6, [r4, #0]
 80056aa:	463e      	mov	r6, r7
 80056ac:	6165      	str	r5, [r4, #20]
 80056ae:	eba5 0509 	sub.w	r5, r5, r9
 80056b2:	60a5      	str	r5, [r4, #8]
 80056b4:	42be      	cmp	r6, r7
 80056b6:	d900      	bls.n	80056ba <__ssputs_r+0x86>
 80056b8:	463e      	mov	r6, r7
 80056ba:	4632      	mov	r2, r6
 80056bc:	4641      	mov	r1, r8
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	f000 f966 	bl	8005990 <memmove>
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	2000      	movs	r0, #0
 80056c8:	1b9b      	subs	r3, r3, r6
 80056ca:	60a3      	str	r3, [r4, #8]
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	4433      	add	r3, r6
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	e7db      	b.n	800568c <__ssputs_r+0x58>
 80056d4:	462a      	mov	r2, r5
 80056d6:	f000 f981 	bl	80059dc <_realloc_r>
 80056da:	4606      	mov	r6, r0
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1e1      	bne.n	80056a4 <__ssputs_r+0x70>
 80056e0:	4650      	mov	r0, sl
 80056e2:	6921      	ldr	r1, [r4, #16]
 80056e4:	f7ff feca 	bl	800547c <_free_r>
 80056e8:	e7c7      	b.n	800567a <__ssputs_r+0x46>
	...

080056ec <_svfiprintf_r>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	4698      	mov	r8, r3
 80056f2:	898b      	ldrh	r3, [r1, #12]
 80056f4:	4607      	mov	r7, r0
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	460d      	mov	r5, r1
 80056fa:	4614      	mov	r4, r2
 80056fc:	b09d      	sub	sp, #116	; 0x74
 80056fe:	d50e      	bpl.n	800571e <_svfiprintf_r+0x32>
 8005700:	690b      	ldr	r3, [r1, #16]
 8005702:	b963      	cbnz	r3, 800571e <_svfiprintf_r+0x32>
 8005704:	2140      	movs	r1, #64	; 0x40
 8005706:	f7ff ff21 	bl	800554c <_malloc_r>
 800570a:	6028      	str	r0, [r5, #0]
 800570c:	6128      	str	r0, [r5, #16]
 800570e:	b920      	cbnz	r0, 800571a <_svfiprintf_r+0x2e>
 8005710:	230c      	movs	r3, #12
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005718:	e0d1      	b.n	80058be <_svfiprintf_r+0x1d2>
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	616b      	str	r3, [r5, #20]
 800571e:	2300      	movs	r3, #0
 8005720:	9309      	str	r3, [sp, #36]	; 0x24
 8005722:	2320      	movs	r3, #32
 8005724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005728:	2330      	movs	r3, #48	; 0x30
 800572a:	f04f 0901 	mov.w	r9, #1
 800572e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005732:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058d8 <_svfiprintf_r+0x1ec>
 8005736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800573a:	4623      	mov	r3, r4
 800573c:	469a      	mov	sl, r3
 800573e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005742:	b10a      	cbz	r2, 8005748 <_svfiprintf_r+0x5c>
 8005744:	2a25      	cmp	r2, #37	; 0x25
 8005746:	d1f9      	bne.n	800573c <_svfiprintf_r+0x50>
 8005748:	ebba 0b04 	subs.w	fp, sl, r4
 800574c:	d00b      	beq.n	8005766 <_svfiprintf_r+0x7a>
 800574e:	465b      	mov	r3, fp
 8005750:	4622      	mov	r2, r4
 8005752:	4629      	mov	r1, r5
 8005754:	4638      	mov	r0, r7
 8005756:	f7ff ff6d 	bl	8005634 <__ssputs_r>
 800575a:	3001      	adds	r0, #1
 800575c:	f000 80aa 	beq.w	80058b4 <_svfiprintf_r+0x1c8>
 8005760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005762:	445a      	add	r2, fp
 8005764:	9209      	str	r2, [sp, #36]	; 0x24
 8005766:	f89a 3000 	ldrb.w	r3, [sl]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a2 	beq.w	80058b4 <_svfiprintf_r+0x1c8>
 8005770:	2300      	movs	r3, #0
 8005772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800577a:	f10a 0a01 	add.w	sl, sl, #1
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	9307      	str	r3, [sp, #28]
 8005782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005786:	931a      	str	r3, [sp, #104]	; 0x68
 8005788:	4654      	mov	r4, sl
 800578a:	2205      	movs	r2, #5
 800578c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005790:	4851      	ldr	r0, [pc, #324]	; (80058d8 <_svfiprintf_r+0x1ec>)
 8005792:	f7ff facf 	bl	8004d34 <memchr>
 8005796:	9a04      	ldr	r2, [sp, #16]
 8005798:	b9d8      	cbnz	r0, 80057d2 <_svfiprintf_r+0xe6>
 800579a:	06d0      	lsls	r0, r2, #27
 800579c:	bf44      	itt	mi
 800579e:	2320      	movmi	r3, #32
 80057a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a4:	0711      	lsls	r1, r2, #28
 80057a6:	bf44      	itt	mi
 80057a8:	232b      	movmi	r3, #43	; 0x2b
 80057aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ae:	f89a 3000 	ldrb.w	r3, [sl]
 80057b2:	2b2a      	cmp	r3, #42	; 0x2a
 80057b4:	d015      	beq.n	80057e2 <_svfiprintf_r+0xf6>
 80057b6:	4654      	mov	r4, sl
 80057b8:	2000      	movs	r0, #0
 80057ba:	f04f 0c0a 	mov.w	ip, #10
 80057be:	9a07      	ldr	r2, [sp, #28]
 80057c0:	4621      	mov	r1, r4
 80057c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057c6:	3b30      	subs	r3, #48	; 0x30
 80057c8:	2b09      	cmp	r3, #9
 80057ca:	d94e      	bls.n	800586a <_svfiprintf_r+0x17e>
 80057cc:	b1b0      	cbz	r0, 80057fc <_svfiprintf_r+0x110>
 80057ce:	9207      	str	r2, [sp, #28]
 80057d0:	e014      	b.n	80057fc <_svfiprintf_r+0x110>
 80057d2:	eba0 0308 	sub.w	r3, r0, r8
 80057d6:	fa09 f303 	lsl.w	r3, r9, r3
 80057da:	4313      	orrs	r3, r2
 80057dc:	46a2      	mov	sl, r4
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	e7d2      	b.n	8005788 <_svfiprintf_r+0x9c>
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	1d19      	adds	r1, r3, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	9103      	str	r1, [sp, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bfbb      	ittet	lt
 80057ee:	425b      	neglt	r3, r3
 80057f0:	f042 0202 	orrlt.w	r2, r2, #2
 80057f4:	9307      	strge	r3, [sp, #28]
 80057f6:	9307      	strlt	r3, [sp, #28]
 80057f8:	bfb8      	it	lt
 80057fa:	9204      	strlt	r2, [sp, #16]
 80057fc:	7823      	ldrb	r3, [r4, #0]
 80057fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005800:	d10c      	bne.n	800581c <_svfiprintf_r+0x130>
 8005802:	7863      	ldrb	r3, [r4, #1]
 8005804:	2b2a      	cmp	r3, #42	; 0x2a
 8005806:	d135      	bne.n	8005874 <_svfiprintf_r+0x188>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	3402      	adds	r4, #2
 800580c:	1d1a      	adds	r2, r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	9203      	str	r2, [sp, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfb8      	it	lt
 8005816:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80058dc <_svfiprintf_r+0x1f0>
 8005820:	2203      	movs	r2, #3
 8005822:	4650      	mov	r0, sl
 8005824:	7821      	ldrb	r1, [r4, #0]
 8005826:	f7ff fa85 	bl	8004d34 <memchr>
 800582a:	b140      	cbz	r0, 800583e <_svfiprintf_r+0x152>
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	eba0 000a 	sub.w	r0, r0, sl
 8005832:	fa03 f000 	lsl.w	r0, r3, r0
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	3401      	adds	r4, #1
 800583a:	4303      	orrs	r3, r0
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005842:	2206      	movs	r2, #6
 8005844:	4826      	ldr	r0, [pc, #152]	; (80058e0 <_svfiprintf_r+0x1f4>)
 8005846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800584a:	f7ff fa73 	bl	8004d34 <memchr>
 800584e:	2800      	cmp	r0, #0
 8005850:	d038      	beq.n	80058c4 <_svfiprintf_r+0x1d8>
 8005852:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <_svfiprintf_r+0x1f8>)
 8005854:	bb1b      	cbnz	r3, 800589e <_svfiprintf_r+0x1b2>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	3307      	adds	r3, #7
 800585a:	f023 0307 	bic.w	r3, r3, #7
 800585e:	3308      	adds	r3, #8
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005864:	4433      	add	r3, r6
 8005866:	9309      	str	r3, [sp, #36]	; 0x24
 8005868:	e767      	b.n	800573a <_svfiprintf_r+0x4e>
 800586a:	460c      	mov	r4, r1
 800586c:	2001      	movs	r0, #1
 800586e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005872:	e7a5      	b.n	80057c0 <_svfiprintf_r+0xd4>
 8005874:	2300      	movs	r3, #0
 8005876:	f04f 0c0a 	mov.w	ip, #10
 800587a:	4619      	mov	r1, r3
 800587c:	3401      	adds	r4, #1
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	4620      	mov	r0, r4
 8005882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005886:	3a30      	subs	r2, #48	; 0x30
 8005888:	2a09      	cmp	r2, #9
 800588a:	d903      	bls.n	8005894 <_svfiprintf_r+0x1a8>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0c5      	beq.n	800581c <_svfiprintf_r+0x130>
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	e7c3      	b.n	800581c <_svfiprintf_r+0x130>
 8005894:	4604      	mov	r4, r0
 8005896:	2301      	movs	r3, #1
 8005898:	fb0c 2101 	mla	r1, ip, r1, r2
 800589c:	e7f0      	b.n	8005880 <_svfiprintf_r+0x194>
 800589e:	ab03      	add	r3, sp, #12
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	462a      	mov	r2, r5
 80058a4:	4638      	mov	r0, r7
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <_svfiprintf_r+0x1fc>)
 80058a8:	a904      	add	r1, sp, #16
 80058aa:	f7fd ffdb 	bl	8003864 <_printf_float>
 80058ae:	1c42      	adds	r2, r0, #1
 80058b0:	4606      	mov	r6, r0
 80058b2:	d1d6      	bne.n	8005862 <_svfiprintf_r+0x176>
 80058b4:	89ab      	ldrh	r3, [r5, #12]
 80058b6:	065b      	lsls	r3, r3, #25
 80058b8:	f53f af2c 	bmi.w	8005714 <_svfiprintf_r+0x28>
 80058bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058be:	b01d      	add	sp, #116	; 0x74
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	ab03      	add	r3, sp, #12
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4638      	mov	r0, r7
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <_svfiprintf_r+0x1fc>)
 80058ce:	a904      	add	r1, sp, #16
 80058d0:	f7fe fa64 	bl	8003d9c <_printf_i>
 80058d4:	e7eb      	b.n	80058ae <_svfiprintf_r+0x1c2>
 80058d6:	bf00      	nop
 80058d8:	08006774 	.word	0x08006774
 80058dc:	0800677a 	.word	0x0800677a
 80058e0:	0800677e 	.word	0x0800677e
 80058e4:	08003865 	.word	0x08003865
 80058e8:	08005635 	.word	0x08005635

080058ec <_sbrk_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	2300      	movs	r3, #0
 80058f0:	4d05      	ldr	r5, [pc, #20]	; (8005908 <_sbrk_r+0x1c>)
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fb ff6c 	bl	80017d4 <_sbrk>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_sbrk_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_sbrk_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	200002a0 	.word	0x200002a0

0800590c <__assert_func>:
 800590c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800590e:	4614      	mov	r4, r2
 8005910:	461a      	mov	r2, r3
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <__assert_func+0x2c>)
 8005914:	4605      	mov	r5, r0
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68d8      	ldr	r0, [r3, #12]
 800591a:	b14c      	cbz	r4, 8005930 <__assert_func+0x24>
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <__assert_func+0x30>)
 800591e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005922:	9100      	str	r1, [sp, #0]
 8005924:	462b      	mov	r3, r5
 8005926:	4906      	ldr	r1, [pc, #24]	; (8005940 <__assert_func+0x34>)
 8005928:	f000 f80e 	bl	8005948 <fiprintf>
 800592c:	f000 faaa 	bl	8005e84 <abort>
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <__assert_func+0x38>)
 8005932:	461c      	mov	r4, r3
 8005934:	e7f3      	b.n	800591e <__assert_func+0x12>
 8005936:	bf00      	nop
 8005938:	2000000c 	.word	0x2000000c
 800593c:	08006785 	.word	0x08006785
 8005940:	08006792 	.word	0x08006792
 8005944:	080067c0 	.word	0x080067c0

08005948 <fiprintf>:
 8005948:	b40e      	push	{r1, r2, r3}
 800594a:	b503      	push	{r0, r1, lr}
 800594c:	4601      	mov	r1, r0
 800594e:	ab03      	add	r3, sp, #12
 8005950:	4805      	ldr	r0, [pc, #20]	; (8005968 <fiprintf+0x20>)
 8005952:	f853 2b04 	ldr.w	r2, [r3], #4
 8005956:	6800      	ldr	r0, [r0, #0]
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	f000 f895 	bl	8005a88 <_vfiprintf_r>
 800595e:	b002      	add	sp, #8
 8005960:	f85d eb04 	ldr.w	lr, [sp], #4
 8005964:	b003      	add	sp, #12
 8005966:	4770      	bx	lr
 8005968:	2000000c 	.word	0x2000000c

0800596c <__ascii_mbtowc>:
 800596c:	b082      	sub	sp, #8
 800596e:	b901      	cbnz	r1, 8005972 <__ascii_mbtowc+0x6>
 8005970:	a901      	add	r1, sp, #4
 8005972:	b142      	cbz	r2, 8005986 <__ascii_mbtowc+0x1a>
 8005974:	b14b      	cbz	r3, 800598a <__ascii_mbtowc+0x1e>
 8005976:	7813      	ldrb	r3, [r2, #0]
 8005978:	600b      	str	r3, [r1, #0]
 800597a:	7812      	ldrb	r2, [r2, #0]
 800597c:	1e10      	subs	r0, r2, #0
 800597e:	bf18      	it	ne
 8005980:	2001      	movne	r0, #1
 8005982:	b002      	add	sp, #8
 8005984:	4770      	bx	lr
 8005986:	4610      	mov	r0, r2
 8005988:	e7fb      	b.n	8005982 <__ascii_mbtowc+0x16>
 800598a:	f06f 0001 	mvn.w	r0, #1
 800598e:	e7f8      	b.n	8005982 <__ascii_mbtowc+0x16>

08005990 <memmove>:
 8005990:	4288      	cmp	r0, r1
 8005992:	b510      	push	{r4, lr}
 8005994:	eb01 0402 	add.w	r4, r1, r2
 8005998:	d902      	bls.n	80059a0 <memmove+0x10>
 800599a:	4284      	cmp	r4, r0
 800599c:	4623      	mov	r3, r4
 800599e:	d807      	bhi.n	80059b0 <memmove+0x20>
 80059a0:	1e43      	subs	r3, r0, #1
 80059a2:	42a1      	cmp	r1, r4
 80059a4:	d008      	beq.n	80059b8 <memmove+0x28>
 80059a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ae:	e7f8      	b.n	80059a2 <memmove+0x12>
 80059b0:	4601      	mov	r1, r0
 80059b2:	4402      	add	r2, r0
 80059b4:	428a      	cmp	r2, r1
 80059b6:	d100      	bne.n	80059ba <memmove+0x2a>
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059c2:	e7f7      	b.n	80059b4 <memmove+0x24>

080059c4 <__malloc_lock>:
 80059c4:	4801      	ldr	r0, [pc, #4]	; (80059cc <__malloc_lock+0x8>)
 80059c6:	f000 bc19 	b.w	80061fc <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	200002a4 	.word	0x200002a4

080059d0 <__malloc_unlock>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__malloc_unlock+0x8>)
 80059d2:	f000 bc14 	b.w	80061fe <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	200002a4 	.word	0x200002a4

080059dc <_realloc_r>:
 80059dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e0:	4680      	mov	r8, r0
 80059e2:	4614      	mov	r4, r2
 80059e4:	460e      	mov	r6, r1
 80059e6:	b921      	cbnz	r1, 80059f2 <_realloc_r+0x16>
 80059e8:	4611      	mov	r1, r2
 80059ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	f7ff bdad 	b.w	800554c <_malloc_r>
 80059f2:	b92a      	cbnz	r2, 8005a00 <_realloc_r+0x24>
 80059f4:	f7ff fd42 	bl	800547c <_free_r>
 80059f8:	4625      	mov	r5, r4
 80059fa:	4628      	mov	r0, r5
 80059fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a00:	f000 fc64 	bl	80062cc <_malloc_usable_size_r>
 8005a04:	4284      	cmp	r4, r0
 8005a06:	4607      	mov	r7, r0
 8005a08:	d802      	bhi.n	8005a10 <_realloc_r+0x34>
 8005a0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a0e:	d812      	bhi.n	8005a36 <_realloc_r+0x5a>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4640      	mov	r0, r8
 8005a14:	f7ff fd9a 	bl	800554c <_malloc_r>
 8005a18:	4605      	mov	r5, r0
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d0ed      	beq.n	80059fa <_realloc_r+0x1e>
 8005a1e:	42bc      	cmp	r4, r7
 8005a20:	4622      	mov	r2, r4
 8005a22:	4631      	mov	r1, r6
 8005a24:	bf28      	it	cs
 8005a26:	463a      	movcs	r2, r7
 8005a28:	f7fd fe68 	bl	80036fc <memcpy>
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4640      	mov	r0, r8
 8005a30:	f7ff fd24 	bl	800547c <_free_r>
 8005a34:	e7e1      	b.n	80059fa <_realloc_r+0x1e>
 8005a36:	4635      	mov	r5, r6
 8005a38:	e7df      	b.n	80059fa <_realloc_r+0x1e>

08005a3a <__sfputc_r>:
 8005a3a:	6893      	ldr	r3, [r2, #8]
 8005a3c:	b410      	push	{r4}
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	6093      	str	r3, [r2, #8]
 8005a44:	da07      	bge.n	8005a56 <__sfputc_r+0x1c>
 8005a46:	6994      	ldr	r4, [r2, #24]
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	db01      	blt.n	8005a50 <__sfputc_r+0x16>
 8005a4c:	290a      	cmp	r1, #10
 8005a4e:	d102      	bne.n	8005a56 <__sfputc_r+0x1c>
 8005a50:	bc10      	pop	{r4}
 8005a52:	f000 b949 	b.w	8005ce8 <__swbuf_r>
 8005a56:	6813      	ldr	r3, [r2, #0]
 8005a58:	1c58      	adds	r0, r3, #1
 8005a5a:	6010      	str	r0, [r2, #0]
 8005a5c:	7019      	strb	r1, [r3, #0]
 8005a5e:	4608      	mov	r0, r1
 8005a60:	bc10      	pop	{r4}
 8005a62:	4770      	bx	lr

08005a64 <__sfputs_r>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	4606      	mov	r6, r0
 8005a68:	460f      	mov	r7, r1
 8005a6a:	4614      	mov	r4, r2
 8005a6c:	18d5      	adds	r5, r2, r3
 8005a6e:	42ac      	cmp	r4, r5
 8005a70:	d101      	bne.n	8005a76 <__sfputs_r+0x12>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e007      	b.n	8005a86 <__sfputs_r+0x22>
 8005a76:	463a      	mov	r2, r7
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7e:	f7ff ffdc 	bl	8005a3a <__sfputc_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	d1f3      	bne.n	8005a6e <__sfputs_r+0xa>
 8005a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a88 <_vfiprintf_r>:
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	4614      	mov	r4, r2
 8005a90:	4698      	mov	r8, r3
 8005a92:	4606      	mov	r6, r0
 8005a94:	b09d      	sub	sp, #116	; 0x74
 8005a96:	b118      	cbz	r0, 8005aa0 <_vfiprintf_r+0x18>
 8005a98:	6983      	ldr	r3, [r0, #24]
 8005a9a:	b90b      	cbnz	r3, 8005aa0 <_vfiprintf_r+0x18>
 8005a9c:	f000 fb10 	bl	80060c0 <__sinit>
 8005aa0:	4b89      	ldr	r3, [pc, #548]	; (8005cc8 <_vfiprintf_r+0x240>)
 8005aa2:	429d      	cmp	r5, r3
 8005aa4:	d11b      	bne.n	8005ade <_vfiprintf_r+0x56>
 8005aa6:	6875      	ldr	r5, [r6, #4]
 8005aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aaa:	07d9      	lsls	r1, r3, #31
 8005aac:	d405      	bmi.n	8005aba <_vfiprintf_r+0x32>
 8005aae:	89ab      	ldrh	r3, [r5, #12]
 8005ab0:	059a      	lsls	r2, r3, #22
 8005ab2:	d402      	bmi.n	8005aba <_vfiprintf_r+0x32>
 8005ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ab6:	f000 fba1 	bl	80061fc <__retarget_lock_acquire_recursive>
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	d501      	bpl.n	8005ac4 <_vfiprintf_r+0x3c>
 8005ac0:	692b      	ldr	r3, [r5, #16]
 8005ac2:	b9eb      	cbnz	r3, 8005b00 <_vfiprintf_r+0x78>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f000 f96e 	bl	8005da8 <__swsetup_r>
 8005acc:	b1c0      	cbz	r0, 8005b00 <_vfiprintf_r+0x78>
 8005ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad0:	07dc      	lsls	r4, r3, #31
 8005ad2:	d50e      	bpl.n	8005af2 <_vfiprintf_r+0x6a>
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad8:	b01d      	add	sp, #116	; 0x74
 8005ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ade:	4b7b      	ldr	r3, [pc, #492]	; (8005ccc <_vfiprintf_r+0x244>)
 8005ae0:	429d      	cmp	r5, r3
 8005ae2:	d101      	bne.n	8005ae8 <_vfiprintf_r+0x60>
 8005ae4:	68b5      	ldr	r5, [r6, #8]
 8005ae6:	e7df      	b.n	8005aa8 <_vfiprintf_r+0x20>
 8005ae8:	4b79      	ldr	r3, [pc, #484]	; (8005cd0 <_vfiprintf_r+0x248>)
 8005aea:	429d      	cmp	r5, r3
 8005aec:	bf08      	it	eq
 8005aee:	68f5      	ldreq	r5, [r6, #12]
 8005af0:	e7da      	b.n	8005aa8 <_vfiprintf_r+0x20>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	0598      	lsls	r0, r3, #22
 8005af6:	d4ed      	bmi.n	8005ad4 <_vfiprintf_r+0x4c>
 8005af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005afa:	f000 fb80 	bl	80061fe <__retarget_lock_release_recursive>
 8005afe:	e7e9      	b.n	8005ad4 <_vfiprintf_r+0x4c>
 8005b00:	2300      	movs	r3, #0
 8005b02:	9309      	str	r3, [sp, #36]	; 0x24
 8005b04:	2320      	movs	r3, #32
 8005b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b0a:	2330      	movs	r3, #48	; 0x30
 8005b0c:	f04f 0901 	mov.w	r9, #1
 8005b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005cd4 <_vfiprintf_r+0x24c>
 8005b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	469a      	mov	sl, r3
 8005b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b24:	b10a      	cbz	r2, 8005b2a <_vfiprintf_r+0xa2>
 8005b26:	2a25      	cmp	r2, #37	; 0x25
 8005b28:	d1f9      	bne.n	8005b1e <_vfiprintf_r+0x96>
 8005b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8005b2e:	d00b      	beq.n	8005b48 <_vfiprintf_r+0xc0>
 8005b30:	465b      	mov	r3, fp
 8005b32:	4622      	mov	r2, r4
 8005b34:	4629      	mov	r1, r5
 8005b36:	4630      	mov	r0, r6
 8005b38:	f7ff ff94 	bl	8005a64 <__sfputs_r>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f000 80aa 	beq.w	8005c96 <_vfiprintf_r+0x20e>
 8005b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b44:	445a      	add	r2, fp
 8005b46:	9209      	str	r2, [sp, #36]	; 0x24
 8005b48:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80a2 	beq.w	8005c96 <_vfiprintf_r+0x20e>
 8005b52:	2300      	movs	r3, #0
 8005b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b5c:	f10a 0a01 	add.w	sl, sl, #1
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b68:	931a      	str	r3, [sp, #104]	; 0x68
 8005b6a:	4654      	mov	r4, sl
 8005b6c:	2205      	movs	r2, #5
 8005b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b72:	4858      	ldr	r0, [pc, #352]	; (8005cd4 <_vfiprintf_r+0x24c>)
 8005b74:	f7ff f8de 	bl	8004d34 <memchr>
 8005b78:	9a04      	ldr	r2, [sp, #16]
 8005b7a:	b9d8      	cbnz	r0, 8005bb4 <_vfiprintf_r+0x12c>
 8005b7c:	06d1      	lsls	r1, r2, #27
 8005b7e:	bf44      	itt	mi
 8005b80:	2320      	movmi	r3, #32
 8005b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b86:	0713      	lsls	r3, r2, #28
 8005b88:	bf44      	itt	mi
 8005b8a:	232b      	movmi	r3, #43	; 0x2b
 8005b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b90:	f89a 3000 	ldrb.w	r3, [sl]
 8005b94:	2b2a      	cmp	r3, #42	; 0x2a
 8005b96:	d015      	beq.n	8005bc4 <_vfiprintf_r+0x13c>
 8005b98:	4654      	mov	r4, sl
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f04f 0c0a 	mov.w	ip, #10
 8005ba0:	9a07      	ldr	r2, [sp, #28]
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ba8:	3b30      	subs	r3, #48	; 0x30
 8005baa:	2b09      	cmp	r3, #9
 8005bac:	d94e      	bls.n	8005c4c <_vfiprintf_r+0x1c4>
 8005bae:	b1b0      	cbz	r0, 8005bde <_vfiprintf_r+0x156>
 8005bb0:	9207      	str	r2, [sp, #28]
 8005bb2:	e014      	b.n	8005bde <_vfiprintf_r+0x156>
 8005bb4:	eba0 0308 	sub.w	r3, r0, r8
 8005bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	46a2      	mov	sl, r4
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	e7d2      	b.n	8005b6a <_vfiprintf_r+0xe2>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	1d19      	adds	r1, r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	9103      	str	r1, [sp, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bfbb      	ittet	lt
 8005bd0:	425b      	neglt	r3, r3
 8005bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd6:	9307      	strge	r3, [sp, #28]
 8005bd8:	9307      	strlt	r3, [sp, #28]
 8005bda:	bfb8      	it	lt
 8005bdc:	9204      	strlt	r2, [sp, #16]
 8005bde:	7823      	ldrb	r3, [r4, #0]
 8005be0:	2b2e      	cmp	r3, #46	; 0x2e
 8005be2:	d10c      	bne.n	8005bfe <_vfiprintf_r+0x176>
 8005be4:	7863      	ldrb	r3, [r4, #1]
 8005be6:	2b2a      	cmp	r3, #42	; 0x2a
 8005be8:	d135      	bne.n	8005c56 <_vfiprintf_r+0x1ce>
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	3402      	adds	r4, #2
 8005bee:	1d1a      	adds	r2, r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	9203      	str	r2, [sp, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bfb8      	it	lt
 8005bf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005cd8 <_vfiprintf_r+0x250>
 8005c02:	2203      	movs	r2, #3
 8005c04:	4650      	mov	r0, sl
 8005c06:	7821      	ldrb	r1, [r4, #0]
 8005c08:	f7ff f894 	bl	8004d34 <memchr>
 8005c0c:	b140      	cbz	r0, 8005c20 <_vfiprintf_r+0x198>
 8005c0e:	2340      	movs	r3, #64	; 0x40
 8005c10:	eba0 000a 	sub.w	r0, r0, sl
 8005c14:	fa03 f000 	lsl.w	r0, r3, r0
 8005c18:	9b04      	ldr	r3, [sp, #16]
 8005c1a:	3401      	adds	r4, #1
 8005c1c:	4303      	orrs	r3, r0
 8005c1e:	9304      	str	r3, [sp, #16]
 8005c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c24:	2206      	movs	r2, #6
 8005c26:	482d      	ldr	r0, [pc, #180]	; (8005cdc <_vfiprintf_r+0x254>)
 8005c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c2c:	f7ff f882 	bl	8004d34 <memchr>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d03f      	beq.n	8005cb4 <_vfiprintf_r+0x22c>
 8005c34:	4b2a      	ldr	r3, [pc, #168]	; (8005ce0 <_vfiprintf_r+0x258>)
 8005c36:	bb1b      	cbnz	r3, 8005c80 <_vfiprintf_r+0x1f8>
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	3307      	adds	r3, #7
 8005c3c:	f023 0307 	bic.w	r3, r3, #7
 8005c40:	3308      	adds	r3, #8
 8005c42:	9303      	str	r3, [sp, #12]
 8005c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c46:	443b      	add	r3, r7
 8005c48:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4a:	e767      	b.n	8005b1c <_vfiprintf_r+0x94>
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	2001      	movs	r0, #1
 8005c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c54:	e7a5      	b.n	8005ba2 <_vfiprintf_r+0x11a>
 8005c56:	2300      	movs	r3, #0
 8005c58:	f04f 0c0a 	mov.w	ip, #10
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	3401      	adds	r4, #1
 8005c60:	9305      	str	r3, [sp, #20]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c68:	3a30      	subs	r2, #48	; 0x30
 8005c6a:	2a09      	cmp	r2, #9
 8005c6c:	d903      	bls.n	8005c76 <_vfiprintf_r+0x1ee>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0c5      	beq.n	8005bfe <_vfiprintf_r+0x176>
 8005c72:	9105      	str	r1, [sp, #20]
 8005c74:	e7c3      	b.n	8005bfe <_vfiprintf_r+0x176>
 8005c76:	4604      	mov	r4, r0
 8005c78:	2301      	movs	r3, #1
 8005c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c7e:	e7f0      	b.n	8005c62 <_vfiprintf_r+0x1da>
 8005c80:	ab03      	add	r3, sp, #12
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	462a      	mov	r2, r5
 8005c86:	4630      	mov	r0, r6
 8005c88:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <_vfiprintf_r+0x25c>)
 8005c8a:	a904      	add	r1, sp, #16
 8005c8c:	f7fd fdea 	bl	8003864 <_printf_float>
 8005c90:	4607      	mov	r7, r0
 8005c92:	1c78      	adds	r0, r7, #1
 8005c94:	d1d6      	bne.n	8005c44 <_vfiprintf_r+0x1bc>
 8005c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c98:	07d9      	lsls	r1, r3, #31
 8005c9a:	d405      	bmi.n	8005ca8 <_vfiprintf_r+0x220>
 8005c9c:	89ab      	ldrh	r3, [r5, #12]
 8005c9e:	059a      	lsls	r2, r3, #22
 8005ca0:	d402      	bmi.n	8005ca8 <_vfiprintf_r+0x220>
 8005ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ca4:	f000 faab 	bl	80061fe <__retarget_lock_release_recursive>
 8005ca8:	89ab      	ldrh	r3, [r5, #12]
 8005caa:	065b      	lsls	r3, r3, #25
 8005cac:	f53f af12 	bmi.w	8005ad4 <_vfiprintf_r+0x4c>
 8005cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cb2:	e711      	b.n	8005ad8 <_vfiprintf_r+0x50>
 8005cb4:	ab03      	add	r3, sp, #12
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	462a      	mov	r2, r5
 8005cba:	4630      	mov	r0, r6
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <_vfiprintf_r+0x25c>)
 8005cbe:	a904      	add	r1, sp, #16
 8005cc0:	f7fe f86c 	bl	8003d9c <_printf_i>
 8005cc4:	e7e4      	b.n	8005c90 <_vfiprintf_r+0x208>
 8005cc6:	bf00      	nop
 8005cc8:	080068ec 	.word	0x080068ec
 8005ccc:	0800690c 	.word	0x0800690c
 8005cd0:	080068cc 	.word	0x080068cc
 8005cd4:	08006774 	.word	0x08006774
 8005cd8:	0800677a 	.word	0x0800677a
 8005cdc:	0800677e 	.word	0x0800677e
 8005ce0:	08003865 	.word	0x08003865
 8005ce4:	08005a65 	.word	0x08005a65

08005ce8 <__swbuf_r>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	460e      	mov	r6, r1
 8005cec:	4614      	mov	r4, r2
 8005cee:	4605      	mov	r5, r0
 8005cf0:	b118      	cbz	r0, 8005cfa <__swbuf_r+0x12>
 8005cf2:	6983      	ldr	r3, [r0, #24]
 8005cf4:	b90b      	cbnz	r3, 8005cfa <__swbuf_r+0x12>
 8005cf6:	f000 f9e3 	bl	80060c0 <__sinit>
 8005cfa:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <__swbuf_r+0x98>)
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	d12b      	bne.n	8005d58 <__swbuf_r+0x70>
 8005d00:	686c      	ldr	r4, [r5, #4]
 8005d02:	69a3      	ldr	r3, [r4, #24]
 8005d04:	60a3      	str	r3, [r4, #8]
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	071a      	lsls	r2, r3, #28
 8005d0a:	d52f      	bpl.n	8005d6c <__swbuf_r+0x84>
 8005d0c:	6923      	ldr	r3, [r4, #16]
 8005d0e:	b36b      	cbz	r3, 8005d6c <__swbuf_r+0x84>
 8005d10:	6923      	ldr	r3, [r4, #16]
 8005d12:	6820      	ldr	r0, [r4, #0]
 8005d14:	b2f6      	uxtb	r6, r6
 8005d16:	1ac0      	subs	r0, r0, r3
 8005d18:	6963      	ldr	r3, [r4, #20]
 8005d1a:	4637      	mov	r7, r6
 8005d1c:	4283      	cmp	r3, r0
 8005d1e:	dc04      	bgt.n	8005d2a <__swbuf_r+0x42>
 8005d20:	4621      	mov	r1, r4
 8005d22:	4628      	mov	r0, r5
 8005d24:	f000 f938 	bl	8005f98 <_fflush_r>
 8005d28:	bb30      	cbnz	r0, 8005d78 <__swbuf_r+0x90>
 8005d2a:	68a3      	ldr	r3, [r4, #8]
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	6022      	str	r2, [r4, #0]
 8005d38:	701e      	strb	r6, [r3, #0]
 8005d3a:	6963      	ldr	r3, [r4, #20]
 8005d3c:	4283      	cmp	r3, r0
 8005d3e:	d004      	beq.n	8005d4a <__swbuf_r+0x62>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	07db      	lsls	r3, r3, #31
 8005d44:	d506      	bpl.n	8005d54 <__swbuf_r+0x6c>
 8005d46:	2e0a      	cmp	r6, #10
 8005d48:	d104      	bne.n	8005d54 <__swbuf_r+0x6c>
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 f923 	bl	8005f98 <_fflush_r>
 8005d52:	b988      	cbnz	r0, 8005d78 <__swbuf_r+0x90>
 8005d54:	4638      	mov	r0, r7
 8005d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <__swbuf_r+0x9c>)
 8005d5a:	429c      	cmp	r4, r3
 8005d5c:	d101      	bne.n	8005d62 <__swbuf_r+0x7a>
 8005d5e:	68ac      	ldr	r4, [r5, #8]
 8005d60:	e7cf      	b.n	8005d02 <__swbuf_r+0x1a>
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <__swbuf_r+0xa0>)
 8005d64:	429c      	cmp	r4, r3
 8005d66:	bf08      	it	eq
 8005d68:	68ec      	ldreq	r4, [r5, #12]
 8005d6a:	e7ca      	b.n	8005d02 <__swbuf_r+0x1a>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f81a 	bl	8005da8 <__swsetup_r>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d0cb      	beq.n	8005d10 <__swbuf_r+0x28>
 8005d78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d7c:	e7ea      	b.n	8005d54 <__swbuf_r+0x6c>
 8005d7e:	bf00      	nop
 8005d80:	080068ec 	.word	0x080068ec
 8005d84:	0800690c 	.word	0x0800690c
 8005d88:	080068cc 	.word	0x080068cc

08005d8c <__ascii_wctomb>:
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4608      	mov	r0, r1
 8005d90:	b141      	cbz	r1, 8005da4 <__ascii_wctomb+0x18>
 8005d92:	2aff      	cmp	r2, #255	; 0xff
 8005d94:	d904      	bls.n	8005da0 <__ascii_wctomb+0x14>
 8005d96:	228a      	movs	r2, #138	; 0x8a
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	4770      	bx	lr
 8005da0:	2001      	movs	r0, #1
 8005da2:	700a      	strb	r2, [r1, #0]
 8005da4:	4770      	bx	lr
	...

08005da8 <__swsetup_r>:
 8005da8:	4b32      	ldr	r3, [pc, #200]	; (8005e74 <__swsetup_r+0xcc>)
 8005daa:	b570      	push	{r4, r5, r6, lr}
 8005dac:	681d      	ldr	r5, [r3, #0]
 8005dae:	4606      	mov	r6, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	b125      	cbz	r5, 8005dbe <__swsetup_r+0x16>
 8005db4:	69ab      	ldr	r3, [r5, #24]
 8005db6:	b913      	cbnz	r3, 8005dbe <__swsetup_r+0x16>
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f981 	bl	80060c0 <__sinit>
 8005dbe:	4b2e      	ldr	r3, [pc, #184]	; (8005e78 <__swsetup_r+0xd0>)
 8005dc0:	429c      	cmp	r4, r3
 8005dc2:	d10f      	bne.n	8005de4 <__swsetup_r+0x3c>
 8005dc4:	686c      	ldr	r4, [r5, #4]
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dcc:	0719      	lsls	r1, r3, #28
 8005dce:	d42c      	bmi.n	8005e2a <__swsetup_r+0x82>
 8005dd0:	06dd      	lsls	r5, r3, #27
 8005dd2:	d411      	bmi.n	8005df8 <__swsetup_r+0x50>
 8005dd4:	2309      	movs	r3, #9
 8005dd6:	6033      	str	r3, [r6, #0]
 8005dd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	e03e      	b.n	8005e62 <__swsetup_r+0xba>
 8005de4:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <__swsetup_r+0xd4>)
 8005de6:	429c      	cmp	r4, r3
 8005de8:	d101      	bne.n	8005dee <__swsetup_r+0x46>
 8005dea:	68ac      	ldr	r4, [r5, #8]
 8005dec:	e7eb      	b.n	8005dc6 <__swsetup_r+0x1e>
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <__swsetup_r+0xd8>)
 8005df0:	429c      	cmp	r4, r3
 8005df2:	bf08      	it	eq
 8005df4:	68ec      	ldreq	r4, [r5, #12]
 8005df6:	e7e6      	b.n	8005dc6 <__swsetup_r+0x1e>
 8005df8:	0758      	lsls	r0, r3, #29
 8005dfa:	d512      	bpl.n	8005e22 <__swsetup_r+0x7a>
 8005dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dfe:	b141      	cbz	r1, 8005e12 <__swsetup_r+0x6a>
 8005e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e04:	4299      	cmp	r1, r3
 8005e06:	d002      	beq.n	8005e0e <__swsetup_r+0x66>
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f7ff fb37 	bl	800547c <_free_r>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6363      	str	r3, [r4, #52]	; 0x34
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6063      	str	r3, [r4, #4]
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f043 0308 	orr.w	r3, r3, #8
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	b94b      	cbnz	r3, 8005e42 <__swsetup_r+0x9a>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d003      	beq.n	8005e42 <__swsetup_r+0x9a>
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 fa05 	bl	800624c <__smakebuf_r>
 8005e42:	89a0      	ldrh	r0, [r4, #12]
 8005e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e48:	f010 0301 	ands.w	r3, r0, #1
 8005e4c:	d00a      	beq.n	8005e64 <__swsetup_r+0xbc>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60a3      	str	r3, [r4, #8]
 8005e52:	6963      	ldr	r3, [r4, #20]
 8005e54:	425b      	negs	r3, r3
 8005e56:	61a3      	str	r3, [r4, #24]
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	b943      	cbnz	r3, 8005e6e <__swsetup_r+0xc6>
 8005e5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e60:	d1ba      	bne.n	8005dd8 <__swsetup_r+0x30>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	0781      	lsls	r1, r0, #30
 8005e66:	bf58      	it	pl
 8005e68:	6963      	ldrpl	r3, [r4, #20]
 8005e6a:	60a3      	str	r3, [r4, #8]
 8005e6c:	e7f4      	b.n	8005e58 <__swsetup_r+0xb0>
 8005e6e:	2000      	movs	r0, #0
 8005e70:	e7f7      	b.n	8005e62 <__swsetup_r+0xba>
 8005e72:	bf00      	nop
 8005e74:	2000000c 	.word	0x2000000c
 8005e78:	080068ec 	.word	0x080068ec
 8005e7c:	0800690c 	.word	0x0800690c
 8005e80:	080068cc 	.word	0x080068cc

08005e84 <abort>:
 8005e84:	2006      	movs	r0, #6
 8005e86:	b508      	push	{r3, lr}
 8005e88:	f000 fa50 	bl	800632c <raise>
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f7fb fc2d 	bl	80016ec <_exit>
	...

08005e94 <__sflush_r>:
 8005e94:	898a      	ldrh	r2, [r1, #12]
 8005e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e98:	4605      	mov	r5, r0
 8005e9a:	0710      	lsls	r0, r2, #28
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	d457      	bmi.n	8005f50 <__sflush_r+0xbc>
 8005ea0:	684b      	ldr	r3, [r1, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dc04      	bgt.n	8005eb0 <__sflush_r+0x1c>
 8005ea6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dc01      	bgt.n	8005eb0 <__sflush_r+0x1c>
 8005eac:	2000      	movs	r0, #0
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eb2:	2e00      	cmp	r6, #0
 8005eb4:	d0fa      	beq.n	8005eac <__sflush_r+0x18>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ebc:	682f      	ldr	r7, [r5, #0]
 8005ebe:	602b      	str	r3, [r5, #0]
 8005ec0:	d032      	beq.n	8005f28 <__sflush_r+0x94>
 8005ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	075a      	lsls	r2, r3, #29
 8005ec8:	d505      	bpl.n	8005ed6 <__sflush_r+0x42>
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	1ac0      	subs	r0, r0, r3
 8005ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ed0:	b10b      	cbz	r3, 8005ed6 <__sflush_r+0x42>
 8005ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ed4:	1ac0      	subs	r0, r0, r3
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	4602      	mov	r2, r0
 8005eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005edc:	4628      	mov	r0, r5
 8005ede:	6a21      	ldr	r1, [r4, #32]
 8005ee0:	47b0      	blx	r6
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	d106      	bne.n	8005ef6 <__sflush_r+0x62>
 8005ee8:	6829      	ldr	r1, [r5, #0]
 8005eea:	291d      	cmp	r1, #29
 8005eec:	d82c      	bhi.n	8005f48 <__sflush_r+0xb4>
 8005eee:	4a29      	ldr	r2, [pc, #164]	; (8005f94 <__sflush_r+0x100>)
 8005ef0:	40ca      	lsrs	r2, r1
 8005ef2:	07d6      	lsls	r6, r2, #31
 8005ef4:	d528      	bpl.n	8005f48 <__sflush_r+0xb4>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	6062      	str	r2, [r4, #4]
 8005efa:	6922      	ldr	r2, [r4, #16]
 8005efc:	04d9      	lsls	r1, r3, #19
 8005efe:	6022      	str	r2, [r4, #0]
 8005f00:	d504      	bpl.n	8005f0c <__sflush_r+0x78>
 8005f02:	1c42      	adds	r2, r0, #1
 8005f04:	d101      	bne.n	8005f0a <__sflush_r+0x76>
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	b903      	cbnz	r3, 8005f0c <__sflush_r+0x78>
 8005f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8005f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f0e:	602f      	str	r7, [r5, #0]
 8005f10:	2900      	cmp	r1, #0
 8005f12:	d0cb      	beq.n	8005eac <__sflush_r+0x18>
 8005f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f18:	4299      	cmp	r1, r3
 8005f1a:	d002      	beq.n	8005f22 <__sflush_r+0x8e>
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f7ff faad 	bl	800547c <_free_r>
 8005f22:	2000      	movs	r0, #0
 8005f24:	6360      	str	r0, [r4, #52]	; 0x34
 8005f26:	e7c2      	b.n	8005eae <__sflush_r+0x1a>
 8005f28:	6a21      	ldr	r1, [r4, #32]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	47b0      	blx	r6
 8005f30:	1c41      	adds	r1, r0, #1
 8005f32:	d1c7      	bne.n	8005ec4 <__sflush_r+0x30>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0c4      	beq.n	8005ec4 <__sflush_r+0x30>
 8005f3a:	2b1d      	cmp	r3, #29
 8005f3c:	d001      	beq.n	8005f42 <__sflush_r+0xae>
 8005f3e:	2b16      	cmp	r3, #22
 8005f40:	d101      	bne.n	8005f46 <__sflush_r+0xb2>
 8005f42:	602f      	str	r7, [r5, #0]
 8005f44:	e7b2      	b.n	8005eac <__sflush_r+0x18>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	e7ae      	b.n	8005eae <__sflush_r+0x1a>
 8005f50:	690f      	ldr	r7, [r1, #16]
 8005f52:	2f00      	cmp	r7, #0
 8005f54:	d0aa      	beq.n	8005eac <__sflush_r+0x18>
 8005f56:	0793      	lsls	r3, r2, #30
 8005f58:	bf18      	it	ne
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	680e      	ldr	r6, [r1, #0]
 8005f5e:	bf08      	it	eq
 8005f60:	694b      	ldreq	r3, [r1, #20]
 8005f62:	1bf6      	subs	r6, r6, r7
 8005f64:	600f      	str	r7, [r1, #0]
 8005f66:	608b      	str	r3, [r1, #8]
 8005f68:	2e00      	cmp	r6, #0
 8005f6a:	dd9f      	ble.n	8005eac <__sflush_r+0x18>
 8005f6c:	4633      	mov	r3, r6
 8005f6e:	463a      	mov	r2, r7
 8005f70:	4628      	mov	r0, r5
 8005f72:	6a21      	ldr	r1, [r4, #32]
 8005f74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005f78:	47e0      	blx	ip
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	dc06      	bgt.n	8005f8c <__sflush_r+0xf8>
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	e790      	b.n	8005eae <__sflush_r+0x1a>
 8005f8c:	4407      	add	r7, r0
 8005f8e:	1a36      	subs	r6, r6, r0
 8005f90:	e7ea      	b.n	8005f68 <__sflush_r+0xd4>
 8005f92:	bf00      	nop
 8005f94:	20400001 	.word	0x20400001

08005f98 <_fflush_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	690b      	ldr	r3, [r1, #16]
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	b913      	cbnz	r3, 8005fa8 <_fflush_r+0x10>
 8005fa2:	2500      	movs	r5, #0
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	b118      	cbz	r0, 8005fb2 <_fflush_r+0x1a>
 8005faa:	6983      	ldr	r3, [r0, #24]
 8005fac:	b90b      	cbnz	r3, 8005fb2 <_fflush_r+0x1a>
 8005fae:	f000 f887 	bl	80060c0 <__sinit>
 8005fb2:	4b14      	ldr	r3, [pc, #80]	; (8006004 <_fflush_r+0x6c>)
 8005fb4:	429c      	cmp	r4, r3
 8005fb6:	d11b      	bne.n	8005ff0 <_fflush_r+0x58>
 8005fb8:	686c      	ldr	r4, [r5, #4]
 8005fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0ef      	beq.n	8005fa2 <_fflush_r+0xa>
 8005fc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fc4:	07d0      	lsls	r0, r2, #31
 8005fc6:	d404      	bmi.n	8005fd2 <_fflush_r+0x3a>
 8005fc8:	0599      	lsls	r1, r3, #22
 8005fca:	d402      	bmi.n	8005fd2 <_fflush_r+0x3a>
 8005fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fce:	f000 f915 	bl	80061fc <__retarget_lock_acquire_recursive>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	f7ff ff5d 	bl	8005e94 <__sflush_r>
 8005fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fdc:	4605      	mov	r5, r0
 8005fde:	07da      	lsls	r2, r3, #31
 8005fe0:	d4e0      	bmi.n	8005fa4 <_fflush_r+0xc>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	059b      	lsls	r3, r3, #22
 8005fe6:	d4dd      	bmi.n	8005fa4 <_fflush_r+0xc>
 8005fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fea:	f000 f908 	bl	80061fe <__retarget_lock_release_recursive>
 8005fee:	e7d9      	b.n	8005fa4 <_fflush_r+0xc>
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <_fflush_r+0x70>)
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	d101      	bne.n	8005ffa <_fflush_r+0x62>
 8005ff6:	68ac      	ldr	r4, [r5, #8]
 8005ff8:	e7df      	b.n	8005fba <_fflush_r+0x22>
 8005ffa:	4b04      	ldr	r3, [pc, #16]	; (800600c <_fflush_r+0x74>)
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	bf08      	it	eq
 8006000:	68ec      	ldreq	r4, [r5, #12]
 8006002:	e7da      	b.n	8005fba <_fflush_r+0x22>
 8006004:	080068ec 	.word	0x080068ec
 8006008:	0800690c 	.word	0x0800690c
 800600c:	080068cc 	.word	0x080068cc

08006010 <std>:
 8006010:	2300      	movs	r3, #0
 8006012:	b510      	push	{r4, lr}
 8006014:	4604      	mov	r4, r0
 8006016:	e9c0 3300 	strd	r3, r3, [r0]
 800601a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601e:	6083      	str	r3, [r0, #8]
 8006020:	8181      	strh	r1, [r0, #12]
 8006022:	6643      	str	r3, [r0, #100]	; 0x64
 8006024:	81c2      	strh	r2, [r0, #14]
 8006026:	6183      	str	r3, [r0, #24]
 8006028:	4619      	mov	r1, r3
 800602a:	2208      	movs	r2, #8
 800602c:	305c      	adds	r0, #92	; 0x5c
 800602e:	f7fd fb73 	bl	8003718 <memset>
 8006032:	4b05      	ldr	r3, [pc, #20]	; (8006048 <std+0x38>)
 8006034:	6224      	str	r4, [r4, #32]
 8006036:	6263      	str	r3, [r4, #36]	; 0x24
 8006038:	4b04      	ldr	r3, [pc, #16]	; (800604c <std+0x3c>)
 800603a:	62a3      	str	r3, [r4, #40]	; 0x28
 800603c:	4b04      	ldr	r3, [pc, #16]	; (8006050 <std+0x40>)
 800603e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <std+0x44>)
 8006042:	6323      	str	r3, [r4, #48]	; 0x30
 8006044:	bd10      	pop	{r4, pc}
 8006046:	bf00      	nop
 8006048:	08006365 	.word	0x08006365
 800604c:	08006387 	.word	0x08006387
 8006050:	080063bf 	.word	0x080063bf
 8006054:	080063e3 	.word	0x080063e3

08006058 <_cleanup_r>:
 8006058:	4901      	ldr	r1, [pc, #4]	; (8006060 <_cleanup_r+0x8>)
 800605a:	f000 b8af 	b.w	80061bc <_fwalk_reent>
 800605e:	bf00      	nop
 8006060:	08005f99 	.word	0x08005f99

08006064 <__sfmoreglue>:
 8006064:	2268      	movs	r2, #104	; 0x68
 8006066:	b570      	push	{r4, r5, r6, lr}
 8006068:	1e4d      	subs	r5, r1, #1
 800606a:	4355      	muls	r5, r2
 800606c:	460e      	mov	r6, r1
 800606e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006072:	f7ff fa6b 	bl	800554c <_malloc_r>
 8006076:	4604      	mov	r4, r0
 8006078:	b140      	cbz	r0, 800608c <__sfmoreglue+0x28>
 800607a:	2100      	movs	r1, #0
 800607c:	e9c0 1600 	strd	r1, r6, [r0]
 8006080:	300c      	adds	r0, #12
 8006082:	60a0      	str	r0, [r4, #8]
 8006084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006088:	f7fd fb46 	bl	8003718 <memset>
 800608c:	4620      	mov	r0, r4
 800608e:	bd70      	pop	{r4, r5, r6, pc}

08006090 <__sfp_lock_acquire>:
 8006090:	4801      	ldr	r0, [pc, #4]	; (8006098 <__sfp_lock_acquire+0x8>)
 8006092:	f000 b8b3 	b.w	80061fc <__retarget_lock_acquire_recursive>
 8006096:	bf00      	nop
 8006098:	200002a5 	.word	0x200002a5

0800609c <__sfp_lock_release>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__sfp_lock_release+0x8>)
 800609e:	f000 b8ae 	b.w	80061fe <__retarget_lock_release_recursive>
 80060a2:	bf00      	nop
 80060a4:	200002a5 	.word	0x200002a5

080060a8 <__sinit_lock_acquire>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__sinit_lock_acquire+0x8>)
 80060aa:	f000 b8a7 	b.w	80061fc <__retarget_lock_acquire_recursive>
 80060ae:	bf00      	nop
 80060b0:	200002a6 	.word	0x200002a6

080060b4 <__sinit_lock_release>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__sinit_lock_release+0x8>)
 80060b6:	f000 b8a2 	b.w	80061fe <__retarget_lock_release_recursive>
 80060ba:	bf00      	nop
 80060bc:	200002a6 	.word	0x200002a6

080060c0 <__sinit>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	4604      	mov	r4, r0
 80060c4:	f7ff fff0 	bl	80060a8 <__sinit_lock_acquire>
 80060c8:	69a3      	ldr	r3, [r4, #24]
 80060ca:	b11b      	cbz	r3, 80060d4 <__sinit+0x14>
 80060cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d0:	f7ff bff0 	b.w	80060b4 <__sinit_lock_release>
 80060d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060d8:	6523      	str	r3, [r4, #80]	; 0x50
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <__sinit+0x68>)
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <__sinit+0x6c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	bf08      	it	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	4620      	mov	r0, r4
 80060ea:	bf08      	it	eq
 80060ec:	61a3      	streq	r3, [r4, #24]
 80060ee:	f000 f81f 	bl	8006130 <__sfp>
 80060f2:	6060      	str	r0, [r4, #4]
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 f81b 	bl	8006130 <__sfp>
 80060fa:	60a0      	str	r0, [r4, #8]
 80060fc:	4620      	mov	r0, r4
 80060fe:	f000 f817 	bl	8006130 <__sfp>
 8006102:	2200      	movs	r2, #0
 8006104:	2104      	movs	r1, #4
 8006106:	60e0      	str	r0, [r4, #12]
 8006108:	6860      	ldr	r0, [r4, #4]
 800610a:	f7ff ff81 	bl	8006010 <std>
 800610e:	2201      	movs	r2, #1
 8006110:	2109      	movs	r1, #9
 8006112:	68a0      	ldr	r0, [r4, #8]
 8006114:	f7ff ff7c 	bl	8006010 <std>
 8006118:	2202      	movs	r2, #2
 800611a:	2112      	movs	r1, #18
 800611c:	68e0      	ldr	r0, [r4, #12]
 800611e:	f7ff ff77 	bl	8006010 <std>
 8006122:	2301      	movs	r3, #1
 8006124:	61a3      	str	r3, [r4, #24]
 8006126:	e7d1      	b.n	80060cc <__sinit+0xc>
 8006128:	08006550 	.word	0x08006550
 800612c:	08006059 	.word	0x08006059

08006130 <__sfp>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	4607      	mov	r7, r0
 8006134:	f7ff ffac 	bl	8006090 <__sfp_lock_acquire>
 8006138:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <__sfp+0x84>)
 800613a:	681e      	ldr	r6, [r3, #0]
 800613c:	69b3      	ldr	r3, [r6, #24]
 800613e:	b913      	cbnz	r3, 8006146 <__sfp+0x16>
 8006140:	4630      	mov	r0, r6
 8006142:	f7ff ffbd 	bl	80060c0 <__sinit>
 8006146:	3648      	adds	r6, #72	; 0x48
 8006148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800614c:	3b01      	subs	r3, #1
 800614e:	d503      	bpl.n	8006158 <__sfp+0x28>
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	b30b      	cbz	r3, 8006198 <__sfp+0x68>
 8006154:	6836      	ldr	r6, [r6, #0]
 8006156:	e7f7      	b.n	8006148 <__sfp+0x18>
 8006158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800615c:	b9d5      	cbnz	r5, 8006194 <__sfp+0x64>
 800615e:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <__sfp+0x88>)
 8006160:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006164:	60e3      	str	r3, [r4, #12]
 8006166:	6665      	str	r5, [r4, #100]	; 0x64
 8006168:	f000 f847 	bl	80061fa <__retarget_lock_init_recursive>
 800616c:	f7ff ff96 	bl	800609c <__sfp_lock_release>
 8006170:	2208      	movs	r2, #8
 8006172:	4629      	mov	r1, r5
 8006174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800617c:	6025      	str	r5, [r4, #0]
 800617e:	61a5      	str	r5, [r4, #24]
 8006180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006184:	f7fd fac8 	bl	8003718 <memset>
 8006188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800618c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006190:	4620      	mov	r0, r4
 8006192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006194:	3468      	adds	r4, #104	; 0x68
 8006196:	e7d9      	b.n	800614c <__sfp+0x1c>
 8006198:	2104      	movs	r1, #4
 800619a:	4638      	mov	r0, r7
 800619c:	f7ff ff62 	bl	8006064 <__sfmoreglue>
 80061a0:	4604      	mov	r4, r0
 80061a2:	6030      	str	r0, [r6, #0]
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d1d5      	bne.n	8006154 <__sfp+0x24>
 80061a8:	f7ff ff78 	bl	800609c <__sfp_lock_release>
 80061ac:	230c      	movs	r3, #12
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	e7ee      	b.n	8006190 <__sfp+0x60>
 80061b2:	bf00      	nop
 80061b4:	08006550 	.word	0x08006550
 80061b8:	ffff0001 	.word	0xffff0001

080061bc <_fwalk_reent>:
 80061bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c0:	4606      	mov	r6, r0
 80061c2:	4688      	mov	r8, r1
 80061c4:	2700      	movs	r7, #0
 80061c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ce:	f1b9 0901 	subs.w	r9, r9, #1
 80061d2:	d505      	bpl.n	80061e0 <_fwalk_reent+0x24>
 80061d4:	6824      	ldr	r4, [r4, #0]
 80061d6:	2c00      	cmp	r4, #0
 80061d8:	d1f7      	bne.n	80061ca <_fwalk_reent+0xe>
 80061da:	4638      	mov	r0, r7
 80061dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061e0:	89ab      	ldrh	r3, [r5, #12]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d907      	bls.n	80061f6 <_fwalk_reent+0x3a>
 80061e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061ea:	3301      	adds	r3, #1
 80061ec:	d003      	beq.n	80061f6 <_fwalk_reent+0x3a>
 80061ee:	4629      	mov	r1, r5
 80061f0:	4630      	mov	r0, r6
 80061f2:	47c0      	blx	r8
 80061f4:	4307      	orrs	r7, r0
 80061f6:	3568      	adds	r5, #104	; 0x68
 80061f8:	e7e9      	b.n	80061ce <_fwalk_reent+0x12>

080061fa <__retarget_lock_init_recursive>:
 80061fa:	4770      	bx	lr

080061fc <__retarget_lock_acquire_recursive>:
 80061fc:	4770      	bx	lr

080061fe <__retarget_lock_release_recursive>:
 80061fe:	4770      	bx	lr

08006200 <__swhatbuf_r>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	460e      	mov	r6, r1
 8006204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006208:	4614      	mov	r4, r2
 800620a:	2900      	cmp	r1, #0
 800620c:	461d      	mov	r5, r3
 800620e:	b096      	sub	sp, #88	; 0x58
 8006210:	da08      	bge.n	8006224 <__swhatbuf_r+0x24>
 8006212:	2200      	movs	r2, #0
 8006214:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006218:	602a      	str	r2, [r5, #0]
 800621a:	061a      	lsls	r2, r3, #24
 800621c:	d410      	bmi.n	8006240 <__swhatbuf_r+0x40>
 800621e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006222:	e00e      	b.n	8006242 <__swhatbuf_r+0x42>
 8006224:	466a      	mov	r2, sp
 8006226:	f000 f903 	bl	8006430 <_fstat_r>
 800622a:	2800      	cmp	r0, #0
 800622c:	dbf1      	blt.n	8006212 <__swhatbuf_r+0x12>
 800622e:	9a01      	ldr	r2, [sp, #4]
 8006230:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006234:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006238:	425a      	negs	r2, r3
 800623a:	415a      	adcs	r2, r3
 800623c:	602a      	str	r2, [r5, #0]
 800623e:	e7ee      	b.n	800621e <__swhatbuf_r+0x1e>
 8006240:	2340      	movs	r3, #64	; 0x40
 8006242:	2000      	movs	r0, #0
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	b016      	add	sp, #88	; 0x58
 8006248:	bd70      	pop	{r4, r5, r6, pc}
	...

0800624c <__smakebuf_r>:
 800624c:	898b      	ldrh	r3, [r1, #12]
 800624e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006250:	079d      	lsls	r5, r3, #30
 8006252:	4606      	mov	r6, r0
 8006254:	460c      	mov	r4, r1
 8006256:	d507      	bpl.n	8006268 <__smakebuf_r+0x1c>
 8006258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	2301      	movs	r3, #1
 8006262:	6163      	str	r3, [r4, #20]
 8006264:	b002      	add	sp, #8
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	466a      	mov	r2, sp
 800626a:	ab01      	add	r3, sp, #4
 800626c:	f7ff ffc8 	bl	8006200 <__swhatbuf_r>
 8006270:	9900      	ldr	r1, [sp, #0]
 8006272:	4605      	mov	r5, r0
 8006274:	4630      	mov	r0, r6
 8006276:	f7ff f969 	bl	800554c <_malloc_r>
 800627a:	b948      	cbnz	r0, 8006290 <__smakebuf_r+0x44>
 800627c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006280:	059a      	lsls	r2, r3, #22
 8006282:	d4ef      	bmi.n	8006264 <__smakebuf_r+0x18>
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	e7e3      	b.n	8006258 <__smakebuf_r+0xc>
 8006290:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <__smakebuf_r+0x7c>)
 8006292:	62b3      	str	r3, [r6, #40]	; 0x28
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	6020      	str	r0, [r4, #0]
 8006298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	9b00      	ldr	r3, [sp, #0]
 80062a0:	6120      	str	r0, [r4, #16]
 80062a2:	6163      	str	r3, [r4, #20]
 80062a4:	9b01      	ldr	r3, [sp, #4]
 80062a6:	b15b      	cbz	r3, 80062c0 <__smakebuf_r+0x74>
 80062a8:	4630      	mov	r0, r6
 80062aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ae:	f000 f8d1 	bl	8006454 <_isatty_r>
 80062b2:	b128      	cbz	r0, 80062c0 <__smakebuf_r+0x74>
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	f043 0301 	orr.w	r3, r3, #1
 80062be:	81a3      	strh	r3, [r4, #12]
 80062c0:	89a0      	ldrh	r0, [r4, #12]
 80062c2:	4305      	orrs	r5, r0
 80062c4:	81a5      	strh	r5, [r4, #12]
 80062c6:	e7cd      	b.n	8006264 <__smakebuf_r+0x18>
 80062c8:	08006059 	.word	0x08006059

080062cc <_malloc_usable_size_r>:
 80062cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d0:	1f18      	subs	r0, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfbc      	itt	lt
 80062d6:	580b      	ldrlt	r3, [r1, r0]
 80062d8:	18c0      	addlt	r0, r0, r3
 80062da:	4770      	bx	lr

080062dc <_raise_r>:
 80062dc:	291f      	cmp	r1, #31
 80062de:	b538      	push	{r3, r4, r5, lr}
 80062e0:	4604      	mov	r4, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	d904      	bls.n	80062f0 <_raise_r+0x14>
 80062e6:	2316      	movs	r3, #22
 80062e8:	6003      	str	r3, [r0, #0]
 80062ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062f2:	b112      	cbz	r2, 80062fa <_raise_r+0x1e>
 80062f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062f8:	b94b      	cbnz	r3, 800630e <_raise_r+0x32>
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 f830 	bl	8006360 <_getpid_r>
 8006300:	462a      	mov	r2, r5
 8006302:	4601      	mov	r1, r0
 8006304:	4620      	mov	r0, r4
 8006306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800630a:	f000 b817 	b.w	800633c <_kill_r>
 800630e:	2b01      	cmp	r3, #1
 8006310:	d00a      	beq.n	8006328 <_raise_r+0x4c>
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	d103      	bne.n	800631e <_raise_r+0x42>
 8006316:	2316      	movs	r3, #22
 8006318:	6003      	str	r3, [r0, #0]
 800631a:	2001      	movs	r0, #1
 800631c:	e7e7      	b.n	80062ee <_raise_r+0x12>
 800631e:	2400      	movs	r4, #0
 8006320:	4628      	mov	r0, r5
 8006322:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006326:	4798      	blx	r3
 8006328:	2000      	movs	r0, #0
 800632a:	e7e0      	b.n	80062ee <_raise_r+0x12>

0800632c <raise>:
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <raise+0xc>)
 800632e:	4601      	mov	r1, r0
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f7ff bfd3 	b.w	80062dc <_raise_r>
 8006336:	bf00      	nop
 8006338:	2000000c 	.word	0x2000000c

0800633c <_kill_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	2300      	movs	r3, #0
 8006340:	4d06      	ldr	r5, [pc, #24]	; (800635c <_kill_r+0x20>)
 8006342:	4604      	mov	r4, r0
 8006344:	4608      	mov	r0, r1
 8006346:	4611      	mov	r1, r2
 8006348:	602b      	str	r3, [r5, #0]
 800634a:	f7fb f9bf 	bl	80016cc <_kill>
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	d102      	bne.n	8006358 <_kill_r+0x1c>
 8006352:	682b      	ldr	r3, [r5, #0]
 8006354:	b103      	cbz	r3, 8006358 <_kill_r+0x1c>
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	bd38      	pop	{r3, r4, r5, pc}
 800635a:	bf00      	nop
 800635c:	200002a0 	.word	0x200002a0

08006360 <_getpid_r>:
 8006360:	f7fb b9ad 	b.w	80016be <_getpid>

08006364 <__sread>:
 8006364:	b510      	push	{r4, lr}
 8006366:	460c      	mov	r4, r1
 8006368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800636c:	f000 f894 	bl	8006498 <_read_r>
 8006370:	2800      	cmp	r0, #0
 8006372:	bfab      	itete	ge
 8006374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006376:	89a3      	ldrhlt	r3, [r4, #12]
 8006378:	181b      	addge	r3, r3, r0
 800637a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800637e:	bfac      	ite	ge
 8006380:	6563      	strge	r3, [r4, #84]	; 0x54
 8006382:	81a3      	strhlt	r3, [r4, #12]
 8006384:	bd10      	pop	{r4, pc}

08006386 <__swrite>:
 8006386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638a:	461f      	mov	r7, r3
 800638c:	898b      	ldrh	r3, [r1, #12]
 800638e:	4605      	mov	r5, r0
 8006390:	05db      	lsls	r3, r3, #23
 8006392:	460c      	mov	r4, r1
 8006394:	4616      	mov	r6, r2
 8006396:	d505      	bpl.n	80063a4 <__swrite+0x1e>
 8006398:	2302      	movs	r3, #2
 800639a:	2200      	movs	r2, #0
 800639c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a0:	f000 f868 	bl	8006474 <_lseek_r>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	4632      	mov	r2, r6
 80063a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	4628      	mov	r0, r5
 80063b0:	463b      	mov	r3, r7
 80063b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ba:	f000 b817 	b.w	80063ec <_write_r>

080063be <__sseek>:
 80063be:	b510      	push	{r4, lr}
 80063c0:	460c      	mov	r4, r1
 80063c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c6:	f000 f855 	bl	8006474 <_lseek_r>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	bf15      	itete	ne
 80063d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063da:	81a3      	strheq	r3, [r4, #12]
 80063dc:	bf18      	it	ne
 80063de:	81a3      	strhne	r3, [r4, #12]
 80063e0:	bd10      	pop	{r4, pc}

080063e2 <__sclose>:
 80063e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e6:	f000 b813 	b.w	8006410 <_close_r>
	...

080063ec <_write_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	2200      	movs	r2, #0
 80063f6:	4d05      	ldr	r5, [pc, #20]	; (800640c <_write_r+0x20>)
 80063f8:	602a      	str	r2, [r5, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	f7fb f99d 	bl	800173a <_write>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_write_r+0x1e>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_write_r+0x1e>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	200002a0 	.word	0x200002a0

08006410 <_close_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	2300      	movs	r3, #0
 8006414:	4d05      	ldr	r5, [pc, #20]	; (800642c <_close_r+0x1c>)
 8006416:	4604      	mov	r4, r0
 8006418:	4608      	mov	r0, r1
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	f7fb f9a9 	bl	8001772 <_close>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_close_r+0x1a>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_close_r+0x1a>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	200002a0 	.word	0x200002a0

08006430 <_fstat_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	2300      	movs	r3, #0
 8006434:	4d06      	ldr	r5, [pc, #24]	; (8006450 <_fstat_r+0x20>)
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	4611      	mov	r1, r2
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f7fb f9a3 	bl	8001788 <_fstat>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d102      	bne.n	800644c <_fstat_r+0x1c>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	b103      	cbz	r3, 800644c <_fstat_r+0x1c>
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	bd38      	pop	{r3, r4, r5, pc}
 800644e:	bf00      	nop
 8006450:	200002a0 	.word	0x200002a0

08006454 <_isatty_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	2300      	movs	r3, #0
 8006458:	4d05      	ldr	r5, [pc, #20]	; (8006470 <_isatty_r+0x1c>)
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fb f9a1 	bl	80017a6 <_isatty>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_isatty_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_isatty_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	200002a0 	.word	0x200002a0

08006474 <_lseek_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4604      	mov	r4, r0
 8006478:	4608      	mov	r0, r1
 800647a:	4611      	mov	r1, r2
 800647c:	2200      	movs	r2, #0
 800647e:	4d05      	ldr	r5, [pc, #20]	; (8006494 <_lseek_r+0x20>)
 8006480:	602a      	str	r2, [r5, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	f7fb f999 	bl	80017ba <_lseek>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_lseek_r+0x1e>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b103      	cbz	r3, 8006492 <_lseek_r+0x1e>
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	200002a0 	.word	0x200002a0

08006498 <_read_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	2200      	movs	r2, #0
 80064a2:	4d05      	ldr	r5, [pc, #20]	; (80064b8 <_read_r+0x20>)
 80064a4:	602a      	str	r2, [r5, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f7fb f92a 	bl	8001700 <_read>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_read_r+0x1e>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_read_r+0x1e>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	200002a0 	.word	0x200002a0

080064bc <_init>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr

080064c8 <_fini>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr
