
BLDC_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003880  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a20  08003a20  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a20  08003a20  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a20  08003a20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003a98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003a98  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b72  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001857  00000000  00000000  00028c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ab  00000000  00000000  0002b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae5b  00000000  00000000  000439a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085157  00000000  00000000  0004e7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  000d39a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003974 	.word	0x08003974

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003974 	.word	0x08003974

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>:
 *  Created on: Nov 24, 2022
 *      Author: hemingshan
 */
#include "magnetic_sensor.hpp"

AS5600::AS5600(I2C_HandleTypeDef &hi2c_, UART_HandleTypeDef &huart_)
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	226c      	movs	r2, #108	; 0x6c
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	220c      	movs	r2, #12
 800067a:	705a      	strb	r2, [r3, #1]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	220d      	movs	r2, #13
 8000680:	709a      	strb	r2, [r3, #2]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	220e      	movs	r2, #14
 8000686:	70da      	strb	r2, [r3, #3]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	220f      	movs	r2, #15
 800068c:	711a      	strb	r2, [r3, #4]
{
	/* I2C1 Initialization*/
	hi2c = hi2c_;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	3308      	adds	r3, #8
 8000694:	4611      	mov	r1, r2
 8000696:	2254      	movs	r2, #84	; 0x54
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fce9 	bl	8003070 <memcpy>

	hi2c.Instance = I2C1;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0xfc>)
 80006a2:	609a      	str	r2, [r3, #8]
	hi2c.Init.ClockSpeed = 100000;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4a2f      	ldr	r2, [pc, #188]	; (8000764 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x100>)
 80006a8:	60da      	str	r2, [r3, #12]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
	hi2c.Init.OwnAddress1 = 0;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006bc:	619a      	str	r2, [r3, #24]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
	hi2c.Init.OwnAddress2 = 0;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_I2C_Init(&hi2c) != HAL_OK)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3308      	adds	r3, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fedc 	bl	8001498 <HAL_I2C_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf14      	ite	ne
 80006e6:	2301      	movne	r3, #1
 80006e8:	2300      	moveq	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x90>
	{
		Error_Handler();
 80006f0:	f000 fa60 	bl	8000bb4 <Error_Handler>
	}

	/* UART1 Initialization*/
	huart = huart_;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	335c      	adds	r3, #92	; 0x5c
 80006fa:	4611      	mov	r1, r2
 80006fc:	2244      	movs	r2, #68	; 0x44
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fcb6 	bl	8003070 <memcpy>

	huart.Instance = USART1;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x104>)
 8000708:	65da      	str	r2, [r3, #92]	; 0x5c
	huart.Init.BaudRate = 115200;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	661a      	str	r2, [r3, #96]	; 0x60
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2200      	movs	r2, #0
 8000716:	665a      	str	r2, [r3, #100]	; 0x64
	huart.Init.StopBits = UART_STOPBITS_1;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2200      	movs	r2, #0
 800071c:	669a      	str	r2, [r3, #104]	; 0x68
	huart.Init.Parity = UART_PARITY_NONE;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2200      	movs	r2, #0
 8000722:	66da      	str	r2, [r3, #108]	; 0x6c
	huart.Init.Mode = UART_MODE_TX_RX;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	220c      	movs	r2, #12
 8000728:	671a      	str	r2, [r3, #112]	; 0x70
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2200      	movs	r2, #0
 800072e:	675a      	str	r2, [r3, #116]	; 0x74
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2200      	movs	r2, #0
 8000734:	679a      	str	r2, [r3, #120]	; 0x78
	if (HAL_UART_Init(&huart) != HAL_OK)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	335c      	adds	r3, #92	; 0x5c
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fab6 	bl	8002cac <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0xf0>
	{
		Error_Handler();
 8000750:	f000 fa30 	bl	8000bb4 <Error_Handler>
	}
}
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0
 8000768:	40013800 	.word	0x40013800

0800076c <_ZN6AS56007ReadRegEh>:
	HAL_I2C_Master_Transmit(&hi2c,(AS5600_ADDR),&Data,1,10);
	HAL_I2C_Mem_Write(&hi2c,(AS5600_ADDR),Reg,1,&Data,1,100);
}

uint8_t AS5600::ReadReg(uint8_t Reg)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af04      	add	r7, sp, #16
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	uint8_t DataRead = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c,(AS5600_ADDR),Reg,1,&DataRead,1,100);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f103 0008 	add.w	r0, r3, #8
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b299      	uxth	r1, r3
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	b29a      	uxth	r2, r3
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	2301      	movs	r3, #1
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	f107 030f 	add.w	r3, r7, #15
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	f001 f8be 	bl	800191c <HAL_I2C_Mem_Read>

	return DataRead;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <_ZN6AS56008GetAngleEv>:
uint16_t AS5600::GetAngle()
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	int Data = (int)((float)(ReadReg(ANGLE_L) + (ReadReg(ANGLE_H) << 8))/4096*360);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	4619      	mov	r1, r3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ffd6 	bl	800076c <_ZN6AS56007ReadRegEh>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461c      	mov	r4, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	78db      	ldrb	r3, [r3, #3]
 80007c8:	4619      	mov	r1, r3
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffce 	bl	800076c <_ZN6AS56007ReadRegEh>
 80007d0:	4603      	mov	r3, r0
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	4423      	add	r3, r4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd7a 	bl	80002d0 <__aeabi_i2f>
 80007dc:	4603      	mov	r3, r0
 80007de:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fe7c 	bl	80004e0 <__aeabi_fdiv>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4910      	ldr	r1, [pc, #64]	; (800082c <_ZN6AS56008GetAngleEv+0x80>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fdc3 	bl	8000378 <__aeabi_fmul>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff0f 	bl	8000618 <__aeabi_f2iz>
 80007fa:	4603      	mov	r3, r0
 80007fc:	617b      	str	r3, [r7, #20]
//#if Debug
	uint8_t buf[12];
	sprintf((char*)buf,"%u \r\n",Data);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	490a      	ldr	r1, [pc, #40]	; (8000830 <_ZN6AS56008GetAngleEv+0x84>)
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fc48 	bl	800309c <siprintf>
	HAL_UART_Transmit(&huart, buf, 2, HAL_MAX_DELAY);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8000812:	f107 0108 	add.w	r1, r7, #8
 8000816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081a:	2202      	movs	r2, #2
 800081c:	f002 fa93 	bl	8002d46 <HAL_UART_Transmit>
//#endif
	return Data;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	b29b      	uxth	r3, r3
}
 8000824:	4618      	mov	r0, r3
 8000826:	371c      	adds	r7, #28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	43b40000 	.word	0x43b40000
 8000830:	0800398c 	.word	0x0800398c

08000834 <_ZN6AS56004testEv>:

void AS5600::test()
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af02      	add	r7, sp, #8
 800083a:	6078      	str	r0, [r7, #4]
	 * Return: void
	 * Parameters: void
	 * Description: This function is used to test the UART and I2C protocol
	 */
	uint8_t buf[12];
	strcpy((char*)buf, "UART: OK\r\n");
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	4a30      	ldr	r2, [pc, #192]	; (8000904 <_ZN6AS56004testEv+0xd0>)
 8000842:	ca07      	ldmia	r2, {r0, r1, r2}
 8000844:	c303      	stmia	r3!, {r0, r1}
 8000846:	801a      	strh	r2, [r3, #0]
 8000848:	3302      	adds	r3, #2
 800084a:	0c12      	lsrs	r2, r2, #16
 800084c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fc77 	bl	800014c <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29a      	uxth	r2, r3
 8000862:	f107 0108 	add.w	r1, r7, #8
 8000866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800086a:	4620      	mov	r0, r4
 800086c:	f002 fa6b 	bl	8002d46 <HAL_UART_Transmit>

	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(&hi2c, AS5600_ADDR, buf, 2, HAL_MAX_DELAY);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f103 0008 	add.w	r0, r3, #8
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b299      	uxth	r1, r3
 800087c:	f107 0208 	add.w	r2, r7, #8
 8000880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2302      	movs	r3, #2
 8000888:	f000 ff4a 	bl	8001720 <HAL_I2C_Master_Transmit>
 800088c:	4603      	mov	r3, r0
 800088e:	75fb      	strb	r3, [r7, #23]
	if ( ret != HAL_OK ) {
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d01a      	beq.n	80008cc <_ZN6AS56004testEv+0x98>
		strcpy((char*)buf, "I2C: Err\r\n");
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <_ZN6AS56004testEv+0xd4>)
 800089c:	ca07      	ldmia	r2, {r0, r1, r2}
 800089e:	c303      	stmia	r3!, {r0, r1}
 80008a0:	801a      	strh	r2, [r3, #0]
 80008a2:	3302      	adds	r3, #2
 80008a4:	0c12      	lsrs	r2, r2, #16
 80008a6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fc4a 	bl	800014c <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	f107 0108 	add.w	r1, r7, #8
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c4:	4620      	mov	r0, r4
 80008c6:	f002 fa3e 	bl	8002d46 <HAL_UART_Transmit>
	else
	{
		strcpy((char*)buf, "I2C: OK\r\n");
		HAL_UART_Transmit(&huart, buf, strlen((char*)buf), HAL_MAX_DELAY);
	}
}
 80008ca:	e016      	b.n	80008fa <_ZN6AS56004testEv+0xc6>
		strcpy((char*)buf, "I2C: OK\r\n");
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <_ZN6AS56004testEv+0xd8>)
 80008d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008d4:	c303      	stmia	r3!, {r0, r1}
 80008d6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fc32 	bl	800014c <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f107 0108 	add.w	r1, r7, #8
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f4:	4620      	mov	r0, r4
 80008f6:	f002 fa26 	bl	8002d46 <HAL_UART_Transmit>
}
 80008fa:	bf00      	nop
 80008fc:	371c      	adds	r7, #28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	bf00      	nop
 8000904:	08003994 	.word	0x08003994
 8000908:	080039a0 	.word	0x080039a0
 800090c:	080039ac 	.word	0x080039ac

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0ac      	sub	sp, #176	; 0xb0
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fab9 	bl	8000e8c <HAL_Init>

  /* USER CODE BEGIN Init */
  AS5600 as5600(hi2c1, huart1);
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <main+0x94>)
 8000920:	4921      	ldr	r1, [pc, #132]	; (80009a8 <main+0x98>)
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe9e 	bl	8000664 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>
  #if DEBUG
  as5600.test();
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff81 	bl	8000834 <_ZN6AS56004testEv>
  #endif
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f841 	bl	80009b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 f8e7 	bl	8000b08 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800093a:	f000 f883 	bl	8000a44 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 800093e:	f000 f8b5 	bl	8000aac <_ZL19MX_USART1_UART_Initv>
//  HAL_TIMEx_PWMN_Start(&htim1, 	TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, 	TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim1, 	TIM_CHANNEL_3);


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <main+0x9c>)
 800094a:	f000 fd8d 	bl	8001468 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000954:	4816      	ldr	r0, [pc, #88]	; (80009b0 <main+0xa0>)
 8000956:	f000 fd87 	bl	8001468 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <main+0xa0>)
 8000962:	f000 fd81 	bl	8001468 <HAL_GPIO_WritePin>
		sprintf((char*)buf,"%u \r\n",Data);
		HAL_UART_Transmit(&huart1, buf, 2, HAL_MAX_DELAY);

	}*/
	uint8_t buf[12];
	strcpy((char*)buf, "UART: OK\r\n");
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <main+0xa4>)
 800096a:	ca07      	ldmia	r2, {r0, r1, r2}
 800096c:	c303      	stmia	r3!, {r0, r1}
 800096e:	801a      	strh	r2, [r3, #0]
 8000970:	3302      	adds	r3, #2
 8000972:	0c12      	lsrs	r2, r2, #16
 8000974:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fbe7 	bl	800014c <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	1d39      	adds	r1, r7, #4
 8000984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <main+0x94>)
 800098a:	f002 f9dc 	bl	8002d46 <HAL_UART_Transmit>
	as5600.GetAngle();
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff0a 	bl	80007ac <_ZN6AS56008GetAngleEv>
	// Wait
	HAL_Delay(500);
 8000998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099c:	f000 fad8 	bl	8000f50 <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80009a0:	e7e1      	b.n	8000966 <main+0x56>
 80009a2:	bf00      	nop
 80009a4:	200000e0 	.word	0x200000e0
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	40010800 	.word	0x40010800
 80009b4:	080039b8 	.word	0x080039b8

080009b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b090      	sub	sp, #64	; 0x40
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	2228      	movs	r2, #40	; 0x28
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fb60 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009de:	2301      	movs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e2:	2310      	movs	r3, #16
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fd42 	bl	8002478 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf14      	ite	ne
 80009fa:	2301      	movne	r3, #1
 80009fc:	2300      	moveq	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8000a04:	f000 f8d6 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 ffab 	bl	800297c <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8000a36:	f000 f8bd 	bl	8000bb4 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3740      	adds	r7, #64	; 0x40
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a4a:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <_ZL12MX_I2C1_Initv+0x60>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <_ZL12MX_I2C1_Initv+0x64>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a82:	f000 fd09 	bl	8001498 <HAL_I2C_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000a96:	f000 f88d 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000008c 	.word	0x2000008c
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	000186a0 	.word	0x000186a0

08000aac <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ae4:	f002 f8e2 	bl	8002cac <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000af8:	f000 f85c 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000e0 	.word	0x200000e0
 8000b04:	40013800 	.word	0x40013800

08000b08 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <_ZL12MX_GPIO_Initv+0xa0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <_ZL12MX_GPIO_Initv+0xa0>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <_ZL12MX_GPIO_Initv+0xa0>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <_ZL12MX_GPIO_Initv+0xa0>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <_ZL12MX_GPIO_Initv+0xa0>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <_ZL12MX_GPIO_Initv+0xa0>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b52:	4816      	ldr	r0, [pc, #88]	; (8000bac <_ZL12MX_GPIO_Initv+0xa4>)
 8000b54:	f000 fc88 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <_ZL12MX_GPIO_Initv+0xa8>)
 8000b60:	f000 fc82 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b64:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <_ZL12MX_GPIO_Initv+0xa4>)
 8000b7e:	f000 faef 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b82:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2302      	movs	r3, #2
 8000b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <_ZL12MX_GPIO_Initv+0xa8>)
 8000b9c:	f000 fae0 	bl	8001160 <HAL_GPIO_Init>

}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010c00 	.word	0x40010c00
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_MspInit+0x5c>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <HAL_MspInit+0x5c>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_MspInit+0x5c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x5c>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_MspInit+0x5c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x5c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_MspInit+0x60>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_MspInit+0x60>)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000

08000c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <HAL_I2C_MspInit+0x90>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d132      	bne.n	8000caa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_I2C_MspInit+0x94>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <HAL_I2C_MspInit+0x94>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_I2C_MspInit+0x94>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c62:	2312      	movs	r3, #18
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <HAL_I2C_MspInit+0x98>)
 8000c72:	f000 fa75 	bl	8001160 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_I2C_MspInit+0x9c>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <HAL_I2C_MspInit+0x9c>)
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_I2C_MspInit+0x94>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_I2C_MspInit+0x94>)
 8000c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_I2C_MspInit+0x94>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40010000 	.word	0x40010000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <HAL_UART_MspInit+0xa4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d13d      	bne.n	8000d60 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <HAL_UART_MspInit+0xa8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <HAL_UART_MspInit+0xa8>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_UART_MspInit+0xa8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0xa8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0xa8>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0xa8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d14:	2340      	movs	r3, #64	; 0x40
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <HAL_UART_MspInit+0xac>)
 8000d28:	f000 fa1a 	bl	8001160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_UART_MspInit+0xac>)
 8000d40:	f000 fa0e 	bl	8001160 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_UART_MspInit+0xb0>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5a:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_UART_MspInit+0xb0>)
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	40010000 	.word	0x40010000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 f8ab 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f002 f910 	bl	800301c <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20005000 	.word	0x20005000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000124 	.word	0x20000124
 8000e30:	20000140 	.word	0x20000140

08000e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	; (8000e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e66:	f7ff ffe5 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f002 f8dd 	bl	8003028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6e:	f7ff fd4f 	bl	8000910 <main>
  bx lr
 8000e72:	4770      	bx	lr
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e7c:	08003a28 	.word	0x08003a28
  ldr r2, =_sbss
 8000e80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e84:	2000013c 	.word	0x2000013c

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x28>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x28>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f92b 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fe8a 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f935 	bl	8001146 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	f000 f90b 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x20>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <HAL_IncTick+0x20>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000128 	.word	0x20000128

08000f3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000128 	.word	0x20000128

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fff0 	bl	8000f3c <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffe0 	bl	8000f3c <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d8:	f7ff ff90 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff49 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff5e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff90 	bl	8001050 <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5f 	bl	8000ffc <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffb0 	bl	80010b4 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b08b      	sub	sp, #44	; 0x2c
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e169      	b.n	8001448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001174:	2201      	movs	r2, #1
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8158 	bne.w	8001442 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a9a      	ldr	r2, [pc, #616]	; (8001400 <HAL_GPIO_Init+0x2a0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d05e      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 800119c:	4a98      	ldr	r2, [pc, #608]	; (8001400 <HAL_GPIO_Init+0x2a0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d875      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011a2:	4a98      	ldr	r2, [pc, #608]	; (8001404 <HAL_GPIO_Init+0x2a4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d058      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011a8:	4a96      	ldr	r2, [pc, #600]	; (8001404 <HAL_GPIO_Init+0x2a4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d86f      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011ae:	4a96      	ldr	r2, [pc, #600]	; (8001408 <HAL_GPIO_Init+0x2a8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d052      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011b4:	4a94      	ldr	r2, [pc, #592]	; (8001408 <HAL_GPIO_Init+0x2a8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d869      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011ba:	4a94      	ldr	r2, [pc, #592]	; (800140c <HAL_GPIO_Init+0x2ac>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d04c      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011c0:	4a92      	ldr	r2, [pc, #584]	; (800140c <HAL_GPIO_Init+0x2ac>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d863      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011c6:	4a92      	ldr	r2, [pc, #584]	; (8001410 <HAL_GPIO_Init+0x2b0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d046      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011cc:	4a90      	ldr	r2, [pc, #576]	; (8001410 <HAL_GPIO_Init+0x2b0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d85d      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011d2:	2b12      	cmp	r3, #18
 80011d4:	d82a      	bhi.n	800122c <HAL_GPIO_Init+0xcc>
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d859      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011da:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <HAL_GPIO_Init+0x80>)
 80011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e0:	0800125b 	.word	0x0800125b
 80011e4:	08001235 	.word	0x08001235
 80011e8:	08001247 	.word	0x08001247
 80011ec:	08001289 	.word	0x08001289
 80011f0:	0800128f 	.word	0x0800128f
 80011f4:	0800128f 	.word	0x0800128f
 80011f8:	0800128f 	.word	0x0800128f
 80011fc:	0800128f 	.word	0x0800128f
 8001200:	0800128f 	.word	0x0800128f
 8001204:	0800128f 	.word	0x0800128f
 8001208:	0800128f 	.word	0x0800128f
 800120c:	0800128f 	.word	0x0800128f
 8001210:	0800128f 	.word	0x0800128f
 8001214:	0800128f 	.word	0x0800128f
 8001218:	0800128f 	.word	0x0800128f
 800121c:	0800128f 	.word	0x0800128f
 8001220:	0800128f 	.word	0x0800128f
 8001224:	0800123d 	.word	0x0800123d
 8001228:	08001251 	.word	0x08001251
 800122c:	4a79      	ldr	r2, [pc, #484]	; (8001414 <HAL_GPIO_Init+0x2b4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001232:	e02c      	b.n	800128e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e029      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	3304      	adds	r3, #4
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e024      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	3308      	adds	r3, #8
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e01f      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	330c      	adds	r3, #12
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e01a      	b.n	8001290 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001262:	2304      	movs	r3, #4
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e013      	b.n	8001290 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001270:	2308      	movs	r3, #8
 8001272:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	611a      	str	r2, [r3, #16]
          break;
 800127a:	e009      	b.n	8001290 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800127c:	2308      	movs	r3, #8
 800127e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	615a      	str	r2, [r3, #20]
          break;
 8001286:	e003      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x130>
          break;
 800128e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	d801      	bhi.n	800129a <HAL_GPIO_Init+0x13a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	e001      	b.n	800129e <HAL_GPIO_Init+0x13e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d802      	bhi.n	80012ac <HAL_GPIO_Init+0x14c>
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x152>
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	3b08      	subs	r3, #8
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	210f      	movs	r1, #15
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	401a      	ands	r2, r3
 80012c4:	6a39      	ldr	r1, [r7, #32]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80b1 	beq.w	8001442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012e0:	4b4d      	ldr	r3, [pc, #308]	; (8001418 <HAL_GPIO_Init+0x2b8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x2b8>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_GPIO_Init+0x2b8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f8:	4a48      	ldr	r2, [pc, #288]	; (800141c <HAL_GPIO_Init+0x2bc>)
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a40      	ldr	r2, [pc, #256]	; (8001420 <HAL_GPIO_Init+0x2c0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1ec>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a3f      	ldr	r2, [pc, #252]	; (8001424 <HAL_GPIO_Init+0x2c4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1e8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a3e      	ldr	r2, [pc, #248]	; (8001428 <HAL_GPIO_Init+0x2c8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1e4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3d      	ldr	r2, [pc, #244]	; (800142c <HAL_GPIO_Init+0x2cc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1e0>
 800133c:	2303      	movs	r3, #3
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001340:	2304      	movs	r3, #4
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001344:	2302      	movs	r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 800134c:	2300      	movs	r3, #0
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800135e:	492f      	ldr	r1, [pc, #188]	; (800141c <HAL_GPIO_Init+0x2bc>)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	492c      	ldr	r1, [pc, #176]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	43db      	mvns	r3, r3
 800138e:	4928      	ldr	r1, [pc, #160]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 8001390:	4013      	ands	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4922      	ldr	r1, [pc, #136]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	491e      	ldr	r1, [pc, #120]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4918      	ldr	r1, [pc, #96]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4914      	ldr	r1, [pc, #80]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d021      	beq.n	8001434 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	490e      	ldr	r1, [pc, #56]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
 80013fc:	e021      	b.n	8001442 <HAL_GPIO_Init+0x2e2>
 80013fe:	bf00      	nop
 8001400:	10320000 	.word	0x10320000
 8001404:	10310000 	.word	0x10310000
 8001408:	10220000 	.word	0x10220000
 800140c:	10210000 	.word	0x10210000
 8001410:	10120000 	.word	0x10120000
 8001414:	10110000 	.word	0x10110000
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00
 8001428:	40011000 	.word	0x40011000
 800142c:	40011400 	.word	0x40011400
 8001430:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	43db      	mvns	r3, r3
 800143c:	4909      	ldr	r1, [pc, #36]	; (8001464 <HAL_GPIO_Init+0x304>)
 800143e:	4013      	ands	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	fa22 f303 	lsr.w	r3, r2, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	f47f ae8e 	bne.w	8001174 <HAL_GPIO_Init+0x14>
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	372c      	adds	r7, #44	; 0x2c
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e12b      	b.n	8001702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fbb0 	bl	8000c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	; 0x24
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014fc:	f001 fb90 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8001500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a81      	ldr	r2, [pc, #516]	; (800170c <HAL_I2C_Init+0x274>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d807      	bhi.n	800151c <HAL_I2C_Init+0x84>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4a80      	ldr	r2, [pc, #512]	; (8001710 <HAL_I2C_Init+0x278>)
 8001510:	4293      	cmp	r3, r2
 8001512:	bf94      	ite	ls
 8001514:	2301      	movls	r3, #1
 8001516:	2300      	movhi	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	e006      	b.n	800152a <HAL_I2C_Init+0x92>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a7d      	ldr	r2, [pc, #500]	; (8001714 <HAL_I2C_Init+0x27c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	bf94      	ite	ls
 8001524:	2301      	movls	r3, #1
 8001526:	2300      	movhi	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0e7      	b.n	8001702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4a78      	ldr	r2, [pc, #480]	; (8001718 <HAL_I2C_Init+0x280>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9b      	lsrs	r3, r3, #18
 800153c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a6a      	ldr	r2, [pc, #424]	; (800170c <HAL_I2C_Init+0x274>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d802      	bhi.n	800156c <HAL_I2C_Init+0xd4>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	e009      	b.n	8001580 <HAL_I2C_Init+0xe8>
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4a69      	ldr	r2, [pc, #420]	; (800171c <HAL_I2C_Init+0x284>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	099b      	lsrs	r3, r3, #6
 800157e:	3301      	adds	r3, #1
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	430b      	orrs	r3, r1
 8001586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	495c      	ldr	r1, [pc, #368]	; (800170c <HAL_I2C_Init+0x274>)
 800159c:	428b      	cmp	r3, r1
 800159e:	d819      	bhi.n	80015d4 <HAL_I2C_Init+0x13c>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e59      	subs	r1, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ae:	1c59      	adds	r1, r3, #1
 80015b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015b4:	400b      	ands	r3, r1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <HAL_I2C_Init+0x138>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1e59      	subs	r1, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ce:	e051      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 80015d0:	2304      	movs	r3, #4
 80015d2:	e04f      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d111      	bne.n	8001600 <HAL_I2C_Init+0x168>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e58      	subs	r0, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	440b      	add	r3, r1
 80015ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	e012      	b.n	8001626 <HAL_I2C_Init+0x18e>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e58      	subs	r0, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	0099      	lsls	r1, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	fbb0 f3f3 	udiv	r3, r0, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Init+0x196>
 800162a:	2301      	movs	r3, #1
 800162c:	e022      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10e      	bne.n	8001654 <HAL_I2C_Init+0x1bc>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e58      	subs	r0, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	440b      	add	r3, r1
 8001644:	fbb0 f3f3 	udiv	r3, r0, r3
 8001648:	3301      	adds	r3, #1
 800164a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001652:	e00f      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e58      	subs	r0, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	0099      	lsls	r1, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	fbb0 f3f3 	udiv	r3, r0, r3
 800166a:	3301      	adds	r3, #1
 800166c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	6809      	ldr	r1, [r1, #0]
 8001678:	4313      	orrs	r3, r2
 800167a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6911      	ldr	r1, [r2, #16]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68d2      	ldr	r2, [r2, #12]
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	000186a0 	.word	0x000186a0
 8001710:	001e847f 	.word	0x001e847f
 8001714:	003d08ff 	.word	0x003d08ff
 8001718:	431bde83 	.word	0x431bde83
 800171c:	10624dd3 	.word	0x10624dd3

08001720 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	461a      	mov	r2, r3
 800172c:	460b      	mov	r3, r1
 800172e:	817b      	strh	r3, [r7, #10]
 8001730:	4613      	mov	r3, r2
 8001732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff fc02 	bl	8000f3c <HAL_GetTick>
 8001738:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b20      	cmp	r3, #32
 8001744:	f040 80e0 	bne.w	8001908 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2319      	movs	r3, #25
 800174e:	2201      	movs	r2, #1
 8001750:	4970      	ldr	r1, [pc, #448]	; (8001914 <HAL_I2C_Master_Transmit+0x1f4>)
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fcb4 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800175e:	2302      	movs	r3, #2
 8001760:	e0d3      	b.n	800190a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_I2C_Master_Transmit+0x50>
 800176c:	2302      	movs	r3, #2
 800176e:	e0cc      	b.n	800190a <HAL_I2C_Master_Transmit+0x1ea>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d007      	beq.n	8001796 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2221      	movs	r2, #33	; 0x21
 80017aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2210      	movs	r2, #16
 80017b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	893a      	ldrh	r2, [r7, #8]
 80017c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4a50      	ldr	r2, [pc, #320]	; (8001918 <HAL_I2C_Master_Transmit+0x1f8>)
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017d8:	8979      	ldrh	r1, [r7, #10]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 fb04 	bl	8001dec <I2C_MasterRequestWrite>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e08d      	b.n	800190a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001804:	e066      	b.n	80018d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fd2e 	bl	800226c <I2C_WaitOnTXEFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	2b04      	cmp	r3, #4
 800181c:	d107      	bne.n	800182e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06b      	b.n	800190a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b04      	cmp	r3, #4
 800186e:	d11b      	bne.n	80018a8 <HAL_I2C_Master_Transmit+0x188>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d017      	beq.n	80018a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001892:	b29b      	uxth	r3, r3
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	6a39      	ldr	r1, [r7, #32]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 fd1e 	bl	80022ee <I2C_WaitOnBTFFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d107      	bne.n	80018d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e01a      	b.n	800190a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d194      	bne.n	8001806 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e000      	b.n	800190a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001908:	2302      	movs	r3, #2
  }
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	00100002 	.word	0x00100002
 8001918:	ffff0000 	.word	0xffff0000

0800191c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af02      	add	r7, sp, #8
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	4608      	mov	r0, r1
 8001926:	4611      	mov	r1, r2
 8001928:	461a      	mov	r2, r3
 800192a:	4603      	mov	r3, r0
 800192c:	817b      	strh	r3, [r7, #10]
 800192e:	460b      	mov	r3, r1
 8001930:	813b      	strh	r3, [r7, #8]
 8001932:	4613      	mov	r3, r2
 8001934:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800193a:	f7ff faff 	bl	8000f3c <HAL_GetTick>
 800193e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b20      	cmp	r3, #32
 800194a:	f040 8244 	bne.w	8001dd6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2319      	movs	r3, #25
 8001954:	2201      	movs	r2, #1
 8001956:	4982      	ldr	r1, [pc, #520]	; (8001b60 <HAL_I2C_Mem_Read+0x244>)
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fbb1 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001964:	2302      	movs	r3, #2
 8001966:	e237      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_I2C_Mem_Read+0x5a>
 8001972:	2302      	movs	r3, #2
 8001974:	e230      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d007      	beq.n	800199c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2222      	movs	r2, #34	; 0x22
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4a62      	ldr	r2, [pc, #392]	; (8001b64 <HAL_I2C_Mem_Read+0x248>)
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019de:	88f8      	ldrh	r0, [r7, #6]
 80019e0:	893a      	ldrh	r2, [r7, #8]
 80019e2:	8979      	ldrh	r1, [r7, #10]
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4603      	mov	r3, r0
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fa7e 	bl	8001ef0 <I2C_RequestMemoryRead>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1ec      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e1c0      	b.n	8001db0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d11e      	bne.n	8001a74 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a46:	b672      	cpsid	i
}
 8001a48:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a70:	b662      	cpsie	i
}
 8001a72:	e035      	b.n	8001ae0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d11e      	bne.n	8001aba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ab6:	b662      	cpsie	i
}
 8001ab8:	e012      	b.n	8001ae0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ac8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ae0:	e166      	b.n	8001db0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	f200 811f 	bhi.w	8001d2a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d123      	bne.n	8001b3c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 fc39 	bl	8002370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e167      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b3a:	e139      	b.n	8001db0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d152      	bne.n	8001bea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4906      	ldr	r1, [pc, #24]	; (8001b68 <HAL_I2C_Mem_Read+0x24c>)
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fab6 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e13c      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
 8001b5e:	bf00      	nop
 8001b60:	00100002 	.word	0x00100002
 8001b64:	ffff0000 	.word	0xffff0000
 8001b68:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb2:	b662      	cpsie	i
}
 8001bb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001be8:	e0e2      	b.n	8001db0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	497b      	ldr	r1, [pc, #492]	; (8001de0 <HAL_I2C_Mem_Read+0x4c4>)
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fa63 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0e9      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_I2C_Mem_Read+0x4c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	4a65      	ldr	r2, [pc, #404]	; (8001de8 <HAL_I2C_Mem_Read+0x4cc>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	0a1a      	lsrs	r2, r3, #8
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00da      	lsls	r2, r3, #3
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d118      	bne.n	8001ca2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f043 0220 	orr.w	r2, r3, #32
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c92:	b662      	cpsie	i
}
 8001c94:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e09a      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d1d9      	bne.n	8001c64 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cf2:	b662      	cpsie	i
}
 8001cf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d28:	e042      	b.n	8001db0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fb1e 	bl	8002370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e04c      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d118      	bne.n	8001db0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f47f ae94 	bne.w	8001ae2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
  }
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	00010004 	.word	0x00010004
 8001de4:	20000000 	.word	0x20000000
 8001de8:	14f8b589 	.word	0x14f8b589

08001dec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d006      	beq.n	8001e16 <I2C_MasterRequestWrite+0x2a>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d003      	beq.n	8001e16 <I2C_MasterRequestWrite+0x2a>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e14:	d108      	bne.n	8001e28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e00b      	b.n	8001e40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	2b12      	cmp	r3, #18
 8001e2e:	d107      	bne.n	8001e40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f937 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00d      	beq.n	8001e74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e66:	d103      	bne.n	8001e70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e035      	b.n	8001ee0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e7c:	d108      	bne.n	8001e90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e7e:	897b      	ldrh	r3, [r7, #10]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	e01b      	b.n	8001ec8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	11db      	asrs	r3, r3, #7
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0306 	and.w	r3, r3, #6
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f063 030f 	orn	r3, r3, #15
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <I2C_MasterRequestWrite+0xfc>)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f95d 	bl	800216e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e010      	b.n	8001ee0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <I2C_MasterRequestWrite+0x100>)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f94d 	bl	800216e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	00010008 	.word	0x00010008
 8001eec:	00010002 	.word	0x00010002

08001ef0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	817b      	strh	r3, [r7, #10]
 8001f02:	460b      	mov	r3, r1
 8001f04:	813b      	strh	r3, [r7, #8]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f8c2 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f50:	d103      	bne.n	8001f5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0aa      	b.n	80020b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	4952      	ldr	r1, [pc, #328]	; (80020bc <I2C_RequestMemoryRead+0x1cc>)
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f8fa 	bl	800216e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e097      	b.n	80020b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f964 	bl	800226c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d107      	bne.n	8001fc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e076      	b.n	80020b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fcc:	893b      	ldrh	r3, [r7, #8]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	e021      	b.n	800201c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fd8:	893b      	ldrh	r3, [r7, #8]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f93e 	bl	800226c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00d      	beq.n	8002012 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d107      	bne.n	800200e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e050      	b.n	80020b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002012:	893b      	ldrh	r3, [r7, #8]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	6a39      	ldr	r1, [r7, #32]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f923 	bl	800226c <I2C_WaitOnTXEFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2b04      	cmp	r3, #4
 8002032:	d107      	bne.n	8002044 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e035      	b.n	80020b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002056:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	2200      	movs	r2, #0
 8002060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f82b 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207e:	d103      	bne.n	8002088 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e013      	b.n	80020b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800208c:	897b      	ldrh	r3, [r7, #10]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2da      	uxtb	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	6a3a      	ldr	r2, [r7, #32]
 80020a0:	4906      	ldr	r1, [pc, #24]	; (80020bc <I2C_RequestMemoryRead+0x1cc>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f863 	bl	800216e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	00010002 	.word	0x00010002

080020c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d0:	e025      	b.n	800211e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d8:	d021      	beq.n	800211e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7fe ff2f 	bl	8000f3c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d116      	bne.n	800211e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f043 0220 	orr.w	r2, r3, #32
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e023      	b.n	8002166 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d10d      	bne.n	8002144 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4013      	ands	r3, r2
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	e00c      	b.n	800215e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4013      	ands	r3, r2
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf0c      	ite	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	2300      	movne	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	429a      	cmp	r2, r3
 8002162:	d0b6      	beq.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800217c:	e051      	b.n	8002222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218c:	d123      	bne.n	80021d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f043 0204 	orr.w	r2, r3, #4
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e046      	b.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021dc:	d021      	beq.n	8002222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021de:	f7fe fead 	bl	8000f3c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d302      	bcc.n	80021f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d116      	bne.n	8002222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e020      	b.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10c      	bne.n	8002246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4013      	ands	r3, r2
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	e00b      	b.n	800225e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d18d      	bne.n	800217e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002278:	e02d      	b.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f8ce 	bl	800241c <I2C_IsAcknowledgeFailed>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e02d      	b.n	80022e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002290:	d021      	beq.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7fe fe53 	bl	8000f3c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d116      	bne.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f043 0220 	orr.w	r2, r3, #32
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e007      	b.n	80022e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d1ca      	bne.n	800227a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022fa:	e02d      	b.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f88d 	bl	800241c <I2C_IsAcknowledgeFailed>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e02d      	b.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002312:	d021      	beq.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002314:	f7fe fe12 	bl	8000f3c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	d302      	bcc.n	800232a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b04      	cmp	r3, #4
 8002364:	d1ca      	bne.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800237c:	e042      	b.n	8002404 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d119      	bne.n	80023c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0210 	mvn.w	r2, #16
 8002394:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e029      	b.n	8002414 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c0:	f7fe fdbc 	bl	8000f3c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d302      	bcc.n	80023d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e007      	b.n	8002414 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b40      	cmp	r3, #64	; 0x40
 8002410:	d1b5      	bne.n	800237e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002432:	d11b      	bne.n	800246c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800243c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0204 	orr.w	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e272      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8087 	beq.w	80025a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002498:	4b92      	ldr	r3, [pc, #584]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d00c      	beq.n	80024be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a4:	4b8f      	ldr	r3, [pc, #572]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d112      	bne.n	80024d6 <HAL_RCC_OscConfig+0x5e>
 80024b0:	4b8c      	ldr	r3, [pc, #560]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024bc:	d10b      	bne.n	80024d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024be:	4b89      	ldr	r3, [pc, #548]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d06c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x12c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d168      	bne.n	80025a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e24c      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x76>
 80024e0:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7f      	ldr	r2, [pc, #508]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e02e      	b.n	800254c <HAL_RCC_OscConfig+0xd4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0x98>
 80024f6:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7a      	ldr	r2, [pc, #488]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b78      	ldr	r3, [pc, #480]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a77      	ldr	r2, [pc, #476]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0xd4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0xbc>
 800251a:	4b72      	ldr	r3, [pc, #456]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a71      	ldr	r2, [pc, #452]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b6f      	ldr	r3, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xd4>
 8002534:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6a      	ldr	r2, [pc, #424]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b68      	ldr	r3, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a67      	ldr	r2, [pc, #412]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fcf2 	bl	8000f3c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe fcee 	bl	8000f3c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e200      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xe4>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fcde 	bl	8000f3c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002584:	f7fe fcda 	bl	8000f3c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1ec      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x10c>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b2:	4b4c      	ldr	r3, [pc, #304]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025be:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x18c>
 80025ca:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x176>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e1c0      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4939      	ldr	r1, [pc, #228]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	e03a      	b.n	800267a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCC_OscConfig+0x270>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fc93 	bl	8000f3c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe fc8f 	bl	8000f3c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1a1      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4927      	ldr	r1, [pc, #156]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <HAL_RCC_OscConfig+0x270>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fc72 	bl	8000f3c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fc6e 	bl	8000f3c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e180      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d03a      	beq.n	80026fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d019      	beq.n	80026c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002694:	f7fe fc52 	bl	8000f3c <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe fc4e 	bl	8000f3c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e160      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f000 fad8 	bl	8002c70 <RCC_Delay>
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe fc38 	bl	8000f3c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ce:	e00f      	b.n	80026f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fc34 	bl	8000f3c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d908      	bls.n	80026f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e146      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	42420000 	.word	0x42420000
 80026ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b92      	ldr	r3, [pc, #584]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1e9      	bne.n	80026d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a6 	beq.w	8002856 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b8b      	ldr	r3, [pc, #556]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10d      	bne.n	8002736 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b88      	ldr	r3, [pc, #544]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a87      	ldr	r2, [pc, #540]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b85      	ldr	r3, [pc, #532]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_OscConfig+0x4c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b7f      	ldr	r3, [pc, #508]	; (8002940 <HAL_RCC_OscConfig+0x4c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a7e      	ldr	r2, [pc, #504]	; (8002940 <HAL_RCC_OscConfig+0x4c8>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7fe fbf5 	bl	8000f3c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7fe fbf1 	bl	8000f3c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e103      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b75      	ldr	r3, [pc, #468]	; (8002940 <HAL_RCC_OscConfig+0x4c8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x312>
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a6e      	ldr	r2, [pc, #440]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	e02d      	b.n	80027e6 <HAL_RCC_OscConfig+0x36e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x334>
 8002792:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6213      	str	r3, [r2, #32]
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a66      	ldr	r2, [pc, #408]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	e01c      	b.n	80027e6 <HAL_RCC_OscConfig+0x36e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d10c      	bne.n	80027ce <HAL_RCC_OscConfig+0x356>
 80027b4:	4b61      	ldr	r3, [pc, #388]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4a60      	ldr	r2, [pc, #384]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	6213      	str	r3, [r2, #32]
 80027c0:	4b5e      	ldr	r3, [pc, #376]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a5d      	ldr	r2, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	e00b      	b.n	80027e6 <HAL_RCC_OscConfig+0x36e>
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6213      	str	r3, [r2, #32]
 80027da:	4b58      	ldr	r3, [pc, #352]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a57      	ldr	r2, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d015      	beq.n	800281a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fba5 	bl	8000f3c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fba1 	bl	8000f3c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0b1      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ee      	beq.n	80027f6 <HAL_RCC_OscConfig+0x37e>
 8002818:	e014      	b.n	8002844 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7fe fb8f 	bl	8000f3c <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fb8b 	bl	8000f3c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e09b      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ee      	bne.n	8002822 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b3c      	ldr	r3, [pc, #240]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a3b      	ldr	r2, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8087 	beq.w	800296e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d061      	beq.n	8002930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d146      	bne.n	8002902 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_RCC_OscConfig+0x4cc>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fb5f 	bl	8000f3c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe fb5b 	bl	8000f3c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e06d      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d108      	bne.n	80028bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4921      	ldr	r1, [pc, #132]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028bc:	4b1f      	ldr	r3, [pc, #124]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a19      	ldr	r1, [r3, #32]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	430b      	orrs	r3, r1
 80028ce:	491b      	ldr	r1, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fb2f 	bl	8000f3c <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fb2b 	bl	8000f3c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e03d      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x46a>
 8002900:	e035      	b.n	800296e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_OscConfig+0x4cc>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe fb18 	bl	8000f3c <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fb14 	bl	8000f3c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e026      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x498>
 800292e:	e01e      	b.n	800296e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e019      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
 8002944:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_OscConfig+0x500>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	429a      	cmp	r2, r3
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d0      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d910      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0207 	bic.w	r2, r3, #7
 80029a6:	4965      	ldr	r1, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d040      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d115      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e073      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06b      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4936      	ldr	r1, [pc, #216]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fa66 	bl	8000f3c <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fa62 	bl	8000f3c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e053      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d210      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4922      	ldr	r1, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1cc>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe f9c4 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	080039d4 	.word	0x080039d4
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	20000004 	.word	0x20000004

08002b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	b490      	push	{r4, r7}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xac>)
 8002b58:	1d3c      	adds	r4, r7, #4
 8002b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b60:	f240 2301 	movw	r3, #513	; 0x201
 8002b64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d002      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_GetSysClockFreq+0x46>
 8002b8e:	e02b      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b92:	623b      	str	r3, [r7, #32]
      break;
 8002b94:	e02b      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	0c9b      	lsrs	r3, r3, #18
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3328      	adds	r3, #40	; 0x28
 8002ba0:	443b      	add	r3, r7
 8002ba2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ba6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d012      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	0c5b      	lsrs	r3, r3, #17
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	3328      	adds	r3, #40	; 0x28
 8002bbe:	443b      	add	r3, r7
 8002bc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bc4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bca:	fb03 f202 	mul.w	r2, r3, r2
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd6:	e004      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	623b      	str	r3, [r7, #32]
      break;
 8002be6:	e002      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bea:	623b      	str	r3, [r7, #32]
      break;
 8002bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc90      	pop	{r4, r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	080039c4 	.word	0x080039c4
 8002c00:	40021000 	.word	0x40021000
 8002c04:	007a1200 	.word	0x007a1200
 8002c08:	003d0900 	.word	0x003d0900

08002c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000000 	.word	0x20000000

08002c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c24:	f7ff fff2 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	; (8002c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	080039e4 	.word	0x080039e4

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c4c:	f7ff ffde 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0adb      	lsrs	r3, r3, #11
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	080039e4 	.word	0x080039e4

08002c70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <RCC_Delay+0x34>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <RCC_Delay+0x38>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	0a5b      	lsrs	r3, r3, #9
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c8c:	bf00      	nop
  }
  while (Delay --);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e5a      	subs	r2, r3, #1
 8002c92:	60fa      	str	r2, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f9      	bne.n	8002c8c <RCC_Delay+0x1c>
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	10624dd3 	.word	0x10624dd3

08002cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e03f      	b.n	8002d3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fd fff6 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f905 	bl	8002f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b08a      	sub	sp, #40	; 0x28
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d17c      	bne.n	8002e60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_UART_Transmit+0x2c>
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e075      	b.n	8002e62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_UART_Transmit+0x3e>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e06e      	b.n	8002e62 <HAL_UART_Transmit+0x11c>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2221      	movs	r2, #33	; 0x21
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9a:	f7fe f8cf 	bl	8000f3c <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db4:	d108      	bne.n	8002dc8 <HAL_UART_Transmit+0x82>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d104      	bne.n	8002dc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	e003      	b.n	8002dd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dd8:	e02a      	b.n	8002e30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2180      	movs	r1, #128	; 0x80
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f840 	bl	8002e6a <UART_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e036      	b.n	8002e62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10b      	bne.n	8002e12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	e007      	b.n	8002e22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1cf      	bne.n	8002dda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2140      	movs	r1, #64	; 0x40
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f810 	bl	8002e6a <UART_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e006      	b.n	8002e62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7a:	e02c      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e82:	d028      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e8a:	f7fe f857 	bl	8000f3c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d21d      	bcs.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ea8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e00f      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d0c3      	beq.n	8002e7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f3a:	f023 030c 	bic.w	r3, r3, #12
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <UART_SetConfig+0x114>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d103      	bne.n	8002f70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f68:	f7ff fe6e 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	e002      	b.n	8002f76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7ff fe56 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8002f74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009a      	lsls	r2, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <UART_SetConfig+0x118>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	0119      	lsls	r1, r3, #4
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009a      	lsls	r2, r3, #2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <UART_SetConfig+0x118>)
 8002fae:	fba3 0302 	umull	r0, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2064      	movs	r0, #100	; 0x64
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	3332      	adds	r3, #50	; 0x32
 8002fc0:	4a15      	ldr	r2, [pc, #84]	; (8003018 <UART_SetConfig+0x118>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fcc:	4419      	add	r1, r3
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009a      	lsls	r2, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <UART_SetConfig+0x118>)
 8002fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2064      	movs	r0, #100	; 0x64
 8002fee:	fb00 f303 	mul.w	r3, r0, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	3332      	adds	r3, #50	; 0x32
 8002ff8:	4a07      	ldr	r2, [pc, #28]	; (8003018 <UART_SetConfig+0x118>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	f003 020f 	and.w	r2, r3, #15
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	440a      	add	r2, r1
 800300a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40013800 	.word	0x40013800
 8003018:	51eb851f 	.word	0x51eb851f

0800301c <__errno>:
 800301c:	4b01      	ldr	r3, [pc, #4]	; (8003024 <__errno+0x8>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000000c 	.word	0x2000000c

08003028 <__libc_init_array>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	2600      	movs	r6, #0
 800302c:	4d0c      	ldr	r5, [pc, #48]	; (8003060 <__libc_init_array+0x38>)
 800302e:	4c0d      	ldr	r4, [pc, #52]	; (8003064 <__libc_init_array+0x3c>)
 8003030:	1b64      	subs	r4, r4, r5
 8003032:	10a4      	asrs	r4, r4, #2
 8003034:	42a6      	cmp	r6, r4
 8003036:	d109      	bne.n	800304c <__libc_init_array+0x24>
 8003038:	f000 fc9c 	bl	8003974 <_init>
 800303c:	2600      	movs	r6, #0
 800303e:	4d0a      	ldr	r5, [pc, #40]	; (8003068 <__libc_init_array+0x40>)
 8003040:	4c0a      	ldr	r4, [pc, #40]	; (800306c <__libc_init_array+0x44>)
 8003042:	1b64      	subs	r4, r4, r5
 8003044:	10a4      	asrs	r4, r4, #2
 8003046:	42a6      	cmp	r6, r4
 8003048:	d105      	bne.n	8003056 <__libc_init_array+0x2e>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003050:	4798      	blx	r3
 8003052:	3601      	adds	r6, #1
 8003054:	e7ee      	b.n	8003034 <__libc_init_array+0xc>
 8003056:	f855 3b04 	ldr.w	r3, [r5], #4
 800305a:	4798      	blx	r3
 800305c:	3601      	adds	r6, #1
 800305e:	e7f2      	b.n	8003046 <__libc_init_array+0x1e>
 8003060:	08003a20 	.word	0x08003a20
 8003064:	08003a20 	.word	0x08003a20
 8003068:	08003a20 	.word	0x08003a20
 800306c:	08003a24 	.word	0x08003a24

08003070 <memcpy>:
 8003070:	440a      	add	r2, r1
 8003072:	4291      	cmp	r1, r2
 8003074:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003078:	d100      	bne.n	800307c <memcpy+0xc>
 800307a:	4770      	bx	lr
 800307c:	b510      	push	{r4, lr}
 800307e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003082:	4291      	cmp	r1, r2
 8003084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003088:	d1f9      	bne.n	800307e <memcpy+0xe>
 800308a:	bd10      	pop	{r4, pc}

0800308c <memset>:
 800308c:	4603      	mov	r3, r0
 800308e:	4402      	add	r2, r0
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	f803 1b01 	strb.w	r1, [r3], #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <siprintf>:
 800309c:	b40e      	push	{r1, r2, r3}
 800309e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030a2:	b500      	push	{lr}
 80030a4:	b09c      	sub	sp, #112	; 0x70
 80030a6:	ab1d      	add	r3, sp, #116	; 0x74
 80030a8:	9002      	str	r0, [sp, #8]
 80030aa:	9006      	str	r0, [sp, #24]
 80030ac:	9107      	str	r1, [sp, #28]
 80030ae:	9104      	str	r1, [sp, #16]
 80030b0:	4808      	ldr	r0, [pc, #32]	; (80030d4 <siprintf+0x38>)
 80030b2:	4909      	ldr	r1, [pc, #36]	; (80030d8 <siprintf+0x3c>)
 80030b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80030b8:	9105      	str	r1, [sp, #20]
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	a902      	add	r1, sp, #8
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	f000 f868 	bl	8003194 <_svfiprintf_r>
 80030c4:	2200      	movs	r2, #0
 80030c6:	9b02      	ldr	r3, [sp, #8]
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	b01c      	add	sp, #112	; 0x70
 80030cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80030d0:	b003      	add	sp, #12
 80030d2:	4770      	bx	lr
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	ffff0208 	.word	0xffff0208

080030dc <__ssputs_r>:
 80030dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	688e      	ldr	r6, [r1, #8]
 80030e2:	4682      	mov	sl, r0
 80030e4:	429e      	cmp	r6, r3
 80030e6:	460c      	mov	r4, r1
 80030e8:	4690      	mov	r8, r2
 80030ea:	461f      	mov	r7, r3
 80030ec:	d838      	bhi.n	8003160 <__ssputs_r+0x84>
 80030ee:	898a      	ldrh	r2, [r1, #12]
 80030f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030f4:	d032      	beq.n	800315c <__ssputs_r+0x80>
 80030f6:	6825      	ldr	r5, [r4, #0]
 80030f8:	6909      	ldr	r1, [r1, #16]
 80030fa:	3301      	adds	r3, #1
 80030fc:	eba5 0901 	sub.w	r9, r5, r1
 8003100:	6965      	ldr	r5, [r4, #20]
 8003102:	444b      	add	r3, r9
 8003104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800310c:	106d      	asrs	r5, r5, #1
 800310e:	429d      	cmp	r5, r3
 8003110:	bf38      	it	cc
 8003112:	461d      	movcc	r5, r3
 8003114:	0553      	lsls	r3, r2, #21
 8003116:	d531      	bpl.n	800317c <__ssputs_r+0xa0>
 8003118:	4629      	mov	r1, r5
 800311a:	f000 fb61 	bl	80037e0 <_malloc_r>
 800311e:	4606      	mov	r6, r0
 8003120:	b950      	cbnz	r0, 8003138 <__ssputs_r+0x5c>
 8003122:	230c      	movs	r3, #12
 8003124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003128:	f8ca 3000 	str.w	r3, [sl]
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003138:	464a      	mov	r2, r9
 800313a:	6921      	ldr	r1, [r4, #16]
 800313c:	f7ff ff98 	bl	8003070 <memcpy>
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314a:	81a3      	strh	r3, [r4, #12]
 800314c:	6126      	str	r6, [r4, #16]
 800314e:	444e      	add	r6, r9
 8003150:	6026      	str	r6, [r4, #0]
 8003152:	463e      	mov	r6, r7
 8003154:	6165      	str	r5, [r4, #20]
 8003156:	eba5 0509 	sub.w	r5, r5, r9
 800315a:	60a5      	str	r5, [r4, #8]
 800315c:	42be      	cmp	r6, r7
 800315e:	d900      	bls.n	8003162 <__ssputs_r+0x86>
 8003160:	463e      	mov	r6, r7
 8003162:	4632      	mov	r2, r6
 8003164:	4641      	mov	r1, r8
 8003166:	6820      	ldr	r0, [r4, #0]
 8003168:	f000 fab8 	bl	80036dc <memmove>
 800316c:	68a3      	ldr	r3, [r4, #8]
 800316e:	2000      	movs	r0, #0
 8003170:	1b9b      	subs	r3, r3, r6
 8003172:	60a3      	str	r3, [r4, #8]
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	4433      	add	r3, r6
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	e7db      	b.n	8003134 <__ssputs_r+0x58>
 800317c:	462a      	mov	r2, r5
 800317e:	f000 fba3 	bl	80038c8 <_realloc_r>
 8003182:	4606      	mov	r6, r0
 8003184:	2800      	cmp	r0, #0
 8003186:	d1e1      	bne.n	800314c <__ssputs_r+0x70>
 8003188:	4650      	mov	r0, sl
 800318a:	6921      	ldr	r1, [r4, #16]
 800318c:	f000 fac0 	bl	8003710 <_free_r>
 8003190:	e7c7      	b.n	8003122 <__ssputs_r+0x46>
	...

08003194 <_svfiprintf_r>:
 8003194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003198:	4698      	mov	r8, r3
 800319a:	898b      	ldrh	r3, [r1, #12]
 800319c:	4607      	mov	r7, r0
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	460d      	mov	r5, r1
 80031a2:	4614      	mov	r4, r2
 80031a4:	b09d      	sub	sp, #116	; 0x74
 80031a6:	d50e      	bpl.n	80031c6 <_svfiprintf_r+0x32>
 80031a8:	690b      	ldr	r3, [r1, #16]
 80031aa:	b963      	cbnz	r3, 80031c6 <_svfiprintf_r+0x32>
 80031ac:	2140      	movs	r1, #64	; 0x40
 80031ae:	f000 fb17 	bl	80037e0 <_malloc_r>
 80031b2:	6028      	str	r0, [r5, #0]
 80031b4:	6128      	str	r0, [r5, #16]
 80031b6:	b920      	cbnz	r0, 80031c2 <_svfiprintf_r+0x2e>
 80031b8:	230c      	movs	r3, #12
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c0:	e0d1      	b.n	8003366 <_svfiprintf_r+0x1d2>
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	616b      	str	r3, [r5, #20]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9309      	str	r3, [sp, #36]	; 0x24
 80031ca:	2320      	movs	r3, #32
 80031cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031d0:	2330      	movs	r3, #48	; 0x30
 80031d2:	f04f 0901 	mov.w	r9, #1
 80031d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80031da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003380 <_svfiprintf_r+0x1ec>
 80031de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031e2:	4623      	mov	r3, r4
 80031e4:	469a      	mov	sl, r3
 80031e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031ea:	b10a      	cbz	r2, 80031f0 <_svfiprintf_r+0x5c>
 80031ec:	2a25      	cmp	r2, #37	; 0x25
 80031ee:	d1f9      	bne.n	80031e4 <_svfiprintf_r+0x50>
 80031f0:	ebba 0b04 	subs.w	fp, sl, r4
 80031f4:	d00b      	beq.n	800320e <_svfiprintf_r+0x7a>
 80031f6:	465b      	mov	r3, fp
 80031f8:	4622      	mov	r2, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	4638      	mov	r0, r7
 80031fe:	f7ff ff6d 	bl	80030dc <__ssputs_r>
 8003202:	3001      	adds	r0, #1
 8003204:	f000 80aa 	beq.w	800335c <_svfiprintf_r+0x1c8>
 8003208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800320a:	445a      	add	r2, fp
 800320c:	9209      	str	r2, [sp, #36]	; 0x24
 800320e:	f89a 3000 	ldrb.w	r3, [sl]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a2 	beq.w	800335c <_svfiprintf_r+0x1c8>
 8003218:	2300      	movs	r3, #0
 800321a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800321e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003222:	f10a 0a01 	add.w	sl, sl, #1
 8003226:	9304      	str	r3, [sp, #16]
 8003228:	9307      	str	r3, [sp, #28]
 800322a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800322e:	931a      	str	r3, [sp, #104]	; 0x68
 8003230:	4654      	mov	r4, sl
 8003232:	2205      	movs	r2, #5
 8003234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003238:	4851      	ldr	r0, [pc, #324]	; (8003380 <_svfiprintf_r+0x1ec>)
 800323a:	f000 fa41 	bl	80036c0 <memchr>
 800323e:	9a04      	ldr	r2, [sp, #16]
 8003240:	b9d8      	cbnz	r0, 800327a <_svfiprintf_r+0xe6>
 8003242:	06d0      	lsls	r0, r2, #27
 8003244:	bf44      	itt	mi
 8003246:	2320      	movmi	r3, #32
 8003248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800324c:	0711      	lsls	r1, r2, #28
 800324e:	bf44      	itt	mi
 8003250:	232b      	movmi	r3, #43	; 0x2b
 8003252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003256:	f89a 3000 	ldrb.w	r3, [sl]
 800325a:	2b2a      	cmp	r3, #42	; 0x2a
 800325c:	d015      	beq.n	800328a <_svfiprintf_r+0xf6>
 800325e:	4654      	mov	r4, sl
 8003260:	2000      	movs	r0, #0
 8003262:	f04f 0c0a 	mov.w	ip, #10
 8003266:	9a07      	ldr	r2, [sp, #28]
 8003268:	4621      	mov	r1, r4
 800326a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800326e:	3b30      	subs	r3, #48	; 0x30
 8003270:	2b09      	cmp	r3, #9
 8003272:	d94e      	bls.n	8003312 <_svfiprintf_r+0x17e>
 8003274:	b1b0      	cbz	r0, 80032a4 <_svfiprintf_r+0x110>
 8003276:	9207      	str	r2, [sp, #28]
 8003278:	e014      	b.n	80032a4 <_svfiprintf_r+0x110>
 800327a:	eba0 0308 	sub.w	r3, r0, r8
 800327e:	fa09 f303 	lsl.w	r3, r9, r3
 8003282:	4313      	orrs	r3, r2
 8003284:	46a2      	mov	sl, r4
 8003286:	9304      	str	r3, [sp, #16]
 8003288:	e7d2      	b.n	8003230 <_svfiprintf_r+0x9c>
 800328a:	9b03      	ldr	r3, [sp, #12]
 800328c:	1d19      	adds	r1, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9103      	str	r1, [sp, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfbb      	ittet	lt
 8003296:	425b      	neglt	r3, r3
 8003298:	f042 0202 	orrlt.w	r2, r2, #2
 800329c:	9307      	strge	r3, [sp, #28]
 800329e:	9307      	strlt	r3, [sp, #28]
 80032a0:	bfb8      	it	lt
 80032a2:	9204      	strlt	r2, [sp, #16]
 80032a4:	7823      	ldrb	r3, [r4, #0]
 80032a6:	2b2e      	cmp	r3, #46	; 0x2e
 80032a8:	d10c      	bne.n	80032c4 <_svfiprintf_r+0x130>
 80032aa:	7863      	ldrb	r3, [r4, #1]
 80032ac:	2b2a      	cmp	r3, #42	; 0x2a
 80032ae:	d135      	bne.n	800331c <_svfiprintf_r+0x188>
 80032b0:	9b03      	ldr	r3, [sp, #12]
 80032b2:	3402      	adds	r4, #2
 80032b4:	1d1a      	adds	r2, r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	9203      	str	r2, [sp, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bfb8      	it	lt
 80032be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80032c2:	9305      	str	r3, [sp, #20]
 80032c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003384 <_svfiprintf_r+0x1f0>
 80032c8:	2203      	movs	r2, #3
 80032ca:	4650      	mov	r0, sl
 80032cc:	7821      	ldrb	r1, [r4, #0]
 80032ce:	f000 f9f7 	bl	80036c0 <memchr>
 80032d2:	b140      	cbz	r0, 80032e6 <_svfiprintf_r+0x152>
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	eba0 000a 	sub.w	r0, r0, sl
 80032da:	fa03 f000 	lsl.w	r0, r3, r0
 80032de:	9b04      	ldr	r3, [sp, #16]
 80032e0:	3401      	adds	r4, #1
 80032e2:	4303      	orrs	r3, r0
 80032e4:	9304      	str	r3, [sp, #16]
 80032e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ea:	2206      	movs	r2, #6
 80032ec:	4826      	ldr	r0, [pc, #152]	; (8003388 <_svfiprintf_r+0x1f4>)
 80032ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032f2:	f000 f9e5 	bl	80036c0 <memchr>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d038      	beq.n	800336c <_svfiprintf_r+0x1d8>
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <_svfiprintf_r+0x1f8>)
 80032fc:	bb1b      	cbnz	r3, 8003346 <_svfiprintf_r+0x1b2>
 80032fe:	9b03      	ldr	r3, [sp, #12]
 8003300:	3307      	adds	r3, #7
 8003302:	f023 0307 	bic.w	r3, r3, #7
 8003306:	3308      	adds	r3, #8
 8003308:	9303      	str	r3, [sp, #12]
 800330a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800330c:	4433      	add	r3, r6
 800330e:	9309      	str	r3, [sp, #36]	; 0x24
 8003310:	e767      	b.n	80031e2 <_svfiprintf_r+0x4e>
 8003312:	460c      	mov	r4, r1
 8003314:	2001      	movs	r0, #1
 8003316:	fb0c 3202 	mla	r2, ip, r2, r3
 800331a:	e7a5      	b.n	8003268 <_svfiprintf_r+0xd4>
 800331c:	2300      	movs	r3, #0
 800331e:	f04f 0c0a 	mov.w	ip, #10
 8003322:	4619      	mov	r1, r3
 8003324:	3401      	adds	r4, #1
 8003326:	9305      	str	r3, [sp, #20]
 8003328:	4620      	mov	r0, r4
 800332a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800332e:	3a30      	subs	r2, #48	; 0x30
 8003330:	2a09      	cmp	r2, #9
 8003332:	d903      	bls.n	800333c <_svfiprintf_r+0x1a8>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0c5      	beq.n	80032c4 <_svfiprintf_r+0x130>
 8003338:	9105      	str	r1, [sp, #20]
 800333a:	e7c3      	b.n	80032c4 <_svfiprintf_r+0x130>
 800333c:	4604      	mov	r4, r0
 800333e:	2301      	movs	r3, #1
 8003340:	fb0c 2101 	mla	r1, ip, r1, r2
 8003344:	e7f0      	b.n	8003328 <_svfiprintf_r+0x194>
 8003346:	ab03      	add	r3, sp, #12
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	462a      	mov	r2, r5
 800334c:	4638      	mov	r0, r7
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <_svfiprintf_r+0x1fc>)
 8003350:	a904      	add	r1, sp, #16
 8003352:	f3af 8000 	nop.w
 8003356:	1c42      	adds	r2, r0, #1
 8003358:	4606      	mov	r6, r0
 800335a:	d1d6      	bne.n	800330a <_svfiprintf_r+0x176>
 800335c:	89ab      	ldrh	r3, [r5, #12]
 800335e:	065b      	lsls	r3, r3, #25
 8003360:	f53f af2c 	bmi.w	80031bc <_svfiprintf_r+0x28>
 8003364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003366:	b01d      	add	sp, #116	; 0x74
 8003368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336c:	ab03      	add	r3, sp, #12
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	462a      	mov	r2, r5
 8003372:	4638      	mov	r0, r7
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <_svfiprintf_r+0x1fc>)
 8003376:	a904      	add	r1, sp, #16
 8003378:	f000 f87c 	bl	8003474 <_printf_i>
 800337c:	e7eb      	b.n	8003356 <_svfiprintf_r+0x1c2>
 800337e:	bf00      	nop
 8003380:	080039ec 	.word	0x080039ec
 8003384:	080039f2 	.word	0x080039f2
 8003388:	080039f6 	.word	0x080039f6
 800338c:	00000000 	.word	0x00000000
 8003390:	080030dd 	.word	0x080030dd

08003394 <_printf_common>:
 8003394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003398:	4616      	mov	r6, r2
 800339a:	4699      	mov	r9, r3
 800339c:	688a      	ldr	r2, [r1, #8]
 800339e:	690b      	ldr	r3, [r1, #16]
 80033a0:	4607      	mov	r7, r0
 80033a2:	4293      	cmp	r3, r2
 80033a4:	bfb8      	it	lt
 80033a6:	4613      	movlt	r3, r2
 80033a8:	6033      	str	r3, [r6, #0]
 80033aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033ae:	460c      	mov	r4, r1
 80033b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033b4:	b10a      	cbz	r2, 80033ba <_printf_common+0x26>
 80033b6:	3301      	adds	r3, #1
 80033b8:	6033      	str	r3, [r6, #0]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	0699      	lsls	r1, r3, #26
 80033be:	bf42      	ittt	mi
 80033c0:	6833      	ldrmi	r3, [r6, #0]
 80033c2:	3302      	addmi	r3, #2
 80033c4:	6033      	strmi	r3, [r6, #0]
 80033c6:	6825      	ldr	r5, [r4, #0]
 80033c8:	f015 0506 	ands.w	r5, r5, #6
 80033cc:	d106      	bne.n	80033dc <_printf_common+0x48>
 80033ce:	f104 0a19 	add.w	sl, r4, #25
 80033d2:	68e3      	ldr	r3, [r4, #12]
 80033d4:	6832      	ldr	r2, [r6, #0]
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	42ab      	cmp	r3, r5
 80033da:	dc28      	bgt.n	800342e <_printf_common+0x9a>
 80033dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033e0:	1e13      	subs	r3, r2, #0
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	bf18      	it	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	0692      	lsls	r2, r2, #26
 80033ea:	d42d      	bmi.n	8003448 <_printf_common+0xb4>
 80033ec:	4649      	mov	r1, r9
 80033ee:	4638      	mov	r0, r7
 80033f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033f4:	47c0      	blx	r8
 80033f6:	3001      	adds	r0, #1
 80033f8:	d020      	beq.n	800343c <_printf_common+0xa8>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	68e5      	ldr	r5, [r4, #12]
 80033fe:	f003 0306 	and.w	r3, r3, #6
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf18      	it	ne
 8003406:	2500      	movne	r5, #0
 8003408:	6832      	ldr	r2, [r6, #0]
 800340a:	f04f 0600 	mov.w	r6, #0
 800340e:	68a3      	ldr	r3, [r4, #8]
 8003410:	bf08      	it	eq
 8003412:	1aad      	subeq	r5, r5, r2
 8003414:	6922      	ldr	r2, [r4, #16]
 8003416:	bf08      	it	eq
 8003418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800341c:	4293      	cmp	r3, r2
 800341e:	bfc4      	itt	gt
 8003420:	1a9b      	subgt	r3, r3, r2
 8003422:	18ed      	addgt	r5, r5, r3
 8003424:	341a      	adds	r4, #26
 8003426:	42b5      	cmp	r5, r6
 8003428:	d11a      	bne.n	8003460 <_printf_common+0xcc>
 800342a:	2000      	movs	r0, #0
 800342c:	e008      	b.n	8003440 <_printf_common+0xac>
 800342e:	2301      	movs	r3, #1
 8003430:	4652      	mov	r2, sl
 8003432:	4649      	mov	r1, r9
 8003434:	4638      	mov	r0, r7
 8003436:	47c0      	blx	r8
 8003438:	3001      	adds	r0, #1
 800343a:	d103      	bne.n	8003444 <_printf_common+0xb0>
 800343c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003444:	3501      	adds	r5, #1
 8003446:	e7c4      	b.n	80033d2 <_printf_common+0x3e>
 8003448:	2030      	movs	r0, #48	; 0x30
 800344a:	18e1      	adds	r1, r4, r3
 800344c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003456:	4422      	add	r2, r4
 8003458:	3302      	adds	r3, #2
 800345a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800345e:	e7c5      	b.n	80033ec <_printf_common+0x58>
 8003460:	2301      	movs	r3, #1
 8003462:	4622      	mov	r2, r4
 8003464:	4649      	mov	r1, r9
 8003466:	4638      	mov	r0, r7
 8003468:	47c0      	blx	r8
 800346a:	3001      	adds	r0, #1
 800346c:	d0e6      	beq.n	800343c <_printf_common+0xa8>
 800346e:	3601      	adds	r6, #1
 8003470:	e7d9      	b.n	8003426 <_printf_common+0x92>
	...

08003474 <_printf_i>:
 8003474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	7e0f      	ldrb	r7, [r1, #24]
 800347a:	4691      	mov	r9, r2
 800347c:	2f78      	cmp	r7, #120	; 0x78
 800347e:	4680      	mov	r8, r0
 8003480:	460c      	mov	r4, r1
 8003482:	469a      	mov	sl, r3
 8003484:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800348a:	d807      	bhi.n	800349c <_printf_i+0x28>
 800348c:	2f62      	cmp	r7, #98	; 0x62
 800348e:	d80a      	bhi.n	80034a6 <_printf_i+0x32>
 8003490:	2f00      	cmp	r7, #0
 8003492:	f000 80d9 	beq.w	8003648 <_printf_i+0x1d4>
 8003496:	2f58      	cmp	r7, #88	; 0x58
 8003498:	f000 80a4 	beq.w	80035e4 <_printf_i+0x170>
 800349c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034a4:	e03a      	b.n	800351c <_printf_i+0xa8>
 80034a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034aa:	2b15      	cmp	r3, #21
 80034ac:	d8f6      	bhi.n	800349c <_printf_i+0x28>
 80034ae:	a101      	add	r1, pc, #4	; (adr r1, 80034b4 <_printf_i+0x40>)
 80034b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034b4:	0800350d 	.word	0x0800350d
 80034b8:	08003521 	.word	0x08003521
 80034bc:	0800349d 	.word	0x0800349d
 80034c0:	0800349d 	.word	0x0800349d
 80034c4:	0800349d 	.word	0x0800349d
 80034c8:	0800349d 	.word	0x0800349d
 80034cc:	08003521 	.word	0x08003521
 80034d0:	0800349d 	.word	0x0800349d
 80034d4:	0800349d 	.word	0x0800349d
 80034d8:	0800349d 	.word	0x0800349d
 80034dc:	0800349d 	.word	0x0800349d
 80034e0:	0800362f 	.word	0x0800362f
 80034e4:	08003551 	.word	0x08003551
 80034e8:	08003611 	.word	0x08003611
 80034ec:	0800349d 	.word	0x0800349d
 80034f0:	0800349d 	.word	0x0800349d
 80034f4:	08003651 	.word	0x08003651
 80034f8:	0800349d 	.word	0x0800349d
 80034fc:	08003551 	.word	0x08003551
 8003500:	0800349d 	.word	0x0800349d
 8003504:	0800349d 	.word	0x0800349d
 8003508:	08003619 	.word	0x08003619
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	1d1a      	adds	r2, r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	602a      	str	r2, [r5, #0]
 8003514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800351c:	2301      	movs	r3, #1
 800351e:	e0a4      	b.n	800366a <_printf_i+0x1f6>
 8003520:	6820      	ldr	r0, [r4, #0]
 8003522:	6829      	ldr	r1, [r5, #0]
 8003524:	0606      	lsls	r6, r0, #24
 8003526:	f101 0304 	add.w	r3, r1, #4
 800352a:	d50a      	bpl.n	8003542 <_printf_i+0xce>
 800352c:	680e      	ldr	r6, [r1, #0]
 800352e:	602b      	str	r3, [r5, #0]
 8003530:	2e00      	cmp	r6, #0
 8003532:	da03      	bge.n	800353c <_printf_i+0xc8>
 8003534:	232d      	movs	r3, #45	; 0x2d
 8003536:	4276      	negs	r6, r6
 8003538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800353c:	230a      	movs	r3, #10
 800353e:	485e      	ldr	r0, [pc, #376]	; (80036b8 <_printf_i+0x244>)
 8003540:	e019      	b.n	8003576 <_printf_i+0x102>
 8003542:	680e      	ldr	r6, [r1, #0]
 8003544:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003548:	602b      	str	r3, [r5, #0]
 800354a:	bf18      	it	ne
 800354c:	b236      	sxthne	r6, r6
 800354e:	e7ef      	b.n	8003530 <_printf_i+0xbc>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	1d19      	adds	r1, r3, #4
 8003556:	6029      	str	r1, [r5, #0]
 8003558:	0601      	lsls	r1, r0, #24
 800355a:	d501      	bpl.n	8003560 <_printf_i+0xec>
 800355c:	681e      	ldr	r6, [r3, #0]
 800355e:	e002      	b.n	8003566 <_printf_i+0xf2>
 8003560:	0646      	lsls	r6, r0, #25
 8003562:	d5fb      	bpl.n	800355c <_printf_i+0xe8>
 8003564:	881e      	ldrh	r6, [r3, #0]
 8003566:	2f6f      	cmp	r7, #111	; 0x6f
 8003568:	bf0c      	ite	eq
 800356a:	2308      	moveq	r3, #8
 800356c:	230a      	movne	r3, #10
 800356e:	4852      	ldr	r0, [pc, #328]	; (80036b8 <_printf_i+0x244>)
 8003570:	2100      	movs	r1, #0
 8003572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003576:	6865      	ldr	r5, [r4, #4]
 8003578:	2d00      	cmp	r5, #0
 800357a:	bfa8      	it	ge
 800357c:	6821      	ldrge	r1, [r4, #0]
 800357e:	60a5      	str	r5, [r4, #8]
 8003580:	bfa4      	itt	ge
 8003582:	f021 0104 	bicge.w	r1, r1, #4
 8003586:	6021      	strge	r1, [r4, #0]
 8003588:	b90e      	cbnz	r6, 800358e <_printf_i+0x11a>
 800358a:	2d00      	cmp	r5, #0
 800358c:	d04d      	beq.n	800362a <_printf_i+0x1b6>
 800358e:	4615      	mov	r5, r2
 8003590:	fbb6 f1f3 	udiv	r1, r6, r3
 8003594:	fb03 6711 	mls	r7, r3, r1, r6
 8003598:	5dc7      	ldrb	r7, [r0, r7]
 800359a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800359e:	4637      	mov	r7, r6
 80035a0:	42bb      	cmp	r3, r7
 80035a2:	460e      	mov	r6, r1
 80035a4:	d9f4      	bls.n	8003590 <_printf_i+0x11c>
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d10b      	bne.n	80035c2 <_printf_i+0x14e>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	07de      	lsls	r6, r3, #31
 80035ae:	d508      	bpl.n	80035c2 <_printf_i+0x14e>
 80035b0:	6923      	ldr	r3, [r4, #16]
 80035b2:	6861      	ldr	r1, [r4, #4]
 80035b4:	4299      	cmp	r1, r3
 80035b6:	bfde      	ittt	le
 80035b8:	2330      	movle	r3, #48	; 0x30
 80035ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80035c2:	1b52      	subs	r2, r2, r5
 80035c4:	6122      	str	r2, [r4, #16]
 80035c6:	464b      	mov	r3, r9
 80035c8:	4621      	mov	r1, r4
 80035ca:	4640      	mov	r0, r8
 80035cc:	f8cd a000 	str.w	sl, [sp]
 80035d0:	aa03      	add	r2, sp, #12
 80035d2:	f7ff fedf 	bl	8003394 <_printf_common>
 80035d6:	3001      	adds	r0, #1
 80035d8:	d14c      	bne.n	8003674 <_printf_i+0x200>
 80035da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035de:	b004      	add	sp, #16
 80035e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e4:	4834      	ldr	r0, [pc, #208]	; (80036b8 <_printf_i+0x244>)
 80035e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035ea:	6829      	ldr	r1, [r5, #0]
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80035f2:	6029      	str	r1, [r5, #0]
 80035f4:	061d      	lsls	r5, r3, #24
 80035f6:	d514      	bpl.n	8003622 <_printf_i+0x1ae>
 80035f8:	07df      	lsls	r7, r3, #31
 80035fa:	bf44      	itt	mi
 80035fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003600:	6023      	strmi	r3, [r4, #0]
 8003602:	b91e      	cbnz	r6, 800360c <_printf_i+0x198>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f023 0320 	bic.w	r3, r3, #32
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	2310      	movs	r3, #16
 800360e:	e7af      	b.n	8003570 <_printf_i+0xfc>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	2378      	movs	r3, #120	; 0x78
 800361a:	4828      	ldr	r0, [pc, #160]	; (80036bc <_printf_i+0x248>)
 800361c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003620:	e7e3      	b.n	80035ea <_printf_i+0x176>
 8003622:	0659      	lsls	r1, r3, #25
 8003624:	bf48      	it	mi
 8003626:	b2b6      	uxthmi	r6, r6
 8003628:	e7e6      	b.n	80035f8 <_printf_i+0x184>
 800362a:	4615      	mov	r5, r2
 800362c:	e7bb      	b.n	80035a6 <_printf_i+0x132>
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	6826      	ldr	r6, [r4, #0]
 8003632:	1d18      	adds	r0, r3, #4
 8003634:	6961      	ldr	r1, [r4, #20]
 8003636:	6028      	str	r0, [r5, #0]
 8003638:	0635      	lsls	r5, r6, #24
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	d501      	bpl.n	8003642 <_printf_i+0x1ce>
 800363e:	6019      	str	r1, [r3, #0]
 8003640:	e002      	b.n	8003648 <_printf_i+0x1d4>
 8003642:	0670      	lsls	r0, r6, #25
 8003644:	d5fb      	bpl.n	800363e <_printf_i+0x1ca>
 8003646:	8019      	strh	r1, [r3, #0]
 8003648:	2300      	movs	r3, #0
 800364a:	4615      	mov	r5, r2
 800364c:	6123      	str	r3, [r4, #16]
 800364e:	e7ba      	b.n	80035c6 <_printf_i+0x152>
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	2100      	movs	r1, #0
 8003654:	1d1a      	adds	r2, r3, #4
 8003656:	602a      	str	r2, [r5, #0]
 8003658:	681d      	ldr	r5, [r3, #0]
 800365a:	6862      	ldr	r2, [r4, #4]
 800365c:	4628      	mov	r0, r5
 800365e:	f000 f82f 	bl	80036c0 <memchr>
 8003662:	b108      	cbz	r0, 8003668 <_printf_i+0x1f4>
 8003664:	1b40      	subs	r0, r0, r5
 8003666:	6060      	str	r0, [r4, #4]
 8003668:	6863      	ldr	r3, [r4, #4]
 800366a:	6123      	str	r3, [r4, #16]
 800366c:	2300      	movs	r3, #0
 800366e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003672:	e7a8      	b.n	80035c6 <_printf_i+0x152>
 8003674:	462a      	mov	r2, r5
 8003676:	4649      	mov	r1, r9
 8003678:	4640      	mov	r0, r8
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	47d0      	blx	sl
 800367e:	3001      	adds	r0, #1
 8003680:	d0ab      	beq.n	80035da <_printf_i+0x166>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	079b      	lsls	r3, r3, #30
 8003686:	d413      	bmi.n	80036b0 <_printf_i+0x23c>
 8003688:	68e0      	ldr	r0, [r4, #12]
 800368a:	9b03      	ldr	r3, [sp, #12]
 800368c:	4298      	cmp	r0, r3
 800368e:	bfb8      	it	lt
 8003690:	4618      	movlt	r0, r3
 8003692:	e7a4      	b.n	80035de <_printf_i+0x16a>
 8003694:	2301      	movs	r3, #1
 8003696:	4632      	mov	r2, r6
 8003698:	4649      	mov	r1, r9
 800369a:	4640      	mov	r0, r8
 800369c:	47d0      	blx	sl
 800369e:	3001      	adds	r0, #1
 80036a0:	d09b      	beq.n	80035da <_printf_i+0x166>
 80036a2:	3501      	adds	r5, #1
 80036a4:	68e3      	ldr	r3, [r4, #12]
 80036a6:	9903      	ldr	r1, [sp, #12]
 80036a8:	1a5b      	subs	r3, r3, r1
 80036aa:	42ab      	cmp	r3, r5
 80036ac:	dcf2      	bgt.n	8003694 <_printf_i+0x220>
 80036ae:	e7eb      	b.n	8003688 <_printf_i+0x214>
 80036b0:	2500      	movs	r5, #0
 80036b2:	f104 0619 	add.w	r6, r4, #25
 80036b6:	e7f5      	b.n	80036a4 <_printf_i+0x230>
 80036b8:	080039fd 	.word	0x080039fd
 80036bc:	08003a0e 	.word	0x08003a0e

080036c0 <memchr>:
 80036c0:	4603      	mov	r3, r0
 80036c2:	b510      	push	{r4, lr}
 80036c4:	b2c9      	uxtb	r1, r1
 80036c6:	4402      	add	r2, r0
 80036c8:	4293      	cmp	r3, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	d101      	bne.n	80036d2 <memchr+0x12>
 80036ce:	2000      	movs	r0, #0
 80036d0:	e003      	b.n	80036da <memchr+0x1a>
 80036d2:	7804      	ldrb	r4, [r0, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	428c      	cmp	r4, r1
 80036d8:	d1f6      	bne.n	80036c8 <memchr+0x8>
 80036da:	bd10      	pop	{r4, pc}

080036dc <memmove>:
 80036dc:	4288      	cmp	r0, r1
 80036de:	b510      	push	{r4, lr}
 80036e0:	eb01 0402 	add.w	r4, r1, r2
 80036e4:	d902      	bls.n	80036ec <memmove+0x10>
 80036e6:	4284      	cmp	r4, r0
 80036e8:	4623      	mov	r3, r4
 80036ea:	d807      	bhi.n	80036fc <memmove+0x20>
 80036ec:	1e43      	subs	r3, r0, #1
 80036ee:	42a1      	cmp	r1, r4
 80036f0:	d008      	beq.n	8003704 <memmove+0x28>
 80036f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036fa:	e7f8      	b.n	80036ee <memmove+0x12>
 80036fc:	4601      	mov	r1, r0
 80036fe:	4402      	add	r2, r0
 8003700:	428a      	cmp	r2, r1
 8003702:	d100      	bne.n	8003706 <memmove+0x2a>
 8003704:	bd10      	pop	{r4, pc}
 8003706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800370a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800370e:	e7f7      	b.n	8003700 <memmove+0x24>

08003710 <_free_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4605      	mov	r5, r0
 8003714:	2900      	cmp	r1, #0
 8003716:	d040      	beq.n	800379a <_free_r+0x8a>
 8003718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800371c:	1f0c      	subs	r4, r1, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	bfb8      	it	lt
 8003722:	18e4      	addlt	r4, r4, r3
 8003724:	f000 f910 	bl	8003948 <__malloc_lock>
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <_free_r+0x8c>)
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	b933      	cbnz	r3, 800373c <_free_r+0x2c>
 800372e:	6063      	str	r3, [r4, #4]
 8003730:	6014      	str	r4, [r2, #0]
 8003732:	4628      	mov	r0, r5
 8003734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003738:	f000 b90c 	b.w	8003954 <__malloc_unlock>
 800373c:	42a3      	cmp	r3, r4
 800373e:	d908      	bls.n	8003752 <_free_r+0x42>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	1821      	adds	r1, r4, r0
 8003744:	428b      	cmp	r3, r1
 8003746:	bf01      	itttt	eq
 8003748:	6819      	ldreq	r1, [r3, #0]
 800374a:	685b      	ldreq	r3, [r3, #4]
 800374c:	1809      	addeq	r1, r1, r0
 800374e:	6021      	streq	r1, [r4, #0]
 8003750:	e7ed      	b.n	800372e <_free_r+0x1e>
 8003752:	461a      	mov	r2, r3
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	b10b      	cbz	r3, 800375c <_free_r+0x4c>
 8003758:	42a3      	cmp	r3, r4
 800375a:	d9fa      	bls.n	8003752 <_free_r+0x42>
 800375c:	6811      	ldr	r1, [r2, #0]
 800375e:	1850      	adds	r0, r2, r1
 8003760:	42a0      	cmp	r0, r4
 8003762:	d10b      	bne.n	800377c <_free_r+0x6c>
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	4401      	add	r1, r0
 8003768:	1850      	adds	r0, r2, r1
 800376a:	4283      	cmp	r3, r0
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	d1e0      	bne.n	8003732 <_free_r+0x22>
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4401      	add	r1, r0
 8003776:	6011      	str	r1, [r2, #0]
 8003778:	6053      	str	r3, [r2, #4]
 800377a:	e7da      	b.n	8003732 <_free_r+0x22>
 800377c:	d902      	bls.n	8003784 <_free_r+0x74>
 800377e:	230c      	movs	r3, #12
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	e7d6      	b.n	8003732 <_free_r+0x22>
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	1821      	adds	r1, r4, r0
 8003788:	428b      	cmp	r3, r1
 800378a:	bf01      	itttt	eq
 800378c:	6819      	ldreq	r1, [r3, #0]
 800378e:	685b      	ldreq	r3, [r3, #4]
 8003790:	1809      	addeq	r1, r1, r0
 8003792:	6021      	streq	r1, [r4, #0]
 8003794:	6063      	str	r3, [r4, #4]
 8003796:	6054      	str	r4, [r2, #4]
 8003798:	e7cb      	b.n	8003732 <_free_r+0x22>
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	2000012c 	.word	0x2000012c

080037a0 <sbrk_aligned>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4e0e      	ldr	r6, [pc, #56]	; (80037dc <sbrk_aligned+0x3c>)
 80037a4:	460c      	mov	r4, r1
 80037a6:	6831      	ldr	r1, [r6, #0]
 80037a8:	4605      	mov	r5, r0
 80037aa:	b911      	cbnz	r1, 80037b2 <sbrk_aligned+0x12>
 80037ac:	f000 f8bc 	bl	8003928 <_sbrk_r>
 80037b0:	6030      	str	r0, [r6, #0]
 80037b2:	4621      	mov	r1, r4
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 f8b7 	bl	8003928 <_sbrk_r>
 80037ba:	1c43      	adds	r3, r0, #1
 80037bc:	d00a      	beq.n	80037d4 <sbrk_aligned+0x34>
 80037be:	1cc4      	adds	r4, r0, #3
 80037c0:	f024 0403 	bic.w	r4, r4, #3
 80037c4:	42a0      	cmp	r0, r4
 80037c6:	d007      	beq.n	80037d8 <sbrk_aligned+0x38>
 80037c8:	1a21      	subs	r1, r4, r0
 80037ca:	4628      	mov	r0, r5
 80037cc:	f000 f8ac 	bl	8003928 <_sbrk_r>
 80037d0:	3001      	adds	r0, #1
 80037d2:	d101      	bne.n	80037d8 <sbrk_aligned+0x38>
 80037d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80037d8:	4620      	mov	r0, r4
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	20000130 	.word	0x20000130

080037e0 <_malloc_r>:
 80037e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e4:	1ccd      	adds	r5, r1, #3
 80037e6:	f025 0503 	bic.w	r5, r5, #3
 80037ea:	3508      	adds	r5, #8
 80037ec:	2d0c      	cmp	r5, #12
 80037ee:	bf38      	it	cc
 80037f0:	250c      	movcc	r5, #12
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	4607      	mov	r7, r0
 80037f6:	db01      	blt.n	80037fc <_malloc_r+0x1c>
 80037f8:	42a9      	cmp	r1, r5
 80037fa:	d905      	bls.n	8003808 <_malloc_r+0x28>
 80037fc:	230c      	movs	r3, #12
 80037fe:	2600      	movs	r6, #0
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4630      	mov	r0, r6
 8003804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003808:	4e2e      	ldr	r6, [pc, #184]	; (80038c4 <_malloc_r+0xe4>)
 800380a:	f000 f89d 	bl	8003948 <__malloc_lock>
 800380e:	6833      	ldr	r3, [r6, #0]
 8003810:	461c      	mov	r4, r3
 8003812:	bb34      	cbnz	r4, 8003862 <_malloc_r+0x82>
 8003814:	4629      	mov	r1, r5
 8003816:	4638      	mov	r0, r7
 8003818:	f7ff ffc2 	bl	80037a0 <sbrk_aligned>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	4604      	mov	r4, r0
 8003820:	d14d      	bne.n	80038be <_malloc_r+0xde>
 8003822:	6834      	ldr	r4, [r6, #0]
 8003824:	4626      	mov	r6, r4
 8003826:	2e00      	cmp	r6, #0
 8003828:	d140      	bne.n	80038ac <_malloc_r+0xcc>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	4631      	mov	r1, r6
 800382e:	4638      	mov	r0, r7
 8003830:	eb04 0803 	add.w	r8, r4, r3
 8003834:	f000 f878 	bl	8003928 <_sbrk_r>
 8003838:	4580      	cmp	r8, r0
 800383a:	d13a      	bne.n	80038b2 <_malloc_r+0xd2>
 800383c:	6821      	ldr	r1, [r4, #0]
 800383e:	3503      	adds	r5, #3
 8003840:	1a6d      	subs	r5, r5, r1
 8003842:	f025 0503 	bic.w	r5, r5, #3
 8003846:	3508      	adds	r5, #8
 8003848:	2d0c      	cmp	r5, #12
 800384a:	bf38      	it	cc
 800384c:	250c      	movcc	r5, #12
 800384e:	4638      	mov	r0, r7
 8003850:	4629      	mov	r1, r5
 8003852:	f7ff ffa5 	bl	80037a0 <sbrk_aligned>
 8003856:	3001      	adds	r0, #1
 8003858:	d02b      	beq.n	80038b2 <_malloc_r+0xd2>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	442b      	add	r3, r5
 800385e:	6023      	str	r3, [r4, #0]
 8003860:	e00e      	b.n	8003880 <_malloc_r+0xa0>
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	1b52      	subs	r2, r2, r5
 8003866:	d41e      	bmi.n	80038a6 <_malloc_r+0xc6>
 8003868:	2a0b      	cmp	r2, #11
 800386a:	d916      	bls.n	800389a <_malloc_r+0xba>
 800386c:	1961      	adds	r1, r4, r5
 800386e:	42a3      	cmp	r3, r4
 8003870:	6025      	str	r5, [r4, #0]
 8003872:	bf18      	it	ne
 8003874:	6059      	strne	r1, [r3, #4]
 8003876:	6863      	ldr	r3, [r4, #4]
 8003878:	bf08      	it	eq
 800387a:	6031      	streq	r1, [r6, #0]
 800387c:	5162      	str	r2, [r4, r5]
 800387e:	604b      	str	r3, [r1, #4]
 8003880:	4638      	mov	r0, r7
 8003882:	f104 060b 	add.w	r6, r4, #11
 8003886:	f000 f865 	bl	8003954 <__malloc_unlock>
 800388a:	f026 0607 	bic.w	r6, r6, #7
 800388e:	1d23      	adds	r3, r4, #4
 8003890:	1af2      	subs	r2, r6, r3
 8003892:	d0b6      	beq.n	8003802 <_malloc_r+0x22>
 8003894:	1b9b      	subs	r3, r3, r6
 8003896:	50a3      	str	r3, [r4, r2]
 8003898:	e7b3      	b.n	8003802 <_malloc_r+0x22>
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	42a3      	cmp	r3, r4
 800389e:	bf0c      	ite	eq
 80038a0:	6032      	streq	r2, [r6, #0]
 80038a2:	605a      	strne	r2, [r3, #4]
 80038a4:	e7ec      	b.n	8003880 <_malloc_r+0xa0>
 80038a6:	4623      	mov	r3, r4
 80038a8:	6864      	ldr	r4, [r4, #4]
 80038aa:	e7b2      	b.n	8003812 <_malloc_r+0x32>
 80038ac:	4634      	mov	r4, r6
 80038ae:	6876      	ldr	r6, [r6, #4]
 80038b0:	e7b9      	b.n	8003826 <_malloc_r+0x46>
 80038b2:	230c      	movs	r3, #12
 80038b4:	4638      	mov	r0, r7
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	f000 f84c 	bl	8003954 <__malloc_unlock>
 80038bc:	e7a1      	b.n	8003802 <_malloc_r+0x22>
 80038be:	6025      	str	r5, [r4, #0]
 80038c0:	e7de      	b.n	8003880 <_malloc_r+0xa0>
 80038c2:	bf00      	nop
 80038c4:	2000012c 	.word	0x2000012c

080038c8 <_realloc_r>:
 80038c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038cc:	4680      	mov	r8, r0
 80038ce:	4614      	mov	r4, r2
 80038d0:	460e      	mov	r6, r1
 80038d2:	b921      	cbnz	r1, 80038de <_realloc_r+0x16>
 80038d4:	4611      	mov	r1, r2
 80038d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038da:	f7ff bf81 	b.w	80037e0 <_malloc_r>
 80038de:	b92a      	cbnz	r2, 80038ec <_realloc_r+0x24>
 80038e0:	f7ff ff16 	bl	8003710 <_free_r>
 80038e4:	4625      	mov	r5, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ec:	f000 f838 	bl	8003960 <_malloc_usable_size_r>
 80038f0:	4284      	cmp	r4, r0
 80038f2:	4607      	mov	r7, r0
 80038f4:	d802      	bhi.n	80038fc <_realloc_r+0x34>
 80038f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038fa:	d812      	bhi.n	8003922 <_realloc_r+0x5a>
 80038fc:	4621      	mov	r1, r4
 80038fe:	4640      	mov	r0, r8
 8003900:	f7ff ff6e 	bl	80037e0 <_malloc_r>
 8003904:	4605      	mov	r5, r0
 8003906:	2800      	cmp	r0, #0
 8003908:	d0ed      	beq.n	80038e6 <_realloc_r+0x1e>
 800390a:	42bc      	cmp	r4, r7
 800390c:	4622      	mov	r2, r4
 800390e:	4631      	mov	r1, r6
 8003910:	bf28      	it	cs
 8003912:	463a      	movcs	r2, r7
 8003914:	f7ff fbac 	bl	8003070 <memcpy>
 8003918:	4631      	mov	r1, r6
 800391a:	4640      	mov	r0, r8
 800391c:	f7ff fef8 	bl	8003710 <_free_r>
 8003920:	e7e1      	b.n	80038e6 <_realloc_r+0x1e>
 8003922:	4635      	mov	r5, r6
 8003924:	e7df      	b.n	80038e6 <_realloc_r+0x1e>
	...

08003928 <_sbrk_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	2300      	movs	r3, #0
 800392c:	4d05      	ldr	r5, [pc, #20]	; (8003944 <_sbrk_r+0x1c>)
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	f7fd fa48 	bl	8000dc8 <_sbrk>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d102      	bne.n	8003942 <_sbrk_r+0x1a>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	b103      	cbz	r3, 8003942 <_sbrk_r+0x1a>
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	20000134 	.word	0x20000134

08003948 <__malloc_lock>:
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <__malloc_lock+0x8>)
 800394a:	f000 b811 	b.w	8003970 <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	20000138 	.word	0x20000138

08003954 <__malloc_unlock>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__malloc_unlock+0x8>)
 8003956:	f000 b80c 	b.w	8003972 <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	20000138 	.word	0x20000138

08003960 <_malloc_usable_size_r>:
 8003960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003964:	1f18      	subs	r0, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	bfbc      	itt	lt
 800396a:	580b      	ldrlt	r3, [r1, r0]
 800396c:	18c0      	addlt	r0, r0, r3
 800396e:	4770      	bx	lr

08003970 <__retarget_lock_acquire_recursive>:
 8003970:	4770      	bx	lr

08003972 <__retarget_lock_release_recursive>:
 8003972:	4770      	bx	lr

08003974 <_init>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr

08003980 <_fini>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr
