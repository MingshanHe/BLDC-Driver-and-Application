
BLDC_SENSOR_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da4  08006da4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006da4  08006da4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006da4  08006da4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000074  08006e28  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08006e28  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013236  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286a  00000000  00000000  000332d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00035b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00036bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b93d  00000000  00000000  00037bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151ab  00000000  00000000  0005350d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956e0  00000000  00000000  000686b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdd98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d54  00000000  00000000  000fdde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080069c0 	.word	0x080069c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080069c0 	.word	0x080069c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bbc:	d2ed      	bcs.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_f2iz>:
 8000fb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc0:	d30f      	bcc.n	8000fe2 <__aeabi_f2iz+0x2a>
 8000fc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fca:	d90d      	bls.n	8000fe8 <__aeabi_f2iz+0x30>
 8000fcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fd8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fdc:	bf18      	it	ne
 8000fde:	4240      	negne	r0, r0
 8000fe0:	4770      	bx	lr
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	4770      	bx	lr
 8000fe8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_f2iz+0x3a>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d105      	bne.n	8000ffe <__aeabi_f2iz+0x46>
 8000ff2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ff6:	bf08      	it	eq
 8000ff8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	0000      	movs	r0, r0
	...

08001008 <_Z4_sinf>:
// function approximating the sine calculation by using fixed size array
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(a < _PI_2){
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fa09 	bl	8000428 <__aeabi_f2d>
 8001016:	a3c8      	add	r3, pc, #800	; (adr r3, 8001338 <_Z4_sinf+0x330>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff fcce 	bl	80009bc <__aeabi_dcmplt>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d058      	beq.n	80010d8 <_Z4_sinf+0xd0>
    //return sine_array[(int)(126.6873* a)];           // float array optimized
    return 0.0001*sine_array[_round(126.6873* a)];      // int array optimized
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff f9fe 	bl	8000428 <__aeabi_f2d>
 800102c:	a3c4      	add	r3, pc, #784	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fa51 	bl	80004d8 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	f7ff fccd 	bl	80009e4 <__aeabi_dcmpge>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d018      	beq.n	8001082 <_Z4_sinf+0x7a>
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f9e9 	bl	8000428 <__aeabi_f2d>
 8001056:	a3ba      	add	r3, pc, #744	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fa3c 	bl	80004d8 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4bbe      	ldr	r3, [pc, #760]	; (8001368 <_Z4_sinf+0x360>)
 800106e:	f7ff f87d 	bl	800016c <__adddf3>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fcc7 	bl	8000a0c <__aeabi_d2iz>
 800107e:	4603      	mov	r3, r0
 8001080:	e017      	b.n	80010b2 <_Z4_sinf+0xaa>
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff f9d0 	bl	8000428 <__aeabi_f2d>
 8001088:	a3ad      	add	r3, pc, #692	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fa23 	bl	80004d8 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4bb2      	ldr	r3, [pc, #712]	; (8001368 <_Z4_sinf+0x360>)
 80010a0:	f7ff f862 	bl	8000168 <__aeabi_dsub>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fcae 	bl	8000a0c <__aeabi_d2iz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4aae      	ldr	r2, [pc, #696]	; (800136c <_Z4_sinf+0x364>)
 80010b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f9a3 	bl	8000404 <__aeabi_i2d>
 80010be:	a3a2      	add	r3, pc, #648	; (adr r3, 8001348 <_Z4_sinf+0x340>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fa08 	bl	80004d8 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fcc4 	bl	8000a5c <__aeabi_d2f>
 80010d4:	4603      	mov	r3, r0
 80010d6:	e12b      	b.n	8001330 <_Z4_sinf+0x328>
  }else if(a < _PI){
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff f9a5 	bl	8000428 <__aeabi_f2d>
 80010de:	a39c      	add	r3, pc, #624	; (adr r3, 8001350 <_Z4_sinf+0x348>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fc6a 	bl	80009bc <__aeabi_dcmplt>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d05c      	beq.n	80011a8 <_Z4_sinf+0x1a0>
    //return sine_array[398 - (int)(126.6873*a)];          // float array optimized
    return 0.0001*sine_array[398 - _round(126.6873*a)];     // int array optimized
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff f99a 	bl	8000428 <__aeabi_f2d>
 80010f4:	a392      	add	r3, pc, #584	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff f9ed 	bl	80004d8 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	f7ff fc69 	bl	80009e4 <__aeabi_dcmpge>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01a      	beq.n	800114e <_Z4_sinf+0x146>
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff f985 	bl	8000428 <__aeabi_f2d>
 800111e:	a388      	add	r3, pc, #544	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff f9d8 	bl	80004d8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <_Z4_sinf+0x360>)
 8001136:	f7ff f819 	bl	800016c <__adddf3>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fc63 	bl	8000a0c <__aeabi_d2iz>
 8001146:	4603      	mov	r3, r0
 8001148:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 800114c:	e019      	b.n	8001182 <_Z4_sinf+0x17a>
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff f96a 	bl	8000428 <__aeabi_f2d>
 8001154:	a37a      	add	r3, pc, #488	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff f9bd 	bl	80004d8 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b7f      	ldr	r3, [pc, #508]	; (8001368 <_Z4_sinf+0x360>)
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fc48 	bl	8000a0c <__aeabi_d2iz>
 800117c:	4603      	mov	r3, r0
 800117e:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001182:	4a7a      	ldr	r2, [pc, #488]	; (800136c <_Z4_sinf+0x364>)
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f93b 	bl	8000404 <__aeabi_i2d>
 800118e:	a36e      	add	r3, pc, #440	; (adr r3, 8001348 <_Z4_sinf+0x340>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff f9a0 	bl	80004d8 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc5c 	bl	8000a5c <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	e0c3      	b.n	8001330 <_Z4_sinf+0x328>
  }else if(a < _3PI_2){
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff f93d 	bl	8000428 <__aeabi_f2d>
 80011ae:	a36a      	add	r3, pc, #424	; (adr r3, 8001358 <_Z4_sinf+0x350>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fc02 	bl	80009bc <__aeabi_dcmplt>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d05c      	beq.n	8001278 <_Z4_sinf+0x270>
    //return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
    return -0.0001*sine_array[-398 + _round(126.6873*a)];      // int array optimized
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff f932 	bl	8000428 <__aeabi_f2d>
 80011c4:	a35e      	add	r3, pc, #376	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff f985 	bl	80004d8 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	f7ff fc01 	bl	80009e4 <__aeabi_dcmpge>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01a      	beq.n	800121e <_Z4_sinf+0x216>
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff f91d 	bl	8000428 <__aeabi_f2d>
 80011ee:	a354      	add	r3, pc, #336	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff f970 	bl	80004d8 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b58      	ldr	r3, [pc, #352]	; (8001368 <_Z4_sinf+0x360>)
 8001206:	f7fe ffb1 	bl	800016c <__adddf3>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fbfb 	bl	8000a0c <__aeabi_d2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 800121c:	e019      	b.n	8001252 <_Z4_sinf+0x24a>
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff f902 	bl	8000428 <__aeabi_f2d>
 8001224:	a346      	add	r3, pc, #280	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f955 	bl	80004d8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <_Z4_sinf+0x360>)
 800123c:	f7fe ff94 	bl	8000168 <__aeabi_dsub>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fbe0 	bl	8000a0c <__aeabi_d2iz>
 800124c:	4603      	mov	r3, r0
 800124e:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 8001252:	4a46      	ldr	r2, [pc, #280]	; (800136c <_Z4_sinf+0x364>)
 8001254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f8d3 	bl	8000404 <__aeabi_i2d>
 800125e:	a340      	add	r3, pc, #256	; (adr r3, 8001360 <_Z4_sinf+0x358>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f938 	bl	80004d8 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fbf4 	bl	8000a5c <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	e05b      	b.n	8001330 <_Z4_sinf+0x328>
  } else {
    //return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
    return -0.0001*sine_array[796 - _round(126.6873*a)];      // int array optimized
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff f8d5 	bl	8000428 <__aeabi_f2d>
 800127e:	a330      	add	r3, pc, #192	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff f928 	bl	80004d8 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	f7ff fba4 	bl	80009e4 <__aeabi_dcmpge>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d01a      	beq.n	80012d8 <_Z4_sinf+0x2d0>
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff f8c0 	bl	8000428 <__aeabi_f2d>
 80012a8:	a325      	add	r3, pc, #148	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f913 	bl	80004d8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <_Z4_sinf+0x360>)
 80012c0:	f7fe ff54 	bl	800016c <__adddf3>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fb9e 	bl	8000a0c <__aeabi_d2iz>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80012d6:	e019      	b.n	800130c <_Z4_sinf+0x304>
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff f8a5 	bl	8000428 <__aeabi_f2d>
 80012de:	a318      	add	r3, pc, #96	; (adr r3, 8001340 <_Z4_sinf+0x338>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f8f8 	bl	80004d8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <_Z4_sinf+0x360>)
 80012f6:	f7fe ff37 	bl	8000168 <__aeabi_dsub>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fb83 	bl	8000a0c <__aeabi_d2iz>
 8001306:	4603      	mov	r3, r0
 8001308:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800130c:	4a17      	ldr	r2, [pc, #92]	; (800136c <_Z4_sinf+0x364>)
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f876 	bl	8000404 <__aeabi_i2d>
 8001318:	a311      	add	r3, pc, #68	; (adr r3, 8001360 <_Z4_sinf+0x358>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f8db 	bl	80004d8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fb97 	bl	8000a5c <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
  }
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	5443d6f4 	.word	0x5443d6f4
 800133c:	3ff921fb 	.word	0x3ff921fb
 8001340:	b923a29c 	.word	0xb923a29c
 8001344:	405fabfc 	.word	0x405fabfc
 8001348:	eb1c432d 	.word	0xeb1c432d
 800134c:	3f1a36e2 	.word	0x3f1a36e2
 8001350:	54442eea 	.word	0x54442eea
 8001354:	400921fb 	.word	0x400921fb
 8001358:	7f330d32 	.word	0x7f330d32
 800135c:	4012d97c 	.word	0x4012d97c
 8001360:	eb1c432d 	.word	0xeb1c432d
 8001364:	bf1a36e2 	.word	0xbf1a36e2
 8001368:	3fe00000 	.word	0x3fe00000
 800136c:	08006a38 	.word	0x08006a38

08001370 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  float a_sin = a + _PI_2;
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff f855 	bl	8000428 <__aeabi_f2d>
 800137e:	a31a      	add	r3, pc, #104	; (adr r3, 80013e8 <_Z4_cosf+0x78>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f7fe fef2 	bl	800016c <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb64 	bl	8000a5c <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff f845 	bl	8000428 <__aeabi_f2d>
 800139e:	a314      	add	r3, pc, #80	; (adr r3, 80013f0 <_Z4_cosf+0x80>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff fb28 	bl	80009f8 <__aeabi_dcmpgt>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00f      	beq.n	80013ce <_Z4_cosf+0x5e>
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7ff f83a 	bl	8000428 <__aeabi_f2d>
 80013b4:	a30e      	add	r3, pc, #56	; (adr r3, 80013f0 <_Z4_cosf+0x80>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7fe fed5 	bl	8000168 <__aeabi_dsub>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fb49 	bl	8000a5c <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	e000      	b.n	80013d0 <_Z4_cosf+0x60>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	60fb      	str	r3, [r7, #12]
  return _sin(a_sin);
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff fe18 	bl	8001008 <_Z4_sinf>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	f3af 8000 	nop.w
 80013e8:	5443d6f4 	.word	0x5443d6f4
 80013ec:	3ff921fb 	.word	0x3ff921fb
 80013f0:	54442eea 	.word	0x54442eea
 80013f4:	401921fb 	.word	0x401921fb

080013f8 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>:
 *  Created on: Nov 24, 2022
 *      Author: hemingshan
 */
#include "magnetic_sensor.hpp"

AS5600::AS5600(I2C_HandleTypeDef &hi2c_, UART_HandleTypeDef &huart_)
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	226c      	movs	r2, #108	; 0x6c
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	705a      	strb	r2, [r3, #1]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2201      	movs	r2, #1
 8001414:	709a      	strb	r2, [r3, #2]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2202      	movs	r2, #2
 800141a:	70da      	strb	r2, [r3, #3]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2203      	movs	r2, #3
 8001420:	711a      	strb	r2, [r3, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2204      	movs	r2, #4
 8001426:	715a      	strb	r2, [r3, #5]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2205      	movs	r2, #5
 800142c:	719a      	strb	r2, [r3, #6]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2206      	movs	r2, #6
 8001432:	71da      	strb	r2, [r3, #7]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2207      	movs	r2, #7
 8001438:	721a      	strb	r2, [r3, #8]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2208      	movs	r2, #8
 800143e:	725a      	strb	r2, [r3, #9]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	220c      	movs	r2, #12
 8001444:	729a      	strb	r2, [r3, #10]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	220d      	movs	r2, #13
 800144a:	72da      	strb	r2, [r3, #11]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	220e      	movs	r2, #14
 8001450:	731a      	strb	r2, [r3, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	220f      	movs	r2, #15
 8001456:	735a      	strb	r2, [r3, #13]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	220b      	movs	r2, #11
 800145c:	739a      	strb	r2, [r3, #14]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	221a      	movs	r2, #26
 8001462:	73da      	strb	r2, [r3, #15]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	221b      	movs	r2, #27
 8001468:	741a      	strb	r2, [r3, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	221c      	movs	r2, #28
 800146e:	745a      	strb	r2, [r3, #17]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	749a      	strb	r2, [r3, #18]
{
	/* I2C1 Initialization*/
	hi2c = hi2c_;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	3314      	adds	r3, #20
 800147c:	4611      	mov	r1, r2
 800147e:	2254      	movs	r2, #84	; 0x54
 8001480:	4618      	mov	r0, r3
 8001482:	f004 fe1b 	bl	80060bc <memcpy>

	hi2c.Instance = I2C1;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4a30      	ldr	r2, [pc, #192]	; (800154c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x154>)
 800148a:	615a      	str	r2, [r3, #20]
	hi2c.Init.ClockSpeed = 100000;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4a30      	ldr	r2, [pc, #192]	; (8001550 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x158>)
 8001490:	619a      	str	r2, [r3, #24]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
	hi2c.Init.OwnAddress1 = 0;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
	hi2c.Init.OwnAddress2 = 0;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_I2C_Init(&hi2c) != HAL_OK)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3314      	adds	r3, #20
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 fd84 	bl	8002fd0 <HAL_I2C_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0xe4>
	{
		Error_Handler();
 80014d8:	f000 fd1a 	bl	8001f10 <Error_Handler>
	}

	/* UART1 Initialization*/
	huart = huart_;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	3368      	adds	r3, #104	; 0x68
 80014e2:	4611      	mov	r1, r2
 80014e4:	2244      	movs	r2, #68	; 0x44
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 fde8 	bl	80060bc <memcpy>

	huart.Instance = USART1;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x15c>)
 80014f0:	669a      	str	r2, [r3, #104]	; 0x68
	huart.Init.BaudRate = 115200;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	66da      	str	r2, [r3, #108]	; 0x6c
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	671a      	str	r2, [r3, #112]	; 0x70
	huart.Init.StopBits = UART_STOPBITS_1;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	675a      	str	r2, [r3, #116]	; 0x74
	huart.Init.Parity = UART_PARITY_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	679a      	str	r2, [r3, #120]	; 0x78
	huart.Init.Mode = UART_MODE_TX_RX;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	220c      	movs	r2, #12
 8001510:	67da      	str	r2, [r3, #124]	; 0x7c
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if (HAL_UART_Init(&huart) != HAL_OK)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3368      	adds	r3, #104	; 0x68
 8001526:	4618      	mov	r0, r3
 8001528:	f004 f867 	bl	80055fa <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x148>
	{
		Error_Handler();
 800153c:	f000 fce8 	bl	8001f10 <Error_Handler>
	}
}
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40005400 	.word	0x40005400
 8001550:	000186a0 	.word	0x000186a0
 8001554:	40013800 	.word	0x40013800

08001558 <_ZN6AS56007ReadRegEh>:
	HAL_I2C_Master_Transmit(&hi2c,(AS5600_ADDR),&Data,1,10);
	HAL_I2C_Mem_Write(&hi2c,(AS5600_ADDR),Reg,1,&Data,1,100);
}

uint8_t AS5600::ReadReg(uint8_t Reg)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af04      	add	r7, sp, #16
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
	uint8_t DataRead = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c,(AS5600_ADDR),Reg,1,&DataRead,1,100);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f103 0014 	add.w	r0, r3, #20
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b299      	uxth	r1, r3
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	b29a      	uxth	r2, r3
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2301      	movs	r3, #1
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	f107 030f 	add.w	r3, r7, #15
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	f001 fe66 	bl	8003258 <HAL_I2C_Mem_Read>

	return DataRead;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <_ZN6AS56008GetAngleEv>:
uint16_t AS5600::GetAngle(void)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	uint8_t buf[12];
//	Data[0] = ReadReg(ANGLE_L);
//	Data[1] = (ReadReg(ANGLE_H) << 8);
	int Data = (ReadReg(ANGLE_L)|(ReadReg(ANGLE_H) << 8));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7b5b      	ldrb	r3, [r3, #13]
 80015a4:	4619      	mov	r1, r3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffd6 	bl	8001558 <_ZN6AS56007ReadRegEh>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461c      	mov	r4, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7b1b      	ldrb	r3, [r3, #12]
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffce 	bl	8001558 <_ZN6AS56007ReadRegEh>
 80015bc:	4603      	mov	r3, r0
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	4323      	orrs	r3, r4
 80015c2:	617b      	str	r3, [r7, #20]
	sprintf((char*)buf,"%d\r\n",(ReadReg(ANGLE_L)|(ReadReg(ANGLE_H) << 8)));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	4619      	mov	r1, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffc4 	bl	8001558 <_ZN6AS56007ReadRegEh>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461c      	mov	r4, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7b1b      	ldrb	r3, [r3, #12]
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffbc 	bl	8001558 <_ZN6AS56007ReadRegEh>
 80015e0:	4603      	mov	r3, r0
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	ea44 0203 	orr.w	r2, r4, r3
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4911      	ldr	r1, [pc, #68]	; (8001634 <_ZN6AS56008GetAngleEv+0x9c>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fd7a 	bl	80060e8 <siprintf>
	sprintf((char*)buf,"%d\r\n",Data);
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	490e      	ldr	r1, [pc, #56]	; (8001634 <_ZN6AS56008GetAngleEv+0x9c>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 fd73 	bl	80060e8 <siprintf>
	HAL_UART_Transmit(&huart, buf,  strlen((char*)buf), HAL_MAX_DELAY);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fd9f 	bl	8000150 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	f107 0108 	add.w	r1, r7, #8
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	4620      	mov	r0, r4
 8001620:	f004 f838 	bl	8005694 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001624:	2064      	movs	r0, #100	; 0x64
 8001626:	f000 ff43 	bl	80024b0 <HAL_Delay>
//	return Data;
	return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	080069d8 	.word	0x080069d8

08001638 <_ZN6AS56009GetStatusEv>:

uint8_t AS5600::GetStatus(void)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
#if DEBUG
	uint8_t buf[12];
	sprintf((char*)buf,"%x\r\n",(ReadReg(STATUS) & 0x38));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7b9b      	ldrb	r3, [r3, #14]
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff86 	bl	8001558 <_ZN6AS56007ReadRegEh>
 800164c:	4603      	mov	r3, r0
 800164e:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4929      	ldr	r1, [pc, #164]	; (80016fc <_ZN6AS56009GetStatusEv+0xc4>)
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fd45 	bl	80060e8 <siprintf>
	if ((ReadReg(STATUS) & 0x38) == 0x20)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7b9b      	ldrb	r3, [r3, #14]
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff77 	bl	8001558 <_ZN6AS56007ReadRegEh>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001670:	2b20      	cmp	r3, #32
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01a      	beq.n	80016b4 <_ZN6AS56009GetStatusEv+0x7c>
	{
		strcpy((char*)buf, "Magnet!\r\n");
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <_ZN6AS56009GetStatusEv+0xc8>)
 8001684:	ca07      	ldmia	r2, {r0, r1, r2}
 8001686:	c303      	stmia	r3!, {r0, r1}
 8001688:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fd5b 	bl	8000150 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	f107 010c 	add.w	r1, r7, #12
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	4620      	mov	r0, r4
 80016a8:	f003 fff4 	bl	8005694 <HAL_UART_Transmit>
		HAL_Delay(100);
 80016ac:	2064      	movs	r0, #100	; 0x64
 80016ae:	f000 feff 	bl	80024b0 <HAL_Delay>
 80016b2:	e014      	b.n	80016de <_ZN6AS56009GetStatusEv+0xa6>
	}
	else{
		strcpy((char*)buf, "NO Magnet!\r\n");
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_ZN6AS56009GetStatusEv+0xcc>)
 80016ba:	461c      	mov	r4, r3
 80016bc:	4613      	mov	r3, r2
 80016be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c0:	c407      	stmia	r4!, {r0, r1, r2}
 80016c2:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart, buf, 2, HAL_MAX_DELAY);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80016ca:	f107 010c 	add.w	r1, r7, #12
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	2202      	movs	r2, #2
 80016d4:	f003 ffde 	bl	8005694 <HAL_UART_Transmit>
		HAL_Delay(100);
 80016d8:	2064      	movs	r0, #100	; 0x64
 80016da:	f000 fee9 	bl	80024b0 <HAL_Delay>
	}
#endif
	return ReadReg(STATUS) & 0x38;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7b9b      	ldrb	r3, [r3, #14]
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff37 	bl	8001558 <_ZN6AS56007ReadRegEh>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016f0:	b2db      	uxtb	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	080069e0 	.word	0x080069e0
 8001700:	080069e8 	.word	0x080069e8
 8001704:	080069f4 	.word	0x080069f4

08001708 <_ZN6AS5600D1Ev>:
#include "stdio.h"

class AS5600{
public:
	AS5600(I2C_HandleTypeDef &hi2c_, UART_HandleTypeDef &huart_);
	~AS5600(){};
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
AS5600 as5600(hi2c1, huart1);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <HAL_UART_RxCpltCallback+0x40>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d111      	bne.n	8001752 <HAL_UART_RxCpltCallback+0x36>
		if(rx_data == '1'){
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_UART_RxCpltCallback+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b31      	cmp	r3, #49	; 0x31
 8001734:	d108      	bne.n	8001748 <HAL_UART_RxCpltCallback+0x2c>
			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 8001736:	230a      	movs	r3, #10
 8001738:	2201      	movs	r2, #1
 800173a:	4909      	ldr	r1, [pc, #36]	; (8001760 <HAL_UART_RxCpltCallback+0x44>)
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <HAL_UART_RxCpltCallback+0x48>)
 800173e:	f003 ffa9 	bl	8005694 <HAL_UART_Transmit>
			flag = 0;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_UART_RxCpltCallback+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
//				  as5600.GetStatus();
//				  as5600.GetAngle();
		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	4905      	ldr	r1, [pc, #20]	; (8001760 <HAL_UART_RxCpltCallback+0x44>)
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_UART_RxCpltCallback+0x48>)
 800174e:	f004 f833 	bl	80057b8 <HAL_UART_Receive_IT>


	}
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40013800 	.word	0x40013800
 8001760:	20000090 	.word	0x20000090
 8001764:	200001a8 	.word	0x200001a8
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
  {


  }
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
	...

08001780 <_writeDutyCyclePWM>:

void _writeDutyCyclePWM(float dc_a, float dc_b, float dc_c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	 TIM1->CCR1 = (int)(dc_a * _PWM_RANGE);
 800178c:	4912      	ldr	r1, [pc, #72]	; (80017d8 <_writeDutyCyclePWM+0x58>)
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff fac2 	bl	8000d18 <__aeabi_fmul>
 8001794:	4603      	mov	r3, r0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fc0e 	bl	8000fb8 <__aeabi_f2iz>
 800179c:	4602      	mov	r2, r0
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <_writeDutyCyclePWM+0x5c>)
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR3 = (int)(dc_b * _PWM_RANGE);
 80017a2:	490d      	ldr	r1, [pc, #52]	; (80017d8 <_writeDutyCyclePWM+0x58>)
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f7ff fab7 	bl	8000d18 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc03 	bl	8000fb8 <__aeabi_f2iz>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <_writeDutyCyclePWM+0x5c>)
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM1->CCR2 = (int)(dc_c * _PWM_RANGE);
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <_writeDutyCyclePWM+0x58>)
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff faac 	bl	8000d18 <__aeabi_fmul>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fbf8 	bl	8000fb8 <__aeabi_f2iz>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <_writeDutyCyclePWM+0x5c>)
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	4479c000 	.word	0x4479c000
 80017dc:	40012c00 	.word	0x40012c00

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e6:	f000 fe01 	bl	80023ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 f90d 	bl	8001a08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f000 fb29 	bl	8001e44 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80017f2:	f000 f9b1 	bl	8001b58 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 80017f6:	f000 faf7 	bl	8001de8 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 80017fa:	f000 f9df 	bl	8001bbc <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80017fe:	f000 fa97 	bl	8001d30 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 8001802:	f000 f961 	bl	8001ac8 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001806:	2201      	movs	r2, #1
 8001808:	4975      	ldr	r1, [pc, #468]	; (80019e0 <main+0x200>)
 800180a:	4876      	ldr	r0, [pc, #472]	; (80019e4 <main+0x204>)
 800180c:	f003 ffd4 	bl	80057b8 <HAL_UART_Receive_IT>
//  HAL_TIM_Base_Start_IT(&htim2);

  HAL_TIMEx_PWMN_Start(&htim1, 	TIM_CHANNEL_1);
 8001810:	2100      	movs	r1, #0
 8001812:	4875      	ldr	r0, [pc, #468]	; (80019e8 <main+0x208>)
 8001814:	f003 fd6e 	bl	80052f4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, 		TIM_CHANNEL_2);
 8001818:	2104      	movs	r1, #4
 800181a:	4873      	ldr	r0, [pc, #460]	; (80019e8 <main+0x208>)
 800181c:	f002 ff76 	bl	800470c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, 	TIM_CHANNEL_3);
 8001820:	2108      	movs	r1, #8
 8001822:	4871      	ldr	r0, [pc, #452]	; (80019e8 <main+0x208>)
 8001824:	f003 fd66 	bl	80052f4 <HAL_TIMEx_PWMN_Start>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182e:	486f      	ldr	r0, [pc, #444]	; (80019ec <main+0x20c>)
 8001830:	f001 fbb6 	bl	8002fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183a:	486d      	ldr	r0, [pc, #436]	; (80019f0 <main+0x210>)
 800183c:	f001 fbb0 	bl	8002fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001846:	486a      	ldr	r0, [pc, #424]	; (80019f0 <main+0x210>)
 8001848:	f001 fbaa 	bl	8002fa0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  as5600.GetStatus();
 800184c:	4869      	ldr	r0, [pc, #420]	; (80019f4 <main+0x214>)
 800184e:	f7ff fef3 	bl	8001638 <_ZN6AS56009GetStatusEv>
	  as5600.GetAngle();
 8001852:	4868      	ldr	r0, [pc, #416]	; (80019f4 <main+0x214>)
 8001854:	f7ff fea0 	bl	8001598 <_ZN6AS56008GetAngleEv>
	  if(flag == 0){
 8001858:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <main+0x218>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f5      	bne.n	800184c <main+0x6c>
		  float _ca, _sa, Ualpha, Ubeta;
		  float Ua, Ub, Uc;
		  if(count == 24) count = 0;
 8001860:	4b66      	ldr	r3, [pc, #408]	; (80019fc <main+0x21c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b18      	cmp	r3, #24
 8001866:	d102      	bne.n	800186e <main+0x8e>
 8001868:	4b64      	ldr	r3, [pc, #400]	; (80019fc <main+0x21c>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]

		  float angle_el = _PI_12*count;
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <main+0x21c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fdc6 	bl	8000404 <__aeabi_i2d>
 8001878:	a355      	add	r3, pc, #340	; (adr r3, 80019d0 <main+0x1f0>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fe2b 	bl	80004d8 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f8e7 	bl	8000a5c <__aeabi_d2f>
 800188e:	4603      	mov	r3, r0
 8001890:	61fb      	str	r3, [r7, #28]
		  _ca = _cos(angle_el);
 8001892:	69f8      	ldr	r0, [r7, #28]
 8001894:	f7ff fd6c 	bl	8001370 <_Z4_cosf>
 8001898:	61b8      	str	r0, [r7, #24]
		  _sa = _sin(angle_el);
 800189a:	69f8      	ldr	r0, [r7, #28]
 800189c:	f7ff fbb4 	bl	8001008 <_Z4_sinf>
 80018a0:	6178      	str	r0, [r7, #20]
		  Ualpha =  - _sa*0.5;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fa33 	bl	8000d18 <__aeabi_fmul>
 80018b2:	4603      	mov	r3, r0
 80018b4:	613b      	str	r3, [r7, #16]
		  Ubeta  =    _ca*0.5;
 80018b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80018ba:	69b8      	ldr	r0, [r7, #24]
 80018bc:	f7ff fa2c 	bl	8000d18 <__aeabi_fmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]

		  Ua = Ualpha/2 + 0.5;
 80018c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018c8:	6938      	ldr	r0, [r7, #16]
 80018ca:	f7ff fad9 	bl	8000e80 <__aeabi_fdiv>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff f917 	bl	8000b08 <__addsf3>
 80018da:	4603      	mov	r3, r0
 80018dc:	60bb      	str	r3, [r7, #8]
		  Ub = (-0.5 * Ualpha  + _SQRT3_2 * Ubeta)/2+0.5;
 80018de:	6938      	ldr	r0, [r7, #16]
 80018e0:	f7fe fda2 	bl	8000428 <__aeabi_f2d>
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <main+0x220>)
 80018ea:	f7fe fdf5 	bl	80004d8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	461d      	mov	r5, r3
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7fe fd96 	bl	8000428 <__aeabi_f2d>
 80018fc:	a336      	add	r3, pc, #216	; (adr r3, 80019d8 <main+0x1f8>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fde9 	bl	80004d8 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe fc2d 	bl	800016c <__adddf3>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001922:	f7fe ff03 	bl	800072c <__aeabi_ddiv>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <main+0x224>)
 8001934:	f7fe fc1a 	bl	800016c <__adddf3>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f88c 	bl	8000a5c <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	607b      	str	r3, [r7, #4]
		  Uc = (-0.5 * Ualpha - _SQRT3_2 * Ubeta)/2+0.5;
 8001948:	6938      	ldr	r0, [r7, #16]
 800194a:	f7fe fd6d 	bl	8000428 <__aeabi_f2d>
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <main+0x220>)
 8001954:	f7fe fdc0 	bl	80004d8 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7fe fd61 	bl	8000428 <__aeabi_f2d>
 8001966:	a31c      	add	r3, pc, #112	; (adr r3, 80019d8 <main+0x1f8>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fdb4 	bl	80004d8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe fbf6 	bl	8000168 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198c:	f7fe fece 	bl	800072c <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <main+0x224>)
 800199e:	f7fe fbe5 	bl	800016c <__adddf3>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f857 	bl	8000a5c <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	603b      	str	r3, [r7, #0]
		  _writeDutyCyclePWM(Ua, Ub, Uc);
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	68b8      	ldr	r0, [r7, #8]
 80019b8:	f7ff fee2 	bl	8001780 <_writeDutyCyclePWM>
		  count++;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <main+0x21c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <main+0x21c>)
 80019c6:	701a      	strb	r2, [r3, #0]
	  }
//	  HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80019c8:	e740      	b.n	800184c <main+0x6c>
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w
 80019d0:	382daf40 	.word	0x382daf40
 80019d4:	3fd0c152 	.word	0x3fd0c152
 80019d8:	e857b07f 	.word	0xe857b07f
 80019dc:	3febb67a 	.word	0x3febb67a
 80019e0:	20000090 	.word	0x20000090
 80019e4:	200001a8 	.word	0x200001a8
 80019e8:	20000118 	.word	0x20000118
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	40010800 	.word	0x40010800
 80019f4:	200001ec 	.word	0x200001ec
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000091 	.word	0x20000091
 8001a00:	bfe00000 	.word	0xbfe00000
 8001a04:	3fe00000 	.word	0x3fe00000

08001a08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	; 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a12:	2228      	movs	r2, #40	; 0x28
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 fb5e 	bl	80060d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a40:	2310      	movs	r3, #16
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 f8ef 	bl	8003c30 <HAL_RCC_OscConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8001a62:	f000 fa55 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	230f      	movs	r3, #15
 8001a68:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 fb57 	bl	8004134 <HAL_RCC_ClockConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8001a96:	f000 fa3b 	bl	8001f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fcdd 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf14      	ite	ne
 8001ab0:	2301      	movne	r3, #1
 8001ab2:	2300      	moveq	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001aba:	f000 fa29 	bl	8001f10 <Error_Handler>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3750      	adds	r7, #80	; 0x50
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <_ZL12MX_ADC1_Initv+0x8c>)
 8001adc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_EXT_IT11;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001af2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001af6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b04:	4812      	ldr	r0, [pc, #72]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001b06:	f000 fcf7 	bl	80024f8 <HAL_ADC_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf14      	ite	ne
 8001b10:	2301      	movne	r3, #1
 8001b12:	2300      	moveq	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001b1a:	f000 f9f9 	bl	8001f10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b1e:	2311      	movs	r3, #17
 8001b20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <_ZL12MX_ADC1_Initv+0x88>)
 8001b30:	f000 fdba 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8001b44:	f000 f9e4 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000094 	.word	0x20000094
 8001b54:	40012400 	.word	0x40012400

08001b58 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <_ZL12MX_I2C1_Initv+0x60>)
 8001b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b64:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b68:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b98:	f001 fa1a 	bl	8002fd0 <HAL_I2C_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <_ZL12MX_I2C1_Initv+0x58>
  {
    Error_Handler();
 8001bac:	f000 f9b0 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200000c4 	.word	0x200000c4
 8001bb8:	40005400 	.word	0x40005400

08001bbc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b092      	sub	sp, #72	; 0x48
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	615a      	str	r2, [r3, #20]
 8001bde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2220      	movs	r2, #32
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fa76 	bl	80060d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bec:	4b4e      	ldr	r3, [pc, #312]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001bee:	4a4f      	ldr	r2, [pc, #316]	; (8001d2c <_ZL12MX_TIM1_Initv+0x170>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001bf2:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c18:	4843      	ldr	r0, [pc, #268]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001c1a:	f002 fd28 	bl	800466e <HAL_TIM_PWM_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001c2e:	f000 f96f 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4839      	ldr	r0, [pc, #228]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001c42:	f003 fbf5 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001c56:	f000 f95b 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	482a      	ldr	r0, [pc, #168]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001c80:	f002 feee 	bl	8004a60 <HAL_TIM_PWM_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf14      	ite	ne
 8001c8a:	2301      	movne	r3, #1
 8001c8c:	2300      	moveq	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001c94:	f000 f93c 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4821      	ldr	r0, [pc, #132]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001ca2:	f002 fedd 	bl	8004a60 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001cb6:	f000 f92b 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4819      	ldr	r0, [pc, #100]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001cc4:	f002 fecc 	bl	8004a60 <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001cd8:	f000 f91a 	bl	8001f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480a      	ldr	r0, [pc, #40]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001d00:	f003 fbf4 	bl	80054ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8001d14:	f000 f8fc 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <_ZL12MX_TIM1_Initv+0x16c>)
 8001d1a:	f000 fa19 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001d1e:	bf00      	nop
 8001d20:	3748      	adds	r7, #72	; 0x48
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000118 	.word	0x20000118
 8001d2c:	40012c00 	.word	0x40012c00

08001d30 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	463b      	mov	r3, r7
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d56:	22ef      	movs	r2, #239	; 0xef
 8001d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d74:	481b      	ldr	r0, [pc, #108]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d76:	f002 fc2b 	bl	80045d0 <HAL_TIM_Base_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001d8a:	f000 f8c1 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4812      	ldr	r0, [pc, #72]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d9c:	f002 ff1e 	bl	8004bdc <HAL_TIM_ConfigClockSource>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001db0:	f000 f8ae 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4808      	ldr	r0, [pc, #32]	; (8001de4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dc2:	f003 fb35 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001dd6:	f000 f89b 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000160 	.word	0x20000160

08001de8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e20:	f003 fbeb 	bl	80055fa <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf14      	ite	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	2300      	moveq	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001e34:	f000 f86c 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200001a8 	.word	0x200001a8
 8001e40:	40013800 	.word	0x40013800

08001e44 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <_ZL12MX_GPIO_Initv+0xbc>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <_ZL12MX_GPIO_Initv+0xbc>)
 8001e5e:	f043 0308 	orr.w	r3, r3, #8
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <_ZL12MX_GPIO_Initv+0xbc>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <_ZL12MX_GPIO_Initv+0xbc>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <_ZL12MX_GPIO_Initv+0xbc>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <_ZL12MX_GPIO_Initv+0xbc>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e8e:	481d      	ldr	r0, [pc, #116]	; (8001f04 <_ZL12MX_GPIO_Initv+0xc0>)
 8001e90:	f001 f886 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001e9a:	481b      	ldr	r0, [pc, #108]	; (8001f08 <_ZL12MX_GPIO_Initv+0xc4>)
 8001e9c:	f001 f880 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ea4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4812      	ldr	r0, [pc, #72]	; (8001f04 <_ZL12MX_GPIO_Initv+0xc0>)
 8001eba:	f000 feed 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001ebe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0308 	add.w	r3, r7, #8
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480c      	ldr	r0, [pc, #48]	; (8001f08 <_ZL12MX_GPIO_Initv+0xc4>)
 8001ed8:	f000 fede 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <_ZL12MX_GPIO_Initv+0xc8>)
 8001ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <_ZL12MX_GPIO_Initv+0xc4>)
 8001ef2:	f000 fed1 	bl	8002c98 <HAL_GPIO_Init>

}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40010800 	.word	0x40010800
 8001f0c:	10110000 	.word	0x10110000

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <Error_Handler+0x8>
	...

08001f1c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d109      	bne.n	8001f40 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d104      	bne.n	8001f40 <_Z41__static_initialization_and_destruction_0ii+0x24>
AS5600 as5600(hi2c1, huart1);
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001f38:	490a      	ldr	r1, [pc, #40]	; (8001f64 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001f3a:	480b      	ldr	r0, [pc, #44]	; (8001f68 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001f3c:	f7ff fa5c 	bl	80013f8 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d102      	bne.n	8001f56 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8001f50:	4805      	ldr	r0, [pc, #20]	; (8001f68 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001f52:	f7ff fbd9 	bl	8001708 <_ZN6AS5600D1Ev>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200001a8 	.word	0x200001a8
 8001f64:	200000c4 	.word	0x200000c4
 8001f68:	200001ec 	.word	0x200001ec

08001f6c <_GLOBAL__sub_I_AS5600_ADDR>:
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7ff ffd1 	bl	8001f1c <_Z41__static_initialization_and_destruction_0ii>
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_GLOBAL__sub_D_AS5600_ADDR>:
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff ffc9 	bl	8001f1c <_Z41__static_initialization_and_destruction_0ii>
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6193      	str	r3, [r2, #24]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_MspInit+0x5c>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_MspInit+0x60>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_MspInit+0x60>)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010000 	.word	0x40010000

08001ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_ADC_MspInit+0x34>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10b      	bne.n	800201a <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_ADC_MspInit+0x38>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a08      	ldr	r2, [pc, #32]	; (8002028 <HAL_ADC_MspInit+0x38>)
 8002008:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_ADC_MspInit+0x38>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40012400 	.word	0x40012400
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <HAL_I2C_MspInit+0x90>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d132      	bne.n	80020b2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_I2C_MspInit+0x94>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_I2C_MspInit+0x94>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_I2C_MspInit+0x94>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206a:	2312      	movs	r3, #18
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4812      	ldr	r0, [pc, #72]	; (80020c4 <HAL_I2C_MspInit+0x98>)
 800207a:	f000 fe0d 	bl	8002c98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_I2C_MspInit+0x9c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_I2C_MspInit+0x9c>)
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_I2C_MspInit+0x94>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_I2C_MspInit+0x94>)
 80020a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_I2C_MspInit+0x94>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40005400 	.word	0x40005400
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40010000 	.word	0x40010000

080020cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_TIM_PWM_MspInit+0x34>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10b      	bne.n	80020f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_TIM_PWM_MspInit+0x38>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_TIM_PWM_MspInit+0x38>)
 80020e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e8:	6193      	str	r3, [r2, #24]
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_TIM_PWM_MspInit+0x38>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	40012c00 	.word	0x40012c00
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d113      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_TIM_Base_MspInit+0x44>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <HAL_TIM_Base_MspInit+0x44>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_TIM_Base_MspInit+0x44>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	210e      	movs	r1, #14
 8002136:	201c      	movs	r0, #28
 8002138:	f000 fcc7 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800213c:	201c      	movs	r0, #28
 800213e:	f000 fce0 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000

08002150 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_TIM_MspPostInit+0x8c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d131      	bne.n	80021d4 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_TIM_MspPostInit+0x90>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <HAL_TIM_MspPostInit+0x90>)
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_TIM_MspPostInit+0x90>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_TIM_MspPostInit+0x90>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <HAL_TIM_MspPostInit+0x90>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_TIM_MspPostInit+0x90>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80021a0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80021a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4619      	mov	r1, r3
 80021b4:	480b      	ldr	r0, [pc, #44]	; (80021e4 <HAL_TIM_MspPostInit+0x94>)
 80021b6:	f000 fd6f 	bl	8002c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <HAL_TIM_MspPostInit+0x98>)
 80021d0:	f000 fd62 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40010c00 	.word	0x40010c00
 80021e8:	40010800 	.word	0x40010800

080021ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <HAL_UART_MspInit+0xb4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d145      	bne.n	8002298 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800220c:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a24      	ldr	r2, [pc, #144]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 8002212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800223c:	2340      	movs	r3, #64	; 0x40
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	4816      	ldr	r0, [pc, #88]	; (80022a8 <HAL_UART_MspInit+0xbc>)
 8002250:	f000 fd22 	bl	8002c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4810      	ldr	r0, [pc, #64]	; (80022a8 <HAL_UART_MspInit+0xbc>)
 8002268:	f000 fd16 	bl	8002c98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_UART_MspInit+0xc0>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_UART_MspInit+0xc0>)
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	2025      	movs	r0, #37	; 0x25
 800228e:	f000 fc1c 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002292:	2025      	movs	r0, #37	; 0x25
 8002294:	f000 fc35 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	40010000 	.word	0x40010000

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <NMI_Handler+0x4>

080022b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <MemManage_Handler+0x4>

080022c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <UsageFault_Handler+0x4>

080022ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f6:	f000 f8bf 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <TIM2_IRQHandler+0x10>)
 8002306:	f002 faa3 	bl	8004850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000160 	.word	0x20000160

08002314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <USART1_IRQHandler+0x10>)
 800231a:	f003 fa7d 	bl	8005818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200001a8 	.word	0x200001a8

08002328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <_sbrk+0x5c>)
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <_sbrk+0x60>)
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <_sbrk+0x64>)
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <_sbrk+0x68>)
 8002348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d207      	bcs.n	8002368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002358:	f003 fe86 	bl	8006068 <__errno>
 800235c:	4603      	mov	r3, r0
 800235e:	220c      	movs	r2, #12
 8002360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	e009      	b.n	800237c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <_sbrk+0x64>)
 8002378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20005000 	.word	0x20005000
 8002388:	00000400 	.word	0x00000400
 800238c:	20000298 	.word	0x20000298
 8002390:	200002b0 	.word	0x200002b0

08002394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023a2:	490d      	ldr	r1, [pc, #52]	; (80023d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b8:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023c6:	f7ff ffe5 	bl	8002394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ca:	f003 fe53 	bl	8006074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ce:	f7ff fa07 	bl	80017e0 <main>
  bx lr
 80023d2:	4770      	bx	lr
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80023dc:	08006db4 	.word	0x08006db4
  ldr r2, =_sbss
 80023e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80023e4:	200002b0 	.word	0x200002b0

080023e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC1_2_IRQHandler>
	...

080023ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_Init+0x28>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_Init+0x28>)
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f000 fb59 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002402:	200f      	movs	r0, #15
 8002404:	f000 f808 	bl	8002418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002408:	f7ff fdc0 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40022000 	.word	0x40022000

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x54>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x58>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fb71 	bl	8002b1e <HAL_SYSTICK_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00e      	b.n	8002464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d80a      	bhi.n	8002462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244c:	2200      	movs	r2, #0
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f000 fb39 	bl	8002aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <HAL_InitTick+0x5c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000004 	.word	0x20000004
 8002470:	2000000c 	.word	0x2000000c
 8002474:	20000008 	.word	0x20000008

08002478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_IncTick+0x1c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_IncTick+0x20>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a03      	ldr	r2, [pc, #12]	; (8002498 <HAL_IncTick+0x20>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	2000000c 	.word	0x2000000c
 8002498:	2000029c 	.word	0x2000029c

0800249c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b02      	ldr	r3, [pc, #8]	; (80024ac <HAL_GetTick+0x10>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	2000029c 	.word	0x2000029c

080024b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f7ff fff0 	bl	800249c <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d005      	beq.n	80024d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_Delay+0x44>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d6:	bf00      	nop
 80024d8:	f7ff ffe0 	bl	800249c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d8f7      	bhi.n	80024d8 <HAL_Delay+0x28>
  {
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000000c 	.word	0x2000000c

080024f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0be      	b.n	8002698 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fd5a 	bl	8001ff0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f9ab 	bl	8002898 <ADC_ConversionStop_Disable>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8099 	bne.w	8002686 <HAL_ADC_Init+0x18e>
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 8095 	bne.w	8002686 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002564:	f023 0302 	bic.w	r3, r3, #2
 8002568:	f043 0202 	orr.w	r2, r3, #2
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002578:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7b1b      	ldrb	r3, [r3, #12]
 800257e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002580:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4313      	orrs	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002590:	d003      	beq.n	800259a <HAL_ADC_Init+0xa2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_ADC_Init+0xa8>
 800259a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259e:	e000      	b.n	80025a2 <HAL_ADC_Init+0xaa>
 80025a0:	2300      	movs	r3, #0
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7d1b      	ldrb	r3, [r3, #20]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d119      	bne.n	80025e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7b1b      	ldrb	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	3b01      	subs	r3, #1
 80025be:	035a      	lsls	r2, r3, #13
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	e00b      	b.n	80025e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_ADC_Init+0x1a8>)
 8002600:	4013      	ands	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	430b      	orrs	r3, r1
 800260a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002614:	d003      	beq.n	800261e <HAL_ADC_Init+0x126>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d104      	bne.n	8002628 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	3b01      	subs	r3, #1
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	430a      	orrs	r2, r1
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_ADC_Init+0x1ac>)
 8002644:	4013      	ands	r3, r2
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	429a      	cmp	r2, r3
 800264a:	d10b      	bne.n	8002664 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002662:	e018      	b.n	8002696 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	f023 0312 	bic.w	r3, r3, #18
 800266c:	f043 0210 	orr.w	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002684:	e007      	b.n	8002696 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	f043 0210 	orr.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002696:	7dfb      	ldrb	r3, [r7, #23]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	ffe1f7fd 	.word	0xffe1f7fd
 80026a4:	ff1f0efe 	.word	0xff1f0efe

080026a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x20>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0dc      	b.n	8002882 <HAL_ADC_ConfigChannel+0x1da>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d81c      	bhi.n	8002712 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	3b05      	subs	r3, #5
 80026ea:	221f      	movs	r2, #31
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4019      	ands	r1, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3b05      	subs	r3, #5
 8002704:	fa00 f203 	lsl.w	r2, r0, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
 8002710:	e03c      	b.n	800278c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d81c      	bhi.n	8002754 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b23      	subs	r3, #35	; 0x23
 800272c:	221f      	movs	r2, #31
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	4019      	ands	r1, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	3b23      	subs	r3, #35	; 0x23
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
 8002752:	e01b      	b.n	800278c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b41      	subs	r3, #65	; 0x41
 8002766:	221f      	movs	r2, #31
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	4019      	ands	r1, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b41      	subs	r3, #65	; 0x41
 8002780:	fa00 f203 	lsl.w	r2, r0, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b09      	cmp	r3, #9
 8002792:	d91c      	bls.n	80027ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68d9      	ldr	r1, [r3, #12]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	2207      	movs	r2, #7
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	4019      	ands	r1, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6898      	ldr	r0, [r3, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	3b1e      	subs	r3, #30
 80027c0:	fa00 f203 	lsl.w	r2, r0, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	e019      	b.n	8002802 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6919      	ldr	r1, [r3, #16]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	2207      	movs	r2, #7
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	4019      	ands	r1, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6898      	ldr	r0, [r3, #8]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	fa00 f203 	lsl.w	r2, r0, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b10      	cmp	r3, #16
 8002808:	d003      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800280e:	2b11      	cmp	r3, #17
 8002810:	d132      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_ADC_ConfigChannel+0x1e4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d125      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d126      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002838:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b10      	cmp	r3, #16
 8002840:	d11a      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_ADC_ConfigChannel+0x1e8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a13      	ldr	r2, [pc, #76]	; (8002894 <HAL_ADC_ConfigChannel+0x1ec>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	0c9a      	lsrs	r2, r3, #18
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002858:	e002      	b.n	8002860 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3b01      	subs	r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f9      	bne.n	800285a <HAL_ADC_ConfigChannel+0x1b2>
 8002866:	e007      	b.n	8002878 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40012400 	.word	0x40012400
 8002890:	20000004 	.word	0x20000004
 8002894:	431bde83 	.word	0x431bde83

08002898 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d12e      	bne.n	8002910 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028c2:	f7ff fdeb 	bl	800249c <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028c8:	e01b      	b.n	8002902 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ca:	f7ff fde7 	bl	800249c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d914      	bls.n	8002902 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d10d      	bne.n	8002902 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e007      	b.n	8002912 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d0dc      	beq.n	80028ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4906      	ldr	r1, [pc, #24]	; (80029b4 <__NVIC_EnableIRQ+0x34>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	; (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	; (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
         );
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a80:	d301      	bcc.n	8002a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <SysTick_Config+0x40>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8e:	210f      	movs	r1, #15
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f7ff ff90 	bl	80029b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <SysTick_Config+0x40>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <SysTick_Config+0x40>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff2d 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff42 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff90 	bl	8002a0c <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5f 	bl	80029b8 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff35 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffa2 	bl	8002a70 <SysTick_Config>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d008      	beq.n	8002b5e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e020      	b.n	8002ba0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 020e 	bic.w	r2, r2, #14
 8002b6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d005      	beq.n	8002bce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e051      	b.n	8002c72 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 020e 	bic.w	r2, r2, #14
 8002bdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <HAL_DMA_Abort_IT+0xd0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d029      	beq.n	8002c4c <HAL_DMA_Abort_IT+0xa0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <HAL_DMA_Abort_IT+0xd4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d022      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x9c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_DMA_Abort_IT+0xd8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d01a      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x96>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_DMA_Abort_IT+0xdc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d012      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x90>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_DMA_Abort_IT+0xe0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00a      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x8a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_DMA_Abort_IT+0xe4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d102      	bne.n	8002c30 <HAL_DMA_Abort_IT+0x84>
 8002c2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c2e:	e00e      	b.n	8002c4e <HAL_DMA_Abort_IT+0xa2>
 8002c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c34:	e00b      	b.n	8002c4e <HAL_DMA_Abort_IT+0xa2>
 8002c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3a:	e008      	b.n	8002c4e <HAL_DMA_Abort_IT+0xa2>
 8002c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c40:	e005      	b.n	8002c4e <HAL_DMA_Abort_IT+0xa2>
 8002c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c46:	e002      	b.n	8002c4e <HAL_DMA_Abort_IT+0xa2>
 8002c48:	2310      	movs	r3, #16
 8002c4a:	e000      	b.n	8002c4e <HAL_DMA_Abort_IT+0xa2>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_DMA_Abort_IT+0xe8>)
 8002c50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
    } 
  }
  return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40020008 	.word	0x40020008
 8002c80:	4002001c 	.word	0x4002001c
 8002c84:	40020030 	.word	0x40020030
 8002c88:	40020044 	.word	0x40020044
 8002c8c:	40020058 	.word	0x40020058
 8002c90:	4002006c 	.word	0x4002006c
 8002c94:	40020000 	.word	0x40020000

08002c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b08b      	sub	sp, #44	; 0x2c
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002caa:	e169      	b.n	8002f80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cac:	2201      	movs	r2, #1
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	f040 8158 	bne.w	8002f7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a9a      	ldr	r2, [pc, #616]	; (8002f38 <HAL_GPIO_Init+0x2a0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d05e      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002cd4:	4a98      	ldr	r2, [pc, #608]	; (8002f38 <HAL_GPIO_Init+0x2a0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d875      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002cda:	4a98      	ldr	r2, [pc, #608]	; (8002f3c <HAL_GPIO_Init+0x2a4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d058      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002ce0:	4a96      	ldr	r2, [pc, #600]	; (8002f3c <HAL_GPIO_Init+0x2a4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d86f      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002ce6:	4a96      	ldr	r2, [pc, #600]	; (8002f40 <HAL_GPIO_Init+0x2a8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d052      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002cec:	4a94      	ldr	r2, [pc, #592]	; (8002f40 <HAL_GPIO_Init+0x2a8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d869      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002cf2:	4a94      	ldr	r2, [pc, #592]	; (8002f44 <HAL_GPIO_Init+0x2ac>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d04c      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002cf8:	4a92      	ldr	r2, [pc, #584]	; (8002f44 <HAL_GPIO_Init+0x2ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d863      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002cfe:	4a92      	ldr	r2, [pc, #584]	; (8002f48 <HAL_GPIO_Init+0x2b0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d046      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002d04:	4a90      	ldr	r2, [pc, #576]	; (8002f48 <HAL_GPIO_Init+0x2b0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d85d      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002d0a:	2b12      	cmp	r3, #18
 8002d0c:	d82a      	bhi.n	8002d64 <HAL_GPIO_Init+0xcc>
 8002d0e:	2b12      	cmp	r3, #18
 8002d10:	d859      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <HAL_GPIO_Init+0x80>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d6d 	.word	0x08002d6d
 8002d20:	08002d7f 	.word	0x08002d7f
 8002d24:	08002dc1 	.word	0x08002dc1
 8002d28:	08002dc7 	.word	0x08002dc7
 8002d2c:	08002dc7 	.word	0x08002dc7
 8002d30:	08002dc7 	.word	0x08002dc7
 8002d34:	08002dc7 	.word	0x08002dc7
 8002d38:	08002dc7 	.word	0x08002dc7
 8002d3c:	08002dc7 	.word	0x08002dc7
 8002d40:	08002dc7 	.word	0x08002dc7
 8002d44:	08002dc7 	.word	0x08002dc7
 8002d48:	08002dc7 	.word	0x08002dc7
 8002d4c:	08002dc7 	.word	0x08002dc7
 8002d50:	08002dc7 	.word	0x08002dc7
 8002d54:	08002dc7 	.word	0x08002dc7
 8002d58:	08002dc7 	.word	0x08002dc7
 8002d5c:	08002d75 	.word	0x08002d75
 8002d60:	08002d89 	.word	0x08002d89
 8002d64:	4a79      	ldr	r2, [pc, #484]	; (8002f4c <HAL_GPIO_Init+0x2b4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d6a:	e02c      	b.n	8002dc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	623b      	str	r3, [r7, #32]
          break;
 8002d72:	e029      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	623b      	str	r3, [r7, #32]
          break;
 8002d7c:	e024      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	3308      	adds	r3, #8
 8002d84:	623b      	str	r3, [r7, #32]
          break;
 8002d86:	e01f      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e01a      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	623b      	str	r3, [r7, #32]
          break;
 8002d9e:	e013      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da8:	2308      	movs	r3, #8
 8002daa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	611a      	str	r2, [r3, #16]
          break;
 8002db2:	e009      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db4:	2308      	movs	r3, #8
 8002db6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	615a      	str	r2, [r3, #20]
          break;
 8002dbe:	e003      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	623b      	str	r3, [r7, #32]
          break;
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          break;
 8002dc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2bff      	cmp	r3, #255	; 0xff
 8002dcc:	d801      	bhi.n	8002dd2 <HAL_GPIO_Init+0x13a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	e001      	b.n	8002dd6 <HAL_GPIO_Init+0x13e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2bff      	cmp	r3, #255	; 0xff
 8002ddc:	d802      	bhi.n	8002de4 <HAL_GPIO_Init+0x14c>
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	e002      	b.n	8002dea <HAL_GPIO_Init+0x152>
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	3b08      	subs	r3, #8
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	210f      	movs	r1, #15
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	431a      	orrs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80b1 	beq.w	8002f7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e18:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <HAL_GPIO_Init+0x2b8>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4a4c      	ldr	r2, [pc, #304]	; (8002f50 <HAL_GPIO_Init+0x2b8>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_GPIO_Init+0x2b8>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e30:	4a48      	ldr	r2, [pc, #288]	; (8002f54 <HAL_GPIO_Init+0x2bc>)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a40      	ldr	r2, [pc, #256]	; (8002f58 <HAL_GPIO_Init+0x2c0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_GPIO_Init+0x1ec>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3f      	ldr	r2, [pc, #252]	; (8002f5c <HAL_GPIO_Init+0x2c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00d      	beq.n	8002e80 <HAL_GPIO_Init+0x1e8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3e      	ldr	r2, [pc, #248]	; (8002f60 <HAL_GPIO_Init+0x2c8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <HAL_GPIO_Init+0x1e4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3d      	ldr	r2, [pc, #244]	; (8002f64 <HAL_GPIO_Init+0x2cc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_GPIO_Init+0x1e0>
 8002e74:	2303      	movs	r3, #3
 8002e76:	e006      	b.n	8002e86 <HAL_GPIO_Init+0x1ee>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e004      	b.n	8002e86 <HAL_GPIO_Init+0x1ee>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e002      	b.n	8002e86 <HAL_GPIO_Init+0x1ee>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_GPIO_Init+0x1ee>
 8002e84:	2300      	movs	r3, #0
 8002e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e88:	f002 0203 	and.w	r2, r2, #3
 8002e8c:	0092      	lsls	r2, r2, #2
 8002e8e:	4093      	lsls	r3, r2
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e96:	492f      	ldr	r1, [pc, #188]	; (8002f54 <HAL_GPIO_Init+0x2bc>)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	492c      	ldr	r1, [pc, #176]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ebe:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4928      	ldr	r1, [pc, #160]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ed8:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4922      	ldr	r1, [pc, #136]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
 8002ee4:	e006      	b.n	8002ef4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ee6:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	491e      	ldr	r1, [pc, #120]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4918      	ldr	r1, [pc, #96]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
 8002f0c:	e006      	b.n	8002f1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	4914      	ldr	r1, [pc, #80]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d021      	beq.n	8002f6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60cb      	str	r3, [r1, #12]
 8002f34:	e021      	b.n	8002f7a <HAL_GPIO_Init+0x2e2>
 8002f36:	bf00      	nop
 8002f38:	10320000 	.word	0x10320000
 8002f3c:	10310000 	.word	0x10310000
 8002f40:	10220000 	.word	0x10220000
 8002f44:	10210000 	.word	0x10210000
 8002f48:	10120000 	.word	0x10120000
 8002f4c:	10110000 	.word	0x10110000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40010800 	.word	0x40010800
 8002f5c:	40010c00 	.word	0x40010c00
 8002f60:	40011000 	.word	0x40011000
 8002f64:	40011400 	.word	0x40011400
 8002f68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	4909      	ldr	r1, [pc, #36]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f47f ae8e 	bne.w	8002cac <HAL_GPIO_Init+0x14>
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	372c      	adds	r7, #44	; 0x2c
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fbc:	e003      	b.n	8002fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e12b      	b.n	800323a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff f818 	bl	800202c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003034:	f001 f9d0 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a81      	ldr	r2, [pc, #516]	; (8003244 <HAL_I2C_Init+0x274>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d807      	bhi.n	8003054 <HAL_I2C_Init+0x84>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a80      	ldr	r2, [pc, #512]	; (8003248 <HAL_I2C_Init+0x278>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e006      	b.n	8003062 <HAL_I2C_Init+0x92>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a7d      	ldr	r2, [pc, #500]	; (800324c <HAL_I2C_Init+0x27c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0e7      	b.n	800323a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a78      	ldr	r2, [pc, #480]	; (8003250 <HAL_I2C_Init+0x280>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9b      	lsrs	r3, r3, #18
 8003074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a6a      	ldr	r2, [pc, #424]	; (8003244 <HAL_I2C_Init+0x274>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d802      	bhi.n	80030a4 <HAL_I2C_Init+0xd4>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	e009      	b.n	80030b8 <HAL_I2C_Init+0xe8>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	4a69      	ldr	r2, [pc, #420]	; (8003254 <HAL_I2C_Init+0x284>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	3301      	adds	r3, #1
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	495c      	ldr	r1, [pc, #368]	; (8003244 <HAL_I2C_Init+0x274>)
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d819      	bhi.n	800310c <HAL_I2C_Init+0x13c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e59      	subs	r1, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030ec:	400b      	ands	r3, r1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_I2C_Init+0x138>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1e59      	subs	r1, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003100:	3301      	adds	r3, #1
 8003102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003106:	e051      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003108:	2304      	movs	r3, #4
 800310a:	e04f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <HAL_I2C_Init+0x168>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e012      	b.n	800315e <HAL_I2C_Init+0x18e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	0099      	lsls	r1, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x196>
 8003162:	2301      	movs	r3, #1
 8003164:	e022      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10e      	bne.n	800318c <HAL_I2C_Init+0x1bc>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e58      	subs	r0, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	440b      	add	r3, r1
 800317c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318a:	e00f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e58      	subs	r0, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	6809      	ldr	r1, [r1, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6911      	ldr	r1, [r2, #16]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	000186a0 	.word	0x000186a0
 8003248:	001e847f 	.word	0x001e847f
 800324c:	003d08ff 	.word	0x003d08ff
 8003250:	431bde83 	.word	0x431bde83
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	4608      	mov	r0, r1
 8003262:	4611      	mov	r1, r2
 8003264:	461a      	mov	r2, r3
 8003266:	4603      	mov	r3, r0
 8003268:	817b      	strh	r3, [r7, #10]
 800326a:	460b      	mov	r3, r1
 800326c:	813b      	strh	r3, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003276:	f7ff f911 	bl	800249c <HAL_GetTick>
 800327a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b20      	cmp	r3, #32
 8003286:	f040 8244 	bne.w	8003712 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2319      	movs	r3, #25
 8003290:	2201      	movs	r2, #1
 8003292:	4982      	ldr	r1, [pc, #520]	; (800349c <HAL_I2C_Mem_Read+0x244>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fb2f 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
 80032a2:	e237      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Mem_Read+0x5a>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e230      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d007      	beq.n	80032d8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2222      	movs	r2, #34	; 0x22
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a62      	ldr	r2, [pc, #392]	; (80034a0 <HAL_I2C_Mem_Read+0x248>)
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800331a:	88f8      	ldrh	r0, [r7, #6]
 800331c:	893a      	ldrh	r2, [r7, #8]
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4603      	mov	r3, r0
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f9fc 	bl	8003728 <I2C_RequestMemoryRead>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e1ec      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d113      	bne.n	800336a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e1c0      	b.n	80036ec <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	2b01      	cmp	r3, #1
 8003370:	d11e      	bne.n	80033b0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003380:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003382:	b672      	cpsid	i
}
 8003384:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033ac:	b662      	cpsie	i
}
 80033ae:	e035      	b.n	800341c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d11e      	bne.n	80033f6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033c8:	b672      	cpsid	i
}
 80033ca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033f2:	b662      	cpsie	i
}
 80033f4:	e012      	b.n	800341c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003404:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800341c:	e166      	b.n	80036ec <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	2b03      	cmp	r3, #3
 8003424:	f200 811f 	bhi.w	8003666 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	2b01      	cmp	r3, #1
 800342e:	d123      	bne.n	8003478 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fb76 	bl	8003b26 <I2C_WaitOnRXNEFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e167      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003476:	e139      	b.n	80036ec <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	2b02      	cmp	r3, #2
 800347e:	d152      	bne.n	8003526 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	2200      	movs	r2, #0
 8003488:	4906      	ldr	r1, [pc, #24]	; (80034a4 <HAL_I2C_Mem_Read+0x24c>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fa34 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e13c      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
 800349a:	bf00      	nop
 800349c:	00100002 	.word	0x00100002
 80034a0:	ffff0000 	.word	0xffff0000
 80034a4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034a8:	b672      	cpsid	i
}
 80034aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034ee:	b662      	cpsie	i
}
 80034f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003524:	e0e2      	b.n	80036ec <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352c:	2200      	movs	r2, #0
 800352e:	497b      	ldr	r1, [pc, #492]	; (800371c <HAL_I2C_Mem_Read+0x4c4>)
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f9e1 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0e9      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003550:	b672      	cpsid	i
}
 8003552:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003586:	4b66      	ldr	r3, [pc, #408]	; (8003720 <HAL_I2C_Mem_Read+0x4c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	4a65      	ldr	r2, [pc, #404]	; (8003724 <HAL_I2C_Mem_Read+0x4cc>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0a1a      	lsrs	r2, r3, #8
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00da      	lsls	r2, r3, #3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d118      	bne.n	80035de <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80035ce:	b662      	cpsie	i
}
 80035d0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e09a      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d1d9      	bne.n	80035a0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800362e:	b662      	cpsie	i
}
 8003630:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003664:	e042      	b.n	80036ec <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa5b 	bl	8003b26 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e04c      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d118      	bne.n	80036ec <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f47f ae94 	bne.w	800341e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003712:	2302      	movs	r3, #2
  }
}
 8003714:	4618      	mov	r0, r3
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	00010004 	.word	0x00010004
 8003720:	20000004 	.word	0x20000004
 8003724:	14f8b589 	.word	0x14f8b589

08003728 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003750:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2200      	movs	r2, #0
 800376a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f8c2 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003788:	d103      	bne.n	8003792 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0aa      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	6a3a      	ldr	r2, [r7, #32]
 80037aa:	4952      	ldr	r1, [pc, #328]	; (80038f4 <I2C_RequestMemoryRead+0x1cc>)
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f8fa 	bl	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e097      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	6a39      	ldr	r1, [r7, #32]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f964 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d107      	bne.n	80037fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e076      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003804:	893b      	ldrh	r3, [r7, #8]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	e021      	b.n	8003854 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003810:	893b      	ldrh	r3, [r7, #8]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	b29b      	uxth	r3, r3
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f93e 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b04      	cmp	r3, #4
 8003834:	d107      	bne.n	8003846 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e050      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800384a:	893b      	ldrh	r3, [r7, #8]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	6a39      	ldr	r1, [r7, #32]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f923 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b04      	cmp	r3, #4
 800386a:	d107      	bne.n	800387c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e035      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	2200      	movs	r2, #0
 8003898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f82b 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b6:	d103      	bne.n	80038c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e013      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038c4:	897b      	ldrh	r3, [r7, #10]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	6a3a      	ldr	r2, [r7, #32]
 80038d8:	4906      	ldr	r1, [pc, #24]	; (80038f4 <I2C_RequestMemoryRead+0x1cc>)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f863 	bl	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	00010002 	.word	0x00010002

080038f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003908:	e025      	b.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d021      	beq.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fdc3 	bl	800249c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d116      	bne.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e023      	b.n	800399e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10d      	bne.n	800397c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4013      	ands	r3, r2
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf0c      	ite	eq
 8003972:	2301      	moveq	r3, #1
 8003974:	2300      	movne	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	e00c      	b.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	429a      	cmp	r2, r3
 800399a:	d0b6      	beq.n	800390a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039b4:	e051      	b.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c4:	d123      	bne.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e046      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d021      	beq.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fe fd41 	bl	800249c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e020      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10c      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e00b      	b.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	43da      	mvns	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d18d      	bne.n	80039b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab0:	e02d      	b.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f88d 	bl	8003bd2 <I2C_IsAcknowledgeFailed>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e02d      	b.n	8003b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d021      	beq.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7fe fce7 	bl	800249c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d116      	bne.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e007      	b.n	8003b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d1ca      	bne.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b32:	e042      	b.n	8003bba <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d119      	bne.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f06f 0210 	mvn.w	r2, #16
 8003b4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e029      	b.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fc91 	bl	800249c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e007      	b.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d1b5      	bne.n	8003b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be8:	d11b      	bne.n	8003c22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0204 	orr.w	r2, r3, #4
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e272      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8087 	beq.w	8003d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c50:	4b92      	ldr	r3, [pc, #584]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d00c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d112      	bne.n	8003c8e <HAL_RCC_OscConfig+0x5e>
 8003c68:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d10b      	bne.n	8003c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c76:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d06c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x12c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d168      	bne.n	8003d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e24c      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x76>
 8003c98:	4b80      	ldr	r3, [pc, #512]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7f      	ldr	r2, [pc, #508]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e02e      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b7b      	ldr	r3, [pc, #492]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7a      	ldr	r2, [pc, #488]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b78      	ldr	r3, [pc, #480]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a77      	ldr	r2, [pc, #476]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0xbc>
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a71      	ldr	r2, [pc, #452]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6e      	ldr	r2, [pc, #440]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cec:	4b6b      	ldr	r3, [pc, #428]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a67      	ldr	r2, [pc, #412]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fbc6 	bl	800249c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fe fbc2 	bl	800249c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e200      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b5d      	ldr	r3, [pc, #372]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xe4>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fe fbb2 	bl	800249c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fe fbae 	bl	800249c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1ec      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x10c>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6a:	4b4c      	ldr	r3, [pc, #304]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x18c>
 8003d82:	4b46      	ldr	r3, [pc, #280]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1c0      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4939      	ldr	r1, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	e03a      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fe fb67 	bl	800249c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fe fb63 	bl	800249c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1a1      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4927      	ldr	r1, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fb46 	bl	800249c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fe fb42 	bl	800249c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e180      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03a      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d019      	beq.n	8003e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4c:	f7fe fb26 	bl	800249c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fe fb22 	bl	800249c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e160      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f000 fad8 	bl	8004428 <RCC_Delay>
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7fe fb0c 	bl	800249c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e86:	e00f      	b.n	8003ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e88:	f7fe fb08 	bl	800249c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d908      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e146      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	42420000 	.word	0x42420000
 8003ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	4b92      	ldr	r3, [pc, #584]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e9      	bne.n	8003e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a6 	beq.w	800400e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec6:	4b8b      	ldr	r3, [pc, #556]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4a87      	ldr	r2, [pc, #540]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	61d3      	str	r3, [r2, #28]
 8003ede:	4b85      	ldr	r3, [pc, #532]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b82      	ldr	r3, [pc, #520]	; (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b7f      	ldr	r3, [pc, #508]	; (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7e      	ldr	r2, [pc, #504]	; (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fe fac9 	bl	800249c <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fe fac5 	bl	800249c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e103      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x312>
 8003f34:	4b6f      	ldr	r3, [pc, #444]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	4a6e      	ldr	r2, [pc, #440]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6213      	str	r3, [r2, #32]
 8003f40:	e02d      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f4a:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4a69      	ldr	r2, [pc, #420]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6213      	str	r3, [r2, #32]
 8003f56:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a66      	ldr	r2, [pc, #408]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6213      	str	r3, [r2, #32]
 8003f62:	e01c      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_OscConfig+0x356>
 8003f6c:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a60      	ldr	r2, [pc, #384]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	f043 0304 	orr.w	r3, r3, #4
 8003f76:	6213      	str	r3, [r2, #32]
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4a5d      	ldr	r2, [pc, #372]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6213      	str	r3, [r2, #32]
 8003f84:	e00b      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f86:	4b5b      	ldr	r3, [pc, #364]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a5a      	ldr	r2, [pc, #360]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6213      	str	r3, [r2, #32]
 8003f92:	4b58      	ldr	r3, [pc, #352]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fa79 	bl	800249c <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe fa75 	bl	800249c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0b1      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCC_OscConfig+0x37e>
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe fa63 	bl	800249c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe fa5f 	bl	800249c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e09b      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b3c      	ldr	r3, [pc, #240]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4a3b      	ldr	r2, [pc, #236]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8087 	beq.w	8004126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004018:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d061      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d146      	bne.n	80040ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402c:	4b33      	ldr	r3, [pc, #204]	; (80040fc <HAL_RCC_OscConfig+0x4cc>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe fa33 	bl	800249c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe fa2f 	bl	800249c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e06d      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d108      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4921      	ldr	r1, [pc, #132]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a19      	ldr	r1, [r3, #32]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	430b      	orrs	r3, r1
 8004086:	491b      	ldr	r1, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x4cc>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe fa03 	bl	800249c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe f9ff 	bl	800249c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e03d      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x46a>
 80040b8:	e035      	b.n	8004126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_RCC_OscConfig+0x4cc>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe f9ec 	bl	800249c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe f9e8 	bl	800249c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e026      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x498>
 80040e6:	e01e      	b.n	8004126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e019      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_OscConfig+0x500>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	429a      	cmp	r2, r3
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000

08004134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0d0      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	4965      	ldr	r1, [pc, #404]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a58      	ldr	r2, [pc, #352]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800419a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a8:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a52      	ldr	r2, [pc, #328]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	494d      	ldr	r1, [pc, #308]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d040      	beq.n	8004254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d115      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e073      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06b      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4936      	ldr	r1, [pc, #216]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fe f93a 	bl	800249c <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fe f936 	bl	800249c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e053      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d210      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4922      	ldr	r1, [pc, #136]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e032      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4916      	ldr	r1, [pc, #88]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	490e      	ldr	r1, [pc, #56]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042c2:	f000 f821 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	; (80042fc <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x1cc>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1d0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe f898 	bl	8002418 <HAL_InitTick>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40022000 	.word	0x40022000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	08006d58 	.word	0x08006d58
 8004300:	20000004 	.word	0x20000004
 8004304:	20000008 	.word	0x20000008

08004308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	b490      	push	{r4, r7}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800430e:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004310:	1d3c      	adds	r4, r7, #4
 8004312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004318:	f240 2301 	movw	r3, #513	; 0x201
 800431c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	2300      	movs	r3, #0
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b04      	cmp	r3, #4
 8004340:	d002      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x40>
 8004342:	2b08      	cmp	r3, #8
 8004344:	d003      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0x46>
 8004346:	e02b      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004348:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800434a:	623b      	str	r3, [r7, #32]
      break;
 800434c:	e02b      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	0c9b      	lsrs	r3, r3, #18
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	3328      	adds	r3, #40	; 0x28
 8004358:	443b      	add	r3, r7
 800435a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800435e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d012      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	0c5b      	lsrs	r3, r3, #17
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	3328      	adds	r3, #40	; 0x28
 8004376:	443b      	add	r3, r7
 8004378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800437c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004382:	fb03 f202 	mul.w	r2, r3, r2
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e004      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	623b      	str	r3, [r7, #32]
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80043a2:	623b      	str	r3, [r7, #32]
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	6a3b      	ldr	r3, [r7, #32]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc90      	pop	{r4, r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	08006a28 	.word	0x08006a28
 80043b8:	40021000 	.word	0x40021000
 80043bc:	007a1200 	.word	0x007a1200
 80043c0:	003d0900 	.word	0x003d0900

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000004 	.word	0x20000004

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043dc:	f7ff fff2 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	08006d68 	.word	0x08006d68

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004404:	f7ff ffde 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0adb      	lsrs	r3, r3, #11
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	08006d68 	.word	0x08006d68

08004428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <RCC_Delay+0x34>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <RCC_Delay+0x38>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0a5b      	lsrs	r3, r3, #9
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004444:	bf00      	nop
  }
  while (Delay --);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1e5a      	subs	r2, r3, #1
 800444a:	60fa      	str	r2, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f9      	bne.n	8004444 <RCC_Delay+0x1c>
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	20000004 	.word	0x20000004
 8004460:	10624dd3 	.word	0x10624dd3

08004464 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d07d      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004480:	2300      	movs	r3, #0
 8004482:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004484:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b4c      	ldr	r3, [pc, #304]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4a4b      	ldr	r2, [pc, #300]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	61d3      	str	r3, [r2, #28]
 800449c:	4b49      	ldr	r3, [pc, #292]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	4b46      	ldr	r3, [pc, #280]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d118      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b8:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a42      	ldr	r2, [pc, #264]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c4:	f7fd ffea 	bl	800249c <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	e008      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044cc:	f7fd ffe6 	bl	800249c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e06d      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ea:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d02e      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	429a      	cmp	r2, r3
 8004506:	d027      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004508:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004510:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004518:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800451e:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d014      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fd ffb5 	bl	800249c <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fd ffb1 	bl	800249c <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e036      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ee      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4917      	ldr	r1, [pc, #92]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	4313      	orrs	r3, r2
 8004568:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	490b      	ldr	r1, [pc, #44]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	4904      	ldr	r1, [pc, #16]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
 80045cc:	42420440 	.word	0x42420440

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fd fd86 	bl	8002108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fbcc 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e041      	b.n	8004704 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7fd fd19 	bl	80020cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f000 fb7d 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_TIM_PWM_Start+0x24>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e022      	b.n	8004776 <HAL_TIM_PWM_Start+0x6a>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b04      	cmp	r3, #4
 8004734:	d109      	bne.n	800474a <HAL_TIM_PWM_Start+0x3e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e015      	b.n	8004776 <HAL_TIM_PWM_Start+0x6a>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d109      	bne.n	8004764 <HAL_TIM_PWM_Start+0x58>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e008      	b.n	8004776 <HAL_TIM_PWM_Start+0x6a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e05e      	b.n	800483c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Start+0x82>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478c:	e013      	b.n	80047b6 <HAL_TIM_PWM_Start+0xaa>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Start+0x92>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	e00b      	b.n	80047b6 <HAL_TIM_PWM_Start+0xaa>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_PWM_Start+0xa2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	e003      	b.n	80047b6 <HAL_TIM_PWM_Start+0xaa>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2202      	movs	r2, #2
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fd74 	bl	80052ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <HAL_TIM_PWM_Start+0x138>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d107      	bne.n	80047de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_TIM_PWM_Start+0x138>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_TIM_PWM_Start+0xfa>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d009      	beq.n	8004806 <HAL_TIM_PWM_Start+0xfa>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a14      	ldr	r2, [pc, #80]	; (8004848 <HAL_TIM_PWM_Start+0x13c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_TIM_PWM_Start+0xfa>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a12      	ldr	r2, [pc, #72]	; (800484c <HAL_TIM_PWM_Start+0x140>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b06      	cmp	r3, #6
 8004816:	d010      	beq.n	800483a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	e007      	b.n	800483a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800

08004850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d122      	bne.n	80048ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d11b      	bne.n	80048ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0202 	mvn.w	r2, #2
 800487c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa6f 	bl	8004d76 <HAL_TIM_IC_CaptureCallback>
 8004898:	e005      	b.n	80048a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa62 	bl	8004d64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fa71 	bl	8004d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d122      	bne.n	8004900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0204 	mvn.w	r2, #4
 80048d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa45 	bl	8004d76 <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa38 	bl	8004d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fa47 	bl	8004d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b08      	cmp	r3, #8
 800490c:	d122      	bne.n	8004954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b08      	cmp	r3, #8
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0208 	mvn.w	r2, #8
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2204      	movs	r2, #4
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa1b 	bl	8004d76 <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa0e 	bl	8004d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa1d 	bl	8004d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b10      	cmp	r3, #16
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b10      	cmp	r3, #16
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0210 	mvn.w	r2, #16
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2208      	movs	r2, #8
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9f1 	bl	8004d76 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9e4 	bl	8004d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f9f3 	bl	8004d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d10e      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d107      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0201 	mvn.w	r2, #1
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fecc 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d10e      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	d107      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fdd0 	bl	80055a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d10e      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9b7 	bl	8004d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d10e      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0220 	mvn.w	r2, #32
 8004a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fd9b 	bl	800558e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e0ac      	b.n	8004bd4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	f200 809f 	bhi.w	8004bc8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ac5 	.word	0x08004ac5
 8004a94:	08004bc9 	.word	0x08004bc9
 8004a98:	08004bc9 	.word	0x08004bc9
 8004a9c:	08004bc9 	.word	0x08004bc9
 8004aa0:	08004b05 	.word	0x08004b05
 8004aa4:	08004bc9 	.word	0x08004bc9
 8004aa8:	08004bc9 	.word	0x08004bc9
 8004aac:	08004bc9 	.word	0x08004bc9
 8004ab0:	08004b47 	.word	0x08004b47
 8004ab4:	08004bc9 	.word	0x08004bc9
 8004ab8:	08004bc9 	.word	0x08004bc9
 8004abc:	08004bc9 	.word	0x08004bc9
 8004ac0:	08004b87 	.word	0x08004b87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f9d0 	bl	8004e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0208 	orr.w	r2, r2, #8
 8004ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6999      	ldr	r1, [r3, #24]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	619a      	str	r2, [r3, #24]
      break;
 8004b02:	e062      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fa16 	bl	8004f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6999      	ldr	r1, [r3, #24]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	619a      	str	r2, [r3, #24]
      break;
 8004b44:	e041      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fa5f 	bl	8005010 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0208 	orr.w	r2, r2, #8
 8004b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0204 	bic.w	r2, r2, #4
 8004b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69d9      	ldr	r1, [r3, #28]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	61da      	str	r2, [r3, #28]
      break;
 8004b84:	e021      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 faa9 	bl	80050e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69d9      	ldr	r1, [r3, #28]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	021a      	lsls	r2, r3, #8
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	61da      	str	r2, [r3, #28]
      break;
 8004bc6:	e000      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x18>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e0b3      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x180>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2c:	d03e      	beq.n	8004cac <HAL_TIM_ConfigClockSource+0xd0>
 8004c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c32:	f200 8087 	bhi.w	8004d44 <HAL_TIM_ConfigClockSource+0x168>
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	f000 8085 	beq.w	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c42:	d87f      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x168>
 8004c44:	2b70      	cmp	r3, #112	; 0x70
 8004c46:	d01a      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0xa2>
 8004c48:	2b70      	cmp	r3, #112	; 0x70
 8004c4a:	d87b      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x168>
 8004c4c:	2b60      	cmp	r3, #96	; 0x60
 8004c4e:	d050      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x116>
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d877      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x168>
 8004c54:	2b50      	cmp	r3, #80	; 0x50
 8004c56:	d03c      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0xf6>
 8004c58:	2b50      	cmp	r3, #80	; 0x50
 8004c5a:	d873      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x168>
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d058      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x136>
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d86f      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x168>
 8004c64:	2b30      	cmp	r3, #48	; 0x30
 8004c66:	d064      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x156>
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d86b      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x168>
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d060      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x156>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d867      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x168>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x156>
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d05a      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c7c:	e062      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6899      	ldr	r1, [r3, #8]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f000 faee 	bl	800526e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	609a      	str	r2, [r3, #8]
      break;
 8004caa:	e04e      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6899      	ldr	r1, [r3, #8]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f000 fad7 	bl	800526e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cce:	609a      	str	r2, [r3, #8]
      break;
 8004cd0:	e03b      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f000 fa4e 	bl	8005180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2150      	movs	r1, #80	; 0x50
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 faa5 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004cf0:	e02b      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 fa6c 	bl	80051dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2160      	movs	r1, #96	; 0x60
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fa95 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004d10:	e01b      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 fa2e 	bl	8005180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2140      	movs	r1, #64	; 0x40
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fa85 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004d30:	e00b      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 fa7c 	bl	800523a <TIM_ITRx_SetConfig>
        break;
 8004d42:	e002      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <TIM_Base_SetConfig+0xb8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00b      	beq.n	8004ddc <TIM_Base_SetConfig+0x30>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d007      	beq.n	8004ddc <TIM_Base_SetConfig+0x30>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <TIM_Base_SetConfig+0xbc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0x30>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a25      	ldr	r2, [pc, #148]	; (8004e6c <TIM_Base_SetConfig+0xc0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d108      	bne.n	8004dee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <TIM_Base_SetConfig+0xb8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_Base_SetConfig+0x62>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d007      	beq.n	8004e0e <TIM_Base_SetConfig+0x62>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <TIM_Base_SetConfig+0xbc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_Base_SetConfig+0x62>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <TIM_Base_SetConfig+0xc0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d108      	bne.n	8004e20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <TIM_Base_SetConfig+0xb8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	615a      	str	r2, [r3, #20]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800

08004e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 0302 	bic.w	r3, r3, #2
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <TIM_OC1_SetConfig+0xc8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d10c      	bne.n	8004ee6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f023 0308 	bic.w	r3, r3, #8
 8004ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f023 0304 	bic.w	r3, r3, #4
 8004ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <TIM_OC1_SetConfig+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d111      	bne.n	8004f12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40012c00 	.word	0x40012c00

08004f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f023 0210 	bic.w	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0320 	bic.w	r3, r3, #32
 8004f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a1d      	ldr	r2, [pc, #116]	; (800500c <TIM_OC2_SetConfig+0xd0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d10d      	bne.n	8004fb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a14      	ldr	r2, [pc, #80]	; (800500c <TIM_OC2_SetConfig+0xd0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d113      	bne.n	8004fe8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	40012c00 	.word	0x40012c00

08005010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1d      	ldr	r2, [pc, #116]	; (80050e0 <TIM_OC3_SetConfig+0xd0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10d      	bne.n	800508a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <TIM_OC3_SetConfig+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d113      	bne.n	80050ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40012c00 	.word	0x40012c00

080050e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800512e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	031b      	lsls	r3, r3, #12
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a0f      	ldr	r2, [pc, #60]	; (800517c <TIM_OC4_SetConfig+0x98>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d109      	bne.n	8005158 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	019b      	lsls	r3, r3, #6
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	40012c00 	.word	0x40012c00

08005180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 030a 	bic.w	r3, r3, #10
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f023 0210 	bic.w	r2, r3, #16
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005206:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	031b      	lsls	r3, r3, #12
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005218:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	621a      	str	r2, [r3, #32]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	f043 0307 	orr.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr

0800526e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800526e:	b480      	push	{r7}
 8005270:	b087      	sub	sp, #28
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005288:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	021a      	lsls	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	431a      	orrs	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4313      	orrs	r3, r2
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	609a      	str	r2, [r3, #8]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2201      	movs	r2, #1
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1a      	ldr	r2, [r3, #32]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	401a      	ands	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1a      	ldr	r2, [r3, #32]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_TIMEx_PWMN_Start+0x24>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e022      	b.n	800535e <HAL_TIMEx_PWMN_Start+0x6a>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b04      	cmp	r3, #4
 800531c:	d109      	bne.n	8005332 <HAL_TIMEx_PWMN_Start+0x3e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	bf14      	ite	ne
 800532a:	2301      	movne	r3, #1
 800532c:	2300      	moveq	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	e015      	b.n	800535e <HAL_TIMEx_PWMN_Start+0x6a>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d109      	bne.n	800534c <HAL_TIMEx_PWMN_Start+0x58>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e008      	b.n	800535e <HAL_TIMEx_PWMN_Start+0x6a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e059      	b.n	800541a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <HAL_TIMEx_PWMN_Start+0x82>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005374:	e013      	b.n	800539e <HAL_TIMEx_PWMN_Start+0xaa>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d104      	bne.n	8005386 <HAL_TIMEx_PWMN_Start+0x92>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005384:	e00b      	b.n	800539e <HAL_TIMEx_PWMN_Start+0xaa>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d104      	bne.n	8005396 <HAL_TIMEx_PWMN_Start+0xa2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005394:	e003      	b.n	800539e <HAL_TIMEx_PWMN_Start+0xaa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2204      	movs	r2, #4
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f903 	bl	80055b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_TIMEx_PWMN_Start+0x130>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00e      	beq.n	80053e4 <HAL_TIMEx_PWMN_Start+0xf0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ce:	d009      	beq.n	80053e4 <HAL_TIMEx_PWMN_Start+0xf0>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <HAL_TIMEx_PWMN_Start+0x134>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_TIMEx_PWMN_Start+0xf0>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a13      	ldr	r2, [pc, #76]	; (800542c <HAL_TIMEx_PWMN_Start+0x138>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d111      	bne.n	8005408 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d010      	beq.n	8005418 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0201 	orr.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005406:	e007      	b.n	8005418 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800

08005430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005444:	2302      	movs	r3, #2
 8005446:	e046      	b.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005494:	d009      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d10c      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800

080054ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005504:	2302      	movs	r3, #2
 8005506:	e03d      	b.n	8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b087      	sub	sp, #28
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	2204      	movs	r2, #4
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	43db      	mvns	r3, r3
 80055d4:	401a      	ands	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ea:	431a      	orrs	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e03f      	b.n	800568c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fc fde3 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	; 0x24
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800563c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fc84 	bl	8005f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005652:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005662:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005672:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d17c      	bne.n	80057ae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_UART_Transmit+0x2c>
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e075      	b.n	80057b0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_UART_Transmit+0x3e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e06e      	b.n	80057b0 <HAL_UART_Transmit+0x11c>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2221      	movs	r2, #33	; 0x21
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056e8:	f7fc fed8 	bl	800249c <HAL_GetTick>
 80056ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005702:	d108      	bne.n	8005716 <HAL_UART_Transmit+0x82>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	e003      	b.n	800571e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005726:	e02a      	b.n	800577e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	2180      	movs	r1, #128	; 0x80
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fa37 	bl	8005ba6 <UART_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e036      	b.n	80057b0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005756:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	3302      	adds	r3, #2
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	e007      	b.n	8005770 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	781a      	ldrb	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1cf      	bne.n	8005728 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2200      	movs	r2, #0
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fa07 	bl	8005ba6 <UART_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e006      	b.n	80057b0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e000      	b.n	80057b0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d11d      	bne.n	800580e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_UART_Receive_IT+0x26>
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e016      	b.n	8005810 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_UART_Receive_IT+0x38>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e00f      	b.n	8005810 <HAL_UART_Receive_IT+0x58>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	461a      	mov	r2, r3
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fa18 	bl	8005c3a <UART_Start_Receive_IT>
 800580a:	4603      	mov	r3, r0
 800580c:	e000      	b.n	8005810 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005838:	2300      	movs	r3, #0
 800583a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_UART_IRQHandler+0x52>
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fac9 	bl	8005dfa <UART_Receive_IT>
      return;
 8005868:	e17b      	b.n	8005b62 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80b1 	beq.w	80059d4 <HAL_UART_IRQHandler+0x1bc>
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d105      	bne.n	8005888 <HAL_UART_IRQHandler+0x70>
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80a6 	beq.w	80059d4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_UART_IRQHandler+0x90>
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	f043 0201 	orr.w	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_UART_IRQHandler+0xb0>
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_UART_IRQHandler+0xd0>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	f043 0204 	orr.w	r2, r3, #4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00f      	beq.n	8005912 <HAL_UART_IRQHandler+0xfa>
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <HAL_UART_IRQHandler+0xee>
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f043 0208 	orr.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 811e 	beq.w	8005b58 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_UART_IRQHandler+0x11e>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fa62 	bl	8005dfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <HAL_UART_IRQHandler+0x146>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d031      	beq.n	80059c2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9a4 	bl	8005cac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d023      	beq.n	80059ba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005980:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	2b00      	cmp	r3, #0
 8005988:	d013      	beq.n	80059b2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	4a76      	ldr	r2, [pc, #472]	; (8005b68 <HAL_UART_IRQHandler+0x350>)
 8005990:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	4618      	mov	r0, r3
 8005998:	f7fd f908 	bl	8002bac <HAL_DMA_Abort_IT>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059ac:	4610      	mov	r0, r2
 80059ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	e00e      	b.n	80059d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f8e3 	bl	8005b7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	e00a      	b.n	80059d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8df 	bl	8005b7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	e006      	b.n	80059d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f8db 	bl	8005b7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059ce:	e0c3      	b.n	8005b58 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	bf00      	nop
    return;
 80059d2:	e0c1      	b.n	8005b58 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	2b01      	cmp	r3, #1
 80059da:	f040 80a1 	bne.w	8005b20 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 809b 	beq.w	8005b20 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8095 	beq.w	8005b20 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04e      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005a24:	8a3b      	ldrh	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8098 	beq.w	8005b5c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a30:	8a3a      	ldrh	r2, [r7, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	f080 8092 	bcs.w	8005b5c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8a3a      	ldrh	r2, [r7, #16]
 8005a3c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d02b      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a56:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a76:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0210 	bic.w	r2, r2, #16
 8005a94:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd f84b 	bl	8002b36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f86d 	bl	8005b90 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ab6:	e051      	b.n	8005b5c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d047      	beq.n	8005b60 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005ad0:	8a7b      	ldrh	r3, [r7, #18]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d044      	beq.n	8005b60 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ae4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0210 	bic.w	r2, r2, #16
 8005b12:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b14:	8a7b      	ldrh	r3, [r7, #18]
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f839 	bl	8005b90 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b1e:	e01f      	b.n	8005b60 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_UART_IRQHandler+0x324>
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8f9 	bl	8005d2c <UART_Transmit_IT>
    return;
 8005b3a:	e012      	b.n	8005b62 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00d      	beq.n	8005b62 <HAL_UART_IRQHandler+0x34a>
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f93a 	bl	8005dca <UART_EndTransmit_IT>
    return;
 8005b56:	e004      	b.n	8005b62 <HAL_UART_IRQHandler+0x34a>
    return;
 8005b58:	bf00      	nop
 8005b5a:	e002      	b.n	8005b62 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b60:	bf00      	nop
  }
}
 8005b62:	3728      	adds	r7, #40	; 0x28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	08005d05 	.word	0x08005d05

08005b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb6:	e02c      	b.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d028      	beq.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bc6:	f7fc fc69 	bl	800249c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d21d      	bcs.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005be4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695a      	ldr	r2, [r3, #20]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e00f      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	bf0c      	ite	eq
 8005c22:	2301      	moveq	r3, #1
 8005c24:	2300      	movne	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d0c3      	beq.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	4613      	mov	r3, r2
 8005c46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	88fa      	ldrh	r2, [r7, #6]
 8005c52:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2222      	movs	r2, #34	; 0x22
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0220 	orr.w	r2, r2, #32
 8005c9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0201 	bic.w	r2, r2, #1
 8005cd2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d107      	bne.n	8005cec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0210 	bic.w	r2, r2, #16
 8005cea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff ff2d 	bl	8005b7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b21      	cmp	r3, #33	; 0x21
 8005d3e:	d13e      	bne.n	8005dbe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d48:	d114      	bne.n	8005d74 <UART_Transmit_IT+0x48>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d110      	bne.n	8005d74 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	1c9a      	adds	r2, r3, #2
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	621a      	str	r2, [r3, #32]
 8005d72:	e008      	b.n	8005d86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	1c59      	adds	r1, r3, #1
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6211      	str	r1, [r2, #32]
 8005d7e:	781a      	ldrb	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	4619      	mov	r1, r3
 8005d94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e000      	b.n	8005dc0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
  }
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff febe 	bl	8005b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b086      	sub	sp, #24
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b22      	cmp	r3, #34	; 0x22
 8005e0c:	f040 8099 	bne.w	8005f42 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e18:	d117      	bne.n	8005e4a <UART_Receive_IT+0x50>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d113      	bne.n	8005e4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	1c9a      	adds	r2, r3, #2
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
 8005e48:	e026      	b.n	8005e98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5c:	d007      	beq.n	8005e6e <UART_Receive_IT+0x74>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <UART_Receive_IT+0x82>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	e008      	b.n	8005e8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d148      	bne.n	8005f3e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0220 	bic.w	r2, r2, #32
 8005eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d123      	bne.n	8005f34 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0210 	bic.w	r2, r2, #16
 8005f00:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d10a      	bne.n	8005f26 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fe2f 	bl	8005b90 <HAL_UARTEx_RxEventCallback>
 8005f32:	e002      	b.n	8005f3a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fb fbf1 	bl	800171c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e002      	b.n	8005f44 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f86:	f023 030c 	bic.w	r3, r3, #12
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <UART_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fb4:	f7fe fa24 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	e002      	b.n	8005fc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fe fa0c 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8005fc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009a      	lsls	r2, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <UART_SetConfig+0x118>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	0119      	lsls	r1, r3, #4
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009a      	lsls	r2, r3, #2
 8005fec:	441a      	add	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ff8:	4b1a      	ldr	r3, [pc, #104]	; (8006064 <UART_SetConfig+0x118>)
 8005ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	2064      	movs	r0, #100	; 0x64
 8006002:	fb00 f303 	mul.w	r3, r0, r3
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	3332      	adds	r3, #50	; 0x32
 800600c:	4a15      	ldr	r2, [pc, #84]	; (8006064 <UART_SetConfig+0x118>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006018:	4419      	add	r1, r3
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	009a      	lsls	r2, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <UART_SetConfig+0x118>)
 8006032:	fba3 0302 	umull	r0, r3, r3, r2
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	2064      	movs	r0, #100	; 0x64
 800603a:	fb00 f303 	mul.w	r3, r0, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	3332      	adds	r3, #50	; 0x32
 8006044:	4a07      	ldr	r2, [pc, #28]	; (8006064 <UART_SetConfig+0x118>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	440a      	add	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006058:	bf00      	nop
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40013800 	.word	0x40013800
 8006064:	51eb851f 	.word	0x51eb851f

08006068 <__errno>:
 8006068:	4b01      	ldr	r3, [pc, #4]	; (8006070 <__errno+0x8>)
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20000010 	.word	0x20000010

08006074 <__libc_init_array>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	2600      	movs	r6, #0
 8006078:	4d0c      	ldr	r5, [pc, #48]	; (80060ac <__libc_init_array+0x38>)
 800607a:	4c0d      	ldr	r4, [pc, #52]	; (80060b0 <__libc_init_array+0x3c>)
 800607c:	1b64      	subs	r4, r4, r5
 800607e:	10a4      	asrs	r4, r4, #2
 8006080:	42a6      	cmp	r6, r4
 8006082:	d109      	bne.n	8006098 <__libc_init_array+0x24>
 8006084:	f000 fc9c 	bl	80069c0 <_init>
 8006088:	2600      	movs	r6, #0
 800608a:	4d0a      	ldr	r5, [pc, #40]	; (80060b4 <__libc_init_array+0x40>)
 800608c:	4c0a      	ldr	r4, [pc, #40]	; (80060b8 <__libc_init_array+0x44>)
 800608e:	1b64      	subs	r4, r4, r5
 8006090:	10a4      	asrs	r4, r4, #2
 8006092:	42a6      	cmp	r6, r4
 8006094:	d105      	bne.n	80060a2 <__libc_init_array+0x2e>
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	f855 3b04 	ldr.w	r3, [r5], #4
 800609c:	4798      	blx	r3
 800609e:	3601      	adds	r6, #1
 80060a0:	e7ee      	b.n	8006080 <__libc_init_array+0xc>
 80060a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a6:	4798      	blx	r3
 80060a8:	3601      	adds	r6, #1
 80060aa:	e7f2      	b.n	8006092 <__libc_init_array+0x1e>
 80060ac:	08006da4 	.word	0x08006da4
 80060b0:	08006da4 	.word	0x08006da4
 80060b4:	08006da4 	.word	0x08006da4
 80060b8:	08006dac 	.word	0x08006dac

080060bc <memcpy>:
 80060bc:	440a      	add	r2, r1
 80060be:	4291      	cmp	r1, r2
 80060c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060c4:	d100      	bne.n	80060c8 <memcpy+0xc>
 80060c6:	4770      	bx	lr
 80060c8:	b510      	push	{r4, lr}
 80060ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ce:	4291      	cmp	r1, r2
 80060d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d4:	d1f9      	bne.n	80060ca <memcpy+0xe>
 80060d6:	bd10      	pop	{r4, pc}

080060d8 <memset>:
 80060d8:	4603      	mov	r3, r0
 80060da:	4402      	add	r2, r0
 80060dc:	4293      	cmp	r3, r2
 80060de:	d100      	bne.n	80060e2 <memset+0xa>
 80060e0:	4770      	bx	lr
 80060e2:	f803 1b01 	strb.w	r1, [r3], #1
 80060e6:	e7f9      	b.n	80060dc <memset+0x4>

080060e8 <siprintf>:
 80060e8:	b40e      	push	{r1, r2, r3}
 80060ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060ee:	b500      	push	{lr}
 80060f0:	b09c      	sub	sp, #112	; 0x70
 80060f2:	ab1d      	add	r3, sp, #116	; 0x74
 80060f4:	9002      	str	r0, [sp, #8]
 80060f6:	9006      	str	r0, [sp, #24]
 80060f8:	9107      	str	r1, [sp, #28]
 80060fa:	9104      	str	r1, [sp, #16]
 80060fc:	4808      	ldr	r0, [pc, #32]	; (8006120 <siprintf+0x38>)
 80060fe:	4909      	ldr	r1, [pc, #36]	; (8006124 <siprintf+0x3c>)
 8006100:	f853 2b04 	ldr.w	r2, [r3], #4
 8006104:	9105      	str	r1, [sp, #20]
 8006106:	6800      	ldr	r0, [r0, #0]
 8006108:	a902      	add	r1, sp, #8
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	f000 f868 	bl	80061e0 <_svfiprintf_r>
 8006110:	2200      	movs	r2, #0
 8006112:	9b02      	ldr	r3, [sp, #8]
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	b01c      	add	sp, #112	; 0x70
 8006118:	f85d eb04 	ldr.w	lr, [sp], #4
 800611c:	b003      	add	sp, #12
 800611e:	4770      	bx	lr
 8006120:	20000010 	.word	0x20000010
 8006124:	ffff0208 	.word	0xffff0208

08006128 <__ssputs_r>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	688e      	ldr	r6, [r1, #8]
 800612e:	4682      	mov	sl, r0
 8006130:	429e      	cmp	r6, r3
 8006132:	460c      	mov	r4, r1
 8006134:	4690      	mov	r8, r2
 8006136:	461f      	mov	r7, r3
 8006138:	d838      	bhi.n	80061ac <__ssputs_r+0x84>
 800613a:	898a      	ldrh	r2, [r1, #12]
 800613c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006140:	d032      	beq.n	80061a8 <__ssputs_r+0x80>
 8006142:	6825      	ldr	r5, [r4, #0]
 8006144:	6909      	ldr	r1, [r1, #16]
 8006146:	3301      	adds	r3, #1
 8006148:	eba5 0901 	sub.w	r9, r5, r1
 800614c:	6965      	ldr	r5, [r4, #20]
 800614e:	444b      	add	r3, r9
 8006150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006158:	106d      	asrs	r5, r5, #1
 800615a:	429d      	cmp	r5, r3
 800615c:	bf38      	it	cc
 800615e:	461d      	movcc	r5, r3
 8006160:	0553      	lsls	r3, r2, #21
 8006162:	d531      	bpl.n	80061c8 <__ssputs_r+0xa0>
 8006164:	4629      	mov	r1, r5
 8006166:	f000 fb61 	bl	800682c <_malloc_r>
 800616a:	4606      	mov	r6, r0
 800616c:	b950      	cbnz	r0, 8006184 <__ssputs_r+0x5c>
 800616e:	230c      	movs	r3, #12
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	f8ca 3000 	str.w	r3, [sl]
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	464a      	mov	r2, r9
 8006186:	6921      	ldr	r1, [r4, #16]
 8006188:	f7ff ff98 	bl	80060bc <memcpy>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	6126      	str	r6, [r4, #16]
 800619a:	444e      	add	r6, r9
 800619c:	6026      	str	r6, [r4, #0]
 800619e:	463e      	mov	r6, r7
 80061a0:	6165      	str	r5, [r4, #20]
 80061a2:	eba5 0509 	sub.w	r5, r5, r9
 80061a6:	60a5      	str	r5, [r4, #8]
 80061a8:	42be      	cmp	r6, r7
 80061aa:	d900      	bls.n	80061ae <__ssputs_r+0x86>
 80061ac:	463e      	mov	r6, r7
 80061ae:	4632      	mov	r2, r6
 80061b0:	4641      	mov	r1, r8
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	f000 fab8 	bl	8006728 <memmove>
 80061b8:	68a3      	ldr	r3, [r4, #8]
 80061ba:	2000      	movs	r0, #0
 80061bc:	1b9b      	subs	r3, r3, r6
 80061be:	60a3      	str	r3, [r4, #8]
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	4433      	add	r3, r6
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	e7db      	b.n	8006180 <__ssputs_r+0x58>
 80061c8:	462a      	mov	r2, r5
 80061ca:	f000 fba3 	bl	8006914 <_realloc_r>
 80061ce:	4606      	mov	r6, r0
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1e1      	bne.n	8006198 <__ssputs_r+0x70>
 80061d4:	4650      	mov	r0, sl
 80061d6:	6921      	ldr	r1, [r4, #16]
 80061d8:	f000 fac0 	bl	800675c <_free_r>
 80061dc:	e7c7      	b.n	800616e <__ssputs_r+0x46>
	...

080061e0 <_svfiprintf_r>:
 80061e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	4698      	mov	r8, r3
 80061e6:	898b      	ldrh	r3, [r1, #12]
 80061e8:	4607      	mov	r7, r0
 80061ea:	061b      	lsls	r3, r3, #24
 80061ec:	460d      	mov	r5, r1
 80061ee:	4614      	mov	r4, r2
 80061f0:	b09d      	sub	sp, #116	; 0x74
 80061f2:	d50e      	bpl.n	8006212 <_svfiprintf_r+0x32>
 80061f4:	690b      	ldr	r3, [r1, #16]
 80061f6:	b963      	cbnz	r3, 8006212 <_svfiprintf_r+0x32>
 80061f8:	2140      	movs	r1, #64	; 0x40
 80061fa:	f000 fb17 	bl	800682c <_malloc_r>
 80061fe:	6028      	str	r0, [r5, #0]
 8006200:	6128      	str	r0, [r5, #16]
 8006202:	b920      	cbnz	r0, 800620e <_svfiprintf_r+0x2e>
 8006204:	230c      	movs	r3, #12
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e0d1      	b.n	80063b2 <_svfiprintf_r+0x1d2>
 800620e:	2340      	movs	r3, #64	; 0x40
 8006210:	616b      	str	r3, [r5, #20]
 8006212:	2300      	movs	r3, #0
 8006214:	9309      	str	r3, [sp, #36]	; 0x24
 8006216:	2320      	movs	r3, #32
 8006218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800621c:	2330      	movs	r3, #48	; 0x30
 800621e:	f04f 0901 	mov.w	r9, #1
 8006222:	f8cd 800c 	str.w	r8, [sp, #12]
 8006226:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063cc <_svfiprintf_r+0x1ec>
 800622a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800622e:	4623      	mov	r3, r4
 8006230:	469a      	mov	sl, r3
 8006232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006236:	b10a      	cbz	r2, 800623c <_svfiprintf_r+0x5c>
 8006238:	2a25      	cmp	r2, #37	; 0x25
 800623a:	d1f9      	bne.n	8006230 <_svfiprintf_r+0x50>
 800623c:	ebba 0b04 	subs.w	fp, sl, r4
 8006240:	d00b      	beq.n	800625a <_svfiprintf_r+0x7a>
 8006242:	465b      	mov	r3, fp
 8006244:	4622      	mov	r2, r4
 8006246:	4629      	mov	r1, r5
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff ff6d 	bl	8006128 <__ssputs_r>
 800624e:	3001      	adds	r0, #1
 8006250:	f000 80aa 	beq.w	80063a8 <_svfiprintf_r+0x1c8>
 8006254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006256:	445a      	add	r2, fp
 8006258:	9209      	str	r2, [sp, #36]	; 0x24
 800625a:	f89a 3000 	ldrb.w	r3, [sl]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80a2 	beq.w	80063a8 <_svfiprintf_r+0x1c8>
 8006264:	2300      	movs	r3, #0
 8006266:	f04f 32ff 	mov.w	r2, #4294967295
 800626a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800626e:	f10a 0a01 	add.w	sl, sl, #1
 8006272:	9304      	str	r3, [sp, #16]
 8006274:	9307      	str	r3, [sp, #28]
 8006276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800627a:	931a      	str	r3, [sp, #104]	; 0x68
 800627c:	4654      	mov	r4, sl
 800627e:	2205      	movs	r2, #5
 8006280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006284:	4851      	ldr	r0, [pc, #324]	; (80063cc <_svfiprintf_r+0x1ec>)
 8006286:	f000 fa41 	bl	800670c <memchr>
 800628a:	9a04      	ldr	r2, [sp, #16]
 800628c:	b9d8      	cbnz	r0, 80062c6 <_svfiprintf_r+0xe6>
 800628e:	06d0      	lsls	r0, r2, #27
 8006290:	bf44      	itt	mi
 8006292:	2320      	movmi	r3, #32
 8006294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006298:	0711      	lsls	r1, r2, #28
 800629a:	bf44      	itt	mi
 800629c:	232b      	movmi	r3, #43	; 0x2b
 800629e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a2:	f89a 3000 	ldrb.w	r3, [sl]
 80062a6:	2b2a      	cmp	r3, #42	; 0x2a
 80062a8:	d015      	beq.n	80062d6 <_svfiprintf_r+0xf6>
 80062aa:	4654      	mov	r4, sl
 80062ac:	2000      	movs	r0, #0
 80062ae:	f04f 0c0a 	mov.w	ip, #10
 80062b2:	9a07      	ldr	r2, [sp, #28]
 80062b4:	4621      	mov	r1, r4
 80062b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ba:	3b30      	subs	r3, #48	; 0x30
 80062bc:	2b09      	cmp	r3, #9
 80062be:	d94e      	bls.n	800635e <_svfiprintf_r+0x17e>
 80062c0:	b1b0      	cbz	r0, 80062f0 <_svfiprintf_r+0x110>
 80062c2:	9207      	str	r2, [sp, #28]
 80062c4:	e014      	b.n	80062f0 <_svfiprintf_r+0x110>
 80062c6:	eba0 0308 	sub.w	r3, r0, r8
 80062ca:	fa09 f303 	lsl.w	r3, r9, r3
 80062ce:	4313      	orrs	r3, r2
 80062d0:	46a2      	mov	sl, r4
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	e7d2      	b.n	800627c <_svfiprintf_r+0x9c>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	1d19      	adds	r1, r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	9103      	str	r1, [sp, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfbb      	ittet	lt
 80062e2:	425b      	neglt	r3, r3
 80062e4:	f042 0202 	orrlt.w	r2, r2, #2
 80062e8:	9307      	strge	r3, [sp, #28]
 80062ea:	9307      	strlt	r3, [sp, #28]
 80062ec:	bfb8      	it	lt
 80062ee:	9204      	strlt	r2, [sp, #16]
 80062f0:	7823      	ldrb	r3, [r4, #0]
 80062f2:	2b2e      	cmp	r3, #46	; 0x2e
 80062f4:	d10c      	bne.n	8006310 <_svfiprintf_r+0x130>
 80062f6:	7863      	ldrb	r3, [r4, #1]
 80062f8:	2b2a      	cmp	r3, #42	; 0x2a
 80062fa:	d135      	bne.n	8006368 <_svfiprintf_r+0x188>
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	3402      	adds	r4, #2
 8006300:	1d1a      	adds	r2, r3, #4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	9203      	str	r2, [sp, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	bfb8      	it	lt
 800630a:	f04f 33ff 	movlt.w	r3, #4294967295
 800630e:	9305      	str	r3, [sp, #20]
 8006310:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80063d0 <_svfiprintf_r+0x1f0>
 8006314:	2203      	movs	r2, #3
 8006316:	4650      	mov	r0, sl
 8006318:	7821      	ldrb	r1, [r4, #0]
 800631a:	f000 f9f7 	bl	800670c <memchr>
 800631e:	b140      	cbz	r0, 8006332 <_svfiprintf_r+0x152>
 8006320:	2340      	movs	r3, #64	; 0x40
 8006322:	eba0 000a 	sub.w	r0, r0, sl
 8006326:	fa03 f000 	lsl.w	r0, r3, r0
 800632a:	9b04      	ldr	r3, [sp, #16]
 800632c:	3401      	adds	r4, #1
 800632e:	4303      	orrs	r3, r0
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006336:	2206      	movs	r2, #6
 8006338:	4826      	ldr	r0, [pc, #152]	; (80063d4 <_svfiprintf_r+0x1f4>)
 800633a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800633e:	f000 f9e5 	bl	800670c <memchr>
 8006342:	2800      	cmp	r0, #0
 8006344:	d038      	beq.n	80063b8 <_svfiprintf_r+0x1d8>
 8006346:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <_svfiprintf_r+0x1f8>)
 8006348:	bb1b      	cbnz	r3, 8006392 <_svfiprintf_r+0x1b2>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	3307      	adds	r3, #7
 800634e:	f023 0307 	bic.w	r3, r3, #7
 8006352:	3308      	adds	r3, #8
 8006354:	9303      	str	r3, [sp, #12]
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	4433      	add	r3, r6
 800635a:	9309      	str	r3, [sp, #36]	; 0x24
 800635c:	e767      	b.n	800622e <_svfiprintf_r+0x4e>
 800635e:	460c      	mov	r4, r1
 8006360:	2001      	movs	r0, #1
 8006362:	fb0c 3202 	mla	r2, ip, r2, r3
 8006366:	e7a5      	b.n	80062b4 <_svfiprintf_r+0xd4>
 8006368:	2300      	movs	r3, #0
 800636a:	f04f 0c0a 	mov.w	ip, #10
 800636e:	4619      	mov	r1, r3
 8006370:	3401      	adds	r4, #1
 8006372:	9305      	str	r3, [sp, #20]
 8006374:	4620      	mov	r0, r4
 8006376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800637a:	3a30      	subs	r2, #48	; 0x30
 800637c:	2a09      	cmp	r2, #9
 800637e:	d903      	bls.n	8006388 <_svfiprintf_r+0x1a8>
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0c5      	beq.n	8006310 <_svfiprintf_r+0x130>
 8006384:	9105      	str	r1, [sp, #20]
 8006386:	e7c3      	b.n	8006310 <_svfiprintf_r+0x130>
 8006388:	4604      	mov	r4, r0
 800638a:	2301      	movs	r3, #1
 800638c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006390:	e7f0      	b.n	8006374 <_svfiprintf_r+0x194>
 8006392:	ab03      	add	r3, sp, #12
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	462a      	mov	r2, r5
 8006398:	4638      	mov	r0, r7
 800639a:	4b10      	ldr	r3, [pc, #64]	; (80063dc <_svfiprintf_r+0x1fc>)
 800639c:	a904      	add	r1, sp, #16
 800639e:	f3af 8000 	nop.w
 80063a2:	1c42      	adds	r2, r0, #1
 80063a4:	4606      	mov	r6, r0
 80063a6:	d1d6      	bne.n	8006356 <_svfiprintf_r+0x176>
 80063a8:	89ab      	ldrh	r3, [r5, #12]
 80063aa:	065b      	lsls	r3, r3, #25
 80063ac:	f53f af2c 	bmi.w	8006208 <_svfiprintf_r+0x28>
 80063b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063b2:	b01d      	add	sp, #116	; 0x74
 80063b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b8:	ab03      	add	r3, sp, #12
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	462a      	mov	r2, r5
 80063be:	4638      	mov	r0, r7
 80063c0:	4b06      	ldr	r3, [pc, #24]	; (80063dc <_svfiprintf_r+0x1fc>)
 80063c2:	a904      	add	r1, sp, #16
 80063c4:	f000 f87c 	bl	80064c0 <_printf_i>
 80063c8:	e7eb      	b.n	80063a2 <_svfiprintf_r+0x1c2>
 80063ca:	bf00      	nop
 80063cc:	08006d70 	.word	0x08006d70
 80063d0:	08006d76 	.word	0x08006d76
 80063d4:	08006d7a 	.word	0x08006d7a
 80063d8:	00000000 	.word	0x00000000
 80063dc:	08006129 	.word	0x08006129

080063e0 <_printf_common>:
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	4616      	mov	r6, r2
 80063e6:	4699      	mov	r9, r3
 80063e8:	688a      	ldr	r2, [r1, #8]
 80063ea:	690b      	ldr	r3, [r1, #16]
 80063ec:	4607      	mov	r7, r0
 80063ee:	4293      	cmp	r3, r2
 80063f0:	bfb8      	it	lt
 80063f2:	4613      	movlt	r3, r2
 80063f4:	6033      	str	r3, [r6, #0]
 80063f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063fa:	460c      	mov	r4, r1
 80063fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006400:	b10a      	cbz	r2, 8006406 <_printf_common+0x26>
 8006402:	3301      	adds	r3, #1
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	0699      	lsls	r1, r3, #26
 800640a:	bf42      	ittt	mi
 800640c:	6833      	ldrmi	r3, [r6, #0]
 800640e:	3302      	addmi	r3, #2
 8006410:	6033      	strmi	r3, [r6, #0]
 8006412:	6825      	ldr	r5, [r4, #0]
 8006414:	f015 0506 	ands.w	r5, r5, #6
 8006418:	d106      	bne.n	8006428 <_printf_common+0x48>
 800641a:	f104 0a19 	add.w	sl, r4, #25
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	6832      	ldr	r2, [r6, #0]
 8006422:	1a9b      	subs	r3, r3, r2
 8006424:	42ab      	cmp	r3, r5
 8006426:	dc28      	bgt.n	800647a <_printf_common+0x9a>
 8006428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800642c:	1e13      	subs	r3, r2, #0
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	bf18      	it	ne
 8006432:	2301      	movne	r3, #1
 8006434:	0692      	lsls	r2, r2, #26
 8006436:	d42d      	bmi.n	8006494 <_printf_common+0xb4>
 8006438:	4649      	mov	r1, r9
 800643a:	4638      	mov	r0, r7
 800643c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006440:	47c0      	blx	r8
 8006442:	3001      	adds	r0, #1
 8006444:	d020      	beq.n	8006488 <_printf_common+0xa8>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	68e5      	ldr	r5, [r4, #12]
 800644a:	f003 0306 	and.w	r3, r3, #6
 800644e:	2b04      	cmp	r3, #4
 8006450:	bf18      	it	ne
 8006452:	2500      	movne	r5, #0
 8006454:	6832      	ldr	r2, [r6, #0]
 8006456:	f04f 0600 	mov.w	r6, #0
 800645a:	68a3      	ldr	r3, [r4, #8]
 800645c:	bf08      	it	eq
 800645e:	1aad      	subeq	r5, r5, r2
 8006460:	6922      	ldr	r2, [r4, #16]
 8006462:	bf08      	it	eq
 8006464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006468:	4293      	cmp	r3, r2
 800646a:	bfc4      	itt	gt
 800646c:	1a9b      	subgt	r3, r3, r2
 800646e:	18ed      	addgt	r5, r5, r3
 8006470:	341a      	adds	r4, #26
 8006472:	42b5      	cmp	r5, r6
 8006474:	d11a      	bne.n	80064ac <_printf_common+0xcc>
 8006476:	2000      	movs	r0, #0
 8006478:	e008      	b.n	800648c <_printf_common+0xac>
 800647a:	2301      	movs	r3, #1
 800647c:	4652      	mov	r2, sl
 800647e:	4649      	mov	r1, r9
 8006480:	4638      	mov	r0, r7
 8006482:	47c0      	blx	r8
 8006484:	3001      	adds	r0, #1
 8006486:	d103      	bne.n	8006490 <_printf_common+0xb0>
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006490:	3501      	adds	r5, #1
 8006492:	e7c4      	b.n	800641e <_printf_common+0x3e>
 8006494:	2030      	movs	r0, #48	; 0x30
 8006496:	18e1      	adds	r1, r4, r3
 8006498:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a2:	4422      	add	r2, r4
 80064a4:	3302      	adds	r3, #2
 80064a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064aa:	e7c5      	b.n	8006438 <_printf_common+0x58>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4622      	mov	r2, r4
 80064b0:	4649      	mov	r1, r9
 80064b2:	4638      	mov	r0, r7
 80064b4:	47c0      	blx	r8
 80064b6:	3001      	adds	r0, #1
 80064b8:	d0e6      	beq.n	8006488 <_printf_common+0xa8>
 80064ba:	3601      	adds	r6, #1
 80064bc:	e7d9      	b.n	8006472 <_printf_common+0x92>
	...

080064c0 <_printf_i>:
 80064c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c4:	7e0f      	ldrb	r7, [r1, #24]
 80064c6:	4691      	mov	r9, r2
 80064c8:	2f78      	cmp	r7, #120	; 0x78
 80064ca:	4680      	mov	r8, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	469a      	mov	sl, r3
 80064d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064d6:	d807      	bhi.n	80064e8 <_printf_i+0x28>
 80064d8:	2f62      	cmp	r7, #98	; 0x62
 80064da:	d80a      	bhi.n	80064f2 <_printf_i+0x32>
 80064dc:	2f00      	cmp	r7, #0
 80064de:	f000 80d9 	beq.w	8006694 <_printf_i+0x1d4>
 80064e2:	2f58      	cmp	r7, #88	; 0x58
 80064e4:	f000 80a4 	beq.w	8006630 <_printf_i+0x170>
 80064e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f0:	e03a      	b.n	8006568 <_printf_i+0xa8>
 80064f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064f6:	2b15      	cmp	r3, #21
 80064f8:	d8f6      	bhi.n	80064e8 <_printf_i+0x28>
 80064fa:	a101      	add	r1, pc, #4	; (adr r1, 8006500 <_printf_i+0x40>)
 80064fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006500:	08006559 	.word	0x08006559
 8006504:	0800656d 	.word	0x0800656d
 8006508:	080064e9 	.word	0x080064e9
 800650c:	080064e9 	.word	0x080064e9
 8006510:	080064e9 	.word	0x080064e9
 8006514:	080064e9 	.word	0x080064e9
 8006518:	0800656d 	.word	0x0800656d
 800651c:	080064e9 	.word	0x080064e9
 8006520:	080064e9 	.word	0x080064e9
 8006524:	080064e9 	.word	0x080064e9
 8006528:	080064e9 	.word	0x080064e9
 800652c:	0800667b 	.word	0x0800667b
 8006530:	0800659d 	.word	0x0800659d
 8006534:	0800665d 	.word	0x0800665d
 8006538:	080064e9 	.word	0x080064e9
 800653c:	080064e9 	.word	0x080064e9
 8006540:	0800669d 	.word	0x0800669d
 8006544:	080064e9 	.word	0x080064e9
 8006548:	0800659d 	.word	0x0800659d
 800654c:	080064e9 	.word	0x080064e9
 8006550:	080064e9 	.word	0x080064e9
 8006554:	08006665 	.word	0x08006665
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	1d1a      	adds	r2, r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	602a      	str	r2, [r5, #0]
 8006560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006568:	2301      	movs	r3, #1
 800656a:	e0a4      	b.n	80066b6 <_printf_i+0x1f6>
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	6829      	ldr	r1, [r5, #0]
 8006570:	0606      	lsls	r6, r0, #24
 8006572:	f101 0304 	add.w	r3, r1, #4
 8006576:	d50a      	bpl.n	800658e <_printf_i+0xce>
 8006578:	680e      	ldr	r6, [r1, #0]
 800657a:	602b      	str	r3, [r5, #0]
 800657c:	2e00      	cmp	r6, #0
 800657e:	da03      	bge.n	8006588 <_printf_i+0xc8>
 8006580:	232d      	movs	r3, #45	; 0x2d
 8006582:	4276      	negs	r6, r6
 8006584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006588:	230a      	movs	r3, #10
 800658a:	485e      	ldr	r0, [pc, #376]	; (8006704 <_printf_i+0x244>)
 800658c:	e019      	b.n	80065c2 <_printf_i+0x102>
 800658e:	680e      	ldr	r6, [r1, #0]
 8006590:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006594:	602b      	str	r3, [r5, #0]
 8006596:	bf18      	it	ne
 8006598:	b236      	sxthne	r6, r6
 800659a:	e7ef      	b.n	800657c <_printf_i+0xbc>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	6820      	ldr	r0, [r4, #0]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	6029      	str	r1, [r5, #0]
 80065a4:	0601      	lsls	r1, r0, #24
 80065a6:	d501      	bpl.n	80065ac <_printf_i+0xec>
 80065a8:	681e      	ldr	r6, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <_printf_i+0xf2>
 80065ac:	0646      	lsls	r6, r0, #25
 80065ae:	d5fb      	bpl.n	80065a8 <_printf_i+0xe8>
 80065b0:	881e      	ldrh	r6, [r3, #0]
 80065b2:	2f6f      	cmp	r7, #111	; 0x6f
 80065b4:	bf0c      	ite	eq
 80065b6:	2308      	moveq	r3, #8
 80065b8:	230a      	movne	r3, #10
 80065ba:	4852      	ldr	r0, [pc, #328]	; (8006704 <_printf_i+0x244>)
 80065bc:	2100      	movs	r1, #0
 80065be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c2:	6865      	ldr	r5, [r4, #4]
 80065c4:	2d00      	cmp	r5, #0
 80065c6:	bfa8      	it	ge
 80065c8:	6821      	ldrge	r1, [r4, #0]
 80065ca:	60a5      	str	r5, [r4, #8]
 80065cc:	bfa4      	itt	ge
 80065ce:	f021 0104 	bicge.w	r1, r1, #4
 80065d2:	6021      	strge	r1, [r4, #0]
 80065d4:	b90e      	cbnz	r6, 80065da <_printf_i+0x11a>
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	d04d      	beq.n	8006676 <_printf_i+0x1b6>
 80065da:	4615      	mov	r5, r2
 80065dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80065e0:	fb03 6711 	mls	r7, r3, r1, r6
 80065e4:	5dc7      	ldrb	r7, [r0, r7]
 80065e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065ea:	4637      	mov	r7, r6
 80065ec:	42bb      	cmp	r3, r7
 80065ee:	460e      	mov	r6, r1
 80065f0:	d9f4      	bls.n	80065dc <_printf_i+0x11c>
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d10b      	bne.n	800660e <_printf_i+0x14e>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	07de      	lsls	r6, r3, #31
 80065fa:	d508      	bpl.n	800660e <_printf_i+0x14e>
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	6861      	ldr	r1, [r4, #4]
 8006600:	4299      	cmp	r1, r3
 8006602:	bfde      	ittt	le
 8006604:	2330      	movle	r3, #48	; 0x30
 8006606:	f805 3c01 	strble.w	r3, [r5, #-1]
 800660a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800660e:	1b52      	subs	r2, r2, r5
 8006610:	6122      	str	r2, [r4, #16]
 8006612:	464b      	mov	r3, r9
 8006614:	4621      	mov	r1, r4
 8006616:	4640      	mov	r0, r8
 8006618:	f8cd a000 	str.w	sl, [sp]
 800661c:	aa03      	add	r2, sp, #12
 800661e:	f7ff fedf 	bl	80063e0 <_printf_common>
 8006622:	3001      	adds	r0, #1
 8006624:	d14c      	bne.n	80066c0 <_printf_i+0x200>
 8006626:	f04f 30ff 	mov.w	r0, #4294967295
 800662a:	b004      	add	sp, #16
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006630:	4834      	ldr	r0, [pc, #208]	; (8006704 <_printf_i+0x244>)
 8006632:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006636:	6829      	ldr	r1, [r5, #0]
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	f851 6b04 	ldr.w	r6, [r1], #4
 800663e:	6029      	str	r1, [r5, #0]
 8006640:	061d      	lsls	r5, r3, #24
 8006642:	d514      	bpl.n	800666e <_printf_i+0x1ae>
 8006644:	07df      	lsls	r7, r3, #31
 8006646:	bf44      	itt	mi
 8006648:	f043 0320 	orrmi.w	r3, r3, #32
 800664c:	6023      	strmi	r3, [r4, #0]
 800664e:	b91e      	cbnz	r6, 8006658 <_printf_i+0x198>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	f023 0320 	bic.w	r3, r3, #32
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	2310      	movs	r3, #16
 800665a:	e7af      	b.n	80065bc <_printf_i+0xfc>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	f043 0320 	orr.w	r3, r3, #32
 8006662:	6023      	str	r3, [r4, #0]
 8006664:	2378      	movs	r3, #120	; 0x78
 8006666:	4828      	ldr	r0, [pc, #160]	; (8006708 <_printf_i+0x248>)
 8006668:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800666c:	e7e3      	b.n	8006636 <_printf_i+0x176>
 800666e:	0659      	lsls	r1, r3, #25
 8006670:	bf48      	it	mi
 8006672:	b2b6      	uxthmi	r6, r6
 8006674:	e7e6      	b.n	8006644 <_printf_i+0x184>
 8006676:	4615      	mov	r5, r2
 8006678:	e7bb      	b.n	80065f2 <_printf_i+0x132>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	6826      	ldr	r6, [r4, #0]
 800667e:	1d18      	adds	r0, r3, #4
 8006680:	6961      	ldr	r1, [r4, #20]
 8006682:	6028      	str	r0, [r5, #0]
 8006684:	0635      	lsls	r5, r6, #24
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	d501      	bpl.n	800668e <_printf_i+0x1ce>
 800668a:	6019      	str	r1, [r3, #0]
 800668c:	e002      	b.n	8006694 <_printf_i+0x1d4>
 800668e:	0670      	lsls	r0, r6, #25
 8006690:	d5fb      	bpl.n	800668a <_printf_i+0x1ca>
 8006692:	8019      	strh	r1, [r3, #0]
 8006694:	2300      	movs	r3, #0
 8006696:	4615      	mov	r5, r2
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	e7ba      	b.n	8006612 <_printf_i+0x152>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	2100      	movs	r1, #0
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	602a      	str	r2, [r5, #0]
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 f82f 	bl	800670c <memchr>
 80066ae:	b108      	cbz	r0, 80066b4 <_printf_i+0x1f4>
 80066b0:	1b40      	subs	r0, r0, r5
 80066b2:	6060      	str	r0, [r4, #4]
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	2300      	movs	r3, #0
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066be:	e7a8      	b.n	8006612 <_printf_i+0x152>
 80066c0:	462a      	mov	r2, r5
 80066c2:	4649      	mov	r1, r9
 80066c4:	4640      	mov	r0, r8
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	47d0      	blx	sl
 80066ca:	3001      	adds	r0, #1
 80066cc:	d0ab      	beq.n	8006626 <_printf_i+0x166>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	079b      	lsls	r3, r3, #30
 80066d2:	d413      	bmi.n	80066fc <_printf_i+0x23c>
 80066d4:	68e0      	ldr	r0, [r4, #12]
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	4298      	cmp	r0, r3
 80066da:	bfb8      	it	lt
 80066dc:	4618      	movlt	r0, r3
 80066de:	e7a4      	b.n	800662a <_printf_i+0x16a>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4632      	mov	r2, r6
 80066e4:	4649      	mov	r1, r9
 80066e6:	4640      	mov	r0, r8
 80066e8:	47d0      	blx	sl
 80066ea:	3001      	adds	r0, #1
 80066ec:	d09b      	beq.n	8006626 <_printf_i+0x166>
 80066ee:	3501      	adds	r5, #1
 80066f0:	68e3      	ldr	r3, [r4, #12]
 80066f2:	9903      	ldr	r1, [sp, #12]
 80066f4:	1a5b      	subs	r3, r3, r1
 80066f6:	42ab      	cmp	r3, r5
 80066f8:	dcf2      	bgt.n	80066e0 <_printf_i+0x220>
 80066fa:	e7eb      	b.n	80066d4 <_printf_i+0x214>
 80066fc:	2500      	movs	r5, #0
 80066fe:	f104 0619 	add.w	r6, r4, #25
 8006702:	e7f5      	b.n	80066f0 <_printf_i+0x230>
 8006704:	08006d81 	.word	0x08006d81
 8006708:	08006d92 	.word	0x08006d92

0800670c <memchr>:
 800670c:	4603      	mov	r3, r0
 800670e:	b510      	push	{r4, lr}
 8006710:	b2c9      	uxtb	r1, r1
 8006712:	4402      	add	r2, r0
 8006714:	4293      	cmp	r3, r2
 8006716:	4618      	mov	r0, r3
 8006718:	d101      	bne.n	800671e <memchr+0x12>
 800671a:	2000      	movs	r0, #0
 800671c:	e003      	b.n	8006726 <memchr+0x1a>
 800671e:	7804      	ldrb	r4, [r0, #0]
 8006720:	3301      	adds	r3, #1
 8006722:	428c      	cmp	r4, r1
 8006724:	d1f6      	bne.n	8006714 <memchr+0x8>
 8006726:	bd10      	pop	{r4, pc}

08006728 <memmove>:
 8006728:	4288      	cmp	r0, r1
 800672a:	b510      	push	{r4, lr}
 800672c:	eb01 0402 	add.w	r4, r1, r2
 8006730:	d902      	bls.n	8006738 <memmove+0x10>
 8006732:	4284      	cmp	r4, r0
 8006734:	4623      	mov	r3, r4
 8006736:	d807      	bhi.n	8006748 <memmove+0x20>
 8006738:	1e43      	subs	r3, r0, #1
 800673a:	42a1      	cmp	r1, r4
 800673c:	d008      	beq.n	8006750 <memmove+0x28>
 800673e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006746:	e7f8      	b.n	800673a <memmove+0x12>
 8006748:	4601      	mov	r1, r0
 800674a:	4402      	add	r2, r0
 800674c:	428a      	cmp	r2, r1
 800674e:	d100      	bne.n	8006752 <memmove+0x2a>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800675a:	e7f7      	b.n	800674c <memmove+0x24>

0800675c <_free_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4605      	mov	r5, r0
 8006760:	2900      	cmp	r1, #0
 8006762:	d040      	beq.n	80067e6 <_free_r+0x8a>
 8006764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006768:	1f0c      	subs	r4, r1, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	bfb8      	it	lt
 800676e:	18e4      	addlt	r4, r4, r3
 8006770:	f000 f910 	bl	8006994 <__malloc_lock>
 8006774:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <_free_r+0x8c>)
 8006776:	6813      	ldr	r3, [r2, #0]
 8006778:	b933      	cbnz	r3, 8006788 <_free_r+0x2c>
 800677a:	6063      	str	r3, [r4, #4]
 800677c:	6014      	str	r4, [r2, #0]
 800677e:	4628      	mov	r0, r5
 8006780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006784:	f000 b90c 	b.w	80069a0 <__malloc_unlock>
 8006788:	42a3      	cmp	r3, r4
 800678a:	d908      	bls.n	800679e <_free_r+0x42>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	1821      	adds	r1, r4, r0
 8006790:	428b      	cmp	r3, r1
 8006792:	bf01      	itttt	eq
 8006794:	6819      	ldreq	r1, [r3, #0]
 8006796:	685b      	ldreq	r3, [r3, #4]
 8006798:	1809      	addeq	r1, r1, r0
 800679a:	6021      	streq	r1, [r4, #0]
 800679c:	e7ed      	b.n	800677a <_free_r+0x1e>
 800679e:	461a      	mov	r2, r3
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	b10b      	cbz	r3, 80067a8 <_free_r+0x4c>
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d9fa      	bls.n	800679e <_free_r+0x42>
 80067a8:	6811      	ldr	r1, [r2, #0]
 80067aa:	1850      	adds	r0, r2, r1
 80067ac:	42a0      	cmp	r0, r4
 80067ae:	d10b      	bne.n	80067c8 <_free_r+0x6c>
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	4401      	add	r1, r0
 80067b4:	1850      	adds	r0, r2, r1
 80067b6:	4283      	cmp	r3, r0
 80067b8:	6011      	str	r1, [r2, #0]
 80067ba:	d1e0      	bne.n	800677e <_free_r+0x22>
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4401      	add	r1, r0
 80067c2:	6011      	str	r1, [r2, #0]
 80067c4:	6053      	str	r3, [r2, #4]
 80067c6:	e7da      	b.n	800677e <_free_r+0x22>
 80067c8:	d902      	bls.n	80067d0 <_free_r+0x74>
 80067ca:	230c      	movs	r3, #12
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	e7d6      	b.n	800677e <_free_r+0x22>
 80067d0:	6820      	ldr	r0, [r4, #0]
 80067d2:	1821      	adds	r1, r4, r0
 80067d4:	428b      	cmp	r3, r1
 80067d6:	bf01      	itttt	eq
 80067d8:	6819      	ldreq	r1, [r3, #0]
 80067da:	685b      	ldreq	r3, [r3, #4]
 80067dc:	1809      	addeq	r1, r1, r0
 80067de:	6021      	streq	r1, [r4, #0]
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	6054      	str	r4, [r2, #4]
 80067e4:	e7cb      	b.n	800677e <_free_r+0x22>
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	200002a0 	.word	0x200002a0

080067ec <sbrk_aligned>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	4e0e      	ldr	r6, [pc, #56]	; (8006828 <sbrk_aligned+0x3c>)
 80067f0:	460c      	mov	r4, r1
 80067f2:	6831      	ldr	r1, [r6, #0]
 80067f4:	4605      	mov	r5, r0
 80067f6:	b911      	cbnz	r1, 80067fe <sbrk_aligned+0x12>
 80067f8:	f000 f8bc 	bl	8006974 <_sbrk_r>
 80067fc:	6030      	str	r0, [r6, #0]
 80067fe:	4621      	mov	r1, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f000 f8b7 	bl	8006974 <_sbrk_r>
 8006806:	1c43      	adds	r3, r0, #1
 8006808:	d00a      	beq.n	8006820 <sbrk_aligned+0x34>
 800680a:	1cc4      	adds	r4, r0, #3
 800680c:	f024 0403 	bic.w	r4, r4, #3
 8006810:	42a0      	cmp	r0, r4
 8006812:	d007      	beq.n	8006824 <sbrk_aligned+0x38>
 8006814:	1a21      	subs	r1, r4, r0
 8006816:	4628      	mov	r0, r5
 8006818:	f000 f8ac 	bl	8006974 <_sbrk_r>
 800681c:	3001      	adds	r0, #1
 800681e:	d101      	bne.n	8006824 <sbrk_aligned+0x38>
 8006820:	f04f 34ff 	mov.w	r4, #4294967295
 8006824:	4620      	mov	r0, r4
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	200002a4 	.word	0x200002a4

0800682c <_malloc_r>:
 800682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006830:	1ccd      	adds	r5, r1, #3
 8006832:	f025 0503 	bic.w	r5, r5, #3
 8006836:	3508      	adds	r5, #8
 8006838:	2d0c      	cmp	r5, #12
 800683a:	bf38      	it	cc
 800683c:	250c      	movcc	r5, #12
 800683e:	2d00      	cmp	r5, #0
 8006840:	4607      	mov	r7, r0
 8006842:	db01      	blt.n	8006848 <_malloc_r+0x1c>
 8006844:	42a9      	cmp	r1, r5
 8006846:	d905      	bls.n	8006854 <_malloc_r+0x28>
 8006848:	230c      	movs	r3, #12
 800684a:	2600      	movs	r6, #0
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4630      	mov	r0, r6
 8006850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006854:	4e2e      	ldr	r6, [pc, #184]	; (8006910 <_malloc_r+0xe4>)
 8006856:	f000 f89d 	bl	8006994 <__malloc_lock>
 800685a:	6833      	ldr	r3, [r6, #0]
 800685c:	461c      	mov	r4, r3
 800685e:	bb34      	cbnz	r4, 80068ae <_malloc_r+0x82>
 8006860:	4629      	mov	r1, r5
 8006862:	4638      	mov	r0, r7
 8006864:	f7ff ffc2 	bl	80067ec <sbrk_aligned>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	4604      	mov	r4, r0
 800686c:	d14d      	bne.n	800690a <_malloc_r+0xde>
 800686e:	6834      	ldr	r4, [r6, #0]
 8006870:	4626      	mov	r6, r4
 8006872:	2e00      	cmp	r6, #0
 8006874:	d140      	bne.n	80068f8 <_malloc_r+0xcc>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	4631      	mov	r1, r6
 800687a:	4638      	mov	r0, r7
 800687c:	eb04 0803 	add.w	r8, r4, r3
 8006880:	f000 f878 	bl	8006974 <_sbrk_r>
 8006884:	4580      	cmp	r8, r0
 8006886:	d13a      	bne.n	80068fe <_malloc_r+0xd2>
 8006888:	6821      	ldr	r1, [r4, #0]
 800688a:	3503      	adds	r5, #3
 800688c:	1a6d      	subs	r5, r5, r1
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	4638      	mov	r0, r7
 800689c:	4629      	mov	r1, r5
 800689e:	f7ff ffa5 	bl	80067ec <sbrk_aligned>
 80068a2:	3001      	adds	r0, #1
 80068a4:	d02b      	beq.n	80068fe <_malloc_r+0xd2>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	442b      	add	r3, r5
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	e00e      	b.n	80068cc <_malloc_r+0xa0>
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	1b52      	subs	r2, r2, r5
 80068b2:	d41e      	bmi.n	80068f2 <_malloc_r+0xc6>
 80068b4:	2a0b      	cmp	r2, #11
 80068b6:	d916      	bls.n	80068e6 <_malloc_r+0xba>
 80068b8:	1961      	adds	r1, r4, r5
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	6025      	str	r5, [r4, #0]
 80068be:	bf18      	it	ne
 80068c0:	6059      	strne	r1, [r3, #4]
 80068c2:	6863      	ldr	r3, [r4, #4]
 80068c4:	bf08      	it	eq
 80068c6:	6031      	streq	r1, [r6, #0]
 80068c8:	5162      	str	r2, [r4, r5]
 80068ca:	604b      	str	r3, [r1, #4]
 80068cc:	4638      	mov	r0, r7
 80068ce:	f104 060b 	add.w	r6, r4, #11
 80068d2:	f000 f865 	bl	80069a0 <__malloc_unlock>
 80068d6:	f026 0607 	bic.w	r6, r6, #7
 80068da:	1d23      	adds	r3, r4, #4
 80068dc:	1af2      	subs	r2, r6, r3
 80068de:	d0b6      	beq.n	800684e <_malloc_r+0x22>
 80068e0:	1b9b      	subs	r3, r3, r6
 80068e2:	50a3      	str	r3, [r4, r2]
 80068e4:	e7b3      	b.n	800684e <_malloc_r+0x22>
 80068e6:	6862      	ldr	r2, [r4, #4]
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	bf0c      	ite	eq
 80068ec:	6032      	streq	r2, [r6, #0]
 80068ee:	605a      	strne	r2, [r3, #4]
 80068f0:	e7ec      	b.n	80068cc <_malloc_r+0xa0>
 80068f2:	4623      	mov	r3, r4
 80068f4:	6864      	ldr	r4, [r4, #4]
 80068f6:	e7b2      	b.n	800685e <_malloc_r+0x32>
 80068f8:	4634      	mov	r4, r6
 80068fa:	6876      	ldr	r6, [r6, #4]
 80068fc:	e7b9      	b.n	8006872 <_malloc_r+0x46>
 80068fe:	230c      	movs	r3, #12
 8006900:	4638      	mov	r0, r7
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	f000 f84c 	bl	80069a0 <__malloc_unlock>
 8006908:	e7a1      	b.n	800684e <_malloc_r+0x22>
 800690a:	6025      	str	r5, [r4, #0]
 800690c:	e7de      	b.n	80068cc <_malloc_r+0xa0>
 800690e:	bf00      	nop
 8006910:	200002a0 	.word	0x200002a0

08006914 <_realloc_r>:
 8006914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006918:	4680      	mov	r8, r0
 800691a:	4614      	mov	r4, r2
 800691c:	460e      	mov	r6, r1
 800691e:	b921      	cbnz	r1, 800692a <_realloc_r+0x16>
 8006920:	4611      	mov	r1, r2
 8006922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006926:	f7ff bf81 	b.w	800682c <_malloc_r>
 800692a:	b92a      	cbnz	r2, 8006938 <_realloc_r+0x24>
 800692c:	f7ff ff16 	bl	800675c <_free_r>
 8006930:	4625      	mov	r5, r4
 8006932:	4628      	mov	r0, r5
 8006934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006938:	f000 f838 	bl	80069ac <_malloc_usable_size_r>
 800693c:	4284      	cmp	r4, r0
 800693e:	4607      	mov	r7, r0
 8006940:	d802      	bhi.n	8006948 <_realloc_r+0x34>
 8006942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006946:	d812      	bhi.n	800696e <_realloc_r+0x5a>
 8006948:	4621      	mov	r1, r4
 800694a:	4640      	mov	r0, r8
 800694c:	f7ff ff6e 	bl	800682c <_malloc_r>
 8006950:	4605      	mov	r5, r0
 8006952:	2800      	cmp	r0, #0
 8006954:	d0ed      	beq.n	8006932 <_realloc_r+0x1e>
 8006956:	42bc      	cmp	r4, r7
 8006958:	4622      	mov	r2, r4
 800695a:	4631      	mov	r1, r6
 800695c:	bf28      	it	cs
 800695e:	463a      	movcs	r2, r7
 8006960:	f7ff fbac 	bl	80060bc <memcpy>
 8006964:	4631      	mov	r1, r6
 8006966:	4640      	mov	r0, r8
 8006968:	f7ff fef8 	bl	800675c <_free_r>
 800696c:	e7e1      	b.n	8006932 <_realloc_r+0x1e>
 800696e:	4635      	mov	r5, r6
 8006970:	e7df      	b.n	8006932 <_realloc_r+0x1e>
	...

08006974 <_sbrk_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	2300      	movs	r3, #0
 8006978:	4d05      	ldr	r5, [pc, #20]	; (8006990 <_sbrk_r+0x1c>)
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	f7fb fcd2 	bl	8002328 <_sbrk>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_sbrk_r+0x1a>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_sbrk_r+0x1a>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	200002a8 	.word	0x200002a8

08006994 <__malloc_lock>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__malloc_lock+0x8>)
 8006996:	f000 b811 	b.w	80069bc <__retarget_lock_acquire_recursive>
 800699a:	bf00      	nop
 800699c:	200002ac 	.word	0x200002ac

080069a0 <__malloc_unlock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__malloc_unlock+0x8>)
 80069a2:	f000 b80c 	b.w	80069be <__retarget_lock_release_recursive>
 80069a6:	bf00      	nop
 80069a8:	200002ac 	.word	0x200002ac

080069ac <_malloc_usable_size_r>:
 80069ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b0:	1f18      	subs	r0, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfbc      	itt	lt
 80069b6:	580b      	ldrlt	r3, [r1, r0]
 80069b8:	18c0      	addlt	r0, r0, r3
 80069ba:	4770      	bx	lr

080069bc <__retarget_lock_acquire_recursive>:
 80069bc:	4770      	bx	lr

080069be <__retarget_lock_release_recursive>:
 80069be:	4770      	bx	lr

080069c0 <_init>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	bf00      	nop
 80069c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c6:	bc08      	pop	{r3}
 80069c8:	469e      	mov	lr, r3
 80069ca:	4770      	bx	lr

080069cc <_fini>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr
