
BLDC_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007614  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  08007728  08007728  00017728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e4c  08007e4c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007e4c  08007e4c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e4c  08007e4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e4c  08007e4c  00017e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001dc  08008030  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08008030  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012738  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002716  00000000  00000000  0003293d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00035058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00036088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdc7  00000000  00000000  00036ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d8d  00000000  00000000  00052dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091bc7  00000000  00000000  00066b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8713  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005588  00000000  00000000  000f8764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800770c 	.word	0x0800770c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800770c 	.word	0x0800770c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <_Z4_sinf>:
// function approximating the sine calculation by using fixed size array
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(a < _PI_2){
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff f9f5 	bl	8000428 <__aeabi_f2d>
 800103e:	a3c8      	add	r3, pc, #800	; (adr r3, 8001360 <_Z4_sinf+0x330>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff fcba 	bl	80009bc <__aeabi_dcmplt>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d058      	beq.n	8001100 <_Z4_sinf+0xd0>
    //return sine_array[(int)(126.6873* a)];           // float array optimized
    return 0.0001*sine_array[_round(126.6873* a)];      // int array optimized
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff f9ea 	bl	8000428 <__aeabi_f2d>
 8001054:	a3c4      	add	r3, pc, #784	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff fa3d 	bl	80004d8 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	f7ff fcb9 	bl	80009e4 <__aeabi_dcmpge>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d018      	beq.n	80010aa <_Z4_sinf+0x7a>
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f9d5 	bl	8000428 <__aeabi_f2d>
 800107e:	a3ba      	add	r3, pc, #744	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa28 	bl	80004d8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4bbe      	ldr	r3, [pc, #760]	; (8001390 <_Z4_sinf+0x360>)
 8001096:	f7ff f869 	bl	800016c <__adddf3>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fcc9 	bl	8000a38 <__aeabi_d2iz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	e017      	b.n	80010da <_Z4_sinf+0xaa>
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff f9bc 	bl	8000428 <__aeabi_f2d>
 80010b0:	a3ad      	add	r3, pc, #692	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa0f 	bl	80004d8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4bb2      	ldr	r3, [pc, #712]	; (8001390 <_Z4_sinf+0x360>)
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fcb0 	bl	8000a38 <__aeabi_d2iz>
 80010d8:	4603      	mov	r3, r0
 80010da:	4aae      	ldr	r2, [pc, #696]	; (8001394 <_Z4_sinf+0x364>)
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f98f 	bl	8000404 <__aeabi_i2d>
 80010e6:	a3a2      	add	r3, pc, #648	; (adr r3, 8001370 <_Z4_sinf+0x340>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff f9f4 	bl	80004d8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fcc6 	bl	8000a88 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	e12b      	b.n	8001358 <_Z4_sinf+0x328>
  }else if(a < _PI){
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff f991 	bl	8000428 <__aeabi_f2d>
 8001106:	a39c      	add	r3, pc, #624	; (adr r3, 8001378 <_Z4_sinf+0x348>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fc56 	bl	80009bc <__aeabi_dcmplt>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d05c      	beq.n	80011d0 <_Z4_sinf+0x1a0>
    //return sine_array[398 - (int)(126.6873*a)];          // float array optimized
    return 0.0001*sine_array[398 - _round(126.6873*a)];     // int array optimized
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff f986 	bl	8000428 <__aeabi_f2d>
 800111c:	a392      	add	r3, pc, #584	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff f9d9 	bl	80004d8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	f7ff fc55 	bl	80009e4 <__aeabi_dcmpge>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d01a      	beq.n	8001176 <_Z4_sinf+0x146>
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff f971 	bl	8000428 <__aeabi_f2d>
 8001146:	a388      	add	r3, pc, #544	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff f9c4 	bl	80004d8 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b8c      	ldr	r3, [pc, #560]	; (8001390 <_Z4_sinf+0x360>)
 800115e:	f7ff f805 	bl	800016c <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fc65 	bl	8000a38 <__aeabi_d2iz>
 800116e:	4603      	mov	r3, r0
 8001170:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001174:	e019      	b.n	80011aa <_Z4_sinf+0x17a>
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff f956 	bl	8000428 <__aeabi_f2d>
 800117c:	a37a      	add	r3, pc, #488	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff f9a9 	bl	80004d8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b7f      	ldr	r3, [pc, #508]	; (8001390 <_Z4_sinf+0x360>)
 8001194:	f7fe ffe8 	bl	8000168 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc4a 	bl	8000a38 <__aeabi_d2iz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80011aa:	4a7a      	ldr	r2, [pc, #488]	; (8001394 <_Z4_sinf+0x364>)
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f927 	bl	8000404 <__aeabi_i2d>
 80011b6:	a36e      	add	r3, pc, #440	; (adr r3, 8001370 <_Z4_sinf+0x340>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff f98c 	bl	80004d8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fc5e 	bl	8000a88 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	e0c3      	b.n	8001358 <_Z4_sinf+0x328>
  }else if(a < _3PI_2){
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff f929 	bl	8000428 <__aeabi_f2d>
 80011d6:	a36a      	add	r3, pc, #424	; (adr r3, 8001380 <_Z4_sinf+0x350>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fbee 	bl	80009bc <__aeabi_dcmplt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d05c      	beq.n	80012a0 <_Z4_sinf+0x270>
    //return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
    return -0.0001*sine_array[-398 + _round(126.6873*a)];      // int array optimized
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f91e 	bl	8000428 <__aeabi_f2d>
 80011ec:	a35e      	add	r3, pc, #376	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff f971 	bl	80004d8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	f7ff fbed 	bl	80009e4 <__aeabi_dcmpge>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01a      	beq.n	8001246 <_Z4_sinf+0x216>
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff f909 	bl	8000428 <__aeabi_f2d>
 8001216:	a354      	add	r3, pc, #336	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f95c 	bl	80004d8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b58      	ldr	r3, [pc, #352]	; (8001390 <_Z4_sinf+0x360>)
 800122e:	f7fe ff9d 	bl	800016c <__adddf3>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fbfd 	bl	8000a38 <__aeabi_d2iz>
 800123e:	4603      	mov	r3, r0
 8001240:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 8001244:	e019      	b.n	800127a <_Z4_sinf+0x24a>
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff f8ee 	bl	8000428 <__aeabi_f2d>
 800124c:	a346      	add	r3, pc, #280	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f941 	bl	80004d8 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <_Z4_sinf+0x360>)
 8001264:	f7fe ff80 	bl	8000168 <__aeabi_dsub>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fbe2 	bl	8000a38 <__aeabi_d2iz>
 8001274:	4603      	mov	r3, r0
 8001276:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 800127a:	4a46      	ldr	r2, [pc, #280]	; (8001394 <_Z4_sinf+0x364>)
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8bf 	bl	8000404 <__aeabi_i2d>
 8001286:	a340      	add	r3, pc, #256	; (adr r3, 8001388 <_Z4_sinf+0x358>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff f924 	bl	80004d8 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fbf6 	bl	8000a88 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	e05b      	b.n	8001358 <_Z4_sinf+0x328>
  } else {
    //return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
    return -0.0001*sine_array[796 - _round(126.6873*a)];      // int array optimized
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff f8c1 	bl	8000428 <__aeabi_f2d>
 80012a6:	a330      	add	r3, pc, #192	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f914 	bl	80004d8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	f7ff fb90 	bl	80009e4 <__aeabi_dcmpge>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d01a      	beq.n	8001300 <_Z4_sinf+0x2d0>
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff f8ac 	bl	8000428 <__aeabi_f2d>
 80012d0:	a325      	add	r3, pc, #148	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff f8ff 	bl	80004d8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <_Z4_sinf+0x360>)
 80012e8:	f7fe ff40 	bl	800016c <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fba0 	bl	8000a38 <__aeabi_d2iz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80012fe:	e019      	b.n	8001334 <_Z4_sinf+0x304>
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff f891 	bl	8000428 <__aeabi_f2d>
 8001306:	a318      	add	r3, pc, #96	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f8e4 	bl	80004d8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <_Z4_sinf+0x360>)
 800131e:	f7fe ff23 	bl	8000168 <__aeabi_dsub>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fb85 	bl	8000a38 <__aeabi_d2iz>
 800132e:	4603      	mov	r3, r0
 8001330:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <_Z4_sinf+0x364>)
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f862 	bl	8000404 <__aeabi_i2d>
 8001340:	a311      	add	r3, pc, #68	; (adr r3, 8001388 <_Z4_sinf+0x358>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff f8c7 	bl	80004d8 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fb99 	bl	8000a88 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	5443d6f4 	.word	0x5443d6f4
 8001364:	3ff921fb 	.word	0x3ff921fb
 8001368:	b923a29c 	.word	0xb923a29c
 800136c:	405fabfc 	.word	0x405fabfc
 8001370:	eb1c432d 	.word	0xeb1c432d
 8001374:	3f1a36e2 	.word	0x3f1a36e2
 8001378:	54442eea 	.word	0x54442eea
 800137c:	400921fb 	.word	0x400921fb
 8001380:	7f330d32 	.word	0x7f330d32
 8001384:	4012d97c 	.word	0x4012d97c
 8001388:	eb1c432d 	.word	0xeb1c432d
 800138c:	bf1a36e2 	.word	0xbf1a36e2
 8001390:	3fe00000 	.word	0x3fe00000
 8001394:	08007738 	.word	0x08007738

08001398 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  float a_sin = a + _PI_2;
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff f841 	bl	8000428 <__aeabi_f2d>
 80013a6:	a31a      	add	r3, pc, #104	; (adr r3, 8001410 <_Z4_cosf+0x78>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7fe fede 	bl	800016c <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb66 	bl	8000a88 <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff f831 	bl	8000428 <__aeabi_f2d>
 80013c6:	a314      	add	r3, pc, #80	; (adr r3, 8001418 <_Z4_cosf+0x80>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff fb14 	bl	80009f8 <__aeabi_dcmpgt>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00f      	beq.n	80013f6 <_Z4_cosf+0x5e>
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff f826 	bl	8000428 <__aeabi_f2d>
 80013dc:	a30e      	add	r3, pc, #56	; (adr r3, 8001418 <_Z4_cosf+0x80>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7fe fec1 	bl	8000168 <__aeabi_dsub>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fb4b 	bl	8000a88 <__aeabi_d2f>
 80013f2:	4603      	mov	r3, r0
 80013f4:	e000      	b.n	80013f8 <_Z4_cosf+0x60>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	60fb      	str	r3, [r7, #12]
  return _sin(a_sin);
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff fe18 	bl	8001030 <_Z4_sinf>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	f3af 8000 	nop.w
 8001410:	5443d6f4 	.word	0x5443d6f4
 8001414:	3ff921fb 	.word	0x3ff921fb
 8001418:	54442eea 	.word	0x54442eea
 800141c:	401921fb 	.word	0x401921fb

08001420 <_ZN9Motor_FOCC1Ef>:
  float a = fmod(angle, _2PI);
  return a >= 0 ? a : (a + _2PI);
}


Motor_FOC::Motor_FOC(float voltage_power_supply_)
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
{
	voltage_power_supply = voltage_power_supply_;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	60da      	str	r2, [r3, #12]
	pole_pairs = 12;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	220c      	movs	r2, #12
 8001434:	609a      	str	r2, [r3, #8]
}
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
	...

08001444 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>:
 *  Created on: Nov 24, 2022
 *      Author: hemingshan
 */
#include "magnetic_sensor.hpp"

AS5600::AS5600(I2C_HandleTypeDef &hi2c_, UART_HandleTypeDef &huart_)
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	226c      	movs	r2, #108	; 0x6c
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	220c      	movs	r2, #12
 800145a:	705a      	strb	r2, [r3, #1]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	220d      	movs	r2, #13
 8001460:	709a      	strb	r2, [r3, #2]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	220e      	movs	r2, #14
 8001466:	70da      	strb	r2, [r3, #3]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	220f      	movs	r2, #15
 800146c:	711a      	strb	r2, [r3, #4]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	220b      	movs	r2, #11
 8001472:	715a      	strb	r2, [r3, #5]
{
	/* I2C1 Initialization*/
	hi2c = hi2c_;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	3308      	adds	r3, #8
 800147a:	4611      	mov	r1, r2
 800147c:	2254      	movs	r2, #84	; 0x54
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fc30 	bl	8004ce4 <memcpy>

	hi2c.Instance = I2C1;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x100>)
 8001488:	609a      	str	r2, [r3, #8]
	hi2c.Init.ClockSpeed = 100000;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4a2e      	ldr	r2, [pc, #184]	; (8001548 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x104>)
 800148e:	60da      	str	r2, [r3, #12]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
	hi2c.Init.OwnAddress1 = 0;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	619a      	str	r2, [r3, #24]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
	hi2c.Init.OwnAddress2 = 0;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_I2C_Init(&hi2c) != HAL_OK)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3308      	adds	r3, #8
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fa23 	bl	800290c <HAL_I2C_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf14      	ite	ne
 80014cc:	2301      	movne	r3, #1
 80014ce:	2300      	moveq	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x96>
	{
		Error_Handler();
 80014d6:	f000 fbbb 	bl	8001c50 <Error_Handler>
	}

	/* UART1 Initialization*/
	huart = huart_;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	335c      	adds	r3, #92	; 0x5c
 80014e0:	4611      	mov	r1, r2
 80014e2:	2244      	movs	r2, #68	; 0x44
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fbfd 	bl	8004ce4 <memcpy>

	huart.Instance = USART1;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4a17      	ldr	r2, [pc, #92]	; (800154c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x108>)
 80014ee:	65da      	str	r2, [r3, #92]	; 0x5c
	huart.Init.BaudRate = 115200;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f6:	661a      	str	r2, [r3, #96]	; 0x60
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	665a      	str	r2, [r3, #100]	; 0x64
	huart.Init.StopBits = UART_STOPBITS_1;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	669a      	str	r2, [r3, #104]	; 0x68
	huart.Init.Parity = UART_PARITY_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	66da      	str	r2, [r3, #108]	; 0x6c
	huart.Init.Mode = UART_MODE_TX_RX;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	220c      	movs	r2, #12
 800150e:	671a      	str	r2, [r3, #112]	; 0x70
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	675a      	str	r2, [r3, #116]	; 0x74
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	679a      	str	r2, [r3, #120]	; 0x78
	if (HAL_UART_Init(&huart) != HAL_OK)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	335c      	adds	r3, #92	; 0x5c
 8001520:	4618      	mov	r0, r3
 8001522:	f002 ffba 	bl	800449a <HAL_UART_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0xf6>
	{
		Error_Handler();
 8001536:	f000 fb8b 	bl	8001c50 <Error_Handler>
	}
}
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40005400 	.word	0x40005400
 8001548:	000186a0 	.word	0x000186a0
 800154c:	40013800 	.word	0x40013800

08001550 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001560:	f040 80b4 	bne.w	80016cc <HAL_TIM_PeriodElapsedCallback+0x17c>



	  float _ca, _sa, Ualpha, Ubeta;
	  float Ua, Ub, Uc;
	  if(count == 720) count = 0;
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800156c:	d102      	bne.n	8001574 <HAL_TIM_PeriodElapsedCallback+0x24>
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

	  float angle_el = _PI_360*count;
 8001574:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff43 	bl	8000404 <__aeabi_i2d>
 800157e:	a356      	add	r3, pc, #344	; (adr r3, 80016d8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe ffa8 	bl	80004d8 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fa7a 	bl	8000a88 <__aeabi_d2f>
 8001594:	4603      	mov	r3, r0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
	  _ca = _cos(angle_el);
 8001598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800159a:	f7ff fefd 	bl	8001398 <_Z4_cosf>
 800159e:	6238      	str	r0, [r7, #32]
	  _sa = _sin(angle_el);
 80015a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015a2:	f7ff fd45 	bl	8001030 <_Z4_sinf>
 80015a6:	61f8      	str	r0, [r7, #28]
	  Ualpha =  - _sa*0.5;
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fbc6 	bl	8000d44 <__aeabi_fmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
	  Ubeta  =    _ca*0.5;
 80015bc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015c0:	6a38      	ldr	r0, [r7, #32]
 80015c2:	f7ff fbbf 	bl	8000d44 <__aeabi_fmul>
 80015c6:	4603      	mov	r3, r0
 80015c8:	617b      	str	r3, [r7, #20]

	  Ua = Ualpha/2 + 0.5;
 80015ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015ce:	69b8      	ldr	r0, [r7, #24]
 80015d0:	f7ff fc6c 	bl	8000eac <__aeabi_fdiv>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff faaa 	bl	8000b34 <__addsf3>
 80015e0:	4603      	mov	r3, r0
 80015e2:	613b      	str	r3, [r7, #16]
	  Ub = (-0.5 * Ualpha  + _SQRT3_2 * Ubeta)/2+0.5;
 80015e4:	69b8      	ldr	r0, [r7, #24]
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015f0:	f7fe ff72 	bl	80004d8 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4614      	mov	r4, r2
 80015fa:	461d      	mov	r5, r3
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f7fe ff13 	bl	8000428 <__aeabi_f2d>
 8001602:	a337      	add	r3, pc, #220	; (adr r3, 80016e0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe ff66 	bl	80004d8 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4620      	mov	r0, r4
 8001612:	4629      	mov	r1, r5
 8001614:	f7fe fdaa 	bl	800016c <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001628:	f7ff f880 	bl	800072c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800163a:	f7fe fd97 	bl	800016c <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa1f 	bl	8000a88 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	60fb      	str	r3, [r7, #12]
	  Uc = (-0.5 * Ualpha - _SQRT3_2 * Ubeta)/2+0.5;
 800164e:	69b8      	ldr	r0, [r7, #24]
 8001650:	f7fe feea 	bl	8000428 <__aeabi_f2d>
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800165a:	f7fe ff3d 	bl	80004d8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4614      	mov	r4, r2
 8001664:	461d      	mov	r5, r3
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7fe fede 	bl	8000428 <__aeabi_f2d>
 800166c:	a31c      	add	r3, pc, #112	; (adr r3, 80016e0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ff31 	bl	80004d8 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fd73 	bl	8000168 <__aeabi_dsub>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001692:	f7ff f84b 	bl	800072c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80016a4:	f7fe fd62 	bl	800016c <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff f9ea 	bl	8000a88 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	60bb      	str	r3, [r7, #8]
	  _writeDutyCyclePWM(Ua, Ub, Uc);
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	6938      	ldr	r0, [r7, #16]
 80016be:	f000 f819 	bl	80016f4 <_writeDutyCyclePWM>
	  count++;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80016ca:	6013      	str	r3, [r2, #0]
  }
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdb0      	pop	{r4, r5, r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	a0431914 	.word	0xa0431914
 80016dc:	3f81df46 	.word	0x3f81df46
 80016e0:	e857b07f 	.word	0xe857b07f
 80016e4:	3febb67a 	.word	0x3febb67a
 80016e8:	200001f8 	.word	0x200001f8
 80016ec:	bfe00000 	.word	0xbfe00000
 80016f0:	3fe00000 	.word	0x3fe00000

080016f4 <_writeDutyCyclePWM>:

void _writeDutyCyclePWM(float dc_a, float dc_b, float dc_c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
	 TIM1->CCR1 = (int)(dc_a * _PWM_RANGE);
 8001700:	4912      	ldr	r1, [pc, #72]	; (800174c <_writeDutyCyclePWM+0x58>)
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f7ff fb1e 	bl	8000d44 <__aeabi_fmul>
 8001708:	4603      	mov	r3, r0
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc6a 	bl	8000fe4 <__aeabi_f2iz>
 8001710:	4602      	mov	r2, r0
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <_writeDutyCyclePWM+0x5c>)
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR3 = (int)(dc_b * _PWM_RANGE);
 8001716:	490d      	ldr	r1, [pc, #52]	; (800174c <_writeDutyCyclePWM+0x58>)
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f7ff fb13 	bl	8000d44 <__aeabi_fmul>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fc5f 	bl	8000fe4 <__aeabi_f2iz>
 8001726:	4602      	mov	r2, r0
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <_writeDutyCyclePWM+0x5c>)
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM1->CCR2 = (int)(dc_c * _PWM_RANGE);
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <_writeDutyCyclePWM+0x58>)
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fb08 	bl	8000d44 <__aeabi_fmul>
 8001734:	4603      	mov	r3, r0
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc54 	bl	8000fe4 <__aeabi_f2iz>
 800173c:	4602      	mov	r2, r0
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <_writeDutyCyclePWM+0x5c>)
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	4479c000 	.word	0x4479c000
 8001750:	40012c00 	.word	0x40012c00

08001754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b0ae      	sub	sp, #184	; 0xb8
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175a:	f000 fd1b 	bl	8002194 <HAL_Init>

  /* USER CODE BEGIN Init */
  AS5600 as5600(hi2c1, huart1);
 800175e:	f107 0318 	add.w	r3, r7, #24
 8001762:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <main+0x80>)
 8001764:	491c      	ldr	r1, [pc, #112]	; (80017d8 <main+0x84>)
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fe6c 	bl	8001444 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>
  Motor_FOC motor(12);
 800176c:	463b      	mov	r3, r7
 800176e:	491b      	ldr	r1, [pc, #108]	; (80017dc <main+0x88>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fe55 	bl	8001420 <_ZN9Motor_FOCC1Ef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001776:	f000 f83b 	bl	80017f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177a:	f000 fa07 	bl	8001b8c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800177e:	f000 f887 	bl	8001890 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 8001782:	f000 f9d5 	bl	8001b30 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8001786:	f000 f8b7 	bl	80018f8 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800178a:	f000 f975 	bl	8001a78 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800178e:	4814      	ldr	r0, [pc, #80]	; (80017e0 <main+0x8c>)
 8001790:	f001 fe6a 	bl	8003468 <HAL_TIM_Base_Start_IT>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001794:	2100      	movs	r1, #0
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <main+0x90>)
 8001798:	f002 fcfc 	bl	8004194 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, 	TIM_CHANNEL_2);
 800179c:	2104      	movs	r1, #4
 800179e:	4811      	ldr	r0, [pc, #68]	; (80017e4 <main+0x90>)
 80017a0:	f001 ff04 	bl	80035ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80017a4:	2108      	movs	r1, #8
 80017a6:	480f      	ldr	r0, [pc, #60]	; (80017e4 <main+0x90>)
 80017a8:	f002 fcf4 	bl	8004194 <HAL_TIMEx_PWMN_Start>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <main+0x94>)
 80017b4:	f001 f892 	bl	80028dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <main+0x98>)
 80017c0:	f001 f88c 	bl	80028dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <main+0x98>)
 80017cc:	f001 f886 	bl	80028dc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <main+0x7c>
 80017d2:	bf00      	nop
 80017d4:	200002e0 	.word	0x200002e0
 80017d8:	200001fc 	.word	0x200001fc
 80017dc:	41400000 	.word	0x41400000
 80017e0:	20000298 	.word	0x20000298
 80017e4:	20000250 	.word	0x20000250
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40010800 	.word	0x40010800

080017f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b090      	sub	sp, #64	; 0x40
 80017f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f6:	f107 0318 	add.w	r3, r7, #24
 80017fa:	2228      	movs	r2, #40	; 0x28
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fa7e 	bl	8004d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800181a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001820:	2301      	movs	r3, #1
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001824:	2302      	movs	r3, #2
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800182e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001834:	f107 0318 	add.w	r3, r7, #24
 8001838:	4618      	mov	r0, r3
 800183a:	f001 f9ab 	bl	8002b94 <HAL_RCC_OscConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800184e:	f000 f9ff 	bl	8001c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2102      	movs	r1, #2
 800186c:	4618      	mov	r0, r3
 800186e:	f001 fc13 	bl	8003098 <HAL_RCC_ClockConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001882:	f000 f9e5 	bl	8001c50 <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	3740      	adds	r7, #64	; 0x40
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 8001896:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <_ZL12MX_I2C1_Initv+0x60>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 800189c:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <_ZL12MX_I2C1_Initv+0x64>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 80018ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <_ZL12MX_I2C1_Initv+0x5c>)
 80018ce:	f001 f81d 	bl	800290c <HAL_I2C_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80018e2:	f000 f9b5 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200001fc 	.word	0x200001fc
 80018f0:	40005400 	.word	0x40005400
 80018f4:	000186a0 	.word	0x000186a0

080018f8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b092      	sub	sp, #72	; 0x48
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2220      	movs	r2, #32
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f003 f9ec 	bl	8004d00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001928:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 800192a:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <_ZL12MX_TIM1_Initv+0x17c>)
 800192c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 8001930:	2207      	movs	r2, #7
 8001932:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 800193c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001940:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b4b      	ldr	r3, [pc, #300]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001948:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001954:	4846      	ldr	r0, [pc, #280]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 8001956:	f001 fdd9 	bl	800350c <HAL_TIM_PWM_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf14      	ite	ne
 8001960:	2301      	movne	r3, #1
 8001962:	2300      	moveq	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800196a:	f000 f971 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001976:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800197a:	4619      	mov	r1, r3
 800197c:	483c      	ldr	r0, [pc, #240]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 800197e:	f002 fca7 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001992:	f000 f95d 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001996:	2360      	movs	r3, #96	; 0x60
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800199a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	482c      	ldr	r0, [pc, #176]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 80019be:	f001 ff9f 	bl	8003900 <HAL_TIM_PWM_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 80019d2:	f000 f93d 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 80019d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	2204      	movs	r2, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4822      	ldr	r0, [pc, #136]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 80019e6:	f001 ff8b 	bl	8003900 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 80019fa:	f000 f929 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 80019fe:	23fa      	movs	r3, #250	; 0xfa
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a06:	2208      	movs	r2, #8
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4819      	ldr	r0, [pc, #100]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 8001a0c:	f001 ff78 	bl	8003900 <HAL_TIM_PWM_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <_ZL12MX_TIM1_Initv+0x12c>
  {
    Error_Handler();
 8001a20:	f000 f916 	bl	8001c50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 8001a48:	f002 fca0 	bl	800438c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <_ZL12MX_TIM1_Initv+0x168>
  {
    Error_Handler();
 8001a5c:	f000 f8f8 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <_ZL12MX_TIM1_Initv+0x178>)
 8001a62:	f000 f9bf 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 8001a66:	bf00      	nop
 8001a68:	3748      	adds	r7, #72	; 0x48
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000250 	.word	0x20000250
 8001a74:	40012c00 	.word	0x40012c00

08001a78 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001a9e:	22ef      	movs	r2, #239	; 0xef
 8001aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001abc:	481b      	ldr	r0, [pc, #108]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001abe:	f001 fc83 	bl	80033c8 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001ad2:	f000 f8bd 	bl	8001c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4812      	ldr	r0, [pc, #72]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001ae4:	f001 ffca 	bl	8003a7c <HAL_TIM_ConfigClockSource>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001af8:	f000 f8aa 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	4619      	mov	r1, r3
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001b0a:	f002 fbe1 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001b1e:	f000 f897 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000298 	.word	0x20000298

08001b30 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b68:	f002 fc97 	bl	800449a <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001b7c:	f000 f868 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002e0 	.word	0x200002e0
 8001b88:	40013800 	.word	0x40013800

08001b8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001ba6:	f043 0320 	orr.w	r3, r3, #32
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bee:	4816      	ldr	r0, [pc, #88]	; (8001c48 <_ZL12MX_GPIO_Initv+0xbc>)
 8001bf0:	f000 fe74 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <_ZL12MX_GPIO_Initv+0xc0>)
 8001bfc:	f000 fe6e 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	4619      	mov	r1, r3
 8001c18:	480b      	ldr	r0, [pc, #44]	; (8001c48 <_ZL12MX_GPIO_Initv+0xbc>)
 8001c1a:	f000 fcdb 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001c1e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <_ZL12MX_GPIO_Initv+0xc0>)
 8001c38:	f000 fccc 	bl	80025d4 <HAL_GPIO_Init>

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40010800 	.word	0x40010800

08001c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <Error_Handler+0x8>
	...

08001c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_MspInit+0x5c>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_MspInit+0x5c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6193      	str	r3, [r2, #24]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_MspInit+0x5c>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_MspInit+0x5c>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_MspInit+0x5c>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_MspInit+0x5c>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_MspInit+0x60>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_MspInit+0x60>)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010000 	.word	0x40010000

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_I2C_MspInit+0x90>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d132      	bne.n	8001d46 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_I2C_MspInit+0x94>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <HAL_I2C_MspInit+0x94>)
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_I2C_MspInit+0x94>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4812      	ldr	r0, [pc, #72]	; (8001d58 <HAL_I2C_MspInit+0x98>)
 8001d0e:	f000 fc61 	bl	80025d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_I2C_MspInit+0x9c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_I2C_MspInit+0x9c>)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_I2C_MspInit+0x94>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_I2C_MspInit+0x94>)
 8001d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_I2C_MspInit+0x94>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40005400 	.word	0x40005400
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010c00 	.word	0x40010c00
 8001d5c:	40010000 	.word	0x40010000

08001d60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_TIM_PWM_MspInit+0x34>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10b      	bne.n	8001d8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_TIM_PWM_MspInit+0x38>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_TIM_PWM_MspInit+0x38>)
 8001d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d7c:	6193      	str	r3, [r2, #24]
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_TIM_PWM_MspInit+0x38>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d113      	bne.n	8001dd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_TIM_Base_MspInit+0x44>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_TIM_Base_MspInit+0x44>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_TIM_Base_MspInit+0x44>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	201c      	movs	r0, #28
 8001dcc:	f000 fb1b 	bl	8002406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd0:	201c      	movs	r0, #28
 8001dd2:	f000 fb34 	bl	800243e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_TIM_MspPostInit+0x8c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d131      	bne.n	8001e68 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_TIM_MspPostInit+0x90>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <HAL_TIM_MspPostInit+0x90>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_TIM_MspPostInit+0x90>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_TIM_MspPostInit+0x90>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <HAL_TIM_MspPostInit+0x90>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_TIM_MspPostInit+0x90>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001e34:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	4619      	mov	r1, r3
 8001e48:	480b      	ldr	r0, [pc, #44]	; (8001e78 <HAL_TIM_MspPostInit+0x94>)
 8001e4a:	f000 fbc3 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4619      	mov	r1, r3
 8001e62:	4806      	ldr	r0, [pc, #24]	; (8001e7c <HAL_TIM_MspPostInit+0x98>)
 8001e64:	f000 fbb6 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	40010800 	.word	0x40010800

08001e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <HAL_UART_MspInit+0xb4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d145      	bne.n	8001f2c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_UART_MspInit+0xb8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <HAL_UART_MspInit+0xb8>)
 8001ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_UART_MspInit+0xb8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_UART_MspInit+0xb8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <HAL_UART_MspInit+0xb8>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_UART_MspInit+0xb8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ed0:	2340      	movs	r3, #64	; 0x40
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4816      	ldr	r0, [pc, #88]	; (8001f3c <HAL_UART_MspInit+0xbc>)
 8001ee4:	f000 fb76 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4810      	ldr	r0, [pc, #64]	; (8001f3c <HAL_UART_MspInit+0xbc>)
 8001efc:	f000 fb6a 	bl	80025d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_UART_MspInit+0xc0>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_UART_MspInit+0xc0>)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2025      	movs	r0, #37	; 0x25
 8001f22:	f000 fa70 	bl	8002406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f26:	2025      	movs	r0, #37	; 0x25
 8001f28:	f000 fa89 	bl	800243e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	; 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40013800 	.word	0x40013800
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010c00 	.word	0x40010c00
 8001f40:	40010000 	.word	0x40010000

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <NMI_Handler+0x4>

08001f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x4>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8a:	f000 f949 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <TIM2_IRQHandler+0x10>)
 8001f9a:	f001 fba9 	bl	80036f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000298 	.word	0x20000298

08001fa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <USART1_IRQHandler+0x10>)
 8001fae:	f002 fac1 	bl	8004534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200002e0 	.word	0x200002e0

08001fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	return 1;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <_kill>:

int _kill(int pid, int sig)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fd4:	f002 fe5c 	bl	8004c90 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2216      	movs	r2, #22
 8001fdc:	601a      	str	r2, [r3, #0]
	return -1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_exit>:

void _exit (int status)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffe7 	bl	8001fca <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ffc:	e7fe      	b.n	8001ffc <_exit+0x12>

08001ffe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e00a      	b.n	8002026 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002010:	f3af 8000 	nop.w
 8002014:	4601      	mov	r1, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	60ba      	str	r2, [r7, #8]
 800201c:	b2ca      	uxtb	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	dbf0      	blt.n	8002010 <_read+0x12>
	}

return len;
 800202e:	687b      	ldr	r3, [r7, #4]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e009      	b.n	800205e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	60ba      	str	r2, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	dbf1      	blt.n	800204a <_write+0x12>
	}
	return len;
 8002066:	687b      	ldr	r3, [r7, #4]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_close>:

int _close(int file)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002096:	605a      	str	r2, [r3, #4]
	return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <_isatty>:

int _isatty(int file)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	return 1;
 80020ac:	2301      	movs	r3, #1
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <_sbrk+0x5c>)
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <_sbrk+0x60>)
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <_sbrk+0x64>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <_sbrk+0x68>)
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d207      	bcs.n	8002110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002100:	f002 fdc6 	bl	8004c90 <__errno>
 8002104:	4603      	mov	r3, r0
 8002106:	220c      	movs	r2, #12
 8002108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e009      	b.n	8002124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <_sbrk+0x64>)
 8002120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20005000 	.word	0x20005000
 8002130:	00000400 	.word	0x00000400
 8002134:	20000324 	.word	0x20000324
 8002138:	20000340 	.word	0x20000340

0800213c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800214a:	490d      	ldr	r1, [pc, #52]	; (8002180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002150:	e002      	b.n	8002158 <LoopCopyDataInit>

08002152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002156:	3304      	adds	r3, #4

08002158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800215c:	d3f9      	bcc.n	8002152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002160:	4c0a      	ldr	r4, [pc, #40]	; (800218c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002164:	e001      	b.n	800216a <LoopFillZerobss>

08002166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002168:	3204      	adds	r2, #4

0800216a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800216c:	d3fb      	bcc.n	8002166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800216e:	f7ff ffe5 	bl	800213c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002172:	f002 fd93 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002176:	f7ff faed 	bl	8001754 <main>
  bx lr
 800217a:	4770      	bx	lr
  ldr r0, =_sdata
 800217c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002180:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002184:	08007e54 	.word	0x08007e54
  ldr r2, =_sbss
 8002188:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800218c:	2000033c 	.word	0x2000033c

08002190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002190:	e7fe      	b.n	8002190 <ADC1_2_IRQHandler>
	...

08002194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_Init+0x28>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_Init+0x28>)
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f923 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	200f      	movs	r0, #15
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b0:	f7ff fd54 	bl	8001c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40022000 	.word	0x40022000

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f93b 	bl	800245a <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 f903 	bl	8002406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000000 	.word	0x20000000
 8002218:	20000008 	.word	0x20000008
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_IncTick+0x1c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_IncTick+0x20>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_IncTick+0x20>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	20000008 	.word	0x20000008
 8002240:	20000328 	.word	0x20000328

08002244 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b02      	ldr	r3, [pc, #8]	; (8002254 <HAL_GetTick+0x10>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20000328 	.word	0x20000328

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db0b      	blt.n	80022e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4906      	ldr	r1, [pc, #24]	; (80022f0 <__NVIC_EnableIRQ+0x34>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023bc:	d301      	bcc.n	80023c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2301      	movs	r3, #1
 80023c0:	e00f      	b.n	80023e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <SysTick_Config+0x40>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ca:	210f      	movs	r1, #15
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f7ff ff90 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <SysTick_Config+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <SysTick_Config+0x40>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff2d 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002418:	f7ff ff42 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 800241c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7ff ff90 	bl	8002348 <NVIC_EncodePriority>
 8002428:	4602      	mov	r2, r0
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5f 	bl	80022f4 <__NVIC_SetPriority>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff35 	bl	80022bc <__NVIC_EnableIRQ>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffa2 	bl	80023ac <SysTick_Config>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002484:	2b02      	cmp	r3, #2
 8002486:	d008      	beq.n	800249a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e020      	b.n	80024dc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 020e 	bic.w	r2, r2, #14
 80024a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	2101      	movs	r1, #1
 80024c4:	fa01 f202 	lsl.w	r2, r1, r2
 80024c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d005      	beq.n	800250a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2204      	movs	r2, #4
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e051      	b.n	80025ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 020e 	bic.w	r2, r2, #14
 8002518:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a22      	ldr	r2, [pc, #136]	; (80025b8 <HAL_DMA_Abort_IT+0xd0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d029      	beq.n	8002588 <HAL_DMA_Abort_IT+0xa0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a20      	ldr	r2, [pc, #128]	; (80025bc <HAL_DMA_Abort_IT+0xd4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d022      	beq.n	8002584 <HAL_DMA_Abort_IT+0x9c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_DMA_Abort_IT+0xd8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d01a      	beq.n	800257e <HAL_DMA_Abort_IT+0x96>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_DMA_Abort_IT+0xdc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d012      	beq.n	8002578 <HAL_DMA_Abort_IT+0x90>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_DMA_Abort_IT+0xe0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00a      	beq.n	8002572 <HAL_DMA_Abort_IT+0x8a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <HAL_DMA_Abort_IT+0xe4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d102      	bne.n	800256c <HAL_DMA_Abort_IT+0x84>
 8002566:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800256a:	e00e      	b.n	800258a <HAL_DMA_Abort_IT+0xa2>
 800256c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002570:	e00b      	b.n	800258a <HAL_DMA_Abort_IT+0xa2>
 8002572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002576:	e008      	b.n	800258a <HAL_DMA_Abort_IT+0xa2>
 8002578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257c:	e005      	b.n	800258a <HAL_DMA_Abort_IT+0xa2>
 800257e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002582:	e002      	b.n	800258a <HAL_DMA_Abort_IT+0xa2>
 8002584:	2310      	movs	r3, #16
 8002586:	e000      	b.n	800258a <HAL_DMA_Abort_IT+0xa2>
 8002588:	2301      	movs	r3, #1
 800258a:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_DMA_Abort_IT+0xe8>)
 800258c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
    } 
  }
  return status;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40020008 	.word	0x40020008
 80025bc:	4002001c 	.word	0x4002001c
 80025c0:	40020030 	.word	0x40020030
 80025c4:	40020044 	.word	0x40020044
 80025c8:	40020058 	.word	0x40020058
 80025cc:	4002006c 	.word	0x4002006c
 80025d0:	40020000 	.word	0x40020000

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b08b      	sub	sp, #44	; 0x2c
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e6:	e169      	b.n	80028bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025e8:	2201      	movs	r2, #1
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	429a      	cmp	r2, r3
 8002602:	f040 8158 	bne.w	80028b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a9a      	ldr	r2, [pc, #616]	; (8002874 <HAL_GPIO_Init+0x2a0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d05e      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 8002610:	4a98      	ldr	r2, [pc, #608]	; (8002874 <HAL_GPIO_Init+0x2a0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d875      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 8002616:	4a98      	ldr	r2, [pc, #608]	; (8002878 <HAL_GPIO_Init+0x2a4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d058      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 800261c:	4a96      	ldr	r2, [pc, #600]	; (8002878 <HAL_GPIO_Init+0x2a4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d86f      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 8002622:	4a96      	ldr	r2, [pc, #600]	; (800287c <HAL_GPIO_Init+0x2a8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d052      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 8002628:	4a94      	ldr	r2, [pc, #592]	; (800287c <HAL_GPIO_Init+0x2a8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d869      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 800262e:	4a94      	ldr	r2, [pc, #592]	; (8002880 <HAL_GPIO_Init+0x2ac>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d04c      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 8002634:	4a92      	ldr	r2, [pc, #584]	; (8002880 <HAL_GPIO_Init+0x2ac>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d863      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 800263a:	4a92      	ldr	r2, [pc, #584]	; (8002884 <HAL_GPIO_Init+0x2b0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d046      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 8002640:	4a90      	ldr	r2, [pc, #576]	; (8002884 <HAL_GPIO_Init+0x2b0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d85d      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 8002646:	2b12      	cmp	r3, #18
 8002648:	d82a      	bhi.n	80026a0 <HAL_GPIO_Init+0xcc>
 800264a:	2b12      	cmp	r3, #18
 800264c:	d859      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <HAL_GPIO_Init+0x80>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	080026cf 	.word	0x080026cf
 8002658:	080026a9 	.word	0x080026a9
 800265c:	080026bb 	.word	0x080026bb
 8002660:	080026fd 	.word	0x080026fd
 8002664:	08002703 	.word	0x08002703
 8002668:	08002703 	.word	0x08002703
 800266c:	08002703 	.word	0x08002703
 8002670:	08002703 	.word	0x08002703
 8002674:	08002703 	.word	0x08002703
 8002678:	08002703 	.word	0x08002703
 800267c:	08002703 	.word	0x08002703
 8002680:	08002703 	.word	0x08002703
 8002684:	08002703 	.word	0x08002703
 8002688:	08002703 	.word	0x08002703
 800268c:	08002703 	.word	0x08002703
 8002690:	08002703 	.word	0x08002703
 8002694:	08002703 	.word	0x08002703
 8002698:	080026b1 	.word	0x080026b1
 800269c:	080026c5 	.word	0x080026c5
 80026a0:	4a79      	ldr	r2, [pc, #484]	; (8002888 <HAL_GPIO_Init+0x2b4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026a6:	e02c      	b.n	8002702 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	623b      	str	r3, [r7, #32]
          break;
 80026ae:	e029      	b.n	8002704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	3304      	adds	r3, #4
 80026b6:	623b      	str	r3, [r7, #32]
          break;
 80026b8:	e024      	b.n	8002704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	3308      	adds	r3, #8
 80026c0:	623b      	str	r3, [r7, #32]
          break;
 80026c2:	e01f      	b.n	8002704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	330c      	adds	r3, #12
 80026ca:	623b      	str	r3, [r7, #32]
          break;
 80026cc:	e01a      	b.n	8002704 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026d6:	2304      	movs	r3, #4
 80026d8:	623b      	str	r3, [r7, #32]
          break;
 80026da:	e013      	b.n	8002704 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e4:	2308      	movs	r3, #8
 80026e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	611a      	str	r2, [r3, #16]
          break;
 80026ee:	e009      	b.n	8002704 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f0:	2308      	movs	r3, #8
 80026f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	615a      	str	r2, [r3, #20]
          break;
 80026fa:	e003      	b.n	8002704 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
          break;
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x130>
          break;
 8002702:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d801      	bhi.n	800270e <HAL_GPIO_Init+0x13a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	e001      	b.n	8002712 <HAL_GPIO_Init+0x13e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2bff      	cmp	r3, #255	; 0xff
 8002718:	d802      	bhi.n	8002720 <HAL_GPIO_Init+0x14c>
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	e002      	b.n	8002726 <HAL_GPIO_Init+0x152>
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	3b08      	subs	r3, #8
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	210f      	movs	r1, #15
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	6a39      	ldr	r1, [r7, #32]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80b1 	beq.w	80028b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002754:	4b4d      	ldr	r3, [pc, #308]	; (800288c <HAL_GPIO_Init+0x2b8>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a4c      	ldr	r2, [pc, #304]	; (800288c <HAL_GPIO_Init+0x2b8>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_GPIO_Init+0x2b8>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800276c:	4a48      	ldr	r2, [pc, #288]	; (8002890 <HAL_GPIO_Init+0x2bc>)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002778:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	220f      	movs	r2, #15
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a40      	ldr	r2, [pc, #256]	; (8002894 <HAL_GPIO_Init+0x2c0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d013      	beq.n	80027c0 <HAL_GPIO_Init+0x1ec>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3f      	ldr	r2, [pc, #252]	; (8002898 <HAL_GPIO_Init+0x2c4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00d      	beq.n	80027bc <HAL_GPIO_Init+0x1e8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3e      	ldr	r2, [pc, #248]	; (800289c <HAL_GPIO_Init+0x2c8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <HAL_GPIO_Init+0x1e4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3d      	ldr	r2, [pc, #244]	; (80028a0 <HAL_GPIO_Init+0x2cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_GPIO_Init+0x1e0>
 80027b0:	2303      	movs	r3, #3
 80027b2:	e006      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e004      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e002      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027c0:	2300      	movs	r3, #0
 80027c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c4:	f002 0203 	and.w	r2, r2, #3
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	4093      	lsls	r3, r2
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027d2:	492f      	ldr	r1, [pc, #188]	; (8002890 <HAL_GPIO_Init+0x2bc>)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	492c      	ldr	r1, [pc, #176]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	43db      	mvns	r3, r3
 8002802:	4928      	ldr	r1, [pc, #160]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002804:	4013      	ands	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d006      	beq.n	8002822 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4922      	ldr	r1, [pc, #136]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	43db      	mvns	r3, r3
 800282a:	491e      	ldr	r1, [pc, #120]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 800282c:	4013      	ands	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4918      	ldr	r1, [pc, #96]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	43db      	mvns	r3, r3
 8002852:	4914      	ldr	r1, [pc, #80]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002854:	4013      	ands	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d021      	beq.n	80028a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	490e      	ldr	r1, [pc, #56]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
 8002870:	e021      	b.n	80028b6 <HAL_GPIO_Init+0x2e2>
 8002872:	bf00      	nop
 8002874:	10320000 	.word	0x10320000
 8002878:	10310000 	.word	0x10310000
 800287c:	10220000 	.word	0x10220000
 8002880:	10210000 	.word	0x10210000
 8002884:	10120000 	.word	0x10120000
 8002888:	10110000 	.word	0x10110000
 800288c:	40021000 	.word	0x40021000
 8002890:	40010000 	.word	0x40010000
 8002894:	40010800 	.word	0x40010800
 8002898:	40010c00 	.word	0x40010c00
 800289c:	40011000 	.word	0x40011000
 80028a0:	40011400 	.word	0x40011400
 80028a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_GPIO_Init+0x304>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	4909      	ldr	r1, [pc, #36]	; (80028d8 <HAL_GPIO_Init+0x304>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	3301      	adds	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f47f ae8e 	bne.w	80025e8 <HAL_GPIO_Init+0x14>
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	372c      	adds	r7, #44	; 0x2c
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40010400 	.word	0x40010400

080028dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ec:	787b      	ldrb	r3, [r7, #1]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028f8:	e003      	b.n	8002902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e12b      	b.n	8002b76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff f9c4 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2224      	movs	r2, #36	; 0x24
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800295e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800296e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002970:	f000 fce4 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8002974:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a81      	ldr	r2, [pc, #516]	; (8002b80 <HAL_I2C_Init+0x274>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d807      	bhi.n	8002990 <HAL_I2C_Init+0x84>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a80      	ldr	r2, [pc, #512]	; (8002b84 <HAL_I2C_Init+0x278>)
 8002984:	4293      	cmp	r3, r2
 8002986:	bf94      	ite	ls
 8002988:	2301      	movls	r3, #1
 800298a:	2300      	movhi	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e006      	b.n	800299e <HAL_I2C_Init+0x92>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a7d      	ldr	r2, [pc, #500]	; (8002b88 <HAL_I2C_Init+0x27c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	bf94      	ite	ls
 8002998:	2301      	movls	r3, #1
 800299a:	2300      	movhi	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0e7      	b.n	8002b76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a78      	ldr	r2, [pc, #480]	; (8002b8c <HAL_I2C_Init+0x280>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0c9b      	lsrs	r3, r3, #18
 80029b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a6a      	ldr	r2, [pc, #424]	; (8002b80 <HAL_I2C_Init+0x274>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d802      	bhi.n	80029e0 <HAL_I2C_Init+0xd4>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	3301      	adds	r3, #1
 80029de:	e009      	b.n	80029f4 <HAL_I2C_Init+0xe8>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	4a69      	ldr	r2, [pc, #420]	; (8002b90 <HAL_I2C_Init+0x284>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	3301      	adds	r3, #1
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	495c      	ldr	r1, [pc, #368]	; (8002b80 <HAL_I2C_Init+0x274>)
 8002a10:	428b      	cmp	r3, r1
 8002a12:	d819      	bhi.n	8002a48 <HAL_I2C_Init+0x13c>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e59      	subs	r1, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a22:	1c59      	adds	r1, r3, #1
 8002a24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a28:	400b      	ands	r3, r1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_I2C_Init+0x138>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1e59      	subs	r1, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a42:	e051      	b.n	8002ae8 <HAL_I2C_Init+0x1dc>
 8002a44:	2304      	movs	r3, #4
 8002a46:	e04f      	b.n	8002ae8 <HAL_I2C_Init+0x1dc>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d111      	bne.n	8002a74 <HAL_I2C_Init+0x168>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	440b      	add	r3, r1
 8002a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	e012      	b.n	8002a9a <HAL_I2C_Init+0x18e>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	0099      	lsls	r1, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Init+0x196>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e022      	b.n	8002ae8 <HAL_I2C_Init+0x1dc>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_I2C_Init+0x1bc>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e58      	subs	r0, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	440b      	add	r3, r1
 8002ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac6:	e00f      	b.n	8002ae8 <HAL_I2C_Init+0x1dc>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	6809      	ldr	r1, [r1, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69da      	ldr	r2, [r3, #28]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6911      	ldr	r1, [r2, #16]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	000186a0 	.word	0x000186a0
 8002b84:	001e847f 	.word	0x001e847f
 8002b88:	003d08ff 	.word	0x003d08ff
 8002b8c:	431bde83 	.word	0x431bde83
 8002b90:	10624dd3 	.word	0x10624dd3

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e272      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8087 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb4:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d00c      	beq.n	8002bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc0:	4b8f      	ldr	r3, [pc, #572]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d112      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5e>
 8002bcc:	4b8c      	ldr	r3, [pc, #560]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4b89      	ldr	r3, [pc, #548]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x12c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d168      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e24c      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x76>
 8002bfc:	4b80      	ldr	r3, [pc, #512]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7f      	ldr	r2, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e02e      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b7b      	ldr	r3, [pc, #492]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7a      	ldr	r2, [pc, #488]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b78      	ldr	r3, [pc, #480]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a77      	ldr	r2, [pc, #476]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e01d      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0xbc>
 8002c36:	4b72      	ldr	r3, [pc, #456]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a71      	ldr	r2, [pc, #452]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c50:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6a      	ldr	r2, [pc, #424]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b68      	ldr	r3, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a67      	ldr	r2, [pc, #412]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7ff fae8 	bl	8002244 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7ff fae4 	bl	8002244 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e200      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0xe4>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fad4 	bl	8002244 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7ff fad0 	bl	8002244 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1ec      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x10c>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d063      	beq.n	8002d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cce:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cda:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d11c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x18c>
 8002ce6:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_RCC_OscConfig+0x176>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1c0      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4939      	ldr	r1, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	e03a      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7ff fa89 	bl	8002244 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d36:	f7ff fa85 	bl	8002244 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e1a1      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d54:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4927      	ldr	r1, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
 8002d68:	e015      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7ff fa68 	bl	8002244 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d78:	f7ff fa64 	bl	8002244 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e180      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03a      	beq.n	8002e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db0:	f7ff fa48 	bl	8002244 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7ff fa44 	bl	8002244 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e160      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f000 fad8 	bl	800338c <RCC_Delay>
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de4:	f7ff fa2e 	bl	8002244 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dea:	e00f      	b.n	8002e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7ff fa2a 	bl	8002244 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d908      	bls.n	8002e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e146      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	42420000 	.word	0x42420000
 8002e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	4b92      	ldr	r3, [pc, #584]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e9      	bne.n	8002dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80a6 	beq.w	8002f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	4b8b      	ldr	r3, [pc, #556]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a87      	ldr	r2, [pc, #540]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b85      	ldr	r3, [pc, #532]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b82      	ldr	r3, [pc, #520]	; (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d118      	bne.n	8002e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5e:	4b7f      	ldr	r3, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7e      	ldr	r2, [pc, #504]	; (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6a:	f7ff f9eb 	bl	8002244 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7ff f9e7 	bl	8002244 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b64      	cmp	r3, #100	; 0x64
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e103      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	4b75      	ldr	r3, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x312>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	e02d      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x334>
 8002eae:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a69      	ldr	r2, [pc, #420]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6213      	str	r3, [r2, #32]
 8002eba:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a66      	ldr	r2, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6213      	str	r3, [r2, #32]
 8002ec6:	e01c      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d10c      	bne.n	8002eea <HAL_RCC_OscConfig+0x356>
 8002ed0:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a60      	ldr	r2, [pc, #384]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	e00b      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002eea:	4b5b      	ldr	r3, [pc, #364]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a5a      	ldr	r2, [pc, #360]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	4b58      	ldr	r3, [pc, #352]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a57      	ldr	r2, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d015      	beq.n	8002f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7ff f99b 	bl	8002244 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7ff f997 	bl	8002244 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0b1      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCC_OscConfig+0x37e>
 8002f34:	e014      	b.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7ff f985 	bl	8002244 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7ff f981 	bl	8002244 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e09b      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	4b40      	ldr	r3, [pc, #256]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ee      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f66:	4b3c      	ldr	r3, [pc, #240]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4a3b      	ldr	r2, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8087 	beq.w	800308a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d061      	beq.n	800304c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d146      	bne.n	800301e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7ff f955 	bl	8002244 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7ff f951 	bl	8002244 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e06d      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb0:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d108      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4921      	ldr	r1, [pc, #132]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a19      	ldr	r1, [r3, #32]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7ff f925 	bl	8002244 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7ff f921 	bl	8002244 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e03d      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x46a>
 800301c:	e035      	b.n	800308a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7ff f90e 	bl	8002244 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7ff f90a 	bl	8002244 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e026      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x498>
 800304a:	e01e      	b.n	800308a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e019      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x500>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	429a      	cmp	r2, r3
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0d0      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4965      	ldr	r1, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d040      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d115      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e073      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4936      	ldr	r1, [pc, #216]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7ff f85c 	bl	8002244 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7ff f858 	bl	8002244 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e053      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d210      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4922      	ldr	r1, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1cc>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1d0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe ffba 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000
 800325c:	40021000 	.word	0x40021000
 8003260:	08007a58 	.word	0x08007a58
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b490      	push	{r4, r7}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003272:	4b29      	ldr	r3, [pc, #164]	; (8003318 <HAL_RCC_GetSysClockFreq+0xac>)
 8003274:	1d3c      	adds	r4, r7, #4
 8003276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800327c:	f240 2301 	movw	r3, #513	; 0x201
 8003280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003296:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x46>
 80032aa:	e02b      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ae:	623b      	str	r3, [r7, #32]
      break;
 80032b0:	e02b      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	0c9b      	lsrs	r3, r3, #18
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3328      	adds	r3, #40	; 0x28
 80032bc:	443b      	add	r3, r7
 80032be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_GetSysClockFreq+0xb0>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	0c5b      	lsrs	r3, r3, #17
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	3328      	adds	r3, #40	; 0x28
 80032da:	443b      	add	r3, r7
 80032dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032e6:	fb03 f202 	mul.w	r2, r3, r2
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	e004      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	623b      	str	r3, [r7, #32]
      break;
 8003302:	e002      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003306:	623b      	str	r3, [r7, #32]
      break;
 8003308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330a:	6a3b      	ldr	r3, [r7, #32]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3728      	adds	r7, #40	; 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bc90      	pop	{r4, r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	08007728 	.word	0x08007728
 800331c:	40021000 	.word	0x40021000
 8003320:	007a1200 	.word	0x007a1200
 8003324:	003d0900 	.word	0x003d0900

08003328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <HAL_RCC_GetHCLKFreq+0x10>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	20000000 	.word	0x20000000

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003340:	f7ff fff2 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	08007a68 	.word	0x08007a68

08003364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003368:	f7ff ffde 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0adb      	lsrs	r3, r3, #11
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000
 8003388:	08007a68 	.word	0x08007a68

0800338c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <RCC_Delay+0x34>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <RCC_Delay+0x38>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0a5b      	lsrs	r3, r3, #9
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a8:	bf00      	nop
  }
  while (Delay --);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	60fa      	str	r2, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f9      	bne.n	80033a8 <RCC_Delay+0x1c>
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000000 	.word	0x20000000
 80033c4:	10624dd3 	.word	0x10624dd3

080033c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e041      	b.n	800345e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fcd4 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fc20 	bl	8003c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e03a      	b.n	80034f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_TIM_Base_Start_IT+0x98>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d009      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_TIM_Base_Start_IT+0x9c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <HAL_TIM_Base_Start_IT+0xa0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d010      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e2:	e007      	b.n	80034f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800

0800350c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e041      	b.n	80035a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe fc14 	bl	8001d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 fb7e 	bl	8003c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_TIM_PWM_Start+0x24>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e022      	b.n	8003616 <HAL_TIM_PWM_Start+0x6a>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d109      	bne.n	80035ea <HAL_TIM_PWM_Start+0x3e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e015      	b.n	8003616 <HAL_TIM_PWM_Start+0x6a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d109      	bne.n	8003604 <HAL_TIM_PWM_Start+0x58>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e008      	b.n	8003616 <HAL_TIM_PWM_Start+0x6a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e05e      	b.n	80036dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0x82>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362c:	e013      	b.n	8003656 <HAL_TIM_PWM_Start+0xaa>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d104      	bne.n	800363e <HAL_TIM_PWM_Start+0x92>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800363c:	e00b      	b.n	8003656 <HAL_TIM_PWM_Start+0xaa>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d104      	bne.n	800364e <HAL_TIM_PWM_Start+0xa2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800364c:	e003      	b.n	8003656 <HAL_TIM_PWM_Start+0xaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2201      	movs	r2, #1
 800365c:	6839      	ldr	r1, [r7, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fd74 	bl	800414c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <HAL_TIM_PWM_Start+0x138>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d107      	bne.n	800367e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_TIM_PWM_Start+0x138>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_TIM_PWM_Start+0xfa>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d009      	beq.n	80036a6 <HAL_TIM_PWM_Start+0xfa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <HAL_TIM_PWM_Start+0x13c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_TIM_PWM_Start+0xfa>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a12      	ldr	r2, [pc, #72]	; (80036ec <HAL_TIM_PWM_Start+0x140>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d010      	beq.n	80036da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c8:	e007      	b.n	80036da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800

080036f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0202 	mvn.w	r2, #2
 800371c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa6f 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa62 	bl	8003c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fa71 	bl	8003c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d122      	bne.n	80037a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b04      	cmp	r3, #4
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0204 	mvn.w	r2, #4
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa45 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fa38 	bl	8003c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fa47 	bl	8003c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0208 	mvn.w	r2, #8
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2204      	movs	r2, #4
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa1b 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa0e 	bl	8003c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fa1d 	bl	8003c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9f1 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9e4 	bl	8003c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f9f3 	bl	8003c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10e      	bne.n	8003874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0201 	mvn.w	r2, #1
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fe6e 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d10e      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b80      	cmp	r3, #128	; 0x80
 800388e:	d107      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fdd0 	bl	8004440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d10e      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d107      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9b7 	bl	8003c3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d10e      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d107      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0220 	mvn.w	r2, #32
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fd9b 	bl	800442e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003916:	2302      	movs	r3, #2
 8003918:	e0ac      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x174>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0c      	cmp	r3, #12
 8003926:	f200 809f 	bhi.w	8003a68 <HAL_TIM_PWM_ConfigChannel+0x168>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003965 	.word	0x08003965
 8003934:	08003a69 	.word	0x08003a69
 8003938:	08003a69 	.word	0x08003a69
 800393c:	08003a69 	.word	0x08003a69
 8003940:	080039a5 	.word	0x080039a5
 8003944:	08003a69 	.word	0x08003a69
 8003948:	08003a69 	.word	0x08003a69
 800394c:	08003a69 	.word	0x08003a69
 8003950:	080039e7 	.word	0x080039e7
 8003954:	08003a69 	.word	0x08003a69
 8003958:	08003a69 	.word	0x08003a69
 800395c:	08003a69 	.word	0x08003a69
 8003960:	08003a27 	.word	0x08003a27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f9d0 	bl	8003d10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0208 	orr.w	r2, r2, #8
 800397e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6999      	ldr	r1, [r3, #24]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	619a      	str	r2, [r3, #24]
      break;
 80039a2:	e062      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fa16 	bl	8003ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6999      	ldr	r1, [r3, #24]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	021a      	lsls	r2, r3, #8
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	619a      	str	r2, [r3, #24]
      break;
 80039e4:	e041      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fa5f 	bl	8003eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0208 	orr.w	r2, r2, #8
 8003a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0204 	bic.w	r2, r2, #4
 8003a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69d9      	ldr	r1, [r3, #28]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	61da      	str	r2, [r3, #28]
      break;
 8003a24:	e021      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 faa9 	bl	8003f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69d9      	ldr	r1, [r3, #28]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	021a      	lsls	r2, r3, #8
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	61da      	str	r2, [r3, #28]
      break;
 8003a66:	e000      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003a68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIM_ConfigClockSource+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e0b3      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x180>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003acc:	d03e      	beq.n	8003b4c <HAL_TIM_ConfigClockSource+0xd0>
 8003ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad2:	f200 8087 	bhi.w	8003be4 <HAL_TIM_ConfigClockSource+0x168>
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	f000 8085 	beq.w	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae2:	d87f      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x168>
 8003ae4:	2b70      	cmp	r3, #112	; 0x70
 8003ae6:	d01a      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0xa2>
 8003ae8:	2b70      	cmp	r3, #112	; 0x70
 8003aea:	d87b      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x168>
 8003aec:	2b60      	cmp	r3, #96	; 0x60
 8003aee:	d050      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x116>
 8003af0:	2b60      	cmp	r3, #96	; 0x60
 8003af2:	d877      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x168>
 8003af4:	2b50      	cmp	r3, #80	; 0x50
 8003af6:	d03c      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0xf6>
 8003af8:	2b50      	cmp	r3, #80	; 0x50
 8003afa:	d873      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x168>
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d058      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x136>
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d86f      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x168>
 8003b04:	2b30      	cmp	r3, #48	; 0x30
 8003b06:	d064      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x156>
 8003b08:	2b30      	cmp	r3, #48	; 0x30
 8003b0a:	d86b      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x168>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d060      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x156>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d867      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x168>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d05c      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x156>
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d05a      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b1c:	e062      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f000 faee 	bl	800410e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	609a      	str	r2, [r3, #8]
      break;
 8003b4a:	e04e      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6899      	ldr	r1, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f000 fad7 	bl	800410e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b6e:	609a      	str	r2, [r3, #8]
      break;
 8003b70:	e03b      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 fa4e 	bl	8004020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2150      	movs	r1, #80	; 0x50
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 faa5 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003b90:	e02b      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 fa6c 	bl	800407c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2160      	movs	r1, #96	; 0x60
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fa95 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e01b      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 fa2e 	bl	8004020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2140      	movs	r1, #64	; 0x40
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fa85 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e00b      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f000 fa7c 	bl	80040da <TIM_ITRx_SetConfig>
        break;
 8003be2:	e002      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003be4:	bf00      	nop
 8003be6:	e000      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003be8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <TIM_Base_SetConfig+0xb8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <TIM_Base_SetConfig+0x30>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6a:	d007      	beq.n	8003c7c <TIM_Base_SetConfig+0x30>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <TIM_Base_SetConfig+0xbc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_Base_SetConfig+0x30>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a25      	ldr	r2, [pc, #148]	; (8003d0c <TIM_Base_SetConfig+0xc0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d108      	bne.n	8003c8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <TIM_Base_SetConfig+0xb8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <TIM_Base_SetConfig+0x62>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d007      	beq.n	8003cae <TIM_Base_SetConfig+0x62>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <TIM_Base_SetConfig+0xbc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_Base_SetConfig+0x62>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <TIM_Base_SetConfig+0xc0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d108      	bne.n	8003cc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <TIM_Base_SetConfig+0xb8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d103      	bne.n	8003cf4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	615a      	str	r2, [r3, #20]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800

08003d10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 0201 	bic.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f023 0302 	bic.w	r3, r3, #2
 8003d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <TIM_OC1_SetConfig+0xc8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d10c      	bne.n	8003d86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f023 0308 	bic.w	r3, r3, #8
 8003d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <TIM_OC1_SetConfig+0xc8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	621a      	str	r2, [r3, #32]
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40012c00 	.word	0x40012c00

08003ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f023 0210 	bic.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f023 0320 	bic.w	r3, r3, #32
 8003e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <TIM_OC2_SetConfig+0xd0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10d      	bne.n	8003e58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <TIM_OC2_SetConfig+0xd0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d113      	bne.n	8003e88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	40012c00 	.word	0x40012c00

08003eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <TIM_OC3_SetConfig+0xd0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d10d      	bne.n	8003f2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <TIM_OC3_SetConfig+0xd0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d113      	bne.n	8003f5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	621a      	str	r2, [r3, #32]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40012c00 	.word	0x40012c00

08003f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	031b      	lsls	r3, r3, #12
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a0f      	ldr	r2, [pc, #60]	; (800401c <TIM_OC4_SetConfig+0x98>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d109      	bne.n	8003ff8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	019b      	lsls	r3, r3, #6
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	40012c00 	.word	0x40012c00

08004020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 030a 	bic.w	r3, r3, #10
 800405c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f023 0210 	bic.w	r2, r3, #16
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	031b      	lsls	r3, r3, #12
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	621a      	str	r2, [r3, #32]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f043 0307 	orr.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800410e:	b480      	push	{r7}
 8004110:	b087      	sub	sp, #28
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004128:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	021a      	lsls	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	431a      	orrs	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	609a      	str	r2, [r3, #8]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2201      	movs	r2, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	43db      	mvns	r3, r3
 800416e:	401a      	ands	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <HAL_TIMEx_PWMN_Start+0x24>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e022      	b.n	80041fe <HAL_TIMEx_PWMN_Start+0x6a>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d109      	bne.n	80041d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	bf14      	ite	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	2300      	moveq	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	e015      	b.n	80041fe <HAL_TIMEx_PWMN_Start+0x6a>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d109      	bne.n	80041ec <HAL_TIMEx_PWMN_Start+0x58>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e008      	b.n	80041fe <HAL_TIMEx_PWMN_Start+0x6a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e059      	b.n	80042ba <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <HAL_TIMEx_PWMN_Start+0x82>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004214:	e013      	b.n	800423e <HAL_TIMEx_PWMN_Start+0xaa>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d104      	bne.n	8004226 <HAL_TIMEx_PWMN_Start+0x92>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004224:	e00b      	b.n	800423e <HAL_TIMEx_PWMN_Start+0xaa>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d104      	bne.n	8004236 <HAL_TIMEx_PWMN_Start+0xa2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004234:	e003      	b.n	800423e <HAL_TIMEx_PWMN_Start+0xaa>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2204      	movs	r2, #4
 8004244:	6839      	ldr	r1, [r7, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f903 	bl	8004452 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800425a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_TIMEx_PWMN_Start+0x130>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_TIMEx_PWMN_Start+0xf0>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d009      	beq.n	8004284 <HAL_TIMEx_PWMN_Start+0xf0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <HAL_TIMEx_PWMN_Start+0x134>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_TIMEx_PWMN_Start+0xf0>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <HAL_TIMEx_PWMN_Start+0x138>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d111      	bne.n	80042a8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b06      	cmp	r3, #6
 8004294:	d010      	beq.n	80042b8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a6:	e007      	b.n	80042b8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e046      	b.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d009      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a10      	ldr	r2, [pc, #64]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10c      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800

0800438c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e03d      	b.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004452:	b480      	push	{r7}
 8004454:	b087      	sub	sp, #28
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2204      	movs	r2, #4
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1a      	ldr	r2, [r3, #32]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	43db      	mvns	r3, r3
 8004474:	401a      	ands	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	fa01 f303 	lsl.w	r3, r1, r3
 800448a:	431a      	orrs	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e03f      	b.n	800452c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd fcdd 	bl	8001e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	; 0x24
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fb48 	bl	8004b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004502:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004512:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10d      	bne.n	8004586 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_UART_IRQHandler+0x52>
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa4f 	bl	8004a22 <UART_Receive_IT>
      return;
 8004584:	e17b      	b.n	800487e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80b1 	beq.w	80046f0 <HAL_UART_IRQHandler+0x1bc>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <HAL_UART_IRQHandler+0x70>
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80a6 	beq.w	80046f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_UART_IRQHandler+0x90>
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_UART_IRQHandler+0xb0>
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f043 0202 	orr.w	r2, r3, #2
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_UART_IRQHandler+0xd0>
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f043 0204 	orr.w	r2, r3, #4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00f      	beq.n	800462e <HAL_UART_IRQHandler+0xfa>
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_UART_IRQHandler+0xee>
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0208 	orr.w	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 811e 	beq.w	8004874 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d007      	beq.n	8004652 <HAL_UART_IRQHandler+0x11e>
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f9e8 	bl	8004a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <HAL_UART_IRQHandler+0x146>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d031      	beq.n	80046de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f92a 	bl	80048d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d023      	beq.n	80046d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d013      	beq.n	80046ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	4a76      	ldr	r2, [pc, #472]	; (8004884 <HAL_UART_IRQHandler+0x350>)
 80046ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd ff18 	bl	80024e8 <HAL_DMA_Abort_IT>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046c8:	4610      	mov	r0, r2
 80046ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	e00e      	b.n	80046ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8ec 	bl	80048ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	e00a      	b.n	80046ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8e8 	bl	80048ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	e006      	b.n	80046ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8e4 	bl	80048ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046ea:	e0c3      	b.n	8004874 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	bf00      	nop
    return;
 80046ee:	e0c1      	b.n	8004874 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 80a1 	bne.w	800483c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 809b 	beq.w	800483c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8095 	beq.w	800483c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d04e      	beq.n	80047d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004740:	8a3b      	ldrh	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8098 	beq.w	8004878 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800474c:	8a3a      	ldrh	r2, [r7, #16]
 800474e:	429a      	cmp	r2, r3
 8004750:	f080 8092 	bcs.w	8004878 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8a3a      	ldrh	r2, [r7, #16]
 8004758:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2b20      	cmp	r3, #32
 8004762:	d02b      	beq.n	80047bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004772:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004792:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0210 	bic.w	r2, r2, #16
 80047b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fe5b 	bl	8002472 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f876 	bl	80048be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047d2:	e051      	b.n	8004878 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d047      	beq.n	800487c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80047ec:	8a7b      	ldrh	r3, [r7, #18]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d044      	beq.n	800487c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004800:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0210 	bic.w	r2, r2, #16
 800482e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004830:	8a7b      	ldrh	r3, [r7, #18]
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f842 	bl	80048be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800483a:	e01f      	b.n	800487c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_UART_IRQHandler+0x324>
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f87f 	bl	8004954 <UART_Transmit_IT>
    return;
 8004856:	e012      	b.n	800487e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00d      	beq.n	800487e <HAL_UART_IRQHandler+0x34a>
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f8c0 	bl	80049f2 <UART_EndTransmit_IT>
    return;
 8004872:	e004      	b.n	800487e <HAL_UART_IRQHandler+0x34a>
    return;
 8004874:	bf00      	nop
 8004876:	e002      	b.n	800487e <HAL_UART_IRQHandler+0x34a>
      return;
 8004878:	bf00      	nop
 800487a:	e000      	b.n	800487e <HAL_UART_IRQHandler+0x34a>
      return;
 800487c:	bf00      	nop
  }
}
 800487e:	3728      	adds	r7, #40	; 0x28
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	0800492d 	.word	0x0800492d

08004888 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0210 	bic.w	r2, r2, #16
 8004912:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff ffb0 	bl	80048ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b21      	cmp	r3, #33	; 0x21
 8004966:	d13e      	bne.n	80049e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004970:	d114      	bne.n	800499c <UART_Transmit_IT+0x48>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d110      	bne.n	800499c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	621a      	str	r2, [r3, #32]
 800499a:	e008      	b.n	80049ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	1c59      	adds	r1, r3, #1
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6211      	str	r1, [r2, #32]
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4619      	mov	r1, r3
 80049bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ff38 	bl	8004888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b22      	cmp	r3, #34	; 0x22
 8004a34:	f040 8099 	bne.w	8004b6a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a40:	d117      	bne.n	8004a72 <UART_Receive_IT+0x50>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d113      	bne.n	8004a72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	1c9a      	adds	r2, r3, #2
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a70:	e026      	b.n	8004ac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a84:	d007      	beq.n	8004a96 <UART_Receive_IT+0x74>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <UART_Receive_IT+0x82>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e008      	b.n	8004ab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4619      	mov	r1, r3
 8004ace:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d148      	bne.n	8004b66 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0220 	bic.w	r2, r2, #32
 8004ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d123      	bne.n	8004b5c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0210 	bic.w	r2, r2, #16
 8004b28:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d10a      	bne.n	8004b4e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff feb2 	bl	80048be <HAL_UARTEx_RxEventCallback>
 8004b5a:	e002      	b.n	8004b62 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fe9c 	bl	800489a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e002      	b.n	8004b6c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e000      	b.n	8004b6c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b6a:	2302      	movs	r3, #2
  }
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bae:	f023 030c 	bic.w	r3, r3, #12
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2c      	ldr	r2, [pc, #176]	; (8004c88 <UART_SetConfig+0x114>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d103      	bne.n	8004be4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fe fbc2 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	e002      	b.n	8004bea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004be4:	f7fe fbaa 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8004be8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009a      	lsls	r2, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <UART_SetConfig+0x118>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	0119      	lsls	r1, r3, #4
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009a      	lsls	r2, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c20:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <UART_SetConfig+0x118>)
 8004c22:	fba3 0302 	umull	r0, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2064      	movs	r0, #100	; 0x64
 8004c2a:	fb00 f303 	mul.w	r3, r0, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	3332      	adds	r3, #50	; 0x32
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <UART_SetConfig+0x118>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c40:	4419      	add	r1, r3
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009a      	lsls	r2, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <UART_SetConfig+0x118>)
 8004c5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	2064      	movs	r0, #100	; 0x64
 8004c62:	fb00 f303 	mul.w	r3, r0, r3
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	3332      	adds	r3, #50	; 0x32
 8004c6c:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <UART_SetConfig+0x118>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	f003 020f 	and.w	r2, r3, #15
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40013800 	.word	0x40013800
 8004c8c:	51eb851f 	.word	0x51eb851f

08004c90 <__errno>:
 8004c90:	4b01      	ldr	r3, [pc, #4]	; (8004c98 <__errno+0x8>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	2000000c 	.word	0x2000000c

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	4d0c      	ldr	r5, [pc, #48]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca2:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	f002 fd2e 	bl	800770c <_init>
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	4d0a      	ldr	r5, [pc, #40]	; (8004cdc <__libc_init_array+0x40>)
 8004cb4:	4c0a      	ldr	r4, [pc, #40]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb6:	1b64      	subs	r4, r4, r5
 8004cb8:	10a4      	asrs	r4, r4, #2
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08007e4c 	.word	0x08007e4c
 8004cd8:	08007e4c 	.word	0x08007e4c
 8004cdc:	08007e4c 	.word	0x08007e4c
 8004ce0:	08007e50 	.word	0x08007e50

08004ce4 <memcpy>:
 8004ce4:	440a      	add	r2, r1
 8004ce6:	4291      	cmp	r1, r2
 8004ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cec:	d100      	bne.n	8004cf0 <memcpy+0xc>
 8004cee:	4770      	bx	lr
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cf6:	4291      	cmp	r1, r2
 8004cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cfc:	d1f9      	bne.n	8004cf2 <memcpy+0xe>
 8004cfe:	bd10      	pop	{r4, pc}

08004d00 <memset>:
 8004d00:	4603      	mov	r3, r0
 8004d02:	4402      	add	r2, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <__cvt>:
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d16:	461f      	mov	r7, r3
 8004d18:	bfbb      	ittet	lt
 8004d1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d1e:	461f      	movlt	r7, r3
 8004d20:	2300      	movge	r3, #0
 8004d22:	232d      	movlt	r3, #45	; 0x2d
 8004d24:	b088      	sub	sp, #32
 8004d26:	4614      	mov	r4, r2
 8004d28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d2c:	7013      	strb	r3, [r2, #0]
 8004d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d34:	f023 0820 	bic.w	r8, r3, #32
 8004d38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d3c:	d005      	beq.n	8004d4a <__cvt+0x3a>
 8004d3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d42:	d100      	bne.n	8004d46 <__cvt+0x36>
 8004d44:	3501      	adds	r5, #1
 8004d46:	2302      	movs	r3, #2
 8004d48:	e000      	b.n	8004d4c <__cvt+0x3c>
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	aa07      	add	r2, sp, #28
 8004d4e:	9204      	str	r2, [sp, #16]
 8004d50:	aa06      	add	r2, sp, #24
 8004d52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d56:	e9cd 3500 	strd	r3, r5, [sp]
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	f000 fcc3 	bl	80056e8 <_dtoa_r>
 8004d62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d66:	4606      	mov	r6, r0
 8004d68:	d102      	bne.n	8004d70 <__cvt+0x60>
 8004d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d6c:	07db      	lsls	r3, r3, #31
 8004d6e:	d522      	bpl.n	8004db6 <__cvt+0xa6>
 8004d70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d74:	eb06 0905 	add.w	r9, r6, r5
 8004d78:	d110      	bne.n	8004d9c <__cvt+0x8c>
 8004d7a:	7833      	ldrb	r3, [r6, #0]
 8004d7c:	2b30      	cmp	r3, #48	; 0x30
 8004d7e:	d10a      	bne.n	8004d96 <__cvt+0x86>
 8004d80:	2200      	movs	r2, #0
 8004d82:	2300      	movs	r3, #0
 8004d84:	4620      	mov	r0, r4
 8004d86:	4639      	mov	r1, r7
 8004d88:	f7fb fe0e 	bl	80009a8 <__aeabi_dcmpeq>
 8004d8c:	b918      	cbnz	r0, 8004d96 <__cvt+0x86>
 8004d8e:	f1c5 0501 	rsb	r5, r5, #1
 8004d92:	f8ca 5000 	str.w	r5, [sl]
 8004d96:	f8da 3000 	ldr.w	r3, [sl]
 8004d9a:	4499      	add	r9, r3
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4620      	mov	r0, r4
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb fe00 	bl	80009a8 <__aeabi_dcmpeq>
 8004da8:	b108      	cbz	r0, 8004dae <__cvt+0x9e>
 8004daa:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dae:	2230      	movs	r2, #48	; 0x30
 8004db0:	9b07      	ldr	r3, [sp, #28]
 8004db2:	454b      	cmp	r3, r9
 8004db4:	d307      	bcc.n	8004dc6 <__cvt+0xb6>
 8004db6:	4630      	mov	r0, r6
 8004db8:	9b07      	ldr	r3, [sp, #28]
 8004dba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004dbc:	1b9b      	subs	r3, r3, r6
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	b008      	add	sp, #32
 8004dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc6:	1c59      	adds	r1, r3, #1
 8004dc8:	9107      	str	r1, [sp, #28]
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e7f0      	b.n	8004db0 <__cvt+0xa0>

08004dce <__exponent>:
 8004dce:	4603      	mov	r3, r0
 8004dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd2:	2900      	cmp	r1, #0
 8004dd4:	f803 2b02 	strb.w	r2, [r3], #2
 8004dd8:	bfb6      	itet	lt
 8004dda:	222d      	movlt	r2, #45	; 0x2d
 8004ddc:	222b      	movge	r2, #43	; 0x2b
 8004dde:	4249      	neglt	r1, r1
 8004de0:	2909      	cmp	r1, #9
 8004de2:	7042      	strb	r2, [r0, #1]
 8004de4:	dd2b      	ble.n	8004e3e <__exponent+0x70>
 8004de6:	f10d 0407 	add.w	r4, sp, #7
 8004dea:	46a4      	mov	ip, r4
 8004dec:	270a      	movs	r7, #10
 8004dee:	fb91 f6f7 	sdiv	r6, r1, r7
 8004df2:	460a      	mov	r2, r1
 8004df4:	46a6      	mov	lr, r4
 8004df6:	fb07 1516 	mls	r5, r7, r6, r1
 8004dfa:	2a63      	cmp	r2, #99	; 0x63
 8004dfc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004e00:	4631      	mov	r1, r6
 8004e02:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e0a:	dcf0      	bgt.n	8004dee <__exponent+0x20>
 8004e0c:	3130      	adds	r1, #48	; 0x30
 8004e0e:	f1ae 0502 	sub.w	r5, lr, #2
 8004e12:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e16:	4629      	mov	r1, r5
 8004e18:	1c44      	adds	r4, r0, #1
 8004e1a:	4561      	cmp	r1, ip
 8004e1c:	d30a      	bcc.n	8004e34 <__exponent+0x66>
 8004e1e:	f10d 0209 	add.w	r2, sp, #9
 8004e22:	eba2 020e 	sub.w	r2, r2, lr
 8004e26:	4565      	cmp	r5, ip
 8004e28:	bf88      	it	hi
 8004e2a:	2200      	movhi	r2, #0
 8004e2c:	4413      	add	r3, r2
 8004e2e:	1a18      	subs	r0, r3, r0
 8004e30:	b003      	add	sp, #12
 8004e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e38:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e3c:	e7ed      	b.n	8004e1a <__exponent+0x4c>
 8004e3e:	2330      	movs	r3, #48	; 0x30
 8004e40:	3130      	adds	r1, #48	; 0x30
 8004e42:	7083      	strb	r3, [r0, #2]
 8004e44:	70c1      	strb	r1, [r0, #3]
 8004e46:	1d03      	adds	r3, r0, #4
 8004e48:	e7f1      	b.n	8004e2e <__exponent+0x60>
	...

08004e4c <_printf_float>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	b091      	sub	sp, #68	; 0x44
 8004e52:	460c      	mov	r4, r1
 8004e54:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e58:	4616      	mov	r6, r2
 8004e5a:	461f      	mov	r7, r3
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	f001 fa31 	bl	80062c4 <_localeconv_r>
 8004e62:	6803      	ldr	r3, [r0, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	9309      	str	r3, [sp, #36]	; 0x24
 8004e68:	f7fb f972 	bl	8000150 <strlen>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	930e      	str	r3, [sp, #56]	; 0x38
 8004e70:	f8d8 3000 	ldr.w	r3, [r8]
 8004e74:	900a      	str	r0, [sp, #40]	; 0x28
 8004e76:	3307      	adds	r3, #7
 8004e78:	f023 0307 	bic.w	r3, r3, #7
 8004e7c:	f103 0208 	add.w	r2, r3, #8
 8004e80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e84:	f8d4 b000 	ldr.w	fp, [r4]
 8004e88:	f8c8 2000 	str.w	r2, [r8]
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e94:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e98:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	4b9c      	ldr	r3, [pc, #624]	; (8005118 <_printf_float+0x2cc>)
 8004ea6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ea8:	f7fb fdb0 	bl	8000a0c <__aeabi_dcmpun>
 8004eac:	bb70      	cbnz	r0, 8004f0c <_printf_float+0xc0>
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4b98      	ldr	r3, [pc, #608]	; (8005118 <_printf_float+0x2cc>)
 8004eb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eb8:	f7fb fd8a 	bl	80009d0 <__aeabi_dcmple>
 8004ebc:	bb30      	cbnz	r0, 8004f0c <_printf_float+0xc0>
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	f7fb fd79 	bl	80009bc <__aeabi_dcmplt>
 8004eca:	b110      	cbz	r0, 8004ed2 <_printf_float+0x86>
 8004ecc:	232d      	movs	r3, #45	; 0x2d
 8004ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed2:	4b92      	ldr	r3, [pc, #584]	; (800511c <_printf_float+0x2d0>)
 8004ed4:	4892      	ldr	r0, [pc, #584]	; (8005120 <_printf_float+0x2d4>)
 8004ed6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004eda:	bf94      	ite	ls
 8004edc:	4698      	movls	r8, r3
 8004ede:	4680      	movhi	r8, r0
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	f04f 0a00 	mov.w	sl, #0
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	f02b 0304 	bic.w	r3, fp, #4
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	4633      	mov	r3, r6
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	9700      	str	r7, [sp, #0]
 8004ef6:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ef8:	f000 f9d4 	bl	80052a4 <_printf_common>
 8004efc:	3001      	adds	r0, #1
 8004efe:	f040 8090 	bne.w	8005022 <_printf_float+0x1d6>
 8004f02:	f04f 30ff 	mov.w	r0, #4294967295
 8004f06:	b011      	add	sp, #68	; 0x44
 8004f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	4653      	mov	r3, sl
 8004f10:	4640      	mov	r0, r8
 8004f12:	4651      	mov	r1, sl
 8004f14:	f7fb fd7a 	bl	8000a0c <__aeabi_dcmpun>
 8004f18:	b148      	cbz	r0, 8004f2e <_printf_float+0xe2>
 8004f1a:	f1ba 0f00 	cmp.w	sl, #0
 8004f1e:	bfb8      	it	lt
 8004f20:	232d      	movlt	r3, #45	; 0x2d
 8004f22:	4880      	ldr	r0, [pc, #512]	; (8005124 <_printf_float+0x2d8>)
 8004f24:	bfb8      	it	lt
 8004f26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f2a:	4b7f      	ldr	r3, [pc, #508]	; (8005128 <_printf_float+0x2dc>)
 8004f2c:	e7d3      	b.n	8004ed6 <_printf_float+0x8a>
 8004f2e:	6863      	ldr	r3, [r4, #4]
 8004f30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	d142      	bne.n	8004fbe <_printf_float+0x172>
 8004f38:	2306      	movs	r3, #6
 8004f3a:	6063      	str	r3, [r4, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	9206      	str	r2, [sp, #24]
 8004f40:	aa0e      	add	r2, sp, #56	; 0x38
 8004f42:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f46:	aa0d      	add	r2, sp, #52	; 0x34
 8004f48:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f4c:	9203      	str	r2, [sp, #12]
 8004f4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	6863      	ldr	r3, [r4, #4]
 8004f5a:	4642      	mov	r2, r8
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4628      	mov	r0, r5
 8004f60:	4653      	mov	r3, sl
 8004f62:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f64:	f7ff fed4 	bl	8004d10 <__cvt>
 8004f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f6a:	4680      	mov	r8, r0
 8004f6c:	2947      	cmp	r1, #71	; 0x47
 8004f6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f70:	d108      	bne.n	8004f84 <_printf_float+0x138>
 8004f72:	1cc8      	adds	r0, r1, #3
 8004f74:	db02      	blt.n	8004f7c <_printf_float+0x130>
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	dd40      	ble.n	8004ffe <_printf_float+0x1b2>
 8004f7c:	f1a9 0902 	sub.w	r9, r9, #2
 8004f80:	fa5f f989 	uxtb.w	r9, r9
 8004f84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f88:	d81f      	bhi.n	8004fca <_printf_float+0x17e>
 8004f8a:	464a      	mov	r2, r9
 8004f8c:	3901      	subs	r1, #1
 8004f8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f92:	910d      	str	r1, [sp, #52]	; 0x34
 8004f94:	f7ff ff1b 	bl	8004dce <__exponent>
 8004f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f9a:	4682      	mov	sl, r0
 8004f9c:	1813      	adds	r3, r2, r0
 8004f9e:	2a01      	cmp	r2, #1
 8004fa0:	6123      	str	r3, [r4, #16]
 8004fa2:	dc02      	bgt.n	8004faa <_printf_float+0x15e>
 8004fa4:	6822      	ldr	r2, [r4, #0]
 8004fa6:	07d2      	lsls	r2, r2, #31
 8004fa8:	d501      	bpl.n	8004fae <_printf_float+0x162>
 8004faa:	3301      	adds	r3, #1
 8004fac:	6123      	str	r3, [r4, #16]
 8004fae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d09b      	beq.n	8004eee <_printf_float+0xa2>
 8004fb6:	232d      	movs	r3, #45	; 0x2d
 8004fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fbc:	e797      	b.n	8004eee <_printf_float+0xa2>
 8004fbe:	2947      	cmp	r1, #71	; 0x47
 8004fc0:	d1bc      	bne.n	8004f3c <_printf_float+0xf0>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ba      	bne.n	8004f3c <_printf_float+0xf0>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e7b7      	b.n	8004f3a <_printf_float+0xee>
 8004fca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004fce:	d118      	bne.n	8005002 <_printf_float+0x1b6>
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	dd0b      	ble.n	8004fee <_printf_float+0x1a2>
 8004fd6:	6121      	str	r1, [r4, #16]
 8004fd8:	b913      	cbnz	r3, 8004fe0 <_printf_float+0x194>
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	07d0      	lsls	r0, r2, #31
 8004fde:	d502      	bpl.n	8004fe6 <_printf_float+0x19a>
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	440b      	add	r3, r1
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	f04f 0a00 	mov.w	sl, #0
 8004fea:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fec:	e7df      	b.n	8004fae <_printf_float+0x162>
 8004fee:	b913      	cbnz	r3, 8004ff6 <_printf_float+0x1aa>
 8004ff0:	6822      	ldr	r2, [r4, #0]
 8004ff2:	07d2      	lsls	r2, r2, #31
 8004ff4:	d501      	bpl.n	8004ffa <_printf_float+0x1ae>
 8004ff6:	3302      	adds	r3, #2
 8004ff8:	e7f4      	b.n	8004fe4 <_printf_float+0x198>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e7f2      	b.n	8004fe4 <_printf_float+0x198>
 8004ffe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005004:	4299      	cmp	r1, r3
 8005006:	db05      	blt.n	8005014 <_printf_float+0x1c8>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	6121      	str	r1, [r4, #16]
 800500c:	07d8      	lsls	r0, r3, #31
 800500e:	d5ea      	bpl.n	8004fe6 <_printf_float+0x19a>
 8005010:	1c4b      	adds	r3, r1, #1
 8005012:	e7e7      	b.n	8004fe4 <_printf_float+0x198>
 8005014:	2900      	cmp	r1, #0
 8005016:	bfcc      	ite	gt
 8005018:	2201      	movgt	r2, #1
 800501a:	f1c1 0202 	rsble	r2, r1, #2
 800501e:	4413      	add	r3, r2
 8005020:	e7e0      	b.n	8004fe4 <_printf_float+0x198>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	055a      	lsls	r2, r3, #21
 8005026:	d407      	bmi.n	8005038 <_printf_float+0x1ec>
 8005028:	6923      	ldr	r3, [r4, #16]
 800502a:	4642      	mov	r2, r8
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	d12b      	bne.n	800508e <_printf_float+0x242>
 8005036:	e764      	b.n	8004f02 <_printf_float+0xb6>
 8005038:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800503c:	f240 80dd 	bls.w	80051fa <_printf_float+0x3ae>
 8005040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005044:	2200      	movs	r2, #0
 8005046:	2300      	movs	r3, #0
 8005048:	f7fb fcae 	bl	80009a8 <__aeabi_dcmpeq>
 800504c:	2800      	cmp	r0, #0
 800504e:	d033      	beq.n	80050b8 <_printf_float+0x26c>
 8005050:	2301      	movs	r3, #1
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	4a35      	ldr	r2, [pc, #212]	; (800512c <_printf_float+0x2e0>)
 8005058:	47b8      	blx	r7
 800505a:	3001      	adds	r0, #1
 800505c:	f43f af51 	beq.w	8004f02 <_printf_float+0xb6>
 8005060:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005064:	429a      	cmp	r2, r3
 8005066:	db02      	blt.n	800506e <_printf_float+0x222>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	07d8      	lsls	r0, r3, #31
 800506c:	d50f      	bpl.n	800508e <_printf_float+0x242>
 800506e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005072:	4631      	mov	r1, r6
 8005074:	4628      	mov	r0, r5
 8005076:	47b8      	blx	r7
 8005078:	3001      	adds	r0, #1
 800507a:	f43f af42 	beq.w	8004f02 <_printf_float+0xb6>
 800507e:	f04f 0800 	mov.w	r8, #0
 8005082:	f104 091a 	add.w	r9, r4, #26
 8005086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005088:	3b01      	subs	r3, #1
 800508a:	4543      	cmp	r3, r8
 800508c:	dc09      	bgt.n	80050a2 <_printf_float+0x256>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	079b      	lsls	r3, r3, #30
 8005092:	f100 8102 	bmi.w	800529a <_printf_float+0x44e>
 8005096:	68e0      	ldr	r0, [r4, #12]
 8005098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800509a:	4298      	cmp	r0, r3
 800509c:	bfb8      	it	lt
 800509e:	4618      	movlt	r0, r3
 80050a0:	e731      	b.n	8004f06 <_printf_float+0xba>
 80050a2:	2301      	movs	r3, #1
 80050a4:	464a      	mov	r2, r9
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f af28 	beq.w	8004f02 <_printf_float+0xb6>
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	e7e6      	b.n	8005086 <_printf_float+0x23a>
 80050b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	dc38      	bgt.n	8005130 <_printf_float+0x2e4>
 80050be:	2301      	movs	r3, #1
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	4a19      	ldr	r2, [pc, #100]	; (800512c <_printf_float+0x2e0>)
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	f43f af1a 	beq.w	8004f02 <_printf_float+0xb6>
 80050ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d102      	bne.n	80050dc <_printf_float+0x290>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	07d9      	lsls	r1, r3, #31
 80050da:	d5d8      	bpl.n	800508e <_printf_float+0x242>
 80050dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e0:	4631      	mov	r1, r6
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	f43f af0b 	beq.w	8004f02 <_printf_float+0xb6>
 80050ec:	f04f 0900 	mov.w	r9, #0
 80050f0:	f104 0a1a 	add.w	sl, r4, #26
 80050f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050f6:	425b      	negs	r3, r3
 80050f8:	454b      	cmp	r3, r9
 80050fa:	dc01      	bgt.n	8005100 <_printf_float+0x2b4>
 80050fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050fe:	e794      	b.n	800502a <_printf_float+0x1de>
 8005100:	2301      	movs	r3, #1
 8005102:	4652      	mov	r2, sl
 8005104:	4631      	mov	r1, r6
 8005106:	4628      	mov	r0, r5
 8005108:	47b8      	blx	r7
 800510a:	3001      	adds	r0, #1
 800510c:	f43f aef9 	beq.w	8004f02 <_printf_float+0xb6>
 8005110:	f109 0901 	add.w	r9, r9, #1
 8005114:	e7ee      	b.n	80050f4 <_printf_float+0x2a8>
 8005116:	bf00      	nop
 8005118:	7fefffff 	.word	0x7fefffff
 800511c:	08007a74 	.word	0x08007a74
 8005120:	08007a78 	.word	0x08007a78
 8005124:	08007a80 	.word	0x08007a80
 8005128:	08007a7c 	.word	0x08007a7c
 800512c:	08007a84 	.word	0x08007a84
 8005130:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005134:	429a      	cmp	r2, r3
 8005136:	bfa8      	it	ge
 8005138:	461a      	movge	r2, r3
 800513a:	2a00      	cmp	r2, #0
 800513c:	4691      	mov	r9, r2
 800513e:	dc37      	bgt.n	80051b0 <_printf_float+0x364>
 8005140:	f04f 0b00 	mov.w	fp, #0
 8005144:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005148:	f104 021a 	add.w	r2, r4, #26
 800514c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005150:	ebaa 0309 	sub.w	r3, sl, r9
 8005154:	455b      	cmp	r3, fp
 8005156:	dc33      	bgt.n	80051c0 <_printf_float+0x374>
 8005158:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800515c:	429a      	cmp	r2, r3
 800515e:	db3b      	blt.n	80051d8 <_printf_float+0x38c>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	07da      	lsls	r2, r3, #31
 8005164:	d438      	bmi.n	80051d8 <_printf_float+0x38c>
 8005166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005168:	990d      	ldr	r1, [sp, #52]	; 0x34
 800516a:	eba3 020a 	sub.w	r2, r3, sl
 800516e:	eba3 0901 	sub.w	r9, r3, r1
 8005172:	4591      	cmp	r9, r2
 8005174:	bfa8      	it	ge
 8005176:	4691      	movge	r9, r2
 8005178:	f1b9 0f00 	cmp.w	r9, #0
 800517c:	dc34      	bgt.n	80051e8 <_printf_float+0x39c>
 800517e:	f04f 0800 	mov.w	r8, #0
 8005182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005186:	f104 0a1a 	add.w	sl, r4, #26
 800518a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	eba3 0309 	sub.w	r3, r3, r9
 8005194:	4543      	cmp	r3, r8
 8005196:	f77f af7a 	ble.w	800508e <_printf_float+0x242>
 800519a:	2301      	movs	r3, #1
 800519c:	4652      	mov	r2, sl
 800519e:	4631      	mov	r1, r6
 80051a0:	4628      	mov	r0, r5
 80051a2:	47b8      	blx	r7
 80051a4:	3001      	adds	r0, #1
 80051a6:	f43f aeac 	beq.w	8004f02 <_printf_float+0xb6>
 80051aa:	f108 0801 	add.w	r8, r8, #1
 80051ae:	e7ec      	b.n	800518a <_printf_float+0x33e>
 80051b0:	4613      	mov	r3, r2
 80051b2:	4631      	mov	r1, r6
 80051b4:	4642      	mov	r2, r8
 80051b6:	4628      	mov	r0, r5
 80051b8:	47b8      	blx	r7
 80051ba:	3001      	adds	r0, #1
 80051bc:	d1c0      	bne.n	8005140 <_printf_float+0x2f4>
 80051be:	e6a0      	b.n	8004f02 <_printf_float+0xb6>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4631      	mov	r1, r6
 80051c4:	4628      	mov	r0, r5
 80051c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	f43f ae99 	beq.w	8004f02 <_printf_float+0xb6>
 80051d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051d2:	f10b 0b01 	add.w	fp, fp, #1
 80051d6:	e7b9      	b.n	800514c <_printf_float+0x300>
 80051d8:	4631      	mov	r1, r6
 80051da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	d1bf      	bne.n	8005166 <_printf_float+0x31a>
 80051e6:	e68c      	b.n	8004f02 <_printf_float+0xb6>
 80051e8:	464b      	mov	r3, r9
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	eb08 020a 	add.w	r2, r8, sl
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	d1c2      	bne.n	800517e <_printf_float+0x332>
 80051f8:	e683      	b.n	8004f02 <_printf_float+0xb6>
 80051fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051fc:	2a01      	cmp	r2, #1
 80051fe:	dc01      	bgt.n	8005204 <_printf_float+0x3b8>
 8005200:	07db      	lsls	r3, r3, #31
 8005202:	d537      	bpl.n	8005274 <_printf_float+0x428>
 8005204:	2301      	movs	r3, #1
 8005206:	4642      	mov	r2, r8
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	f43f ae77 	beq.w	8004f02 <_printf_float+0xb6>
 8005214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f ae6f 	beq.w	8004f02 <_printf_float+0xb6>
 8005224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	f7fb fbbc 	bl	80009a8 <__aeabi_dcmpeq>
 8005230:	b9d8      	cbnz	r0, 800526a <_printf_float+0x41e>
 8005232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005234:	f108 0201 	add.w	r2, r8, #1
 8005238:	3b01      	subs	r3, #1
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	d10e      	bne.n	8005262 <_printf_float+0x416>
 8005244:	e65d      	b.n	8004f02 <_printf_float+0xb6>
 8005246:	2301      	movs	r3, #1
 8005248:	464a      	mov	r2, r9
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	47b8      	blx	r7
 8005250:	3001      	adds	r0, #1
 8005252:	f43f ae56 	beq.w	8004f02 <_printf_float+0xb6>
 8005256:	f108 0801 	add.w	r8, r8, #1
 800525a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800525c:	3b01      	subs	r3, #1
 800525e:	4543      	cmp	r3, r8
 8005260:	dcf1      	bgt.n	8005246 <_printf_float+0x3fa>
 8005262:	4653      	mov	r3, sl
 8005264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005268:	e6e0      	b.n	800502c <_printf_float+0x1e0>
 800526a:	f04f 0800 	mov.w	r8, #0
 800526e:	f104 091a 	add.w	r9, r4, #26
 8005272:	e7f2      	b.n	800525a <_printf_float+0x40e>
 8005274:	2301      	movs	r3, #1
 8005276:	4642      	mov	r2, r8
 8005278:	e7df      	b.n	800523a <_printf_float+0x3ee>
 800527a:	2301      	movs	r3, #1
 800527c:	464a      	mov	r2, r9
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	f43f ae3c 	beq.w	8004f02 <_printf_float+0xb6>
 800528a:	f108 0801 	add.w	r8, r8, #1
 800528e:	68e3      	ldr	r3, [r4, #12]
 8005290:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005292:	1a5b      	subs	r3, r3, r1
 8005294:	4543      	cmp	r3, r8
 8005296:	dcf0      	bgt.n	800527a <_printf_float+0x42e>
 8005298:	e6fd      	b.n	8005096 <_printf_float+0x24a>
 800529a:	f04f 0800 	mov.w	r8, #0
 800529e:	f104 0919 	add.w	r9, r4, #25
 80052a2:	e7f4      	b.n	800528e <_printf_float+0x442>

080052a4 <_printf_common>:
 80052a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a8:	4616      	mov	r6, r2
 80052aa:	4699      	mov	r9, r3
 80052ac:	688a      	ldr	r2, [r1, #8]
 80052ae:	690b      	ldr	r3, [r1, #16]
 80052b0:	4607      	mov	r7, r0
 80052b2:	4293      	cmp	r3, r2
 80052b4:	bfb8      	it	lt
 80052b6:	4613      	movlt	r3, r2
 80052b8:	6033      	str	r3, [r6, #0]
 80052ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052be:	460c      	mov	r4, r1
 80052c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c4:	b10a      	cbz	r2, 80052ca <_printf_common+0x26>
 80052c6:	3301      	adds	r3, #1
 80052c8:	6033      	str	r3, [r6, #0]
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	0699      	lsls	r1, r3, #26
 80052ce:	bf42      	ittt	mi
 80052d0:	6833      	ldrmi	r3, [r6, #0]
 80052d2:	3302      	addmi	r3, #2
 80052d4:	6033      	strmi	r3, [r6, #0]
 80052d6:	6825      	ldr	r5, [r4, #0]
 80052d8:	f015 0506 	ands.w	r5, r5, #6
 80052dc:	d106      	bne.n	80052ec <_printf_common+0x48>
 80052de:	f104 0a19 	add.w	sl, r4, #25
 80052e2:	68e3      	ldr	r3, [r4, #12]
 80052e4:	6832      	ldr	r2, [r6, #0]
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	42ab      	cmp	r3, r5
 80052ea:	dc28      	bgt.n	800533e <_printf_common+0x9a>
 80052ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052f0:	1e13      	subs	r3, r2, #0
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	bf18      	it	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	0692      	lsls	r2, r2, #26
 80052fa:	d42d      	bmi.n	8005358 <_printf_common+0xb4>
 80052fc:	4649      	mov	r1, r9
 80052fe:	4638      	mov	r0, r7
 8005300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005304:	47c0      	blx	r8
 8005306:	3001      	adds	r0, #1
 8005308:	d020      	beq.n	800534c <_printf_common+0xa8>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	68e5      	ldr	r5, [r4, #12]
 800530e:	f003 0306 	and.w	r3, r3, #6
 8005312:	2b04      	cmp	r3, #4
 8005314:	bf18      	it	ne
 8005316:	2500      	movne	r5, #0
 8005318:	6832      	ldr	r2, [r6, #0]
 800531a:	f04f 0600 	mov.w	r6, #0
 800531e:	68a3      	ldr	r3, [r4, #8]
 8005320:	bf08      	it	eq
 8005322:	1aad      	subeq	r5, r5, r2
 8005324:	6922      	ldr	r2, [r4, #16]
 8005326:	bf08      	it	eq
 8005328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800532c:	4293      	cmp	r3, r2
 800532e:	bfc4      	itt	gt
 8005330:	1a9b      	subgt	r3, r3, r2
 8005332:	18ed      	addgt	r5, r5, r3
 8005334:	341a      	adds	r4, #26
 8005336:	42b5      	cmp	r5, r6
 8005338:	d11a      	bne.n	8005370 <_printf_common+0xcc>
 800533a:	2000      	movs	r0, #0
 800533c:	e008      	b.n	8005350 <_printf_common+0xac>
 800533e:	2301      	movs	r3, #1
 8005340:	4652      	mov	r2, sl
 8005342:	4649      	mov	r1, r9
 8005344:	4638      	mov	r0, r7
 8005346:	47c0      	blx	r8
 8005348:	3001      	adds	r0, #1
 800534a:	d103      	bne.n	8005354 <_printf_common+0xb0>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005354:	3501      	adds	r5, #1
 8005356:	e7c4      	b.n	80052e2 <_printf_common+0x3e>
 8005358:	2030      	movs	r0, #48	; 0x30
 800535a:	18e1      	adds	r1, r4, r3
 800535c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005366:	4422      	add	r2, r4
 8005368:	3302      	adds	r3, #2
 800536a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800536e:	e7c5      	b.n	80052fc <_printf_common+0x58>
 8005370:	2301      	movs	r3, #1
 8005372:	4622      	mov	r2, r4
 8005374:	4649      	mov	r1, r9
 8005376:	4638      	mov	r0, r7
 8005378:	47c0      	blx	r8
 800537a:	3001      	adds	r0, #1
 800537c:	d0e6      	beq.n	800534c <_printf_common+0xa8>
 800537e:	3601      	adds	r6, #1
 8005380:	e7d9      	b.n	8005336 <_printf_common+0x92>
	...

08005384 <_printf_i>:
 8005384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	7e0f      	ldrb	r7, [r1, #24]
 800538a:	4691      	mov	r9, r2
 800538c:	2f78      	cmp	r7, #120	; 0x78
 800538e:	4680      	mov	r8, r0
 8005390:	460c      	mov	r4, r1
 8005392:	469a      	mov	sl, r3
 8005394:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800539a:	d807      	bhi.n	80053ac <_printf_i+0x28>
 800539c:	2f62      	cmp	r7, #98	; 0x62
 800539e:	d80a      	bhi.n	80053b6 <_printf_i+0x32>
 80053a0:	2f00      	cmp	r7, #0
 80053a2:	f000 80d9 	beq.w	8005558 <_printf_i+0x1d4>
 80053a6:	2f58      	cmp	r7, #88	; 0x58
 80053a8:	f000 80a4 	beq.w	80054f4 <_printf_i+0x170>
 80053ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053b4:	e03a      	b.n	800542c <_printf_i+0xa8>
 80053b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ba:	2b15      	cmp	r3, #21
 80053bc:	d8f6      	bhi.n	80053ac <_printf_i+0x28>
 80053be:	a101      	add	r1, pc, #4	; (adr r1, 80053c4 <_printf_i+0x40>)
 80053c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	08005431 	.word	0x08005431
 80053cc:	080053ad 	.word	0x080053ad
 80053d0:	080053ad 	.word	0x080053ad
 80053d4:	080053ad 	.word	0x080053ad
 80053d8:	080053ad 	.word	0x080053ad
 80053dc:	08005431 	.word	0x08005431
 80053e0:	080053ad 	.word	0x080053ad
 80053e4:	080053ad 	.word	0x080053ad
 80053e8:	080053ad 	.word	0x080053ad
 80053ec:	080053ad 	.word	0x080053ad
 80053f0:	0800553f 	.word	0x0800553f
 80053f4:	08005461 	.word	0x08005461
 80053f8:	08005521 	.word	0x08005521
 80053fc:	080053ad 	.word	0x080053ad
 8005400:	080053ad 	.word	0x080053ad
 8005404:	08005561 	.word	0x08005561
 8005408:	080053ad 	.word	0x080053ad
 800540c:	08005461 	.word	0x08005461
 8005410:	080053ad 	.word	0x080053ad
 8005414:	080053ad 	.word	0x080053ad
 8005418:	08005529 	.word	0x08005529
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	1d1a      	adds	r2, r3, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	602a      	str	r2, [r5, #0]
 8005424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800542c:	2301      	movs	r3, #1
 800542e:	e0a4      	b.n	800557a <_printf_i+0x1f6>
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	6829      	ldr	r1, [r5, #0]
 8005434:	0606      	lsls	r6, r0, #24
 8005436:	f101 0304 	add.w	r3, r1, #4
 800543a:	d50a      	bpl.n	8005452 <_printf_i+0xce>
 800543c:	680e      	ldr	r6, [r1, #0]
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	2e00      	cmp	r6, #0
 8005442:	da03      	bge.n	800544c <_printf_i+0xc8>
 8005444:	232d      	movs	r3, #45	; 0x2d
 8005446:	4276      	negs	r6, r6
 8005448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800544c:	230a      	movs	r3, #10
 800544e:	485e      	ldr	r0, [pc, #376]	; (80055c8 <_printf_i+0x244>)
 8005450:	e019      	b.n	8005486 <_printf_i+0x102>
 8005452:	680e      	ldr	r6, [r1, #0]
 8005454:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	bf18      	it	ne
 800545c:	b236      	sxthne	r6, r6
 800545e:	e7ef      	b.n	8005440 <_printf_i+0xbc>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	6820      	ldr	r0, [r4, #0]
 8005464:	1d19      	adds	r1, r3, #4
 8005466:	6029      	str	r1, [r5, #0]
 8005468:	0601      	lsls	r1, r0, #24
 800546a:	d501      	bpl.n	8005470 <_printf_i+0xec>
 800546c:	681e      	ldr	r6, [r3, #0]
 800546e:	e002      	b.n	8005476 <_printf_i+0xf2>
 8005470:	0646      	lsls	r6, r0, #25
 8005472:	d5fb      	bpl.n	800546c <_printf_i+0xe8>
 8005474:	881e      	ldrh	r6, [r3, #0]
 8005476:	2f6f      	cmp	r7, #111	; 0x6f
 8005478:	bf0c      	ite	eq
 800547a:	2308      	moveq	r3, #8
 800547c:	230a      	movne	r3, #10
 800547e:	4852      	ldr	r0, [pc, #328]	; (80055c8 <_printf_i+0x244>)
 8005480:	2100      	movs	r1, #0
 8005482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005486:	6865      	ldr	r5, [r4, #4]
 8005488:	2d00      	cmp	r5, #0
 800548a:	bfa8      	it	ge
 800548c:	6821      	ldrge	r1, [r4, #0]
 800548e:	60a5      	str	r5, [r4, #8]
 8005490:	bfa4      	itt	ge
 8005492:	f021 0104 	bicge.w	r1, r1, #4
 8005496:	6021      	strge	r1, [r4, #0]
 8005498:	b90e      	cbnz	r6, 800549e <_printf_i+0x11a>
 800549a:	2d00      	cmp	r5, #0
 800549c:	d04d      	beq.n	800553a <_printf_i+0x1b6>
 800549e:	4615      	mov	r5, r2
 80054a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80054a4:	fb03 6711 	mls	r7, r3, r1, r6
 80054a8:	5dc7      	ldrb	r7, [r0, r7]
 80054aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054ae:	4637      	mov	r7, r6
 80054b0:	42bb      	cmp	r3, r7
 80054b2:	460e      	mov	r6, r1
 80054b4:	d9f4      	bls.n	80054a0 <_printf_i+0x11c>
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d10b      	bne.n	80054d2 <_printf_i+0x14e>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	07de      	lsls	r6, r3, #31
 80054be:	d508      	bpl.n	80054d2 <_printf_i+0x14e>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	6861      	ldr	r1, [r4, #4]
 80054c4:	4299      	cmp	r1, r3
 80054c6:	bfde      	ittt	le
 80054c8:	2330      	movle	r3, #48	; 0x30
 80054ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054d2:	1b52      	subs	r2, r2, r5
 80054d4:	6122      	str	r2, [r4, #16]
 80054d6:	464b      	mov	r3, r9
 80054d8:	4621      	mov	r1, r4
 80054da:	4640      	mov	r0, r8
 80054dc:	f8cd a000 	str.w	sl, [sp]
 80054e0:	aa03      	add	r2, sp, #12
 80054e2:	f7ff fedf 	bl	80052a4 <_printf_common>
 80054e6:	3001      	adds	r0, #1
 80054e8:	d14c      	bne.n	8005584 <_printf_i+0x200>
 80054ea:	f04f 30ff 	mov.w	r0, #4294967295
 80054ee:	b004      	add	sp, #16
 80054f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f4:	4834      	ldr	r0, [pc, #208]	; (80055c8 <_printf_i+0x244>)
 80054f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054fa:	6829      	ldr	r1, [r5, #0]
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8005502:	6029      	str	r1, [r5, #0]
 8005504:	061d      	lsls	r5, r3, #24
 8005506:	d514      	bpl.n	8005532 <_printf_i+0x1ae>
 8005508:	07df      	lsls	r7, r3, #31
 800550a:	bf44      	itt	mi
 800550c:	f043 0320 	orrmi.w	r3, r3, #32
 8005510:	6023      	strmi	r3, [r4, #0]
 8005512:	b91e      	cbnz	r6, 800551c <_printf_i+0x198>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	f023 0320 	bic.w	r3, r3, #32
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	2310      	movs	r3, #16
 800551e:	e7af      	b.n	8005480 <_printf_i+0xfc>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	f043 0320 	orr.w	r3, r3, #32
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	2378      	movs	r3, #120	; 0x78
 800552a:	4828      	ldr	r0, [pc, #160]	; (80055cc <_printf_i+0x248>)
 800552c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005530:	e7e3      	b.n	80054fa <_printf_i+0x176>
 8005532:	0659      	lsls	r1, r3, #25
 8005534:	bf48      	it	mi
 8005536:	b2b6      	uxthmi	r6, r6
 8005538:	e7e6      	b.n	8005508 <_printf_i+0x184>
 800553a:	4615      	mov	r5, r2
 800553c:	e7bb      	b.n	80054b6 <_printf_i+0x132>
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	6826      	ldr	r6, [r4, #0]
 8005542:	1d18      	adds	r0, r3, #4
 8005544:	6961      	ldr	r1, [r4, #20]
 8005546:	6028      	str	r0, [r5, #0]
 8005548:	0635      	lsls	r5, r6, #24
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	d501      	bpl.n	8005552 <_printf_i+0x1ce>
 800554e:	6019      	str	r1, [r3, #0]
 8005550:	e002      	b.n	8005558 <_printf_i+0x1d4>
 8005552:	0670      	lsls	r0, r6, #25
 8005554:	d5fb      	bpl.n	800554e <_printf_i+0x1ca>
 8005556:	8019      	strh	r1, [r3, #0]
 8005558:	2300      	movs	r3, #0
 800555a:	4615      	mov	r5, r2
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	e7ba      	b.n	80054d6 <_printf_i+0x152>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	2100      	movs	r1, #0
 8005564:	1d1a      	adds	r2, r3, #4
 8005566:	602a      	str	r2, [r5, #0]
 8005568:	681d      	ldr	r5, [r3, #0]
 800556a:	6862      	ldr	r2, [r4, #4]
 800556c:	4628      	mov	r0, r5
 800556e:	f000 feb5 	bl	80062dc <memchr>
 8005572:	b108      	cbz	r0, 8005578 <_printf_i+0x1f4>
 8005574:	1b40      	subs	r0, r0, r5
 8005576:	6060      	str	r0, [r4, #4]
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	6123      	str	r3, [r4, #16]
 800557c:	2300      	movs	r3, #0
 800557e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005582:	e7a8      	b.n	80054d6 <_printf_i+0x152>
 8005584:	462a      	mov	r2, r5
 8005586:	4649      	mov	r1, r9
 8005588:	4640      	mov	r0, r8
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	47d0      	blx	sl
 800558e:	3001      	adds	r0, #1
 8005590:	d0ab      	beq.n	80054ea <_printf_i+0x166>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	079b      	lsls	r3, r3, #30
 8005596:	d413      	bmi.n	80055c0 <_printf_i+0x23c>
 8005598:	68e0      	ldr	r0, [r4, #12]
 800559a:	9b03      	ldr	r3, [sp, #12]
 800559c:	4298      	cmp	r0, r3
 800559e:	bfb8      	it	lt
 80055a0:	4618      	movlt	r0, r3
 80055a2:	e7a4      	b.n	80054ee <_printf_i+0x16a>
 80055a4:	2301      	movs	r3, #1
 80055a6:	4632      	mov	r2, r6
 80055a8:	4649      	mov	r1, r9
 80055aa:	4640      	mov	r0, r8
 80055ac:	47d0      	blx	sl
 80055ae:	3001      	adds	r0, #1
 80055b0:	d09b      	beq.n	80054ea <_printf_i+0x166>
 80055b2:	3501      	adds	r5, #1
 80055b4:	68e3      	ldr	r3, [r4, #12]
 80055b6:	9903      	ldr	r1, [sp, #12]
 80055b8:	1a5b      	subs	r3, r3, r1
 80055ba:	42ab      	cmp	r3, r5
 80055bc:	dcf2      	bgt.n	80055a4 <_printf_i+0x220>
 80055be:	e7eb      	b.n	8005598 <_printf_i+0x214>
 80055c0:	2500      	movs	r5, #0
 80055c2:	f104 0619 	add.w	r6, r4, #25
 80055c6:	e7f5      	b.n	80055b4 <_printf_i+0x230>
 80055c8:	08007a86 	.word	0x08007a86
 80055cc:	08007a97 	.word	0x08007a97

080055d0 <quorem>:
 80055d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	6903      	ldr	r3, [r0, #16]
 80055d6:	690c      	ldr	r4, [r1, #16]
 80055d8:	4607      	mov	r7, r0
 80055da:	42a3      	cmp	r3, r4
 80055dc:	f2c0 8082 	blt.w	80056e4 <quorem+0x114>
 80055e0:	3c01      	subs	r4, #1
 80055e2:	f100 0514 	add.w	r5, r0, #20
 80055e6:	f101 0814 	add.w	r8, r1, #20
 80055ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f8:	3301      	adds	r3, #1
 80055fa:	429a      	cmp	r2, r3
 80055fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005600:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005604:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005608:	d331      	bcc.n	800566e <quorem+0x9e>
 800560a:	f04f 0e00 	mov.w	lr, #0
 800560e:	4640      	mov	r0, r8
 8005610:	46ac      	mov	ip, r5
 8005612:	46f2      	mov	sl, lr
 8005614:	f850 2b04 	ldr.w	r2, [r0], #4
 8005618:	b293      	uxth	r3, r2
 800561a:	fb06 e303 	mla	r3, r6, r3, lr
 800561e:	0c12      	lsrs	r2, r2, #16
 8005620:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005624:	b29b      	uxth	r3, r3
 8005626:	fb06 e202 	mla	r2, r6, r2, lr
 800562a:	ebaa 0303 	sub.w	r3, sl, r3
 800562e:	f8dc a000 	ldr.w	sl, [ip]
 8005632:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005636:	fa1f fa8a 	uxth.w	sl, sl
 800563a:	4453      	add	r3, sl
 800563c:	f8dc a000 	ldr.w	sl, [ip]
 8005640:	b292      	uxth	r2, r2
 8005642:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005646:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800564a:	b29b      	uxth	r3, r3
 800564c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005650:	4581      	cmp	r9, r0
 8005652:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005656:	f84c 3b04 	str.w	r3, [ip], #4
 800565a:	d2db      	bcs.n	8005614 <quorem+0x44>
 800565c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005660:	b92b      	cbnz	r3, 800566e <quorem+0x9e>
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	3b04      	subs	r3, #4
 8005666:	429d      	cmp	r5, r3
 8005668:	461a      	mov	r2, r3
 800566a:	d32f      	bcc.n	80056cc <quorem+0xfc>
 800566c:	613c      	str	r4, [r7, #16]
 800566e:	4638      	mov	r0, r7
 8005670:	f001 f8c0 	bl	80067f4 <__mcmp>
 8005674:	2800      	cmp	r0, #0
 8005676:	db25      	blt.n	80056c4 <quorem+0xf4>
 8005678:	4628      	mov	r0, r5
 800567a:	f04f 0c00 	mov.w	ip, #0
 800567e:	3601      	adds	r6, #1
 8005680:	f858 1b04 	ldr.w	r1, [r8], #4
 8005684:	f8d0 e000 	ldr.w	lr, [r0]
 8005688:	b28b      	uxth	r3, r1
 800568a:	ebac 0303 	sub.w	r3, ip, r3
 800568e:	fa1f f28e 	uxth.w	r2, lr
 8005692:	4413      	add	r3, r2
 8005694:	0c0a      	lsrs	r2, r1, #16
 8005696:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800569a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800569e:	b29b      	uxth	r3, r3
 80056a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056a4:	45c1      	cmp	r9, r8
 80056a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056aa:	f840 3b04 	str.w	r3, [r0], #4
 80056ae:	d2e7      	bcs.n	8005680 <quorem+0xb0>
 80056b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056b8:	b922      	cbnz	r2, 80056c4 <quorem+0xf4>
 80056ba:	3b04      	subs	r3, #4
 80056bc:	429d      	cmp	r5, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	d30a      	bcc.n	80056d8 <quorem+0x108>
 80056c2:	613c      	str	r4, [r7, #16]
 80056c4:	4630      	mov	r0, r6
 80056c6:	b003      	add	sp, #12
 80056c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	3b04      	subs	r3, #4
 80056d0:	2a00      	cmp	r2, #0
 80056d2:	d1cb      	bne.n	800566c <quorem+0x9c>
 80056d4:	3c01      	subs	r4, #1
 80056d6:	e7c6      	b.n	8005666 <quorem+0x96>
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	3b04      	subs	r3, #4
 80056dc:	2a00      	cmp	r2, #0
 80056de:	d1f0      	bne.n	80056c2 <quorem+0xf2>
 80056e0:	3c01      	subs	r4, #1
 80056e2:	e7eb      	b.n	80056bc <quorem+0xec>
 80056e4:	2000      	movs	r0, #0
 80056e6:	e7ee      	b.n	80056c6 <quorem+0xf6>

080056e8 <_dtoa_r>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	4616      	mov	r6, r2
 80056ee:	461f      	mov	r7, r3
 80056f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80056f2:	b099      	sub	sp, #100	; 0x64
 80056f4:	4605      	mov	r5, r0
 80056f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80056fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80056fe:	b974      	cbnz	r4, 800571e <_dtoa_r+0x36>
 8005700:	2010      	movs	r0, #16
 8005702:	f000 fde3 	bl	80062cc <malloc>
 8005706:	4602      	mov	r2, r0
 8005708:	6268      	str	r0, [r5, #36]	; 0x24
 800570a:	b920      	cbnz	r0, 8005716 <_dtoa_r+0x2e>
 800570c:	21ea      	movs	r1, #234	; 0xea
 800570e:	4ba8      	ldr	r3, [pc, #672]	; (80059b0 <_dtoa_r+0x2c8>)
 8005710:	48a8      	ldr	r0, [pc, #672]	; (80059b4 <_dtoa_r+0x2cc>)
 8005712:	f001 fa73 	bl	8006bfc <__assert_func>
 8005716:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800571a:	6004      	str	r4, [r0, #0]
 800571c:	60c4      	str	r4, [r0, #12]
 800571e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005720:	6819      	ldr	r1, [r3, #0]
 8005722:	b151      	cbz	r1, 800573a <_dtoa_r+0x52>
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	2301      	movs	r3, #1
 8005728:	4093      	lsls	r3, r2
 800572a:	604a      	str	r2, [r1, #4]
 800572c:	608b      	str	r3, [r1, #8]
 800572e:	4628      	mov	r0, r5
 8005730:	f000 fe22 	bl	8006378 <_Bfree>
 8005734:	2200      	movs	r2, #0
 8005736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	1e3b      	subs	r3, r7, #0
 800573c:	bfaf      	iteee	ge
 800573e:	2300      	movge	r3, #0
 8005740:	2201      	movlt	r2, #1
 8005742:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005746:	9305      	strlt	r3, [sp, #20]
 8005748:	bfa8      	it	ge
 800574a:	f8c8 3000 	strge.w	r3, [r8]
 800574e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005752:	4b99      	ldr	r3, [pc, #612]	; (80059b8 <_dtoa_r+0x2d0>)
 8005754:	bfb8      	it	lt
 8005756:	f8c8 2000 	strlt.w	r2, [r8]
 800575a:	ea33 0309 	bics.w	r3, r3, r9
 800575e:	d119      	bne.n	8005794 <_dtoa_r+0xac>
 8005760:	f242 730f 	movw	r3, #9999	; 0x270f
 8005764:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800576c:	4333      	orrs	r3, r6
 800576e:	f000 857f 	beq.w	8006270 <_dtoa_r+0xb88>
 8005772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005774:	b953      	cbnz	r3, 800578c <_dtoa_r+0xa4>
 8005776:	4b91      	ldr	r3, [pc, #580]	; (80059bc <_dtoa_r+0x2d4>)
 8005778:	e022      	b.n	80057c0 <_dtoa_r+0xd8>
 800577a:	4b91      	ldr	r3, [pc, #580]	; (80059c0 <_dtoa_r+0x2d8>)
 800577c:	9303      	str	r3, [sp, #12]
 800577e:	3308      	adds	r3, #8
 8005780:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	9803      	ldr	r0, [sp, #12]
 8005786:	b019      	add	sp, #100	; 0x64
 8005788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578c:	4b8b      	ldr	r3, [pc, #556]	; (80059bc <_dtoa_r+0x2d4>)
 800578e:	9303      	str	r3, [sp, #12]
 8005790:	3303      	adds	r3, #3
 8005792:	e7f5      	b.n	8005780 <_dtoa_r+0x98>
 8005794:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005798:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800579c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057a0:	2200      	movs	r2, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	f7fb f900 	bl	80009a8 <__aeabi_dcmpeq>
 80057a8:	4680      	mov	r8, r0
 80057aa:	b158      	cbz	r0, 80057c4 <_dtoa_r+0xdc>
 80057ac:	2301      	movs	r3, #1
 80057ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8558 	beq.w	800626a <_dtoa_r+0xb82>
 80057ba:	4882      	ldr	r0, [pc, #520]	; (80059c4 <_dtoa_r+0x2dc>)
 80057bc:	6018      	str	r0, [r3, #0]
 80057be:	1e43      	subs	r3, r0, #1
 80057c0:	9303      	str	r3, [sp, #12]
 80057c2:	e7df      	b.n	8005784 <_dtoa_r+0x9c>
 80057c4:	ab16      	add	r3, sp, #88	; 0x58
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	ab17      	add	r3, sp, #92	; 0x5c
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	4628      	mov	r0, r5
 80057ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80057d2:	f001 f8b7 	bl	8006944 <__d2b>
 80057d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80057da:	4683      	mov	fp, r0
 80057dc:	2c00      	cmp	r4, #0
 80057de:	d07f      	beq.n	80058e0 <_dtoa_r+0x1f8>
 80057e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80057ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80057f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80057f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80057fa:	2200      	movs	r2, #0
 80057fc:	4b72      	ldr	r3, [pc, #456]	; (80059c8 <_dtoa_r+0x2e0>)
 80057fe:	f7fa fcb3 	bl	8000168 <__aeabi_dsub>
 8005802:	a365      	add	r3, pc, #404	; (adr r3, 8005998 <_dtoa_r+0x2b0>)
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f7fa fe66 	bl	80004d8 <__aeabi_dmul>
 800580c:	a364      	add	r3, pc, #400	; (adr r3, 80059a0 <_dtoa_r+0x2b8>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fcab 	bl	800016c <__adddf3>
 8005816:	4606      	mov	r6, r0
 8005818:	4620      	mov	r0, r4
 800581a:	460f      	mov	r7, r1
 800581c:	f7fa fdf2 	bl	8000404 <__aeabi_i2d>
 8005820:	a361      	add	r3, pc, #388	; (adr r3, 80059a8 <_dtoa_r+0x2c0>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	f7fa fe57 	bl	80004d8 <__aeabi_dmul>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4630      	mov	r0, r6
 8005830:	4639      	mov	r1, r7
 8005832:	f7fa fc9b 	bl	800016c <__adddf3>
 8005836:	4606      	mov	r6, r0
 8005838:	460f      	mov	r7, r1
 800583a:	f7fb f8fd 	bl	8000a38 <__aeabi_d2iz>
 800583e:	2200      	movs	r2, #0
 8005840:	4682      	mov	sl, r0
 8005842:	2300      	movs	r3, #0
 8005844:	4630      	mov	r0, r6
 8005846:	4639      	mov	r1, r7
 8005848:	f7fb f8b8 	bl	80009bc <__aeabi_dcmplt>
 800584c:	b148      	cbz	r0, 8005862 <_dtoa_r+0x17a>
 800584e:	4650      	mov	r0, sl
 8005850:	f7fa fdd8 	bl	8000404 <__aeabi_i2d>
 8005854:	4632      	mov	r2, r6
 8005856:	463b      	mov	r3, r7
 8005858:	f7fb f8a6 	bl	80009a8 <__aeabi_dcmpeq>
 800585c:	b908      	cbnz	r0, 8005862 <_dtoa_r+0x17a>
 800585e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005862:	f1ba 0f16 	cmp.w	sl, #22
 8005866:	d858      	bhi.n	800591a <_dtoa_r+0x232>
 8005868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800586c:	4b57      	ldr	r3, [pc, #348]	; (80059cc <_dtoa_r+0x2e4>)
 800586e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fb f8a1 	bl	80009bc <__aeabi_dcmplt>
 800587a:	2800      	cmp	r0, #0
 800587c:	d04f      	beq.n	800591e <_dtoa_r+0x236>
 800587e:	2300      	movs	r3, #0
 8005880:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005884:	930f      	str	r3, [sp, #60]	; 0x3c
 8005886:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005888:	1b1c      	subs	r4, r3, r4
 800588a:	1e63      	subs	r3, r4, #1
 800588c:	9309      	str	r3, [sp, #36]	; 0x24
 800588e:	bf49      	itett	mi
 8005890:	f1c4 0301 	rsbmi	r3, r4, #1
 8005894:	2300      	movpl	r3, #0
 8005896:	9306      	strmi	r3, [sp, #24]
 8005898:	2300      	movmi	r3, #0
 800589a:	bf54      	ite	pl
 800589c:	9306      	strpl	r3, [sp, #24]
 800589e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80058a0:	f1ba 0f00 	cmp.w	sl, #0
 80058a4:	db3d      	blt.n	8005922 <_dtoa_r+0x23a>
 80058a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80058ac:	4453      	add	r3, sl
 80058ae:	9309      	str	r3, [sp, #36]	; 0x24
 80058b0:	2300      	movs	r3, #0
 80058b2:	930a      	str	r3, [sp, #40]	; 0x28
 80058b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058b6:	2b09      	cmp	r3, #9
 80058b8:	f200 808c 	bhi.w	80059d4 <_dtoa_r+0x2ec>
 80058bc:	2b05      	cmp	r3, #5
 80058be:	bfc4      	itt	gt
 80058c0:	3b04      	subgt	r3, #4
 80058c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80058c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058c6:	bfc8      	it	gt
 80058c8:	2400      	movgt	r4, #0
 80058ca:	f1a3 0302 	sub.w	r3, r3, #2
 80058ce:	bfd8      	it	le
 80058d0:	2401      	movle	r4, #1
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	f200 808a 	bhi.w	80059ec <_dtoa_r+0x304>
 80058d8:	e8df f003 	tbb	[pc, r3]
 80058dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80058e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80058e4:	441c      	add	r4, r3
 80058e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	bfc3      	ittte	gt
 80058ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80058f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80058fa:	f1c3 0320 	rsble	r3, r3, #32
 80058fe:	bfc6      	itte	gt
 8005900:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005904:	4318      	orrgt	r0, r3
 8005906:	fa06 f003 	lslle.w	r0, r6, r3
 800590a:	f7fa fd6b 	bl	80003e4 <__aeabi_ui2d>
 800590e:	2301      	movs	r3, #1
 8005910:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005914:	3c01      	subs	r4, #1
 8005916:	9313      	str	r3, [sp, #76]	; 0x4c
 8005918:	e76f      	b.n	80057fa <_dtoa_r+0x112>
 800591a:	2301      	movs	r3, #1
 800591c:	e7b2      	b.n	8005884 <_dtoa_r+0x19c>
 800591e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005920:	e7b1      	b.n	8005886 <_dtoa_r+0x19e>
 8005922:	9b06      	ldr	r3, [sp, #24]
 8005924:	eba3 030a 	sub.w	r3, r3, sl
 8005928:	9306      	str	r3, [sp, #24]
 800592a:	f1ca 0300 	rsb	r3, sl, #0
 800592e:	930a      	str	r3, [sp, #40]	; 0x28
 8005930:	2300      	movs	r3, #0
 8005932:	930e      	str	r3, [sp, #56]	; 0x38
 8005934:	e7be      	b.n	80058b4 <_dtoa_r+0x1cc>
 8005936:	2300      	movs	r3, #0
 8005938:	930b      	str	r3, [sp, #44]	; 0x2c
 800593a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800593c:	2b00      	cmp	r3, #0
 800593e:	dc58      	bgt.n	80059f2 <_dtoa_r+0x30a>
 8005940:	f04f 0901 	mov.w	r9, #1
 8005944:	464b      	mov	r3, r9
 8005946:	f8cd 9020 	str.w	r9, [sp, #32]
 800594a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800594e:	2200      	movs	r2, #0
 8005950:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005952:	6042      	str	r2, [r0, #4]
 8005954:	2204      	movs	r2, #4
 8005956:	f102 0614 	add.w	r6, r2, #20
 800595a:	429e      	cmp	r6, r3
 800595c:	6841      	ldr	r1, [r0, #4]
 800595e:	d94e      	bls.n	80059fe <_dtoa_r+0x316>
 8005960:	4628      	mov	r0, r5
 8005962:	f000 fcc9 	bl	80062f8 <_Balloc>
 8005966:	9003      	str	r0, [sp, #12]
 8005968:	2800      	cmp	r0, #0
 800596a:	d14c      	bne.n	8005a06 <_dtoa_r+0x31e>
 800596c:	4602      	mov	r2, r0
 800596e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005972:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <_dtoa_r+0x2e8>)
 8005974:	e6cc      	b.n	8005710 <_dtoa_r+0x28>
 8005976:	2301      	movs	r3, #1
 8005978:	e7de      	b.n	8005938 <_dtoa_r+0x250>
 800597a:	2300      	movs	r3, #0
 800597c:	930b      	str	r3, [sp, #44]	; 0x2c
 800597e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005980:	eb0a 0903 	add.w	r9, sl, r3
 8005984:	f109 0301 	add.w	r3, r9, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	9308      	str	r3, [sp, #32]
 800598c:	bfb8      	it	lt
 800598e:	2301      	movlt	r3, #1
 8005990:	e7dd      	b.n	800594e <_dtoa_r+0x266>
 8005992:	2301      	movs	r3, #1
 8005994:	e7f2      	b.n	800597c <_dtoa_r+0x294>
 8005996:	bf00      	nop
 8005998:	636f4361 	.word	0x636f4361
 800599c:	3fd287a7 	.word	0x3fd287a7
 80059a0:	8b60c8b3 	.word	0x8b60c8b3
 80059a4:	3fc68a28 	.word	0x3fc68a28
 80059a8:	509f79fb 	.word	0x509f79fb
 80059ac:	3fd34413 	.word	0x3fd34413
 80059b0:	08007ab5 	.word	0x08007ab5
 80059b4:	08007acc 	.word	0x08007acc
 80059b8:	7ff00000 	.word	0x7ff00000
 80059bc:	08007ab1 	.word	0x08007ab1
 80059c0:	08007aa8 	.word	0x08007aa8
 80059c4:	08007a85 	.word	0x08007a85
 80059c8:	3ff80000 	.word	0x3ff80000
 80059cc:	08007bc0 	.word	0x08007bc0
 80059d0:	08007b27 	.word	0x08007b27
 80059d4:	2401      	movs	r4, #1
 80059d6:	2300      	movs	r3, #0
 80059d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80059da:	9322      	str	r3, [sp, #136]	; 0x88
 80059dc:	f04f 39ff 	mov.w	r9, #4294967295
 80059e0:	2200      	movs	r2, #0
 80059e2:	2312      	movs	r3, #18
 80059e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80059e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80059ea:	e7b0      	b.n	800594e <_dtoa_r+0x266>
 80059ec:	2301      	movs	r3, #1
 80059ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80059f0:	e7f4      	b.n	80059dc <_dtoa_r+0x2f4>
 80059f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80059f6:	464b      	mov	r3, r9
 80059f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80059fc:	e7a7      	b.n	800594e <_dtoa_r+0x266>
 80059fe:	3101      	adds	r1, #1
 8005a00:	6041      	str	r1, [r0, #4]
 8005a02:	0052      	lsls	r2, r2, #1
 8005a04:	e7a7      	b.n	8005956 <_dtoa_r+0x26e>
 8005a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a08:	9a03      	ldr	r2, [sp, #12]
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	9b08      	ldr	r3, [sp, #32]
 8005a0e:	2b0e      	cmp	r3, #14
 8005a10:	f200 80a8 	bhi.w	8005b64 <_dtoa_r+0x47c>
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	f000 80a5 	beq.w	8005b64 <_dtoa_r+0x47c>
 8005a1a:	f1ba 0f00 	cmp.w	sl, #0
 8005a1e:	dd34      	ble.n	8005a8a <_dtoa_r+0x3a2>
 8005a20:	4a9a      	ldr	r2, [pc, #616]	; (8005c8c <_dtoa_r+0x5a4>)
 8005a22:	f00a 030f 	and.w	r3, sl, #15
 8005a26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005a3a:	d016      	beq.n	8005a6a <_dtoa_r+0x382>
 8005a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a40:	4b93      	ldr	r3, [pc, #588]	; (8005c90 <_dtoa_r+0x5a8>)
 8005a42:	2703      	movs	r7, #3
 8005a44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a48:	f7fa fe70 	bl	800072c <__aeabi_ddiv>
 8005a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a50:	f004 040f 	and.w	r4, r4, #15
 8005a54:	4e8e      	ldr	r6, [pc, #568]	; (8005c90 <_dtoa_r+0x5a8>)
 8005a56:	b954      	cbnz	r4, 8005a6e <_dtoa_r+0x386>
 8005a58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a60:	f7fa fe64 	bl	800072c <__aeabi_ddiv>
 8005a64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a68:	e029      	b.n	8005abe <_dtoa_r+0x3d6>
 8005a6a:	2702      	movs	r7, #2
 8005a6c:	e7f2      	b.n	8005a54 <_dtoa_r+0x36c>
 8005a6e:	07e1      	lsls	r1, r4, #31
 8005a70:	d508      	bpl.n	8005a84 <_dtoa_r+0x39c>
 8005a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a7a:	f7fa fd2d 	bl	80004d8 <__aeabi_dmul>
 8005a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a82:	3701      	adds	r7, #1
 8005a84:	1064      	asrs	r4, r4, #1
 8005a86:	3608      	adds	r6, #8
 8005a88:	e7e5      	b.n	8005a56 <_dtoa_r+0x36e>
 8005a8a:	f000 80a5 	beq.w	8005bd8 <_dtoa_r+0x4f0>
 8005a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a92:	f1ca 0400 	rsb	r4, sl, #0
 8005a96:	4b7d      	ldr	r3, [pc, #500]	; (8005c8c <_dtoa_r+0x5a4>)
 8005a98:	f004 020f 	and.w	r2, r4, #15
 8005a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f7fa fd18 	bl	80004d8 <__aeabi_dmul>
 8005aa8:	2702      	movs	r7, #2
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ab0:	4e77      	ldr	r6, [pc, #476]	; (8005c90 <_dtoa_r+0x5a8>)
 8005ab2:	1124      	asrs	r4, r4, #4
 8005ab4:	2c00      	cmp	r4, #0
 8005ab6:	f040 8084 	bne.w	8005bc2 <_dtoa_r+0x4da>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1d2      	bne.n	8005a64 <_dtoa_r+0x37c>
 8005abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 808b 	beq.w	8005bdc <_dtoa_r+0x4f4>
 8005ac6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005aca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ace:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4b6f      	ldr	r3, [pc, #444]	; (8005c94 <_dtoa_r+0x5ac>)
 8005ad6:	f7fa ff71 	bl	80009bc <__aeabi_dcmplt>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d07e      	beq.n	8005bdc <_dtoa_r+0x4f4>
 8005ade:	9b08      	ldr	r3, [sp, #32]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d07b      	beq.n	8005bdc <_dtoa_r+0x4f4>
 8005ae4:	f1b9 0f00 	cmp.w	r9, #0
 8005ae8:	dd38      	ble.n	8005b5c <_dtoa_r+0x474>
 8005aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005aee:	2200      	movs	r2, #0
 8005af0:	4b69      	ldr	r3, [pc, #420]	; (8005c98 <_dtoa_r+0x5b0>)
 8005af2:	f7fa fcf1 	bl	80004d8 <__aeabi_dmul>
 8005af6:	464c      	mov	r4, r9
 8005af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005afc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005b00:	3701      	adds	r7, #1
 8005b02:	4638      	mov	r0, r7
 8005b04:	f7fa fc7e 	bl	8000404 <__aeabi_i2d>
 8005b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b0c:	f7fa fce4 	bl	80004d8 <__aeabi_dmul>
 8005b10:	2200      	movs	r2, #0
 8005b12:	4b62      	ldr	r3, [pc, #392]	; (8005c9c <_dtoa_r+0x5b4>)
 8005b14:	f7fa fb2a 	bl	800016c <__adddf3>
 8005b18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b20:	9611      	str	r6, [sp, #68]	; 0x44
 8005b22:	2c00      	cmp	r4, #0
 8005b24:	d15d      	bne.n	8005be2 <_dtoa_r+0x4fa>
 8005b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4b5c      	ldr	r3, [pc, #368]	; (8005ca0 <_dtoa_r+0x5b8>)
 8005b2e:	f7fa fb1b 	bl	8000168 <__aeabi_dsub>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b3a:	4633      	mov	r3, r6
 8005b3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b3e:	f7fa ff5b 	bl	80009f8 <__aeabi_dcmpgt>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	f040 829c 	bne.w	8006080 <_dtoa_r+0x998>
 8005b48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b52:	f7fa ff33 	bl	80009bc <__aeabi_dcmplt>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	f040 8290 	bne.w	800607c <_dtoa_r+0x994>
 8005b5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005b60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f2c0 8152 	blt.w	8005e10 <_dtoa_r+0x728>
 8005b6c:	f1ba 0f0e 	cmp.w	sl, #14
 8005b70:	f300 814e 	bgt.w	8005e10 <_dtoa_r+0x728>
 8005b74:	4b45      	ldr	r3, [pc, #276]	; (8005c8c <_dtoa_r+0x5a4>)
 8005b76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005b82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f280 80db 	bge.w	8005d40 <_dtoa_r+0x658>
 8005b8a:	9b08      	ldr	r3, [sp, #32]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f300 80d7 	bgt.w	8005d40 <_dtoa_r+0x658>
 8005b92:	f040 8272 	bne.w	800607a <_dtoa_r+0x992>
 8005b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4b40      	ldr	r3, [pc, #256]	; (8005ca0 <_dtoa_r+0x5b8>)
 8005b9e:	f7fa fc9b 	bl	80004d8 <__aeabi_dmul>
 8005ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ba6:	f7fa ff1d 	bl	80009e4 <__aeabi_dcmpge>
 8005baa:	9c08      	ldr	r4, [sp, #32]
 8005bac:	4626      	mov	r6, r4
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	f040 8248 	bne.w	8006044 <_dtoa_r+0x95c>
 8005bb4:	2331      	movs	r3, #49	; 0x31
 8005bb6:	9f03      	ldr	r7, [sp, #12]
 8005bb8:	f10a 0a01 	add.w	sl, sl, #1
 8005bbc:	f807 3b01 	strb.w	r3, [r7], #1
 8005bc0:	e244      	b.n	800604c <_dtoa_r+0x964>
 8005bc2:	07e2      	lsls	r2, r4, #31
 8005bc4:	d505      	bpl.n	8005bd2 <_dtoa_r+0x4ea>
 8005bc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bca:	f7fa fc85 	bl	80004d8 <__aeabi_dmul>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	3701      	adds	r7, #1
 8005bd2:	1064      	asrs	r4, r4, #1
 8005bd4:	3608      	adds	r6, #8
 8005bd6:	e76d      	b.n	8005ab4 <_dtoa_r+0x3cc>
 8005bd8:	2702      	movs	r7, #2
 8005bda:	e770      	b.n	8005abe <_dtoa_r+0x3d6>
 8005bdc:	46d0      	mov	r8, sl
 8005bde:	9c08      	ldr	r4, [sp, #32]
 8005be0:	e78f      	b.n	8005b02 <_dtoa_r+0x41a>
 8005be2:	9903      	ldr	r1, [sp, #12]
 8005be4:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <_dtoa_r+0x5a4>)
 8005be6:	4421      	add	r1, r4
 8005be8:	9112      	str	r1, [sp, #72]	; 0x48
 8005bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bf0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005bf4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d055      	beq.n	8005ca8 <_dtoa_r+0x5c0>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	4929      	ldr	r1, [pc, #164]	; (8005ca4 <_dtoa_r+0x5bc>)
 8005c00:	f7fa fd94 	bl	800072c <__aeabi_ddiv>
 8005c04:	463b      	mov	r3, r7
 8005c06:	4632      	mov	r2, r6
 8005c08:	f7fa faae 	bl	8000168 <__aeabi_dsub>
 8005c0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c10:	9f03      	ldr	r7, [sp, #12]
 8005c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c16:	f7fa ff0f 	bl	8000a38 <__aeabi_d2iz>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	f7fa fbf2 	bl	8000404 <__aeabi_i2d>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c28:	f7fa fa9e 	bl	8000168 <__aeabi_dsub>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	3430      	adds	r4, #48	; 0x30
 8005c32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c3a:	f807 4b01 	strb.w	r4, [r7], #1
 8005c3e:	f7fa febd 	bl	80009bc <__aeabi_dcmplt>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d174      	bne.n	8005d30 <_dtoa_r+0x648>
 8005c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	4911      	ldr	r1, [pc, #68]	; (8005c94 <_dtoa_r+0x5ac>)
 8005c4e:	f7fa fa8b 	bl	8000168 <__aeabi_dsub>
 8005c52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c56:	f7fa feb1 	bl	80009bc <__aeabi_dcmplt>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f040 80b7 	bne.w	8005dce <_dtoa_r+0x6e6>
 8005c60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c62:	429f      	cmp	r7, r3
 8005c64:	f43f af7a 	beq.w	8005b5c <_dtoa_r+0x474>
 8005c68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <_dtoa_r+0x5b0>)
 8005c70:	f7fa fc32 	bl	80004d8 <__aeabi_dmul>
 8005c74:	2200      	movs	r2, #0
 8005c76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c7e:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <_dtoa_r+0x5b0>)
 8005c80:	f7fa fc2a 	bl	80004d8 <__aeabi_dmul>
 8005c84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c88:	e7c3      	b.n	8005c12 <_dtoa_r+0x52a>
 8005c8a:	bf00      	nop
 8005c8c:	08007bc0 	.word	0x08007bc0
 8005c90:	08007b98 	.word	0x08007b98
 8005c94:	3ff00000 	.word	0x3ff00000
 8005c98:	40240000 	.word	0x40240000
 8005c9c:	401c0000 	.word	0x401c0000
 8005ca0:	40140000 	.word	0x40140000
 8005ca4:	3fe00000 	.word	0x3fe00000
 8005ca8:	4630      	mov	r0, r6
 8005caa:	4639      	mov	r1, r7
 8005cac:	f7fa fc14 	bl	80004d8 <__aeabi_dmul>
 8005cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cb6:	9c03      	ldr	r4, [sp, #12]
 8005cb8:	9314      	str	r3, [sp, #80]	; 0x50
 8005cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cbe:	f7fa febb 	bl	8000a38 <__aeabi_d2iz>
 8005cc2:	9015      	str	r0, [sp, #84]	; 0x54
 8005cc4:	f7fa fb9e 	bl	8000404 <__aeabi_i2d>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cd0:	f7fa fa4a 	bl	8000168 <__aeabi_dsub>
 8005cd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	3330      	adds	r3, #48	; 0x30
 8005cda:	f804 3b01 	strb.w	r3, [r4], #1
 8005cde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	429c      	cmp	r4, r3
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	d124      	bne.n	8005d34 <_dtoa_r+0x64c>
 8005cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cee:	4bb0      	ldr	r3, [pc, #704]	; (8005fb0 <_dtoa_r+0x8c8>)
 8005cf0:	f7fa fa3c 	bl	800016c <__adddf3>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	f7fa fe7c 	bl	80009f8 <__aeabi_dcmpgt>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d163      	bne.n	8005dcc <_dtoa_r+0x6e4>
 8005d04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d08:	2000      	movs	r0, #0
 8005d0a:	49a9      	ldr	r1, [pc, #676]	; (8005fb0 <_dtoa_r+0x8c8>)
 8005d0c:	f7fa fa2c 	bl	8000168 <__aeabi_dsub>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4630      	mov	r0, r6
 8005d16:	4639      	mov	r1, r7
 8005d18:	f7fa fe50 	bl	80009bc <__aeabi_dcmplt>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	f43f af1d 	beq.w	8005b5c <_dtoa_r+0x474>
 8005d22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d24:	1e7b      	subs	r3, r7, #1
 8005d26:	9314      	str	r3, [sp, #80]	; 0x50
 8005d28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005d2c:	2b30      	cmp	r3, #48	; 0x30
 8005d2e:	d0f8      	beq.n	8005d22 <_dtoa_r+0x63a>
 8005d30:	46c2      	mov	sl, r8
 8005d32:	e03b      	b.n	8005dac <_dtoa_r+0x6c4>
 8005d34:	4b9f      	ldr	r3, [pc, #636]	; (8005fb4 <_dtoa_r+0x8cc>)
 8005d36:	f7fa fbcf 	bl	80004d8 <__aeabi_dmul>
 8005d3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d3e:	e7bc      	b.n	8005cba <_dtoa_r+0x5d2>
 8005d40:	9f03      	ldr	r7, [sp, #12]
 8005d42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005d46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	f7fa fced 	bl	800072c <__aeabi_ddiv>
 8005d52:	f7fa fe71 	bl	8000a38 <__aeabi_d2iz>
 8005d56:	4604      	mov	r4, r0
 8005d58:	f7fa fb54 	bl	8000404 <__aeabi_i2d>
 8005d5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d60:	f7fa fbba 	bl	80004d8 <__aeabi_dmul>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4640      	mov	r0, r8
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	f7fa f9fc 	bl	8000168 <__aeabi_dsub>
 8005d70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005d74:	f807 6b01 	strb.w	r6, [r7], #1
 8005d78:	9e03      	ldr	r6, [sp, #12]
 8005d7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005d7e:	1bbe      	subs	r6, r7, r6
 8005d80:	45b4      	cmp	ip, r6
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	d136      	bne.n	8005df6 <_dtoa_r+0x70e>
 8005d88:	f7fa f9f0 	bl	800016c <__adddf3>
 8005d8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d90:	4680      	mov	r8, r0
 8005d92:	4689      	mov	r9, r1
 8005d94:	f7fa fe30 	bl	80009f8 <__aeabi_dcmpgt>
 8005d98:	bb58      	cbnz	r0, 8005df2 <_dtoa_r+0x70a>
 8005d9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d9e:	4640      	mov	r0, r8
 8005da0:	4649      	mov	r1, r9
 8005da2:	f7fa fe01 	bl	80009a8 <__aeabi_dcmpeq>
 8005da6:	b108      	cbz	r0, 8005dac <_dtoa_r+0x6c4>
 8005da8:	07e1      	lsls	r1, r4, #31
 8005daa:	d422      	bmi.n	8005df2 <_dtoa_r+0x70a>
 8005dac:	4628      	mov	r0, r5
 8005dae:	4659      	mov	r1, fp
 8005db0:	f000 fae2 	bl	8006378 <_Bfree>
 8005db4:	2300      	movs	r3, #0
 8005db6:	703b      	strb	r3, [r7, #0]
 8005db8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005dba:	f10a 0001 	add.w	r0, sl, #1
 8005dbe:	6018      	str	r0, [r3, #0]
 8005dc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f43f acde 	beq.w	8005784 <_dtoa_r+0x9c>
 8005dc8:	601f      	str	r7, [r3, #0]
 8005dca:	e4db      	b.n	8005784 <_dtoa_r+0x9c>
 8005dcc:	4627      	mov	r7, r4
 8005dce:	463b      	mov	r3, r7
 8005dd0:	461f      	mov	r7, r3
 8005dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dd6:	2a39      	cmp	r2, #57	; 0x39
 8005dd8:	d107      	bne.n	8005dea <_dtoa_r+0x702>
 8005dda:	9a03      	ldr	r2, [sp, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1f7      	bne.n	8005dd0 <_dtoa_r+0x6e8>
 8005de0:	2230      	movs	r2, #48	; 0x30
 8005de2:	9903      	ldr	r1, [sp, #12]
 8005de4:	f108 0801 	add.w	r8, r8, #1
 8005de8:	700a      	strb	r2, [r1, #0]
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	3201      	adds	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	e79e      	b.n	8005d30 <_dtoa_r+0x648>
 8005df2:	46d0      	mov	r8, sl
 8005df4:	e7eb      	b.n	8005dce <_dtoa_r+0x6e6>
 8005df6:	2200      	movs	r2, #0
 8005df8:	4b6e      	ldr	r3, [pc, #440]	; (8005fb4 <_dtoa_r+0x8cc>)
 8005dfa:	f7fa fb6d 	bl	80004d8 <__aeabi_dmul>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2300      	movs	r3, #0
 8005e02:	4680      	mov	r8, r0
 8005e04:	4689      	mov	r9, r1
 8005e06:	f7fa fdcf 	bl	80009a8 <__aeabi_dcmpeq>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d09b      	beq.n	8005d46 <_dtoa_r+0x65e>
 8005e0e:	e7cd      	b.n	8005dac <_dtoa_r+0x6c4>
 8005e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e12:	2a00      	cmp	r2, #0
 8005e14:	f000 80d0 	beq.w	8005fb8 <_dtoa_r+0x8d0>
 8005e18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e1a:	2a01      	cmp	r2, #1
 8005e1c:	f300 80ae 	bgt.w	8005f7c <_dtoa_r+0x894>
 8005e20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e22:	2a00      	cmp	r2, #0
 8005e24:	f000 80a6 	beq.w	8005f74 <_dtoa_r+0x88c>
 8005e28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e2e:	9f06      	ldr	r7, [sp, #24]
 8005e30:	9a06      	ldr	r2, [sp, #24]
 8005e32:	2101      	movs	r1, #1
 8005e34:	441a      	add	r2, r3
 8005e36:	9206      	str	r2, [sp, #24]
 8005e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	441a      	add	r2, r3
 8005e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e40:	f000 fb50 	bl	80064e4 <__i2b>
 8005e44:	4606      	mov	r6, r0
 8005e46:	2f00      	cmp	r7, #0
 8005e48:	dd0c      	ble.n	8005e64 <_dtoa_r+0x77c>
 8005e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dd09      	ble.n	8005e64 <_dtoa_r+0x77c>
 8005e50:	42bb      	cmp	r3, r7
 8005e52:	bfa8      	it	ge
 8005e54:	463b      	movge	r3, r7
 8005e56:	9a06      	ldr	r2, [sp, #24]
 8005e58:	1aff      	subs	r7, r7, r3
 8005e5a:	1ad2      	subs	r2, r2, r3
 8005e5c:	9206      	str	r2, [sp, #24]
 8005e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	9309      	str	r3, [sp, #36]	; 0x24
 8005e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e66:	b1f3      	cbz	r3, 8005ea6 <_dtoa_r+0x7be>
 8005e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80a8 	beq.w	8005fc0 <_dtoa_r+0x8d8>
 8005e70:	2c00      	cmp	r4, #0
 8005e72:	dd10      	ble.n	8005e96 <_dtoa_r+0x7ae>
 8005e74:	4631      	mov	r1, r6
 8005e76:	4622      	mov	r2, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 fbf1 	bl	8006660 <__pow5mult>
 8005e7e:	465a      	mov	r2, fp
 8005e80:	4601      	mov	r1, r0
 8005e82:	4606      	mov	r6, r0
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 fb43 	bl	8006510 <__multiply>
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 fa72 	bl	8006378 <_Bfree>
 8005e94:	46c3      	mov	fp, r8
 8005e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e98:	1b1a      	subs	r2, r3, r4
 8005e9a:	d004      	beq.n	8005ea6 <_dtoa_r+0x7be>
 8005e9c:	4659      	mov	r1, fp
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 fbde 	bl	8006660 <__pow5mult>
 8005ea4:	4683      	mov	fp, r0
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f000 fb1b 	bl	80064e4 <__i2b>
 8005eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f340 8086 	ble.w	8005fc4 <_dtoa_r+0x8dc>
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4601      	mov	r1, r0
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f000 fbcf 	bl	8006660 <__pow5mult>
 8005ec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	dd7f      	ble.n	8005fca <_dtoa_r+0x8e2>
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ed4:	6918      	ldr	r0, [r3, #16]
 8005ed6:	f000 fab7 	bl	8006448 <__hi0bits>
 8005eda:	f1c0 0020 	rsb	r0, r0, #32
 8005ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee0:	4418      	add	r0, r3
 8005ee2:	f010 001f 	ands.w	r0, r0, #31
 8005ee6:	f000 8092 	beq.w	800600e <_dtoa_r+0x926>
 8005eea:	f1c0 0320 	rsb	r3, r0, #32
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	f340 808a 	ble.w	8006008 <_dtoa_r+0x920>
 8005ef4:	f1c0 001c 	rsb	r0, r0, #28
 8005ef8:	9b06      	ldr	r3, [sp, #24]
 8005efa:	4407      	add	r7, r0
 8005efc:	4403      	add	r3, r0
 8005efe:	9306      	str	r3, [sp, #24]
 8005f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f02:	4403      	add	r3, r0
 8005f04:	9309      	str	r3, [sp, #36]	; 0x24
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dd05      	ble.n	8005f18 <_dtoa_r+0x830>
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 fbff 	bl	8006714 <__lshift>
 8005f16:	4683      	mov	fp, r0
 8005f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	dd05      	ble.n	8005f2a <_dtoa_r+0x842>
 8005f1e:	4621      	mov	r1, r4
 8005f20:	461a      	mov	r2, r3
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 fbf6 	bl	8006714 <__lshift>
 8005f28:	4604      	mov	r4, r0
 8005f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d070      	beq.n	8006012 <_dtoa_r+0x92a>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4658      	mov	r0, fp
 8005f34:	f000 fc5e 	bl	80067f4 <__mcmp>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	da6a      	bge.n	8006012 <_dtoa_r+0x92a>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4659      	mov	r1, fp
 8005f40:	220a      	movs	r2, #10
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 fa3a 	bl	80063bc <__multadd>
 8005f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f4a:	4683      	mov	fp, r0
 8005f4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 8194 	beq.w	800627e <_dtoa_r+0xb96>
 8005f56:	4631      	mov	r1, r6
 8005f58:	2300      	movs	r3, #0
 8005f5a:	220a      	movs	r2, #10
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 fa2d 	bl	80063bc <__multadd>
 8005f62:	f1b9 0f00 	cmp.w	r9, #0
 8005f66:	4606      	mov	r6, r0
 8005f68:	f300 8093 	bgt.w	8006092 <_dtoa_r+0x9aa>
 8005f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	dc57      	bgt.n	8006022 <_dtoa_r+0x93a>
 8005f72:	e08e      	b.n	8006092 <_dtoa_r+0x9aa>
 8005f74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f7a:	e757      	b.n	8005e2c <_dtoa_r+0x744>
 8005f7c:	9b08      	ldr	r3, [sp, #32]
 8005f7e:	1e5c      	subs	r4, r3, #1
 8005f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	bfb7      	itett	lt
 8005f86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005f88:	1b1c      	subge	r4, r3, r4
 8005f8a:	1ae2      	sublt	r2, r4, r3
 8005f8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005f8e:	bfbe      	ittt	lt
 8005f90:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005f92:	189b      	addlt	r3, r3, r2
 8005f94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005f96:	9b08      	ldr	r3, [sp, #32]
 8005f98:	bfb8      	it	lt
 8005f9a:	2400      	movlt	r4, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bfbb      	ittet	lt
 8005fa0:	9b06      	ldrlt	r3, [sp, #24]
 8005fa2:	9a08      	ldrlt	r2, [sp, #32]
 8005fa4:	9f06      	ldrge	r7, [sp, #24]
 8005fa6:	1a9f      	sublt	r7, r3, r2
 8005fa8:	bfac      	ite	ge
 8005faa:	9b08      	ldrge	r3, [sp, #32]
 8005fac:	2300      	movlt	r3, #0
 8005fae:	e73f      	b.n	8005e30 <_dtoa_r+0x748>
 8005fb0:	3fe00000 	.word	0x3fe00000
 8005fb4:	40240000 	.word	0x40240000
 8005fb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005fba:	9f06      	ldr	r7, [sp, #24]
 8005fbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005fbe:	e742      	b.n	8005e46 <_dtoa_r+0x75e>
 8005fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fc2:	e76b      	b.n	8005e9c <_dtoa_r+0x7b4>
 8005fc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	dc19      	bgt.n	8005ffe <_dtoa_r+0x916>
 8005fca:	9b04      	ldr	r3, [sp, #16]
 8005fcc:	b9bb      	cbnz	r3, 8005ffe <_dtoa_r+0x916>
 8005fce:	9b05      	ldr	r3, [sp, #20]
 8005fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd4:	b99b      	cbnz	r3, 8005ffe <_dtoa_r+0x916>
 8005fd6:	9b05      	ldr	r3, [sp, #20]
 8005fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	0d1b      	lsrs	r3, r3, #20
 8005fde:	051b      	lsls	r3, r3, #20
 8005fe0:	b183      	cbz	r3, 8006004 <_dtoa_r+0x91c>
 8005fe2:	f04f 0801 	mov.w	r8, #1
 8005fe6:	9b06      	ldr	r3, [sp, #24]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	9306      	str	r3, [sp, #24]
 8005fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fee:	3301      	adds	r3, #1
 8005ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f47f af6a 	bne.w	8005ece <_dtoa_r+0x7e6>
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	e76f      	b.n	8005ede <_dtoa_r+0x7f6>
 8005ffe:	f04f 0800 	mov.w	r8, #0
 8006002:	e7f6      	b.n	8005ff2 <_dtoa_r+0x90a>
 8006004:	4698      	mov	r8, r3
 8006006:	e7f4      	b.n	8005ff2 <_dtoa_r+0x90a>
 8006008:	f43f af7d 	beq.w	8005f06 <_dtoa_r+0x81e>
 800600c:	4618      	mov	r0, r3
 800600e:	301c      	adds	r0, #28
 8006010:	e772      	b.n	8005ef8 <_dtoa_r+0x810>
 8006012:	9b08      	ldr	r3, [sp, #32]
 8006014:	2b00      	cmp	r3, #0
 8006016:	dc36      	bgt.n	8006086 <_dtoa_r+0x99e>
 8006018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800601a:	2b02      	cmp	r3, #2
 800601c:	dd33      	ble.n	8006086 <_dtoa_r+0x99e>
 800601e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006022:	f1b9 0f00 	cmp.w	r9, #0
 8006026:	d10d      	bne.n	8006044 <_dtoa_r+0x95c>
 8006028:	4621      	mov	r1, r4
 800602a:	464b      	mov	r3, r9
 800602c:	2205      	movs	r2, #5
 800602e:	4628      	mov	r0, r5
 8006030:	f000 f9c4 	bl	80063bc <__multadd>
 8006034:	4601      	mov	r1, r0
 8006036:	4604      	mov	r4, r0
 8006038:	4658      	mov	r0, fp
 800603a:	f000 fbdb 	bl	80067f4 <__mcmp>
 800603e:	2800      	cmp	r0, #0
 8006040:	f73f adb8 	bgt.w	8005bb4 <_dtoa_r+0x4cc>
 8006044:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006046:	9f03      	ldr	r7, [sp, #12]
 8006048:	ea6f 0a03 	mvn.w	sl, r3
 800604c:	f04f 0800 	mov.w	r8, #0
 8006050:	4621      	mov	r1, r4
 8006052:	4628      	mov	r0, r5
 8006054:	f000 f990 	bl	8006378 <_Bfree>
 8006058:	2e00      	cmp	r6, #0
 800605a:	f43f aea7 	beq.w	8005dac <_dtoa_r+0x6c4>
 800605e:	f1b8 0f00 	cmp.w	r8, #0
 8006062:	d005      	beq.n	8006070 <_dtoa_r+0x988>
 8006064:	45b0      	cmp	r8, r6
 8006066:	d003      	beq.n	8006070 <_dtoa_r+0x988>
 8006068:	4641      	mov	r1, r8
 800606a:	4628      	mov	r0, r5
 800606c:	f000 f984 	bl	8006378 <_Bfree>
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	f000 f980 	bl	8006378 <_Bfree>
 8006078:	e698      	b.n	8005dac <_dtoa_r+0x6c4>
 800607a:	2400      	movs	r4, #0
 800607c:	4626      	mov	r6, r4
 800607e:	e7e1      	b.n	8006044 <_dtoa_r+0x95c>
 8006080:	46c2      	mov	sl, r8
 8006082:	4626      	mov	r6, r4
 8006084:	e596      	b.n	8005bb4 <_dtoa_r+0x4cc>
 8006086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80fd 	beq.w	800628c <_dtoa_r+0xba4>
 8006092:	2f00      	cmp	r7, #0
 8006094:	dd05      	ble.n	80060a2 <_dtoa_r+0x9ba>
 8006096:	4631      	mov	r1, r6
 8006098:	463a      	mov	r2, r7
 800609a:	4628      	mov	r0, r5
 800609c:	f000 fb3a 	bl	8006714 <__lshift>
 80060a0:	4606      	mov	r6, r0
 80060a2:	f1b8 0f00 	cmp.w	r8, #0
 80060a6:	d05c      	beq.n	8006162 <_dtoa_r+0xa7a>
 80060a8:	4628      	mov	r0, r5
 80060aa:	6871      	ldr	r1, [r6, #4]
 80060ac:	f000 f924 	bl	80062f8 <_Balloc>
 80060b0:	4607      	mov	r7, r0
 80060b2:	b928      	cbnz	r0, 80060c0 <_dtoa_r+0x9d8>
 80060b4:	4602      	mov	r2, r0
 80060b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060ba:	4b7f      	ldr	r3, [pc, #508]	; (80062b8 <_dtoa_r+0xbd0>)
 80060bc:	f7ff bb28 	b.w	8005710 <_dtoa_r+0x28>
 80060c0:	6932      	ldr	r2, [r6, #16]
 80060c2:	f106 010c 	add.w	r1, r6, #12
 80060c6:	3202      	adds	r2, #2
 80060c8:	0092      	lsls	r2, r2, #2
 80060ca:	300c      	adds	r0, #12
 80060cc:	f7fe fe0a 	bl	8004ce4 <memcpy>
 80060d0:	2201      	movs	r2, #1
 80060d2:	4639      	mov	r1, r7
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 fb1d 	bl	8006714 <__lshift>
 80060da:	46b0      	mov	r8, r6
 80060dc:	4606      	mov	r6, r0
 80060de:	9b03      	ldr	r3, [sp, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	9308      	str	r3, [sp, #32]
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	444b      	add	r3, r9
 80060e8:	930a      	str	r3, [sp, #40]	; 0x28
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	9309      	str	r3, [sp, #36]	; 0x24
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	4621      	mov	r1, r4
 80060f6:	3b01      	subs	r3, #1
 80060f8:	4658      	mov	r0, fp
 80060fa:	9304      	str	r3, [sp, #16]
 80060fc:	f7ff fa68 	bl	80055d0 <quorem>
 8006100:	4603      	mov	r3, r0
 8006102:	4641      	mov	r1, r8
 8006104:	3330      	adds	r3, #48	; 0x30
 8006106:	9006      	str	r0, [sp, #24]
 8006108:	4658      	mov	r0, fp
 800610a:	930b      	str	r3, [sp, #44]	; 0x2c
 800610c:	f000 fb72 	bl	80067f4 <__mcmp>
 8006110:	4632      	mov	r2, r6
 8006112:	4681      	mov	r9, r0
 8006114:	4621      	mov	r1, r4
 8006116:	4628      	mov	r0, r5
 8006118:	f000 fb88 	bl	800682c <__mdiff>
 800611c:	68c2      	ldr	r2, [r0, #12]
 800611e:	4607      	mov	r7, r0
 8006120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006122:	bb02      	cbnz	r2, 8006166 <_dtoa_r+0xa7e>
 8006124:	4601      	mov	r1, r0
 8006126:	4658      	mov	r0, fp
 8006128:	f000 fb64 	bl	80067f4 <__mcmp>
 800612c:	4602      	mov	r2, r0
 800612e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006130:	4639      	mov	r1, r7
 8006132:	4628      	mov	r0, r5
 8006134:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006138:	f000 f91e 	bl	8006378 <_Bfree>
 800613c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800613e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006140:	9f08      	ldr	r7, [sp, #32]
 8006142:	ea43 0102 	orr.w	r1, r3, r2
 8006146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006148:	430b      	orrs	r3, r1
 800614a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800614c:	d10d      	bne.n	800616a <_dtoa_r+0xa82>
 800614e:	2b39      	cmp	r3, #57	; 0x39
 8006150:	d029      	beq.n	80061a6 <_dtoa_r+0xabe>
 8006152:	f1b9 0f00 	cmp.w	r9, #0
 8006156:	dd01      	ble.n	800615c <_dtoa_r+0xa74>
 8006158:	9b06      	ldr	r3, [sp, #24]
 800615a:	3331      	adds	r3, #49	; 0x31
 800615c:	9a04      	ldr	r2, [sp, #16]
 800615e:	7013      	strb	r3, [r2, #0]
 8006160:	e776      	b.n	8006050 <_dtoa_r+0x968>
 8006162:	4630      	mov	r0, r6
 8006164:	e7b9      	b.n	80060da <_dtoa_r+0x9f2>
 8006166:	2201      	movs	r2, #1
 8006168:	e7e2      	b.n	8006130 <_dtoa_r+0xa48>
 800616a:	f1b9 0f00 	cmp.w	r9, #0
 800616e:	db06      	blt.n	800617e <_dtoa_r+0xa96>
 8006170:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006172:	ea41 0909 	orr.w	r9, r1, r9
 8006176:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006178:	ea59 0101 	orrs.w	r1, r9, r1
 800617c:	d120      	bne.n	80061c0 <_dtoa_r+0xad8>
 800617e:	2a00      	cmp	r2, #0
 8006180:	ddec      	ble.n	800615c <_dtoa_r+0xa74>
 8006182:	4659      	mov	r1, fp
 8006184:	2201      	movs	r2, #1
 8006186:	4628      	mov	r0, r5
 8006188:	9308      	str	r3, [sp, #32]
 800618a:	f000 fac3 	bl	8006714 <__lshift>
 800618e:	4621      	mov	r1, r4
 8006190:	4683      	mov	fp, r0
 8006192:	f000 fb2f 	bl	80067f4 <__mcmp>
 8006196:	2800      	cmp	r0, #0
 8006198:	9b08      	ldr	r3, [sp, #32]
 800619a:	dc02      	bgt.n	80061a2 <_dtoa_r+0xaba>
 800619c:	d1de      	bne.n	800615c <_dtoa_r+0xa74>
 800619e:	07da      	lsls	r2, r3, #31
 80061a0:	d5dc      	bpl.n	800615c <_dtoa_r+0xa74>
 80061a2:	2b39      	cmp	r3, #57	; 0x39
 80061a4:	d1d8      	bne.n	8006158 <_dtoa_r+0xa70>
 80061a6:	2339      	movs	r3, #57	; 0x39
 80061a8:	9a04      	ldr	r2, [sp, #16]
 80061aa:	7013      	strb	r3, [r2, #0]
 80061ac:	463b      	mov	r3, r7
 80061ae:	461f      	mov	r7, r3
 80061b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	2a39      	cmp	r2, #57	; 0x39
 80061b8:	d050      	beq.n	800625c <_dtoa_r+0xb74>
 80061ba:	3201      	adds	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e747      	b.n	8006050 <_dtoa_r+0x968>
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	dd03      	ble.n	80061cc <_dtoa_r+0xae4>
 80061c4:	2b39      	cmp	r3, #57	; 0x39
 80061c6:	d0ee      	beq.n	80061a6 <_dtoa_r+0xabe>
 80061c8:	3301      	adds	r3, #1
 80061ca:	e7c7      	b.n	800615c <_dtoa_r+0xa74>
 80061cc:	9a08      	ldr	r2, [sp, #32]
 80061ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80061d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061d4:	428a      	cmp	r2, r1
 80061d6:	d02a      	beq.n	800622e <_dtoa_r+0xb46>
 80061d8:	4659      	mov	r1, fp
 80061da:	2300      	movs	r3, #0
 80061dc:	220a      	movs	r2, #10
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 f8ec 	bl	80063bc <__multadd>
 80061e4:	45b0      	cmp	r8, r6
 80061e6:	4683      	mov	fp, r0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	f04f 020a 	mov.w	r2, #10
 80061f0:	4641      	mov	r1, r8
 80061f2:	4628      	mov	r0, r5
 80061f4:	d107      	bne.n	8006206 <_dtoa_r+0xb1e>
 80061f6:	f000 f8e1 	bl	80063bc <__multadd>
 80061fa:	4680      	mov	r8, r0
 80061fc:	4606      	mov	r6, r0
 80061fe:	9b08      	ldr	r3, [sp, #32]
 8006200:	3301      	adds	r3, #1
 8006202:	9308      	str	r3, [sp, #32]
 8006204:	e775      	b.n	80060f2 <_dtoa_r+0xa0a>
 8006206:	f000 f8d9 	bl	80063bc <__multadd>
 800620a:	4631      	mov	r1, r6
 800620c:	4680      	mov	r8, r0
 800620e:	2300      	movs	r3, #0
 8006210:	220a      	movs	r2, #10
 8006212:	4628      	mov	r0, r5
 8006214:	f000 f8d2 	bl	80063bc <__multadd>
 8006218:	4606      	mov	r6, r0
 800621a:	e7f0      	b.n	80061fe <_dtoa_r+0xb16>
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	bfcc      	ite	gt
 8006222:	464f      	movgt	r7, r9
 8006224:	2701      	movle	r7, #1
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	9a03      	ldr	r2, [sp, #12]
 800622c:	4417      	add	r7, r2
 800622e:	4659      	mov	r1, fp
 8006230:	2201      	movs	r2, #1
 8006232:	4628      	mov	r0, r5
 8006234:	9308      	str	r3, [sp, #32]
 8006236:	f000 fa6d 	bl	8006714 <__lshift>
 800623a:	4621      	mov	r1, r4
 800623c:	4683      	mov	fp, r0
 800623e:	f000 fad9 	bl	80067f4 <__mcmp>
 8006242:	2800      	cmp	r0, #0
 8006244:	dcb2      	bgt.n	80061ac <_dtoa_r+0xac4>
 8006246:	d102      	bne.n	800624e <_dtoa_r+0xb66>
 8006248:	9b08      	ldr	r3, [sp, #32]
 800624a:	07db      	lsls	r3, r3, #31
 800624c:	d4ae      	bmi.n	80061ac <_dtoa_r+0xac4>
 800624e:	463b      	mov	r3, r7
 8006250:	461f      	mov	r7, r3
 8006252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006256:	2a30      	cmp	r2, #48	; 0x30
 8006258:	d0fa      	beq.n	8006250 <_dtoa_r+0xb68>
 800625a:	e6f9      	b.n	8006050 <_dtoa_r+0x968>
 800625c:	9a03      	ldr	r2, [sp, #12]
 800625e:	429a      	cmp	r2, r3
 8006260:	d1a5      	bne.n	80061ae <_dtoa_r+0xac6>
 8006262:	2331      	movs	r3, #49	; 0x31
 8006264:	f10a 0a01 	add.w	sl, sl, #1
 8006268:	e779      	b.n	800615e <_dtoa_r+0xa76>
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <_dtoa_r+0xbd4>)
 800626c:	f7ff baa8 	b.w	80057c0 <_dtoa_r+0xd8>
 8006270:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006272:	2b00      	cmp	r3, #0
 8006274:	f47f aa81 	bne.w	800577a <_dtoa_r+0x92>
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <_dtoa_r+0xbd8>)
 800627a:	f7ff baa1 	b.w	80057c0 <_dtoa_r+0xd8>
 800627e:	f1b9 0f00 	cmp.w	r9, #0
 8006282:	dc03      	bgt.n	800628c <_dtoa_r+0xba4>
 8006284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006286:	2b02      	cmp	r3, #2
 8006288:	f73f aecb 	bgt.w	8006022 <_dtoa_r+0x93a>
 800628c:	9f03      	ldr	r7, [sp, #12]
 800628e:	4621      	mov	r1, r4
 8006290:	4658      	mov	r0, fp
 8006292:	f7ff f99d 	bl	80055d0 <quorem>
 8006296:	9a03      	ldr	r2, [sp, #12]
 8006298:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800629c:	f807 3b01 	strb.w	r3, [r7], #1
 80062a0:	1aba      	subs	r2, r7, r2
 80062a2:	4591      	cmp	r9, r2
 80062a4:	ddba      	ble.n	800621c <_dtoa_r+0xb34>
 80062a6:	4659      	mov	r1, fp
 80062a8:	2300      	movs	r3, #0
 80062aa:	220a      	movs	r2, #10
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 f885 	bl	80063bc <__multadd>
 80062b2:	4683      	mov	fp, r0
 80062b4:	e7eb      	b.n	800628e <_dtoa_r+0xba6>
 80062b6:	bf00      	nop
 80062b8:	08007b27 	.word	0x08007b27
 80062bc:	08007a84 	.word	0x08007a84
 80062c0:	08007aa8 	.word	0x08007aa8

080062c4 <_localeconv_r>:
 80062c4:	4800      	ldr	r0, [pc, #0]	; (80062c8 <_localeconv_r+0x4>)
 80062c6:	4770      	bx	lr
 80062c8:	20000160 	.word	0x20000160

080062cc <malloc>:
 80062cc:	4b02      	ldr	r3, [pc, #8]	; (80062d8 <malloc+0xc>)
 80062ce:	4601      	mov	r1, r0
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	f000 bc0f 	b.w	8006af4 <_malloc_r>
 80062d6:	bf00      	nop
 80062d8:	2000000c 	.word	0x2000000c

080062dc <memchr>:
 80062dc:	4603      	mov	r3, r0
 80062de:	b510      	push	{r4, lr}
 80062e0:	b2c9      	uxtb	r1, r1
 80062e2:	4402      	add	r2, r0
 80062e4:	4293      	cmp	r3, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	d101      	bne.n	80062ee <memchr+0x12>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e003      	b.n	80062f6 <memchr+0x1a>
 80062ee:	7804      	ldrb	r4, [r0, #0]
 80062f0:	3301      	adds	r3, #1
 80062f2:	428c      	cmp	r4, r1
 80062f4:	d1f6      	bne.n	80062e4 <memchr+0x8>
 80062f6:	bd10      	pop	{r4, pc}

080062f8 <_Balloc>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062fc:	4604      	mov	r4, r0
 80062fe:	460d      	mov	r5, r1
 8006300:	b976      	cbnz	r6, 8006320 <_Balloc+0x28>
 8006302:	2010      	movs	r0, #16
 8006304:	f7ff ffe2 	bl	80062cc <malloc>
 8006308:	4602      	mov	r2, r0
 800630a:	6260      	str	r0, [r4, #36]	; 0x24
 800630c:	b920      	cbnz	r0, 8006318 <_Balloc+0x20>
 800630e:	2166      	movs	r1, #102	; 0x66
 8006310:	4b17      	ldr	r3, [pc, #92]	; (8006370 <_Balloc+0x78>)
 8006312:	4818      	ldr	r0, [pc, #96]	; (8006374 <_Balloc+0x7c>)
 8006314:	f000 fc72 	bl	8006bfc <__assert_func>
 8006318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800631c:	6006      	str	r6, [r0, #0]
 800631e:	60c6      	str	r6, [r0, #12]
 8006320:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006322:	68f3      	ldr	r3, [r6, #12]
 8006324:	b183      	cbz	r3, 8006348 <_Balloc+0x50>
 8006326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800632e:	b9b8      	cbnz	r0, 8006360 <_Balloc+0x68>
 8006330:	2101      	movs	r1, #1
 8006332:	fa01 f605 	lsl.w	r6, r1, r5
 8006336:	1d72      	adds	r2, r6, #5
 8006338:	4620      	mov	r0, r4
 800633a:	0092      	lsls	r2, r2, #2
 800633c:	f000 fb5e 	bl	80069fc <_calloc_r>
 8006340:	b160      	cbz	r0, 800635c <_Balloc+0x64>
 8006342:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006346:	e00e      	b.n	8006366 <_Balloc+0x6e>
 8006348:	2221      	movs	r2, #33	; 0x21
 800634a:	2104      	movs	r1, #4
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fb55 	bl	80069fc <_calloc_r>
 8006352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006354:	60f0      	str	r0, [r6, #12]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e4      	bne.n	8006326 <_Balloc+0x2e>
 800635c:	2000      	movs	r0, #0
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	6802      	ldr	r2, [r0, #0]
 8006362:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006366:	2300      	movs	r3, #0
 8006368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800636c:	e7f7      	b.n	800635e <_Balloc+0x66>
 800636e:	bf00      	nop
 8006370:	08007ab5 	.word	0x08007ab5
 8006374:	08007b38 	.word	0x08007b38

08006378 <_Bfree>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800637c:	4605      	mov	r5, r0
 800637e:	460c      	mov	r4, r1
 8006380:	b976      	cbnz	r6, 80063a0 <_Bfree+0x28>
 8006382:	2010      	movs	r0, #16
 8006384:	f7ff ffa2 	bl	80062cc <malloc>
 8006388:	4602      	mov	r2, r0
 800638a:	6268      	str	r0, [r5, #36]	; 0x24
 800638c:	b920      	cbnz	r0, 8006398 <_Bfree+0x20>
 800638e:	218a      	movs	r1, #138	; 0x8a
 8006390:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <_Bfree+0x3c>)
 8006392:	4809      	ldr	r0, [pc, #36]	; (80063b8 <_Bfree+0x40>)
 8006394:	f000 fc32 	bl	8006bfc <__assert_func>
 8006398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800639c:	6006      	str	r6, [r0, #0]
 800639e:	60c6      	str	r6, [r0, #12]
 80063a0:	b13c      	cbz	r4, 80063b2 <_Bfree+0x3a>
 80063a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063a4:	6862      	ldr	r2, [r4, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063ac:	6021      	str	r1, [r4, #0]
 80063ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	08007ab5 	.word	0x08007ab5
 80063b8:	08007b38 	.word	0x08007b38

080063bc <__multadd>:
 80063bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c0:	4607      	mov	r7, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	461e      	mov	r6, r3
 80063c6:	2000      	movs	r0, #0
 80063c8:	690d      	ldr	r5, [r1, #16]
 80063ca:	f101 0c14 	add.w	ip, r1, #20
 80063ce:	f8dc 3000 	ldr.w	r3, [ip]
 80063d2:	3001      	adds	r0, #1
 80063d4:	b299      	uxth	r1, r3
 80063d6:	fb02 6101 	mla	r1, r2, r1, r6
 80063da:	0c1e      	lsrs	r6, r3, #16
 80063dc:	0c0b      	lsrs	r3, r1, #16
 80063de:	fb02 3306 	mla	r3, r2, r6, r3
 80063e2:	b289      	uxth	r1, r1
 80063e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063e8:	4285      	cmp	r5, r0
 80063ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063ee:	f84c 1b04 	str.w	r1, [ip], #4
 80063f2:	dcec      	bgt.n	80063ce <__multadd+0x12>
 80063f4:	b30e      	cbz	r6, 800643a <__multadd+0x7e>
 80063f6:	68a3      	ldr	r3, [r4, #8]
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc19      	bgt.n	8006430 <__multadd+0x74>
 80063fc:	6861      	ldr	r1, [r4, #4]
 80063fe:	4638      	mov	r0, r7
 8006400:	3101      	adds	r1, #1
 8006402:	f7ff ff79 	bl	80062f8 <_Balloc>
 8006406:	4680      	mov	r8, r0
 8006408:	b928      	cbnz	r0, 8006416 <__multadd+0x5a>
 800640a:	4602      	mov	r2, r0
 800640c:	21b5      	movs	r1, #181	; 0xb5
 800640e:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <__multadd+0x84>)
 8006410:	480c      	ldr	r0, [pc, #48]	; (8006444 <__multadd+0x88>)
 8006412:	f000 fbf3 	bl	8006bfc <__assert_func>
 8006416:	6922      	ldr	r2, [r4, #16]
 8006418:	f104 010c 	add.w	r1, r4, #12
 800641c:	3202      	adds	r2, #2
 800641e:	0092      	lsls	r2, r2, #2
 8006420:	300c      	adds	r0, #12
 8006422:	f7fe fc5f 	bl	8004ce4 <memcpy>
 8006426:	4621      	mov	r1, r4
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ffa5 	bl	8006378 <_Bfree>
 800642e:	4644      	mov	r4, r8
 8006430:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006434:	3501      	adds	r5, #1
 8006436:	615e      	str	r6, [r3, #20]
 8006438:	6125      	str	r5, [r4, #16]
 800643a:	4620      	mov	r0, r4
 800643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006440:	08007b27 	.word	0x08007b27
 8006444:	08007b38 	.word	0x08007b38

08006448 <__hi0bits>:
 8006448:	0c02      	lsrs	r2, r0, #16
 800644a:	0412      	lsls	r2, r2, #16
 800644c:	4603      	mov	r3, r0
 800644e:	b9ca      	cbnz	r2, 8006484 <__hi0bits+0x3c>
 8006450:	0403      	lsls	r3, r0, #16
 8006452:	2010      	movs	r0, #16
 8006454:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006458:	bf04      	itt	eq
 800645a:	021b      	lsleq	r3, r3, #8
 800645c:	3008      	addeq	r0, #8
 800645e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006462:	bf04      	itt	eq
 8006464:	011b      	lsleq	r3, r3, #4
 8006466:	3004      	addeq	r0, #4
 8006468:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800646c:	bf04      	itt	eq
 800646e:	009b      	lsleq	r3, r3, #2
 8006470:	3002      	addeq	r0, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	db05      	blt.n	8006482 <__hi0bits+0x3a>
 8006476:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800647a:	f100 0001 	add.w	r0, r0, #1
 800647e:	bf08      	it	eq
 8006480:	2020      	moveq	r0, #32
 8006482:	4770      	bx	lr
 8006484:	2000      	movs	r0, #0
 8006486:	e7e5      	b.n	8006454 <__hi0bits+0xc>

08006488 <__lo0bits>:
 8006488:	6803      	ldr	r3, [r0, #0]
 800648a:	4602      	mov	r2, r0
 800648c:	f013 0007 	ands.w	r0, r3, #7
 8006490:	d00b      	beq.n	80064aa <__lo0bits+0x22>
 8006492:	07d9      	lsls	r1, r3, #31
 8006494:	d421      	bmi.n	80064da <__lo0bits+0x52>
 8006496:	0798      	lsls	r0, r3, #30
 8006498:	bf49      	itett	mi
 800649a:	085b      	lsrmi	r3, r3, #1
 800649c:	089b      	lsrpl	r3, r3, #2
 800649e:	2001      	movmi	r0, #1
 80064a0:	6013      	strmi	r3, [r2, #0]
 80064a2:	bf5c      	itt	pl
 80064a4:	2002      	movpl	r0, #2
 80064a6:	6013      	strpl	r3, [r2, #0]
 80064a8:	4770      	bx	lr
 80064aa:	b299      	uxth	r1, r3
 80064ac:	b909      	cbnz	r1, 80064b2 <__lo0bits+0x2a>
 80064ae:	2010      	movs	r0, #16
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	b2d9      	uxtb	r1, r3
 80064b4:	b909      	cbnz	r1, 80064ba <__lo0bits+0x32>
 80064b6:	3008      	adds	r0, #8
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	0719      	lsls	r1, r3, #28
 80064bc:	bf04      	itt	eq
 80064be:	091b      	lsreq	r3, r3, #4
 80064c0:	3004      	addeq	r0, #4
 80064c2:	0799      	lsls	r1, r3, #30
 80064c4:	bf04      	itt	eq
 80064c6:	089b      	lsreq	r3, r3, #2
 80064c8:	3002      	addeq	r0, #2
 80064ca:	07d9      	lsls	r1, r3, #31
 80064cc:	d403      	bmi.n	80064d6 <__lo0bits+0x4e>
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	f100 0001 	add.w	r0, r0, #1
 80064d4:	d003      	beq.n	80064de <__lo0bits+0x56>
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	4770      	bx	lr
 80064da:	2000      	movs	r0, #0
 80064dc:	4770      	bx	lr
 80064de:	2020      	movs	r0, #32
 80064e0:	4770      	bx	lr
	...

080064e4 <__i2b>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	460c      	mov	r4, r1
 80064e8:	2101      	movs	r1, #1
 80064ea:	f7ff ff05 	bl	80062f8 <_Balloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	b928      	cbnz	r0, 80064fe <__i2b+0x1a>
 80064f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064f6:	4b04      	ldr	r3, [pc, #16]	; (8006508 <__i2b+0x24>)
 80064f8:	4804      	ldr	r0, [pc, #16]	; (800650c <__i2b+0x28>)
 80064fa:	f000 fb7f 	bl	8006bfc <__assert_func>
 80064fe:	2301      	movs	r3, #1
 8006500:	6144      	str	r4, [r0, #20]
 8006502:	6103      	str	r3, [r0, #16]
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	08007b27 	.word	0x08007b27
 800650c:	08007b38 	.word	0x08007b38

08006510 <__multiply>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	4691      	mov	r9, r2
 8006516:	690a      	ldr	r2, [r1, #16]
 8006518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800651c:	460c      	mov	r4, r1
 800651e:	429a      	cmp	r2, r3
 8006520:	bfbe      	ittt	lt
 8006522:	460b      	movlt	r3, r1
 8006524:	464c      	movlt	r4, r9
 8006526:	4699      	movlt	r9, r3
 8006528:	6927      	ldr	r7, [r4, #16]
 800652a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	6861      	ldr	r1, [r4, #4]
 8006532:	eb07 060a 	add.w	r6, r7, sl
 8006536:	42b3      	cmp	r3, r6
 8006538:	b085      	sub	sp, #20
 800653a:	bfb8      	it	lt
 800653c:	3101      	addlt	r1, #1
 800653e:	f7ff fedb 	bl	80062f8 <_Balloc>
 8006542:	b930      	cbnz	r0, 8006552 <__multiply+0x42>
 8006544:	4602      	mov	r2, r0
 8006546:	f240 115d 	movw	r1, #349	; 0x15d
 800654a:	4b43      	ldr	r3, [pc, #268]	; (8006658 <__multiply+0x148>)
 800654c:	4843      	ldr	r0, [pc, #268]	; (800665c <__multiply+0x14c>)
 800654e:	f000 fb55 	bl	8006bfc <__assert_func>
 8006552:	f100 0514 	add.w	r5, r0, #20
 8006556:	462b      	mov	r3, r5
 8006558:	2200      	movs	r2, #0
 800655a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800655e:	4543      	cmp	r3, r8
 8006560:	d321      	bcc.n	80065a6 <__multiply+0x96>
 8006562:	f104 0314 	add.w	r3, r4, #20
 8006566:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800656a:	f109 0314 	add.w	r3, r9, #20
 800656e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006572:	9202      	str	r2, [sp, #8]
 8006574:	1b3a      	subs	r2, r7, r4
 8006576:	3a15      	subs	r2, #21
 8006578:	f022 0203 	bic.w	r2, r2, #3
 800657c:	3204      	adds	r2, #4
 800657e:	f104 0115 	add.w	r1, r4, #21
 8006582:	428f      	cmp	r7, r1
 8006584:	bf38      	it	cc
 8006586:	2204      	movcc	r2, #4
 8006588:	9201      	str	r2, [sp, #4]
 800658a:	9a02      	ldr	r2, [sp, #8]
 800658c:	9303      	str	r3, [sp, #12]
 800658e:	429a      	cmp	r2, r3
 8006590:	d80c      	bhi.n	80065ac <__multiply+0x9c>
 8006592:	2e00      	cmp	r6, #0
 8006594:	dd03      	ble.n	800659e <__multiply+0x8e>
 8006596:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800659a:	2b00      	cmp	r3, #0
 800659c:	d059      	beq.n	8006652 <__multiply+0x142>
 800659e:	6106      	str	r6, [r0, #16]
 80065a0:	b005      	add	sp, #20
 80065a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a6:	f843 2b04 	str.w	r2, [r3], #4
 80065aa:	e7d8      	b.n	800655e <__multiply+0x4e>
 80065ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80065b0:	f1ba 0f00 	cmp.w	sl, #0
 80065b4:	d023      	beq.n	80065fe <__multiply+0xee>
 80065b6:	46a9      	mov	r9, r5
 80065b8:	f04f 0c00 	mov.w	ip, #0
 80065bc:	f104 0e14 	add.w	lr, r4, #20
 80065c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80065c4:	f8d9 1000 	ldr.w	r1, [r9]
 80065c8:	fa1f fb82 	uxth.w	fp, r2
 80065cc:	b289      	uxth	r1, r1
 80065ce:	fb0a 110b 	mla	r1, sl, fp, r1
 80065d2:	4461      	add	r1, ip
 80065d4:	f8d9 c000 	ldr.w	ip, [r9]
 80065d8:	0c12      	lsrs	r2, r2, #16
 80065da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80065de:	fb0a c202 	mla	r2, sl, r2, ip
 80065e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065e6:	b289      	uxth	r1, r1
 80065e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065ec:	4577      	cmp	r7, lr
 80065ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065f2:	f849 1b04 	str.w	r1, [r9], #4
 80065f6:	d8e3      	bhi.n	80065c0 <__multiply+0xb0>
 80065f8:	9a01      	ldr	r2, [sp, #4]
 80065fa:	f845 c002 	str.w	ip, [r5, r2]
 80065fe:	9a03      	ldr	r2, [sp, #12]
 8006600:	3304      	adds	r3, #4
 8006602:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006606:	f1b9 0f00 	cmp.w	r9, #0
 800660a:	d020      	beq.n	800664e <__multiply+0x13e>
 800660c:	46ae      	mov	lr, r5
 800660e:	f04f 0a00 	mov.w	sl, #0
 8006612:	6829      	ldr	r1, [r5, #0]
 8006614:	f104 0c14 	add.w	ip, r4, #20
 8006618:	f8bc b000 	ldrh.w	fp, [ip]
 800661c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006620:	b289      	uxth	r1, r1
 8006622:	fb09 220b 	mla	r2, r9, fp, r2
 8006626:	4492      	add	sl, r2
 8006628:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800662c:	f84e 1b04 	str.w	r1, [lr], #4
 8006630:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006634:	f8be 1000 	ldrh.w	r1, [lr]
 8006638:	0c12      	lsrs	r2, r2, #16
 800663a:	fb09 1102 	mla	r1, r9, r2, r1
 800663e:	4567      	cmp	r7, ip
 8006640:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006644:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006648:	d8e6      	bhi.n	8006618 <__multiply+0x108>
 800664a:	9a01      	ldr	r2, [sp, #4]
 800664c:	50a9      	str	r1, [r5, r2]
 800664e:	3504      	adds	r5, #4
 8006650:	e79b      	b.n	800658a <__multiply+0x7a>
 8006652:	3e01      	subs	r6, #1
 8006654:	e79d      	b.n	8006592 <__multiply+0x82>
 8006656:	bf00      	nop
 8006658:	08007b27 	.word	0x08007b27
 800665c:	08007b38 	.word	0x08007b38

08006660 <__pow5mult>:
 8006660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006664:	4615      	mov	r5, r2
 8006666:	f012 0203 	ands.w	r2, r2, #3
 800666a:	4606      	mov	r6, r0
 800666c:	460f      	mov	r7, r1
 800666e:	d007      	beq.n	8006680 <__pow5mult+0x20>
 8006670:	4c25      	ldr	r4, [pc, #148]	; (8006708 <__pow5mult+0xa8>)
 8006672:	3a01      	subs	r2, #1
 8006674:	2300      	movs	r3, #0
 8006676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800667a:	f7ff fe9f 	bl	80063bc <__multadd>
 800667e:	4607      	mov	r7, r0
 8006680:	10ad      	asrs	r5, r5, #2
 8006682:	d03d      	beq.n	8006700 <__pow5mult+0xa0>
 8006684:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006686:	b97c      	cbnz	r4, 80066a8 <__pow5mult+0x48>
 8006688:	2010      	movs	r0, #16
 800668a:	f7ff fe1f 	bl	80062cc <malloc>
 800668e:	4602      	mov	r2, r0
 8006690:	6270      	str	r0, [r6, #36]	; 0x24
 8006692:	b928      	cbnz	r0, 80066a0 <__pow5mult+0x40>
 8006694:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006698:	4b1c      	ldr	r3, [pc, #112]	; (800670c <__pow5mult+0xac>)
 800669a:	481d      	ldr	r0, [pc, #116]	; (8006710 <__pow5mult+0xb0>)
 800669c:	f000 faae 	bl	8006bfc <__assert_func>
 80066a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066a4:	6004      	str	r4, [r0, #0]
 80066a6:	60c4      	str	r4, [r0, #12]
 80066a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066b0:	b94c      	cbnz	r4, 80066c6 <__pow5mult+0x66>
 80066b2:	f240 2171 	movw	r1, #625	; 0x271
 80066b6:	4630      	mov	r0, r6
 80066b8:	f7ff ff14 	bl	80064e4 <__i2b>
 80066bc:	2300      	movs	r3, #0
 80066be:	4604      	mov	r4, r0
 80066c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80066c4:	6003      	str	r3, [r0, #0]
 80066c6:	f04f 0900 	mov.w	r9, #0
 80066ca:	07eb      	lsls	r3, r5, #31
 80066cc:	d50a      	bpl.n	80066e4 <__pow5mult+0x84>
 80066ce:	4639      	mov	r1, r7
 80066d0:	4622      	mov	r2, r4
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7ff ff1c 	bl	8006510 <__multiply>
 80066d8:	4680      	mov	r8, r0
 80066da:	4639      	mov	r1, r7
 80066dc:	4630      	mov	r0, r6
 80066de:	f7ff fe4b 	bl	8006378 <_Bfree>
 80066e2:	4647      	mov	r7, r8
 80066e4:	106d      	asrs	r5, r5, #1
 80066e6:	d00b      	beq.n	8006700 <__pow5mult+0xa0>
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	b938      	cbnz	r0, 80066fc <__pow5mult+0x9c>
 80066ec:	4622      	mov	r2, r4
 80066ee:	4621      	mov	r1, r4
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff ff0d 	bl	8006510 <__multiply>
 80066f6:	6020      	str	r0, [r4, #0]
 80066f8:	f8c0 9000 	str.w	r9, [r0]
 80066fc:	4604      	mov	r4, r0
 80066fe:	e7e4      	b.n	80066ca <__pow5mult+0x6a>
 8006700:	4638      	mov	r0, r7
 8006702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006706:	bf00      	nop
 8006708:	08007c88 	.word	0x08007c88
 800670c:	08007ab5 	.word	0x08007ab5
 8006710:	08007b38 	.word	0x08007b38

08006714 <__lshift>:
 8006714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	460c      	mov	r4, r1
 800671a:	4607      	mov	r7, r0
 800671c:	4691      	mov	r9, r2
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	6849      	ldr	r1, [r1, #4]
 8006722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800672c:	f108 0601 	add.w	r6, r8, #1
 8006730:	42b3      	cmp	r3, r6
 8006732:	db0b      	blt.n	800674c <__lshift+0x38>
 8006734:	4638      	mov	r0, r7
 8006736:	f7ff fddf 	bl	80062f8 <_Balloc>
 800673a:	4605      	mov	r5, r0
 800673c:	b948      	cbnz	r0, 8006752 <__lshift+0x3e>
 800673e:	4602      	mov	r2, r0
 8006740:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006744:	4b29      	ldr	r3, [pc, #164]	; (80067ec <__lshift+0xd8>)
 8006746:	482a      	ldr	r0, [pc, #168]	; (80067f0 <__lshift+0xdc>)
 8006748:	f000 fa58 	bl	8006bfc <__assert_func>
 800674c:	3101      	adds	r1, #1
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	e7ee      	b.n	8006730 <__lshift+0x1c>
 8006752:	2300      	movs	r3, #0
 8006754:	f100 0114 	add.w	r1, r0, #20
 8006758:	f100 0210 	add.w	r2, r0, #16
 800675c:	4618      	mov	r0, r3
 800675e:	4553      	cmp	r3, sl
 8006760:	db37      	blt.n	80067d2 <__lshift+0xbe>
 8006762:	6920      	ldr	r0, [r4, #16]
 8006764:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006768:	f104 0314 	add.w	r3, r4, #20
 800676c:	f019 091f 	ands.w	r9, r9, #31
 8006770:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006774:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006778:	d02f      	beq.n	80067da <__lshift+0xc6>
 800677a:	468a      	mov	sl, r1
 800677c:	f04f 0c00 	mov.w	ip, #0
 8006780:	f1c9 0e20 	rsb	lr, r9, #32
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	fa02 f209 	lsl.w	r2, r2, r9
 800678a:	ea42 020c 	orr.w	r2, r2, ip
 800678e:	f84a 2b04 	str.w	r2, [sl], #4
 8006792:	f853 2b04 	ldr.w	r2, [r3], #4
 8006796:	4298      	cmp	r0, r3
 8006798:	fa22 fc0e 	lsr.w	ip, r2, lr
 800679c:	d8f2      	bhi.n	8006784 <__lshift+0x70>
 800679e:	1b03      	subs	r3, r0, r4
 80067a0:	3b15      	subs	r3, #21
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	3304      	adds	r3, #4
 80067a8:	f104 0215 	add.w	r2, r4, #21
 80067ac:	4290      	cmp	r0, r2
 80067ae:	bf38      	it	cc
 80067b0:	2304      	movcc	r3, #4
 80067b2:	f841 c003 	str.w	ip, [r1, r3]
 80067b6:	f1bc 0f00 	cmp.w	ip, #0
 80067ba:	d001      	beq.n	80067c0 <__lshift+0xac>
 80067bc:	f108 0602 	add.w	r6, r8, #2
 80067c0:	3e01      	subs	r6, #1
 80067c2:	4638      	mov	r0, r7
 80067c4:	4621      	mov	r1, r4
 80067c6:	612e      	str	r6, [r5, #16]
 80067c8:	f7ff fdd6 	bl	8006378 <_Bfree>
 80067cc:	4628      	mov	r0, r5
 80067ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80067d6:	3301      	adds	r3, #1
 80067d8:	e7c1      	b.n	800675e <__lshift+0x4a>
 80067da:	3904      	subs	r1, #4
 80067dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e0:	4298      	cmp	r0, r3
 80067e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80067e6:	d8f9      	bhi.n	80067dc <__lshift+0xc8>
 80067e8:	e7ea      	b.n	80067c0 <__lshift+0xac>
 80067ea:	bf00      	nop
 80067ec:	08007b27 	.word	0x08007b27
 80067f0:	08007b38 	.word	0x08007b38

080067f4 <__mcmp>:
 80067f4:	4603      	mov	r3, r0
 80067f6:	690a      	ldr	r2, [r1, #16]
 80067f8:	6900      	ldr	r0, [r0, #16]
 80067fa:	b530      	push	{r4, r5, lr}
 80067fc:	1a80      	subs	r0, r0, r2
 80067fe:	d10d      	bne.n	800681c <__mcmp+0x28>
 8006800:	3314      	adds	r3, #20
 8006802:	3114      	adds	r1, #20
 8006804:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006808:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800680c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006810:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006814:	4295      	cmp	r5, r2
 8006816:	d002      	beq.n	800681e <__mcmp+0x2a>
 8006818:	d304      	bcc.n	8006824 <__mcmp+0x30>
 800681a:	2001      	movs	r0, #1
 800681c:	bd30      	pop	{r4, r5, pc}
 800681e:	42a3      	cmp	r3, r4
 8006820:	d3f4      	bcc.n	800680c <__mcmp+0x18>
 8006822:	e7fb      	b.n	800681c <__mcmp+0x28>
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	e7f8      	b.n	800681c <__mcmp+0x28>
	...

0800682c <__mdiff>:
 800682c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	460d      	mov	r5, r1
 8006832:	4607      	mov	r7, r0
 8006834:	4611      	mov	r1, r2
 8006836:	4628      	mov	r0, r5
 8006838:	4614      	mov	r4, r2
 800683a:	f7ff ffdb 	bl	80067f4 <__mcmp>
 800683e:	1e06      	subs	r6, r0, #0
 8006840:	d111      	bne.n	8006866 <__mdiff+0x3a>
 8006842:	4631      	mov	r1, r6
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff fd57 	bl	80062f8 <_Balloc>
 800684a:	4602      	mov	r2, r0
 800684c:	b928      	cbnz	r0, 800685a <__mdiff+0x2e>
 800684e:	f240 2132 	movw	r1, #562	; 0x232
 8006852:	4b3a      	ldr	r3, [pc, #232]	; (800693c <__mdiff+0x110>)
 8006854:	483a      	ldr	r0, [pc, #232]	; (8006940 <__mdiff+0x114>)
 8006856:	f000 f9d1 	bl	8006bfc <__assert_func>
 800685a:	2301      	movs	r3, #1
 800685c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006860:	4610      	mov	r0, r2
 8006862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006866:	bfa4      	itt	ge
 8006868:	4623      	movge	r3, r4
 800686a:	462c      	movge	r4, r5
 800686c:	4638      	mov	r0, r7
 800686e:	6861      	ldr	r1, [r4, #4]
 8006870:	bfa6      	itte	ge
 8006872:	461d      	movge	r5, r3
 8006874:	2600      	movge	r6, #0
 8006876:	2601      	movlt	r6, #1
 8006878:	f7ff fd3e 	bl	80062f8 <_Balloc>
 800687c:	4602      	mov	r2, r0
 800687e:	b918      	cbnz	r0, 8006888 <__mdiff+0x5c>
 8006880:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006884:	4b2d      	ldr	r3, [pc, #180]	; (800693c <__mdiff+0x110>)
 8006886:	e7e5      	b.n	8006854 <__mdiff+0x28>
 8006888:	f102 0814 	add.w	r8, r2, #20
 800688c:	46c2      	mov	sl, r8
 800688e:	f04f 0c00 	mov.w	ip, #0
 8006892:	6927      	ldr	r7, [r4, #16]
 8006894:	60c6      	str	r6, [r0, #12]
 8006896:	692e      	ldr	r6, [r5, #16]
 8006898:	f104 0014 	add.w	r0, r4, #20
 800689c:	f105 0914 	add.w	r9, r5, #20
 80068a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80068a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068a8:	3410      	adds	r4, #16
 80068aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80068ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80068b2:	fa1f f18b 	uxth.w	r1, fp
 80068b6:	448c      	add	ip, r1
 80068b8:	b299      	uxth	r1, r3
 80068ba:	0c1b      	lsrs	r3, r3, #16
 80068bc:	ebac 0101 	sub.w	r1, ip, r1
 80068c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80068c8:	b289      	uxth	r1, r1
 80068ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80068ce:	454e      	cmp	r6, r9
 80068d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80068d4:	f84a 3b04 	str.w	r3, [sl], #4
 80068d8:	d8e7      	bhi.n	80068aa <__mdiff+0x7e>
 80068da:	1b73      	subs	r3, r6, r5
 80068dc:	3b15      	subs	r3, #21
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	3515      	adds	r5, #21
 80068e4:	3304      	adds	r3, #4
 80068e6:	42ae      	cmp	r6, r5
 80068e8:	bf38      	it	cc
 80068ea:	2304      	movcc	r3, #4
 80068ec:	4418      	add	r0, r3
 80068ee:	4443      	add	r3, r8
 80068f0:	461e      	mov	r6, r3
 80068f2:	4605      	mov	r5, r0
 80068f4:	4575      	cmp	r5, lr
 80068f6:	d30e      	bcc.n	8006916 <__mdiff+0xea>
 80068f8:	f10e 0103 	add.w	r1, lr, #3
 80068fc:	1a09      	subs	r1, r1, r0
 80068fe:	f021 0103 	bic.w	r1, r1, #3
 8006902:	3803      	subs	r0, #3
 8006904:	4586      	cmp	lr, r0
 8006906:	bf38      	it	cc
 8006908:	2100      	movcc	r1, #0
 800690a:	4419      	add	r1, r3
 800690c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006910:	b18b      	cbz	r3, 8006936 <__mdiff+0x10a>
 8006912:	6117      	str	r7, [r2, #16]
 8006914:	e7a4      	b.n	8006860 <__mdiff+0x34>
 8006916:	f855 8b04 	ldr.w	r8, [r5], #4
 800691a:	fa1f f188 	uxth.w	r1, r8
 800691e:	4461      	add	r1, ip
 8006920:	140c      	asrs	r4, r1, #16
 8006922:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006926:	b289      	uxth	r1, r1
 8006928:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800692c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006930:	f846 1b04 	str.w	r1, [r6], #4
 8006934:	e7de      	b.n	80068f4 <__mdiff+0xc8>
 8006936:	3f01      	subs	r7, #1
 8006938:	e7e8      	b.n	800690c <__mdiff+0xe0>
 800693a:	bf00      	nop
 800693c:	08007b27 	.word	0x08007b27
 8006940:	08007b38 	.word	0x08007b38

08006944 <__d2b>:
 8006944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006948:	2101      	movs	r1, #1
 800694a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800694e:	4690      	mov	r8, r2
 8006950:	461d      	mov	r5, r3
 8006952:	f7ff fcd1 	bl	80062f8 <_Balloc>
 8006956:	4604      	mov	r4, r0
 8006958:	b930      	cbnz	r0, 8006968 <__d2b+0x24>
 800695a:	4602      	mov	r2, r0
 800695c:	f240 310a 	movw	r1, #778	; 0x30a
 8006960:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <__d2b+0xb0>)
 8006962:	4825      	ldr	r0, [pc, #148]	; (80069f8 <__d2b+0xb4>)
 8006964:	f000 f94a 	bl	8006bfc <__assert_func>
 8006968:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800696c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006970:	bb2d      	cbnz	r5, 80069be <__d2b+0x7a>
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	f1b8 0300 	subs.w	r3, r8, #0
 8006978:	d026      	beq.n	80069c8 <__d2b+0x84>
 800697a:	4668      	mov	r0, sp
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	f7ff fd83 	bl	8006488 <__lo0bits>
 8006982:	9900      	ldr	r1, [sp, #0]
 8006984:	b1f0      	cbz	r0, 80069c4 <__d2b+0x80>
 8006986:	9a01      	ldr	r2, [sp, #4]
 8006988:	f1c0 0320 	rsb	r3, r0, #32
 800698c:	fa02 f303 	lsl.w	r3, r2, r3
 8006990:	430b      	orrs	r3, r1
 8006992:	40c2      	lsrs	r2, r0
 8006994:	6163      	str	r3, [r4, #20]
 8006996:	9201      	str	r2, [sp, #4]
 8006998:	9b01      	ldr	r3, [sp, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	bf14      	ite	ne
 800699e:	2102      	movne	r1, #2
 80069a0:	2101      	moveq	r1, #1
 80069a2:	61a3      	str	r3, [r4, #24]
 80069a4:	6121      	str	r1, [r4, #16]
 80069a6:	b1c5      	cbz	r5, 80069da <__d2b+0x96>
 80069a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069ac:	4405      	add	r5, r0
 80069ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069b2:	603d      	str	r5, [r7, #0]
 80069b4:	6030      	str	r0, [r6, #0]
 80069b6:	4620      	mov	r0, r4
 80069b8:	b002      	add	sp, #8
 80069ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c2:	e7d6      	b.n	8006972 <__d2b+0x2e>
 80069c4:	6161      	str	r1, [r4, #20]
 80069c6:	e7e7      	b.n	8006998 <__d2b+0x54>
 80069c8:	a801      	add	r0, sp, #4
 80069ca:	f7ff fd5d 	bl	8006488 <__lo0bits>
 80069ce:	2101      	movs	r1, #1
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	6121      	str	r1, [r4, #16]
 80069d4:	6163      	str	r3, [r4, #20]
 80069d6:	3020      	adds	r0, #32
 80069d8:	e7e5      	b.n	80069a6 <__d2b+0x62>
 80069da:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80069de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069e2:	6038      	str	r0, [r7, #0]
 80069e4:	6918      	ldr	r0, [r3, #16]
 80069e6:	f7ff fd2f 	bl	8006448 <__hi0bits>
 80069ea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80069ee:	6031      	str	r1, [r6, #0]
 80069f0:	e7e1      	b.n	80069b6 <__d2b+0x72>
 80069f2:	bf00      	nop
 80069f4:	08007b27 	.word	0x08007b27
 80069f8:	08007b38 	.word	0x08007b38

080069fc <_calloc_r>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	fba1 5402 	umull	r5, r4, r1, r2
 8006a02:	b934      	cbnz	r4, 8006a12 <_calloc_r+0x16>
 8006a04:	4629      	mov	r1, r5
 8006a06:	f000 f875 	bl	8006af4 <_malloc_r>
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	b928      	cbnz	r0, 8006a1a <_calloc_r+0x1e>
 8006a0e:	4630      	mov	r0, r6
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	220c      	movs	r2, #12
 8006a14:	2600      	movs	r6, #0
 8006a16:	6002      	str	r2, [r0, #0]
 8006a18:	e7f9      	b.n	8006a0e <_calloc_r+0x12>
 8006a1a:	462a      	mov	r2, r5
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	f7fe f96f 	bl	8004d00 <memset>
 8006a22:	e7f4      	b.n	8006a0e <_calloc_r+0x12>

08006a24 <_free_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4605      	mov	r5, r0
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	d040      	beq.n	8006aae <_free_r+0x8a>
 8006a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a30:	1f0c      	subs	r4, r1, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bfb8      	it	lt
 8006a36:	18e4      	addlt	r4, r4, r3
 8006a38:	f000 f922 	bl	8006c80 <__malloc_lock>
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	; (8006ab0 <_free_r+0x8c>)
 8006a3e:	6813      	ldr	r3, [r2, #0]
 8006a40:	b933      	cbnz	r3, 8006a50 <_free_r+0x2c>
 8006a42:	6063      	str	r3, [r4, #4]
 8006a44:	6014      	str	r4, [r2, #0]
 8006a46:	4628      	mov	r0, r5
 8006a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a4c:	f000 b91e 	b.w	8006c8c <__malloc_unlock>
 8006a50:	42a3      	cmp	r3, r4
 8006a52:	d908      	bls.n	8006a66 <_free_r+0x42>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	1821      	adds	r1, r4, r0
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	bf01      	itttt	eq
 8006a5c:	6819      	ldreq	r1, [r3, #0]
 8006a5e:	685b      	ldreq	r3, [r3, #4]
 8006a60:	1809      	addeq	r1, r1, r0
 8006a62:	6021      	streq	r1, [r4, #0]
 8006a64:	e7ed      	b.n	8006a42 <_free_r+0x1e>
 8006a66:	461a      	mov	r2, r3
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	b10b      	cbz	r3, 8006a70 <_free_r+0x4c>
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	d9fa      	bls.n	8006a66 <_free_r+0x42>
 8006a70:	6811      	ldr	r1, [r2, #0]
 8006a72:	1850      	adds	r0, r2, r1
 8006a74:	42a0      	cmp	r0, r4
 8006a76:	d10b      	bne.n	8006a90 <_free_r+0x6c>
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	4401      	add	r1, r0
 8006a7c:	1850      	adds	r0, r2, r1
 8006a7e:	4283      	cmp	r3, r0
 8006a80:	6011      	str	r1, [r2, #0]
 8006a82:	d1e0      	bne.n	8006a46 <_free_r+0x22>
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4401      	add	r1, r0
 8006a8a:	6011      	str	r1, [r2, #0]
 8006a8c:	6053      	str	r3, [r2, #4]
 8006a8e:	e7da      	b.n	8006a46 <_free_r+0x22>
 8006a90:	d902      	bls.n	8006a98 <_free_r+0x74>
 8006a92:	230c      	movs	r3, #12
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	e7d6      	b.n	8006a46 <_free_r+0x22>
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	1821      	adds	r1, r4, r0
 8006a9c:	428b      	cmp	r3, r1
 8006a9e:	bf01      	itttt	eq
 8006aa0:	6819      	ldreq	r1, [r3, #0]
 8006aa2:	685b      	ldreq	r3, [r3, #4]
 8006aa4:	1809      	addeq	r1, r1, r0
 8006aa6:	6021      	streq	r1, [r4, #0]
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	6054      	str	r4, [r2, #4]
 8006aac:	e7cb      	b.n	8006a46 <_free_r+0x22>
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	2000032c 	.word	0x2000032c

08006ab4 <sbrk_aligned>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4e0e      	ldr	r6, [pc, #56]	; (8006af0 <sbrk_aligned+0x3c>)
 8006ab8:	460c      	mov	r4, r1
 8006aba:	6831      	ldr	r1, [r6, #0]
 8006abc:	4605      	mov	r5, r0
 8006abe:	b911      	cbnz	r1, 8006ac6 <sbrk_aligned+0x12>
 8006ac0:	f000 f88c 	bl	8006bdc <_sbrk_r>
 8006ac4:	6030      	str	r0, [r6, #0]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f887 	bl	8006bdc <_sbrk_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d00a      	beq.n	8006ae8 <sbrk_aligned+0x34>
 8006ad2:	1cc4      	adds	r4, r0, #3
 8006ad4:	f024 0403 	bic.w	r4, r4, #3
 8006ad8:	42a0      	cmp	r0, r4
 8006ada:	d007      	beq.n	8006aec <sbrk_aligned+0x38>
 8006adc:	1a21      	subs	r1, r4, r0
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 f87c 	bl	8006bdc <_sbrk_r>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d101      	bne.n	8006aec <sbrk_aligned+0x38>
 8006ae8:	f04f 34ff 	mov.w	r4, #4294967295
 8006aec:	4620      	mov	r0, r4
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	20000330 	.word	0x20000330

08006af4 <_malloc_r>:
 8006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af8:	1ccd      	adds	r5, r1, #3
 8006afa:	f025 0503 	bic.w	r5, r5, #3
 8006afe:	3508      	adds	r5, #8
 8006b00:	2d0c      	cmp	r5, #12
 8006b02:	bf38      	it	cc
 8006b04:	250c      	movcc	r5, #12
 8006b06:	2d00      	cmp	r5, #0
 8006b08:	4607      	mov	r7, r0
 8006b0a:	db01      	blt.n	8006b10 <_malloc_r+0x1c>
 8006b0c:	42a9      	cmp	r1, r5
 8006b0e:	d905      	bls.n	8006b1c <_malloc_r+0x28>
 8006b10:	230c      	movs	r3, #12
 8006b12:	2600      	movs	r6, #0
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	4630      	mov	r0, r6
 8006b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b1c:	4e2e      	ldr	r6, [pc, #184]	; (8006bd8 <_malloc_r+0xe4>)
 8006b1e:	f000 f8af 	bl	8006c80 <__malloc_lock>
 8006b22:	6833      	ldr	r3, [r6, #0]
 8006b24:	461c      	mov	r4, r3
 8006b26:	bb34      	cbnz	r4, 8006b76 <_malloc_r+0x82>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f7ff ffc2 	bl	8006ab4 <sbrk_aligned>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	4604      	mov	r4, r0
 8006b34:	d14d      	bne.n	8006bd2 <_malloc_r+0xde>
 8006b36:	6834      	ldr	r4, [r6, #0]
 8006b38:	4626      	mov	r6, r4
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	d140      	bne.n	8006bc0 <_malloc_r+0xcc>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	4631      	mov	r1, r6
 8006b42:	4638      	mov	r0, r7
 8006b44:	eb04 0803 	add.w	r8, r4, r3
 8006b48:	f000 f848 	bl	8006bdc <_sbrk_r>
 8006b4c:	4580      	cmp	r8, r0
 8006b4e:	d13a      	bne.n	8006bc6 <_malloc_r+0xd2>
 8006b50:	6821      	ldr	r1, [r4, #0]
 8006b52:	3503      	adds	r5, #3
 8006b54:	1a6d      	subs	r5, r5, r1
 8006b56:	f025 0503 	bic.w	r5, r5, #3
 8006b5a:	3508      	adds	r5, #8
 8006b5c:	2d0c      	cmp	r5, #12
 8006b5e:	bf38      	it	cc
 8006b60:	250c      	movcc	r5, #12
 8006b62:	4638      	mov	r0, r7
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7ff ffa5 	bl	8006ab4 <sbrk_aligned>
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d02b      	beq.n	8006bc6 <_malloc_r+0xd2>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	442b      	add	r3, r5
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	e00e      	b.n	8006b94 <_malloc_r+0xa0>
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	1b52      	subs	r2, r2, r5
 8006b7a:	d41e      	bmi.n	8006bba <_malloc_r+0xc6>
 8006b7c:	2a0b      	cmp	r2, #11
 8006b7e:	d916      	bls.n	8006bae <_malloc_r+0xba>
 8006b80:	1961      	adds	r1, r4, r5
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	6025      	str	r5, [r4, #0]
 8006b86:	bf18      	it	ne
 8006b88:	6059      	strne	r1, [r3, #4]
 8006b8a:	6863      	ldr	r3, [r4, #4]
 8006b8c:	bf08      	it	eq
 8006b8e:	6031      	streq	r1, [r6, #0]
 8006b90:	5162      	str	r2, [r4, r5]
 8006b92:	604b      	str	r3, [r1, #4]
 8006b94:	4638      	mov	r0, r7
 8006b96:	f104 060b 	add.w	r6, r4, #11
 8006b9a:	f000 f877 	bl	8006c8c <__malloc_unlock>
 8006b9e:	f026 0607 	bic.w	r6, r6, #7
 8006ba2:	1d23      	adds	r3, r4, #4
 8006ba4:	1af2      	subs	r2, r6, r3
 8006ba6:	d0b6      	beq.n	8006b16 <_malloc_r+0x22>
 8006ba8:	1b9b      	subs	r3, r3, r6
 8006baa:	50a3      	str	r3, [r4, r2]
 8006bac:	e7b3      	b.n	8006b16 <_malloc_r+0x22>
 8006bae:	6862      	ldr	r2, [r4, #4]
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	bf0c      	ite	eq
 8006bb4:	6032      	streq	r2, [r6, #0]
 8006bb6:	605a      	strne	r2, [r3, #4]
 8006bb8:	e7ec      	b.n	8006b94 <_malloc_r+0xa0>
 8006bba:	4623      	mov	r3, r4
 8006bbc:	6864      	ldr	r4, [r4, #4]
 8006bbe:	e7b2      	b.n	8006b26 <_malloc_r+0x32>
 8006bc0:	4634      	mov	r4, r6
 8006bc2:	6876      	ldr	r6, [r6, #4]
 8006bc4:	e7b9      	b.n	8006b3a <_malloc_r+0x46>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	4638      	mov	r0, r7
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	f000 f85e 	bl	8006c8c <__malloc_unlock>
 8006bd0:	e7a1      	b.n	8006b16 <_malloc_r+0x22>
 8006bd2:	6025      	str	r5, [r4, #0]
 8006bd4:	e7de      	b.n	8006b94 <_malloc_r+0xa0>
 8006bd6:	bf00      	nop
 8006bd8:	2000032c 	.word	0x2000032c

08006bdc <_sbrk_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	2300      	movs	r3, #0
 8006be0:	4d05      	ldr	r5, [pc, #20]	; (8006bf8 <_sbrk_r+0x1c>)
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	f7fb fa72 	bl	80020d0 <_sbrk>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_sbrk_r+0x1a>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_sbrk_r+0x1a>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20000334 	.word	0x20000334

08006bfc <__assert_func>:
 8006bfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bfe:	4614      	mov	r4, r2
 8006c00:	461a      	mov	r2, r3
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <__assert_func+0x2c>)
 8006c04:	4605      	mov	r5, r0
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68d8      	ldr	r0, [r3, #12]
 8006c0a:	b14c      	cbz	r4, 8006c20 <__assert_func+0x24>
 8006c0c:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <__assert_func+0x30>)
 8006c0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c12:	9100      	str	r1, [sp, #0]
 8006c14:	462b      	mov	r3, r5
 8006c16:	4906      	ldr	r1, [pc, #24]	; (8006c30 <__assert_func+0x34>)
 8006c18:	f000 f80e 	bl	8006c38 <fiprintf>
 8006c1c:	f000 fa62 	bl	80070e4 <abort>
 8006c20:	4b04      	ldr	r3, [pc, #16]	; (8006c34 <__assert_func+0x38>)
 8006c22:	461c      	mov	r4, r3
 8006c24:	e7f3      	b.n	8006c0e <__assert_func+0x12>
 8006c26:	bf00      	nop
 8006c28:	2000000c 	.word	0x2000000c
 8006c2c:	08007c94 	.word	0x08007c94
 8006c30:	08007ca1 	.word	0x08007ca1
 8006c34:	08007ccf 	.word	0x08007ccf

08006c38 <fiprintf>:
 8006c38:	b40e      	push	{r1, r2, r3}
 8006c3a:	b503      	push	{r0, r1, lr}
 8006c3c:	4601      	mov	r1, r0
 8006c3e:	ab03      	add	r3, sp, #12
 8006c40:	4805      	ldr	r0, [pc, #20]	; (8006c58 <fiprintf+0x20>)
 8006c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c46:	6800      	ldr	r0, [r0, #0]
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	f000 f84d 	bl	8006ce8 <_vfiprintf_r>
 8006c4e:	b002      	add	sp, #8
 8006c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c54:	b003      	add	sp, #12
 8006c56:	4770      	bx	lr
 8006c58:	2000000c 	.word	0x2000000c

08006c5c <__ascii_mbtowc>:
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	b901      	cbnz	r1, 8006c62 <__ascii_mbtowc+0x6>
 8006c60:	a901      	add	r1, sp, #4
 8006c62:	b142      	cbz	r2, 8006c76 <__ascii_mbtowc+0x1a>
 8006c64:	b14b      	cbz	r3, 8006c7a <__ascii_mbtowc+0x1e>
 8006c66:	7813      	ldrb	r3, [r2, #0]
 8006c68:	600b      	str	r3, [r1, #0]
 8006c6a:	7812      	ldrb	r2, [r2, #0]
 8006c6c:	1e10      	subs	r0, r2, #0
 8006c6e:	bf18      	it	ne
 8006c70:	2001      	movne	r0, #1
 8006c72:	b002      	add	sp, #8
 8006c74:	4770      	bx	lr
 8006c76:	4610      	mov	r0, r2
 8006c78:	e7fb      	b.n	8006c72 <__ascii_mbtowc+0x16>
 8006c7a:	f06f 0001 	mvn.w	r0, #1
 8006c7e:	e7f8      	b.n	8006c72 <__ascii_mbtowc+0x16>

08006c80 <__malloc_lock>:
 8006c80:	4801      	ldr	r0, [pc, #4]	; (8006c88 <__malloc_lock+0x8>)
 8006c82:	f000 bbeb 	b.w	800745c <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	20000338 	.word	0x20000338

08006c8c <__malloc_unlock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__malloc_unlock+0x8>)
 8006c8e:	f000 bbe6 	b.w	800745e <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	20000338 	.word	0x20000338

08006c98 <__sfputc_r>:
 8006c98:	6893      	ldr	r3, [r2, #8]
 8006c9a:	b410      	push	{r4}
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	6093      	str	r3, [r2, #8]
 8006ca2:	da07      	bge.n	8006cb4 <__sfputc_r+0x1c>
 8006ca4:	6994      	ldr	r4, [r2, #24]
 8006ca6:	42a3      	cmp	r3, r4
 8006ca8:	db01      	blt.n	8006cae <__sfputc_r+0x16>
 8006caa:	290a      	cmp	r1, #10
 8006cac:	d102      	bne.n	8006cb4 <__sfputc_r+0x1c>
 8006cae:	bc10      	pop	{r4}
 8006cb0:	f000 b94a 	b.w	8006f48 <__swbuf_r>
 8006cb4:	6813      	ldr	r3, [r2, #0]
 8006cb6:	1c58      	adds	r0, r3, #1
 8006cb8:	6010      	str	r0, [r2, #0]
 8006cba:	7019      	strb	r1, [r3, #0]
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	bc10      	pop	{r4}
 8006cc0:	4770      	bx	lr

08006cc2 <__sfputs_r>:
 8006cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	460f      	mov	r7, r1
 8006cc8:	4614      	mov	r4, r2
 8006cca:	18d5      	adds	r5, r2, r3
 8006ccc:	42ac      	cmp	r4, r5
 8006cce:	d101      	bne.n	8006cd4 <__sfputs_r+0x12>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e007      	b.n	8006ce4 <__sfputs_r+0x22>
 8006cd4:	463a      	mov	r2, r7
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cdc:	f7ff ffdc 	bl	8006c98 <__sfputc_r>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d1f3      	bne.n	8006ccc <__sfputs_r+0xa>
 8006ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ce8 <_vfiprintf_r>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	460d      	mov	r5, r1
 8006cee:	4614      	mov	r4, r2
 8006cf0:	4698      	mov	r8, r3
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	b09d      	sub	sp, #116	; 0x74
 8006cf6:	b118      	cbz	r0, 8006d00 <_vfiprintf_r+0x18>
 8006cf8:	6983      	ldr	r3, [r0, #24]
 8006cfa:	b90b      	cbnz	r3, 8006d00 <_vfiprintf_r+0x18>
 8006cfc:	f000 fb10 	bl	8007320 <__sinit>
 8006d00:	4b89      	ldr	r3, [pc, #548]	; (8006f28 <_vfiprintf_r+0x240>)
 8006d02:	429d      	cmp	r5, r3
 8006d04:	d11b      	bne.n	8006d3e <_vfiprintf_r+0x56>
 8006d06:	6875      	ldr	r5, [r6, #4]
 8006d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d0a:	07d9      	lsls	r1, r3, #31
 8006d0c:	d405      	bmi.n	8006d1a <_vfiprintf_r+0x32>
 8006d0e:	89ab      	ldrh	r3, [r5, #12]
 8006d10:	059a      	lsls	r2, r3, #22
 8006d12:	d402      	bmi.n	8006d1a <_vfiprintf_r+0x32>
 8006d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d16:	f000 fba1 	bl	800745c <__retarget_lock_acquire_recursive>
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	071b      	lsls	r3, r3, #28
 8006d1e:	d501      	bpl.n	8006d24 <_vfiprintf_r+0x3c>
 8006d20:	692b      	ldr	r3, [r5, #16]
 8006d22:	b9eb      	cbnz	r3, 8006d60 <_vfiprintf_r+0x78>
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f000 f96e 	bl	8007008 <__swsetup_r>
 8006d2c:	b1c0      	cbz	r0, 8006d60 <_vfiprintf_r+0x78>
 8006d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d30:	07dc      	lsls	r4, r3, #31
 8006d32:	d50e      	bpl.n	8006d52 <_vfiprintf_r+0x6a>
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
 8006d38:	b01d      	add	sp, #116	; 0x74
 8006d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3e:	4b7b      	ldr	r3, [pc, #492]	; (8006f2c <_vfiprintf_r+0x244>)
 8006d40:	429d      	cmp	r5, r3
 8006d42:	d101      	bne.n	8006d48 <_vfiprintf_r+0x60>
 8006d44:	68b5      	ldr	r5, [r6, #8]
 8006d46:	e7df      	b.n	8006d08 <_vfiprintf_r+0x20>
 8006d48:	4b79      	ldr	r3, [pc, #484]	; (8006f30 <_vfiprintf_r+0x248>)
 8006d4a:	429d      	cmp	r5, r3
 8006d4c:	bf08      	it	eq
 8006d4e:	68f5      	ldreq	r5, [r6, #12]
 8006d50:	e7da      	b.n	8006d08 <_vfiprintf_r+0x20>
 8006d52:	89ab      	ldrh	r3, [r5, #12]
 8006d54:	0598      	lsls	r0, r3, #22
 8006d56:	d4ed      	bmi.n	8006d34 <_vfiprintf_r+0x4c>
 8006d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d5a:	f000 fb80 	bl	800745e <__retarget_lock_release_recursive>
 8006d5e:	e7e9      	b.n	8006d34 <_vfiprintf_r+0x4c>
 8006d60:	2300      	movs	r3, #0
 8006d62:	9309      	str	r3, [sp, #36]	; 0x24
 8006d64:	2320      	movs	r3, #32
 8006d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d6a:	2330      	movs	r3, #48	; 0x30
 8006d6c:	f04f 0901 	mov.w	r9, #1
 8006d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f34 <_vfiprintf_r+0x24c>
 8006d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d7c:	4623      	mov	r3, r4
 8006d7e:	469a      	mov	sl, r3
 8006d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d84:	b10a      	cbz	r2, 8006d8a <_vfiprintf_r+0xa2>
 8006d86:	2a25      	cmp	r2, #37	; 0x25
 8006d88:	d1f9      	bne.n	8006d7e <_vfiprintf_r+0x96>
 8006d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d8e:	d00b      	beq.n	8006da8 <_vfiprintf_r+0xc0>
 8006d90:	465b      	mov	r3, fp
 8006d92:	4622      	mov	r2, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff ff93 	bl	8006cc2 <__sfputs_r>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f000 80aa 	beq.w	8006ef6 <_vfiprintf_r+0x20e>
 8006da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da4:	445a      	add	r2, fp
 8006da6:	9209      	str	r2, [sp, #36]	; 0x24
 8006da8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80a2 	beq.w	8006ef6 <_vfiprintf_r+0x20e>
 8006db2:	2300      	movs	r3, #0
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dbc:	f10a 0a01 	add.w	sl, sl, #1
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	9307      	str	r3, [sp, #28]
 8006dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8006dca:	4654      	mov	r4, sl
 8006dcc:	2205      	movs	r2, #5
 8006dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd2:	4858      	ldr	r0, [pc, #352]	; (8006f34 <_vfiprintf_r+0x24c>)
 8006dd4:	f7ff fa82 	bl	80062dc <memchr>
 8006dd8:	9a04      	ldr	r2, [sp, #16]
 8006dda:	b9d8      	cbnz	r0, 8006e14 <_vfiprintf_r+0x12c>
 8006ddc:	06d1      	lsls	r1, r2, #27
 8006dde:	bf44      	itt	mi
 8006de0:	2320      	movmi	r3, #32
 8006de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de6:	0713      	lsls	r3, r2, #28
 8006de8:	bf44      	itt	mi
 8006dea:	232b      	movmi	r3, #43	; 0x2b
 8006dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df0:	f89a 3000 	ldrb.w	r3, [sl]
 8006df4:	2b2a      	cmp	r3, #42	; 0x2a
 8006df6:	d015      	beq.n	8006e24 <_vfiprintf_r+0x13c>
 8006df8:	4654      	mov	r4, sl
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	f04f 0c0a 	mov.w	ip, #10
 8006e00:	9a07      	ldr	r2, [sp, #28]
 8006e02:	4621      	mov	r1, r4
 8006e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e08:	3b30      	subs	r3, #48	; 0x30
 8006e0a:	2b09      	cmp	r3, #9
 8006e0c:	d94e      	bls.n	8006eac <_vfiprintf_r+0x1c4>
 8006e0e:	b1b0      	cbz	r0, 8006e3e <_vfiprintf_r+0x156>
 8006e10:	9207      	str	r2, [sp, #28]
 8006e12:	e014      	b.n	8006e3e <_vfiprintf_r+0x156>
 8006e14:	eba0 0308 	sub.w	r3, r0, r8
 8006e18:	fa09 f303 	lsl.w	r3, r9, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	46a2      	mov	sl, r4
 8006e20:	9304      	str	r3, [sp, #16]
 8006e22:	e7d2      	b.n	8006dca <_vfiprintf_r+0xe2>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	1d19      	adds	r1, r3, #4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	9103      	str	r1, [sp, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bfbb      	ittet	lt
 8006e30:	425b      	neglt	r3, r3
 8006e32:	f042 0202 	orrlt.w	r2, r2, #2
 8006e36:	9307      	strge	r3, [sp, #28]
 8006e38:	9307      	strlt	r3, [sp, #28]
 8006e3a:	bfb8      	it	lt
 8006e3c:	9204      	strlt	r2, [sp, #16]
 8006e3e:	7823      	ldrb	r3, [r4, #0]
 8006e40:	2b2e      	cmp	r3, #46	; 0x2e
 8006e42:	d10c      	bne.n	8006e5e <_vfiprintf_r+0x176>
 8006e44:	7863      	ldrb	r3, [r4, #1]
 8006e46:	2b2a      	cmp	r3, #42	; 0x2a
 8006e48:	d135      	bne.n	8006eb6 <_vfiprintf_r+0x1ce>
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	3402      	adds	r4, #2
 8006e4e:	1d1a      	adds	r2, r3, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	9203      	str	r2, [sp, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	bfb8      	it	lt
 8006e58:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e5c:	9305      	str	r3, [sp, #20]
 8006e5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f38 <_vfiprintf_r+0x250>
 8006e62:	2203      	movs	r2, #3
 8006e64:	4650      	mov	r0, sl
 8006e66:	7821      	ldrb	r1, [r4, #0]
 8006e68:	f7ff fa38 	bl	80062dc <memchr>
 8006e6c:	b140      	cbz	r0, 8006e80 <_vfiprintf_r+0x198>
 8006e6e:	2340      	movs	r3, #64	; 0x40
 8006e70:	eba0 000a 	sub.w	r0, r0, sl
 8006e74:	fa03 f000 	lsl.w	r0, r3, r0
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	3401      	adds	r4, #1
 8006e7c:	4303      	orrs	r3, r0
 8006e7e:	9304      	str	r3, [sp, #16]
 8006e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e84:	2206      	movs	r2, #6
 8006e86:	482d      	ldr	r0, [pc, #180]	; (8006f3c <_vfiprintf_r+0x254>)
 8006e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e8c:	f7ff fa26 	bl	80062dc <memchr>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d03f      	beq.n	8006f14 <_vfiprintf_r+0x22c>
 8006e94:	4b2a      	ldr	r3, [pc, #168]	; (8006f40 <_vfiprintf_r+0x258>)
 8006e96:	bb1b      	cbnz	r3, 8006ee0 <_vfiprintf_r+0x1f8>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	3307      	adds	r3, #7
 8006e9c:	f023 0307 	bic.w	r3, r3, #7
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	9303      	str	r3, [sp, #12]
 8006ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea6:	443b      	add	r3, r7
 8006ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eaa:	e767      	b.n	8006d7c <_vfiprintf_r+0x94>
 8006eac:	460c      	mov	r4, r1
 8006eae:	2001      	movs	r0, #1
 8006eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eb4:	e7a5      	b.n	8006e02 <_vfiprintf_r+0x11a>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f04f 0c0a 	mov.w	ip, #10
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	9305      	str	r3, [sp, #20]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ec8:	3a30      	subs	r2, #48	; 0x30
 8006eca:	2a09      	cmp	r2, #9
 8006ecc:	d903      	bls.n	8006ed6 <_vfiprintf_r+0x1ee>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0c5      	beq.n	8006e5e <_vfiprintf_r+0x176>
 8006ed2:	9105      	str	r1, [sp, #20]
 8006ed4:	e7c3      	b.n	8006e5e <_vfiprintf_r+0x176>
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	2301      	movs	r3, #1
 8006eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ede:	e7f0      	b.n	8006ec2 <_vfiprintf_r+0x1da>
 8006ee0:	ab03      	add	r3, sp, #12
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <_vfiprintf_r+0x25c>)
 8006eea:	a904      	add	r1, sp, #16
 8006eec:	f7fd ffae 	bl	8004e4c <_printf_float>
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	1c78      	adds	r0, r7, #1
 8006ef4:	d1d6      	bne.n	8006ea4 <_vfiprintf_r+0x1bc>
 8006ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ef8:	07d9      	lsls	r1, r3, #31
 8006efa:	d405      	bmi.n	8006f08 <_vfiprintf_r+0x220>
 8006efc:	89ab      	ldrh	r3, [r5, #12]
 8006efe:	059a      	lsls	r2, r3, #22
 8006f00:	d402      	bmi.n	8006f08 <_vfiprintf_r+0x220>
 8006f02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f04:	f000 faab 	bl	800745e <__retarget_lock_release_recursive>
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	065b      	lsls	r3, r3, #25
 8006f0c:	f53f af12 	bmi.w	8006d34 <_vfiprintf_r+0x4c>
 8006f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f12:	e711      	b.n	8006d38 <_vfiprintf_r+0x50>
 8006f14:	ab03      	add	r3, sp, #12
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	462a      	mov	r2, r5
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <_vfiprintf_r+0x25c>)
 8006f1e:	a904      	add	r1, sp, #16
 8006f20:	f7fe fa30 	bl	8005384 <_printf_i>
 8006f24:	e7e4      	b.n	8006ef0 <_vfiprintf_r+0x208>
 8006f26:	bf00      	nop
 8006f28:	08007e0c 	.word	0x08007e0c
 8006f2c:	08007e2c 	.word	0x08007e2c
 8006f30:	08007dec 	.word	0x08007dec
 8006f34:	08007cda 	.word	0x08007cda
 8006f38:	08007ce0 	.word	0x08007ce0
 8006f3c:	08007ce4 	.word	0x08007ce4
 8006f40:	08004e4d 	.word	0x08004e4d
 8006f44:	08006cc3 	.word	0x08006cc3

08006f48 <__swbuf_r>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	460e      	mov	r6, r1
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b118      	cbz	r0, 8006f5a <__swbuf_r+0x12>
 8006f52:	6983      	ldr	r3, [r0, #24]
 8006f54:	b90b      	cbnz	r3, 8006f5a <__swbuf_r+0x12>
 8006f56:	f000 f9e3 	bl	8007320 <__sinit>
 8006f5a:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <__swbuf_r+0x98>)
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	d12b      	bne.n	8006fb8 <__swbuf_r+0x70>
 8006f60:	686c      	ldr	r4, [r5, #4]
 8006f62:	69a3      	ldr	r3, [r4, #24]
 8006f64:	60a3      	str	r3, [r4, #8]
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	071a      	lsls	r2, r3, #28
 8006f6a:	d52f      	bpl.n	8006fcc <__swbuf_r+0x84>
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	b36b      	cbz	r3, 8006fcc <__swbuf_r+0x84>
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	6820      	ldr	r0, [r4, #0]
 8006f74:	b2f6      	uxtb	r6, r6
 8006f76:	1ac0      	subs	r0, r0, r3
 8006f78:	6963      	ldr	r3, [r4, #20]
 8006f7a:	4637      	mov	r7, r6
 8006f7c:	4283      	cmp	r3, r0
 8006f7e:	dc04      	bgt.n	8006f8a <__swbuf_r+0x42>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f938 	bl	80071f8 <_fflush_r>
 8006f88:	bb30      	cbnz	r0, 8006fd8 <__swbuf_r+0x90>
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	60a3      	str	r3, [r4, #8]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	6022      	str	r2, [r4, #0]
 8006f98:	701e      	strb	r6, [r3, #0]
 8006f9a:	6963      	ldr	r3, [r4, #20]
 8006f9c:	4283      	cmp	r3, r0
 8006f9e:	d004      	beq.n	8006faa <__swbuf_r+0x62>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d506      	bpl.n	8006fb4 <__swbuf_r+0x6c>
 8006fa6:	2e0a      	cmp	r6, #10
 8006fa8:	d104      	bne.n	8006fb4 <__swbuf_r+0x6c>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 f923 	bl	80071f8 <_fflush_r>
 8006fb2:	b988      	cbnz	r0, 8006fd8 <__swbuf_r+0x90>
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <__swbuf_r+0x9c>)
 8006fba:	429c      	cmp	r4, r3
 8006fbc:	d101      	bne.n	8006fc2 <__swbuf_r+0x7a>
 8006fbe:	68ac      	ldr	r4, [r5, #8]
 8006fc0:	e7cf      	b.n	8006f62 <__swbuf_r+0x1a>
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <__swbuf_r+0xa0>)
 8006fc4:	429c      	cmp	r4, r3
 8006fc6:	bf08      	it	eq
 8006fc8:	68ec      	ldreq	r4, [r5, #12]
 8006fca:	e7ca      	b.n	8006f62 <__swbuf_r+0x1a>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 f81a 	bl	8007008 <__swsetup_r>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d0cb      	beq.n	8006f70 <__swbuf_r+0x28>
 8006fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8006fdc:	e7ea      	b.n	8006fb4 <__swbuf_r+0x6c>
 8006fde:	bf00      	nop
 8006fe0:	08007e0c 	.word	0x08007e0c
 8006fe4:	08007e2c 	.word	0x08007e2c
 8006fe8:	08007dec 	.word	0x08007dec

08006fec <__ascii_wctomb>:
 8006fec:	4603      	mov	r3, r0
 8006fee:	4608      	mov	r0, r1
 8006ff0:	b141      	cbz	r1, 8007004 <__ascii_wctomb+0x18>
 8006ff2:	2aff      	cmp	r2, #255	; 0xff
 8006ff4:	d904      	bls.n	8007000 <__ascii_wctomb+0x14>
 8006ff6:	228a      	movs	r2, #138	; 0x8a
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	4770      	bx	lr
 8007000:	2001      	movs	r0, #1
 8007002:	700a      	strb	r2, [r1, #0]
 8007004:	4770      	bx	lr
	...

08007008 <__swsetup_r>:
 8007008:	4b32      	ldr	r3, [pc, #200]	; (80070d4 <__swsetup_r+0xcc>)
 800700a:	b570      	push	{r4, r5, r6, lr}
 800700c:	681d      	ldr	r5, [r3, #0]
 800700e:	4606      	mov	r6, r0
 8007010:	460c      	mov	r4, r1
 8007012:	b125      	cbz	r5, 800701e <__swsetup_r+0x16>
 8007014:	69ab      	ldr	r3, [r5, #24]
 8007016:	b913      	cbnz	r3, 800701e <__swsetup_r+0x16>
 8007018:	4628      	mov	r0, r5
 800701a:	f000 f981 	bl	8007320 <__sinit>
 800701e:	4b2e      	ldr	r3, [pc, #184]	; (80070d8 <__swsetup_r+0xd0>)
 8007020:	429c      	cmp	r4, r3
 8007022:	d10f      	bne.n	8007044 <__swsetup_r+0x3c>
 8007024:	686c      	ldr	r4, [r5, #4]
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800702c:	0719      	lsls	r1, r3, #28
 800702e:	d42c      	bmi.n	800708a <__swsetup_r+0x82>
 8007030:	06dd      	lsls	r5, r3, #27
 8007032:	d411      	bmi.n	8007058 <__swsetup_r+0x50>
 8007034:	2309      	movs	r3, #9
 8007036:	6033      	str	r3, [r6, #0]
 8007038:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	81a3      	strh	r3, [r4, #12]
 8007042:	e03e      	b.n	80070c2 <__swsetup_r+0xba>
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <__swsetup_r+0xd4>)
 8007046:	429c      	cmp	r4, r3
 8007048:	d101      	bne.n	800704e <__swsetup_r+0x46>
 800704a:	68ac      	ldr	r4, [r5, #8]
 800704c:	e7eb      	b.n	8007026 <__swsetup_r+0x1e>
 800704e:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <__swsetup_r+0xd8>)
 8007050:	429c      	cmp	r4, r3
 8007052:	bf08      	it	eq
 8007054:	68ec      	ldreq	r4, [r5, #12]
 8007056:	e7e6      	b.n	8007026 <__swsetup_r+0x1e>
 8007058:	0758      	lsls	r0, r3, #29
 800705a:	d512      	bpl.n	8007082 <__swsetup_r+0x7a>
 800705c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800705e:	b141      	cbz	r1, 8007072 <__swsetup_r+0x6a>
 8007060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007064:	4299      	cmp	r1, r3
 8007066:	d002      	beq.n	800706e <__swsetup_r+0x66>
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff fcdb 	bl	8006a24 <_free_r>
 800706e:	2300      	movs	r3, #0
 8007070:	6363      	str	r3, [r4, #52]	; 0x34
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	2300      	movs	r3, #0
 800707c:	6063      	str	r3, [r4, #4]
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	f043 0308 	orr.w	r3, r3, #8
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	b94b      	cbnz	r3, 80070a2 <__swsetup_r+0x9a>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007098:	d003      	beq.n	80070a2 <__swsetup_r+0x9a>
 800709a:	4621      	mov	r1, r4
 800709c:	4630      	mov	r0, r6
 800709e:	f000 fa05 	bl	80074ac <__smakebuf_r>
 80070a2:	89a0      	ldrh	r0, [r4, #12]
 80070a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a8:	f010 0301 	ands.w	r3, r0, #1
 80070ac:	d00a      	beq.n	80070c4 <__swsetup_r+0xbc>
 80070ae:	2300      	movs	r3, #0
 80070b0:	60a3      	str	r3, [r4, #8]
 80070b2:	6963      	ldr	r3, [r4, #20]
 80070b4:	425b      	negs	r3, r3
 80070b6:	61a3      	str	r3, [r4, #24]
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	b943      	cbnz	r3, 80070ce <__swsetup_r+0xc6>
 80070bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070c0:	d1ba      	bne.n	8007038 <__swsetup_r+0x30>
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	0781      	lsls	r1, r0, #30
 80070c6:	bf58      	it	pl
 80070c8:	6963      	ldrpl	r3, [r4, #20]
 80070ca:	60a3      	str	r3, [r4, #8]
 80070cc:	e7f4      	b.n	80070b8 <__swsetup_r+0xb0>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e7f7      	b.n	80070c2 <__swsetup_r+0xba>
 80070d2:	bf00      	nop
 80070d4:	2000000c 	.word	0x2000000c
 80070d8:	08007e0c 	.word	0x08007e0c
 80070dc:	08007e2c 	.word	0x08007e2c
 80070e0:	08007dec 	.word	0x08007dec

080070e4 <abort>:
 80070e4:	2006      	movs	r0, #6
 80070e6:	b508      	push	{r3, lr}
 80070e8:	f000 fa48 	bl	800757c <raise>
 80070ec:	2001      	movs	r0, #1
 80070ee:	f7fa ff7c 	bl	8001fea <_exit>
	...

080070f4 <__sflush_r>:
 80070f4:	898a      	ldrh	r2, [r1, #12]
 80070f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f8:	4605      	mov	r5, r0
 80070fa:	0710      	lsls	r0, r2, #28
 80070fc:	460c      	mov	r4, r1
 80070fe:	d457      	bmi.n	80071b0 <__sflush_r+0xbc>
 8007100:	684b      	ldr	r3, [r1, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	dc04      	bgt.n	8007110 <__sflush_r+0x1c>
 8007106:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	dc01      	bgt.n	8007110 <__sflush_r+0x1c>
 800710c:	2000      	movs	r0, #0
 800710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007112:	2e00      	cmp	r6, #0
 8007114:	d0fa      	beq.n	800710c <__sflush_r+0x18>
 8007116:	2300      	movs	r3, #0
 8007118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800711c:	682f      	ldr	r7, [r5, #0]
 800711e:	602b      	str	r3, [r5, #0]
 8007120:	d032      	beq.n	8007188 <__sflush_r+0x94>
 8007122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	075a      	lsls	r2, r3, #29
 8007128:	d505      	bpl.n	8007136 <__sflush_r+0x42>
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	1ac0      	subs	r0, r0, r3
 800712e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007130:	b10b      	cbz	r3, 8007136 <__sflush_r+0x42>
 8007132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007134:	1ac0      	subs	r0, r0, r3
 8007136:	2300      	movs	r3, #0
 8007138:	4602      	mov	r2, r0
 800713a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800713c:	4628      	mov	r0, r5
 800713e:	6a21      	ldr	r1, [r4, #32]
 8007140:	47b0      	blx	r6
 8007142:	1c43      	adds	r3, r0, #1
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	d106      	bne.n	8007156 <__sflush_r+0x62>
 8007148:	6829      	ldr	r1, [r5, #0]
 800714a:	291d      	cmp	r1, #29
 800714c:	d82c      	bhi.n	80071a8 <__sflush_r+0xb4>
 800714e:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <__sflush_r+0x100>)
 8007150:	40ca      	lsrs	r2, r1
 8007152:	07d6      	lsls	r6, r2, #31
 8007154:	d528      	bpl.n	80071a8 <__sflush_r+0xb4>
 8007156:	2200      	movs	r2, #0
 8007158:	6062      	str	r2, [r4, #4]
 800715a:	6922      	ldr	r2, [r4, #16]
 800715c:	04d9      	lsls	r1, r3, #19
 800715e:	6022      	str	r2, [r4, #0]
 8007160:	d504      	bpl.n	800716c <__sflush_r+0x78>
 8007162:	1c42      	adds	r2, r0, #1
 8007164:	d101      	bne.n	800716a <__sflush_r+0x76>
 8007166:	682b      	ldr	r3, [r5, #0]
 8007168:	b903      	cbnz	r3, 800716c <__sflush_r+0x78>
 800716a:	6560      	str	r0, [r4, #84]	; 0x54
 800716c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800716e:	602f      	str	r7, [r5, #0]
 8007170:	2900      	cmp	r1, #0
 8007172:	d0cb      	beq.n	800710c <__sflush_r+0x18>
 8007174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007178:	4299      	cmp	r1, r3
 800717a:	d002      	beq.n	8007182 <__sflush_r+0x8e>
 800717c:	4628      	mov	r0, r5
 800717e:	f7ff fc51 	bl	8006a24 <_free_r>
 8007182:	2000      	movs	r0, #0
 8007184:	6360      	str	r0, [r4, #52]	; 0x34
 8007186:	e7c2      	b.n	800710e <__sflush_r+0x1a>
 8007188:	6a21      	ldr	r1, [r4, #32]
 800718a:	2301      	movs	r3, #1
 800718c:	4628      	mov	r0, r5
 800718e:	47b0      	blx	r6
 8007190:	1c41      	adds	r1, r0, #1
 8007192:	d1c7      	bne.n	8007124 <__sflush_r+0x30>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0c4      	beq.n	8007124 <__sflush_r+0x30>
 800719a:	2b1d      	cmp	r3, #29
 800719c:	d001      	beq.n	80071a2 <__sflush_r+0xae>
 800719e:	2b16      	cmp	r3, #22
 80071a0:	d101      	bne.n	80071a6 <__sflush_r+0xb2>
 80071a2:	602f      	str	r7, [r5, #0]
 80071a4:	e7b2      	b.n	800710c <__sflush_r+0x18>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	e7ae      	b.n	800710e <__sflush_r+0x1a>
 80071b0:	690f      	ldr	r7, [r1, #16]
 80071b2:	2f00      	cmp	r7, #0
 80071b4:	d0aa      	beq.n	800710c <__sflush_r+0x18>
 80071b6:	0793      	lsls	r3, r2, #30
 80071b8:	bf18      	it	ne
 80071ba:	2300      	movne	r3, #0
 80071bc:	680e      	ldr	r6, [r1, #0]
 80071be:	bf08      	it	eq
 80071c0:	694b      	ldreq	r3, [r1, #20]
 80071c2:	1bf6      	subs	r6, r6, r7
 80071c4:	600f      	str	r7, [r1, #0]
 80071c6:	608b      	str	r3, [r1, #8]
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	dd9f      	ble.n	800710c <__sflush_r+0x18>
 80071cc:	4633      	mov	r3, r6
 80071ce:	463a      	mov	r2, r7
 80071d0:	4628      	mov	r0, r5
 80071d2:	6a21      	ldr	r1, [r4, #32]
 80071d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80071d8:	47e0      	blx	ip
 80071da:	2800      	cmp	r0, #0
 80071dc:	dc06      	bgt.n	80071ec <__sflush_r+0xf8>
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	e790      	b.n	800710e <__sflush_r+0x1a>
 80071ec:	4407      	add	r7, r0
 80071ee:	1a36      	subs	r6, r6, r0
 80071f0:	e7ea      	b.n	80071c8 <__sflush_r+0xd4>
 80071f2:	bf00      	nop
 80071f4:	20400001 	.word	0x20400001

080071f8 <_fflush_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	690b      	ldr	r3, [r1, #16]
 80071fc:	4605      	mov	r5, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	b913      	cbnz	r3, 8007208 <_fflush_r+0x10>
 8007202:	2500      	movs	r5, #0
 8007204:	4628      	mov	r0, r5
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	b118      	cbz	r0, 8007212 <_fflush_r+0x1a>
 800720a:	6983      	ldr	r3, [r0, #24]
 800720c:	b90b      	cbnz	r3, 8007212 <_fflush_r+0x1a>
 800720e:	f000 f887 	bl	8007320 <__sinit>
 8007212:	4b14      	ldr	r3, [pc, #80]	; (8007264 <_fflush_r+0x6c>)
 8007214:	429c      	cmp	r4, r3
 8007216:	d11b      	bne.n	8007250 <_fflush_r+0x58>
 8007218:	686c      	ldr	r4, [r5, #4]
 800721a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0ef      	beq.n	8007202 <_fflush_r+0xa>
 8007222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007224:	07d0      	lsls	r0, r2, #31
 8007226:	d404      	bmi.n	8007232 <_fflush_r+0x3a>
 8007228:	0599      	lsls	r1, r3, #22
 800722a:	d402      	bmi.n	8007232 <_fflush_r+0x3a>
 800722c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800722e:	f000 f915 	bl	800745c <__retarget_lock_acquire_recursive>
 8007232:	4628      	mov	r0, r5
 8007234:	4621      	mov	r1, r4
 8007236:	f7ff ff5d 	bl	80070f4 <__sflush_r>
 800723a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800723c:	4605      	mov	r5, r0
 800723e:	07da      	lsls	r2, r3, #31
 8007240:	d4e0      	bmi.n	8007204 <_fflush_r+0xc>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	059b      	lsls	r3, r3, #22
 8007246:	d4dd      	bmi.n	8007204 <_fflush_r+0xc>
 8007248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800724a:	f000 f908 	bl	800745e <__retarget_lock_release_recursive>
 800724e:	e7d9      	b.n	8007204 <_fflush_r+0xc>
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <_fflush_r+0x70>)
 8007252:	429c      	cmp	r4, r3
 8007254:	d101      	bne.n	800725a <_fflush_r+0x62>
 8007256:	68ac      	ldr	r4, [r5, #8]
 8007258:	e7df      	b.n	800721a <_fflush_r+0x22>
 800725a:	4b04      	ldr	r3, [pc, #16]	; (800726c <_fflush_r+0x74>)
 800725c:	429c      	cmp	r4, r3
 800725e:	bf08      	it	eq
 8007260:	68ec      	ldreq	r4, [r5, #12]
 8007262:	e7da      	b.n	800721a <_fflush_r+0x22>
 8007264:	08007e0c 	.word	0x08007e0c
 8007268:	08007e2c 	.word	0x08007e2c
 800726c:	08007dec 	.word	0x08007dec

08007270 <std>:
 8007270:	2300      	movs	r3, #0
 8007272:	b510      	push	{r4, lr}
 8007274:	4604      	mov	r4, r0
 8007276:	e9c0 3300 	strd	r3, r3, [r0]
 800727a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727e:	6083      	str	r3, [r0, #8]
 8007280:	8181      	strh	r1, [r0, #12]
 8007282:	6643      	str	r3, [r0, #100]	; 0x64
 8007284:	81c2      	strh	r2, [r0, #14]
 8007286:	6183      	str	r3, [r0, #24]
 8007288:	4619      	mov	r1, r3
 800728a:	2208      	movs	r2, #8
 800728c:	305c      	adds	r0, #92	; 0x5c
 800728e:	f7fd fd37 	bl	8004d00 <memset>
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <std+0x38>)
 8007294:	6224      	str	r4, [r4, #32]
 8007296:	6263      	str	r3, [r4, #36]	; 0x24
 8007298:	4b04      	ldr	r3, [pc, #16]	; (80072ac <std+0x3c>)
 800729a:	62a3      	str	r3, [r4, #40]	; 0x28
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <std+0x40>)
 800729e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072a0:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <std+0x44>)
 80072a2:	6323      	str	r3, [r4, #48]	; 0x30
 80072a4:	bd10      	pop	{r4, pc}
 80072a6:	bf00      	nop
 80072a8:	080075b5 	.word	0x080075b5
 80072ac:	080075d7 	.word	0x080075d7
 80072b0:	0800760f 	.word	0x0800760f
 80072b4:	08007633 	.word	0x08007633

080072b8 <_cleanup_r>:
 80072b8:	4901      	ldr	r1, [pc, #4]	; (80072c0 <_cleanup_r+0x8>)
 80072ba:	f000 b8af 	b.w	800741c <_fwalk_reent>
 80072be:	bf00      	nop
 80072c0:	080071f9 	.word	0x080071f9

080072c4 <__sfmoreglue>:
 80072c4:	2268      	movs	r2, #104	; 0x68
 80072c6:	b570      	push	{r4, r5, r6, lr}
 80072c8:	1e4d      	subs	r5, r1, #1
 80072ca:	4355      	muls	r5, r2
 80072cc:	460e      	mov	r6, r1
 80072ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072d2:	f7ff fc0f 	bl	8006af4 <_malloc_r>
 80072d6:	4604      	mov	r4, r0
 80072d8:	b140      	cbz	r0, 80072ec <__sfmoreglue+0x28>
 80072da:	2100      	movs	r1, #0
 80072dc:	e9c0 1600 	strd	r1, r6, [r0]
 80072e0:	300c      	adds	r0, #12
 80072e2:	60a0      	str	r0, [r4, #8]
 80072e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072e8:	f7fd fd0a 	bl	8004d00 <memset>
 80072ec:	4620      	mov	r0, r4
 80072ee:	bd70      	pop	{r4, r5, r6, pc}

080072f0 <__sfp_lock_acquire>:
 80072f0:	4801      	ldr	r0, [pc, #4]	; (80072f8 <__sfp_lock_acquire+0x8>)
 80072f2:	f000 b8b3 	b.w	800745c <__retarget_lock_acquire_recursive>
 80072f6:	bf00      	nop
 80072f8:	20000339 	.word	0x20000339

080072fc <__sfp_lock_release>:
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <__sfp_lock_release+0x8>)
 80072fe:	f000 b8ae 	b.w	800745e <__retarget_lock_release_recursive>
 8007302:	bf00      	nop
 8007304:	20000339 	.word	0x20000339

08007308 <__sinit_lock_acquire>:
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <__sinit_lock_acquire+0x8>)
 800730a:	f000 b8a7 	b.w	800745c <__retarget_lock_acquire_recursive>
 800730e:	bf00      	nop
 8007310:	2000033a 	.word	0x2000033a

08007314 <__sinit_lock_release>:
 8007314:	4801      	ldr	r0, [pc, #4]	; (800731c <__sinit_lock_release+0x8>)
 8007316:	f000 b8a2 	b.w	800745e <__retarget_lock_release_recursive>
 800731a:	bf00      	nop
 800731c:	2000033a 	.word	0x2000033a

08007320 <__sinit>:
 8007320:	b510      	push	{r4, lr}
 8007322:	4604      	mov	r4, r0
 8007324:	f7ff fff0 	bl	8007308 <__sinit_lock_acquire>
 8007328:	69a3      	ldr	r3, [r4, #24]
 800732a:	b11b      	cbz	r3, 8007334 <__sinit+0x14>
 800732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007330:	f7ff bff0 	b.w	8007314 <__sinit_lock_release>
 8007334:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007338:	6523      	str	r3, [r4, #80]	; 0x50
 800733a:	4b13      	ldr	r3, [pc, #76]	; (8007388 <__sinit+0x68>)
 800733c:	4a13      	ldr	r2, [pc, #76]	; (800738c <__sinit+0x6c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	62a2      	str	r2, [r4, #40]	; 0x28
 8007342:	42a3      	cmp	r3, r4
 8007344:	bf08      	it	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	4620      	mov	r0, r4
 800734a:	bf08      	it	eq
 800734c:	61a3      	streq	r3, [r4, #24]
 800734e:	f000 f81f 	bl	8007390 <__sfp>
 8007352:	6060      	str	r0, [r4, #4]
 8007354:	4620      	mov	r0, r4
 8007356:	f000 f81b 	bl	8007390 <__sfp>
 800735a:	60a0      	str	r0, [r4, #8]
 800735c:	4620      	mov	r0, r4
 800735e:	f000 f817 	bl	8007390 <__sfp>
 8007362:	2200      	movs	r2, #0
 8007364:	2104      	movs	r1, #4
 8007366:	60e0      	str	r0, [r4, #12]
 8007368:	6860      	ldr	r0, [r4, #4]
 800736a:	f7ff ff81 	bl	8007270 <std>
 800736e:	2201      	movs	r2, #1
 8007370:	2109      	movs	r1, #9
 8007372:	68a0      	ldr	r0, [r4, #8]
 8007374:	f7ff ff7c 	bl	8007270 <std>
 8007378:	2202      	movs	r2, #2
 800737a:	2112      	movs	r1, #18
 800737c:	68e0      	ldr	r0, [r4, #12]
 800737e:	f7ff ff77 	bl	8007270 <std>
 8007382:	2301      	movs	r3, #1
 8007384:	61a3      	str	r3, [r4, #24]
 8007386:	e7d1      	b.n	800732c <__sinit+0xc>
 8007388:	08007a70 	.word	0x08007a70
 800738c:	080072b9 	.word	0x080072b9

08007390 <__sfp>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	4607      	mov	r7, r0
 8007394:	f7ff ffac 	bl	80072f0 <__sfp_lock_acquire>
 8007398:	4b1e      	ldr	r3, [pc, #120]	; (8007414 <__sfp+0x84>)
 800739a:	681e      	ldr	r6, [r3, #0]
 800739c:	69b3      	ldr	r3, [r6, #24]
 800739e:	b913      	cbnz	r3, 80073a6 <__sfp+0x16>
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff ffbd 	bl	8007320 <__sinit>
 80073a6:	3648      	adds	r6, #72	; 0x48
 80073a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	d503      	bpl.n	80073b8 <__sfp+0x28>
 80073b0:	6833      	ldr	r3, [r6, #0]
 80073b2:	b30b      	cbz	r3, 80073f8 <__sfp+0x68>
 80073b4:	6836      	ldr	r6, [r6, #0]
 80073b6:	e7f7      	b.n	80073a8 <__sfp+0x18>
 80073b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073bc:	b9d5      	cbnz	r5, 80073f4 <__sfp+0x64>
 80073be:	4b16      	ldr	r3, [pc, #88]	; (8007418 <__sfp+0x88>)
 80073c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073c4:	60e3      	str	r3, [r4, #12]
 80073c6:	6665      	str	r5, [r4, #100]	; 0x64
 80073c8:	f000 f847 	bl	800745a <__retarget_lock_init_recursive>
 80073cc:	f7ff ff96 	bl	80072fc <__sfp_lock_release>
 80073d0:	2208      	movs	r2, #8
 80073d2:	4629      	mov	r1, r5
 80073d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073dc:	6025      	str	r5, [r4, #0]
 80073de:	61a5      	str	r5, [r4, #24]
 80073e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073e4:	f7fd fc8c 	bl	8004d00 <memset>
 80073e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073f0:	4620      	mov	r0, r4
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f4:	3468      	adds	r4, #104	; 0x68
 80073f6:	e7d9      	b.n	80073ac <__sfp+0x1c>
 80073f8:	2104      	movs	r1, #4
 80073fa:	4638      	mov	r0, r7
 80073fc:	f7ff ff62 	bl	80072c4 <__sfmoreglue>
 8007400:	4604      	mov	r4, r0
 8007402:	6030      	str	r0, [r6, #0]
 8007404:	2800      	cmp	r0, #0
 8007406:	d1d5      	bne.n	80073b4 <__sfp+0x24>
 8007408:	f7ff ff78 	bl	80072fc <__sfp_lock_release>
 800740c:	230c      	movs	r3, #12
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	e7ee      	b.n	80073f0 <__sfp+0x60>
 8007412:	bf00      	nop
 8007414:	08007a70 	.word	0x08007a70
 8007418:	ffff0001 	.word	0xffff0001

0800741c <_fwalk_reent>:
 800741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007420:	4606      	mov	r6, r0
 8007422:	4688      	mov	r8, r1
 8007424:	2700      	movs	r7, #0
 8007426:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800742a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800742e:	f1b9 0901 	subs.w	r9, r9, #1
 8007432:	d505      	bpl.n	8007440 <_fwalk_reent+0x24>
 8007434:	6824      	ldr	r4, [r4, #0]
 8007436:	2c00      	cmp	r4, #0
 8007438:	d1f7      	bne.n	800742a <_fwalk_reent+0xe>
 800743a:	4638      	mov	r0, r7
 800743c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007440:	89ab      	ldrh	r3, [r5, #12]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d907      	bls.n	8007456 <_fwalk_reent+0x3a>
 8007446:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800744a:	3301      	adds	r3, #1
 800744c:	d003      	beq.n	8007456 <_fwalk_reent+0x3a>
 800744e:	4629      	mov	r1, r5
 8007450:	4630      	mov	r0, r6
 8007452:	47c0      	blx	r8
 8007454:	4307      	orrs	r7, r0
 8007456:	3568      	adds	r5, #104	; 0x68
 8007458:	e7e9      	b.n	800742e <_fwalk_reent+0x12>

0800745a <__retarget_lock_init_recursive>:
 800745a:	4770      	bx	lr

0800745c <__retarget_lock_acquire_recursive>:
 800745c:	4770      	bx	lr

0800745e <__retarget_lock_release_recursive>:
 800745e:	4770      	bx	lr

08007460 <__swhatbuf_r>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	460e      	mov	r6, r1
 8007464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007468:	4614      	mov	r4, r2
 800746a:	2900      	cmp	r1, #0
 800746c:	461d      	mov	r5, r3
 800746e:	b096      	sub	sp, #88	; 0x58
 8007470:	da08      	bge.n	8007484 <__swhatbuf_r+0x24>
 8007472:	2200      	movs	r2, #0
 8007474:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007478:	602a      	str	r2, [r5, #0]
 800747a:	061a      	lsls	r2, r3, #24
 800747c:	d410      	bmi.n	80074a0 <__swhatbuf_r+0x40>
 800747e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007482:	e00e      	b.n	80074a2 <__swhatbuf_r+0x42>
 8007484:	466a      	mov	r2, sp
 8007486:	f000 f8fb 	bl	8007680 <_fstat_r>
 800748a:	2800      	cmp	r0, #0
 800748c:	dbf1      	blt.n	8007472 <__swhatbuf_r+0x12>
 800748e:	9a01      	ldr	r2, [sp, #4]
 8007490:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007494:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007498:	425a      	negs	r2, r3
 800749a:	415a      	adcs	r2, r3
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	e7ee      	b.n	800747e <__swhatbuf_r+0x1e>
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	2000      	movs	r0, #0
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	b016      	add	sp, #88	; 0x58
 80074a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080074ac <__smakebuf_r>:
 80074ac:	898b      	ldrh	r3, [r1, #12]
 80074ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074b0:	079d      	lsls	r5, r3, #30
 80074b2:	4606      	mov	r6, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	d507      	bpl.n	80074c8 <__smakebuf_r+0x1c>
 80074b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	6123      	str	r3, [r4, #16]
 80074c0:	2301      	movs	r3, #1
 80074c2:	6163      	str	r3, [r4, #20]
 80074c4:	b002      	add	sp, #8
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	466a      	mov	r2, sp
 80074ca:	ab01      	add	r3, sp, #4
 80074cc:	f7ff ffc8 	bl	8007460 <__swhatbuf_r>
 80074d0:	9900      	ldr	r1, [sp, #0]
 80074d2:	4605      	mov	r5, r0
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7ff fb0d 	bl	8006af4 <_malloc_r>
 80074da:	b948      	cbnz	r0, 80074f0 <__smakebuf_r+0x44>
 80074dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e0:	059a      	lsls	r2, r3, #22
 80074e2:	d4ef      	bmi.n	80074c4 <__smakebuf_r+0x18>
 80074e4:	f023 0303 	bic.w	r3, r3, #3
 80074e8:	f043 0302 	orr.w	r3, r3, #2
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	e7e3      	b.n	80074b8 <__smakebuf_r+0xc>
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <__smakebuf_r+0x7c>)
 80074f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	6020      	str	r0, [r4, #0]
 80074f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	9b00      	ldr	r3, [sp, #0]
 8007500:	6120      	str	r0, [r4, #16]
 8007502:	6163      	str	r3, [r4, #20]
 8007504:	9b01      	ldr	r3, [sp, #4]
 8007506:	b15b      	cbz	r3, 8007520 <__smakebuf_r+0x74>
 8007508:	4630      	mov	r0, r6
 800750a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800750e:	f000 f8c9 	bl	80076a4 <_isatty_r>
 8007512:	b128      	cbz	r0, 8007520 <__smakebuf_r+0x74>
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	81a3      	strh	r3, [r4, #12]
 8007520:	89a0      	ldrh	r0, [r4, #12]
 8007522:	4305      	orrs	r5, r0
 8007524:	81a5      	strh	r5, [r4, #12]
 8007526:	e7cd      	b.n	80074c4 <__smakebuf_r+0x18>
 8007528:	080072b9 	.word	0x080072b9

0800752c <_raise_r>:
 800752c:	291f      	cmp	r1, #31
 800752e:	b538      	push	{r3, r4, r5, lr}
 8007530:	4604      	mov	r4, r0
 8007532:	460d      	mov	r5, r1
 8007534:	d904      	bls.n	8007540 <_raise_r+0x14>
 8007536:	2316      	movs	r3, #22
 8007538:	6003      	str	r3, [r0, #0]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007542:	b112      	cbz	r2, 800754a <_raise_r+0x1e>
 8007544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007548:	b94b      	cbnz	r3, 800755e <_raise_r+0x32>
 800754a:	4620      	mov	r0, r4
 800754c:	f000 f830 	bl	80075b0 <_getpid_r>
 8007550:	462a      	mov	r2, r5
 8007552:	4601      	mov	r1, r0
 8007554:	4620      	mov	r0, r4
 8007556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800755a:	f000 b817 	b.w	800758c <_kill_r>
 800755e:	2b01      	cmp	r3, #1
 8007560:	d00a      	beq.n	8007578 <_raise_r+0x4c>
 8007562:	1c59      	adds	r1, r3, #1
 8007564:	d103      	bne.n	800756e <_raise_r+0x42>
 8007566:	2316      	movs	r3, #22
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	2001      	movs	r0, #1
 800756c:	e7e7      	b.n	800753e <_raise_r+0x12>
 800756e:	2400      	movs	r4, #0
 8007570:	4628      	mov	r0, r5
 8007572:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007576:	4798      	blx	r3
 8007578:	2000      	movs	r0, #0
 800757a:	e7e0      	b.n	800753e <_raise_r+0x12>

0800757c <raise>:
 800757c:	4b02      	ldr	r3, [pc, #8]	; (8007588 <raise+0xc>)
 800757e:	4601      	mov	r1, r0
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	f7ff bfd3 	b.w	800752c <_raise_r>
 8007586:	bf00      	nop
 8007588:	2000000c 	.word	0x2000000c

0800758c <_kill_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	2300      	movs	r3, #0
 8007590:	4d06      	ldr	r5, [pc, #24]	; (80075ac <_kill_r+0x20>)
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	4611      	mov	r1, r2
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	f7fa fd16 	bl	8001fca <_kill>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	d102      	bne.n	80075a8 <_kill_r+0x1c>
 80075a2:	682b      	ldr	r3, [r5, #0]
 80075a4:	b103      	cbz	r3, 80075a8 <_kill_r+0x1c>
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	bd38      	pop	{r3, r4, r5, pc}
 80075aa:	bf00      	nop
 80075ac:	20000334 	.word	0x20000334

080075b0 <_getpid_r>:
 80075b0:	f7fa bd04 	b.w	8001fbc <_getpid>

080075b4 <__sread>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	460c      	mov	r4, r1
 80075b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075bc:	f000 f894 	bl	80076e8 <_read_r>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	bfab      	itete	ge
 80075c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075c6:	89a3      	ldrhlt	r3, [r4, #12]
 80075c8:	181b      	addge	r3, r3, r0
 80075ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075ce:	bfac      	ite	ge
 80075d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80075d2:	81a3      	strhlt	r3, [r4, #12]
 80075d4:	bd10      	pop	{r4, pc}

080075d6 <__swrite>:
 80075d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075da:	461f      	mov	r7, r3
 80075dc:	898b      	ldrh	r3, [r1, #12]
 80075de:	4605      	mov	r5, r0
 80075e0:	05db      	lsls	r3, r3, #23
 80075e2:	460c      	mov	r4, r1
 80075e4:	4616      	mov	r6, r2
 80075e6:	d505      	bpl.n	80075f4 <__swrite+0x1e>
 80075e8:	2302      	movs	r3, #2
 80075ea:	2200      	movs	r2, #0
 80075ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f0:	f000 f868 	bl	80076c4 <_lseek_r>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	4632      	mov	r2, r6
 80075f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	4628      	mov	r0, r5
 8007600:	463b      	mov	r3, r7
 8007602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800760a:	f000 b817 	b.w	800763c <_write_r>

0800760e <__sseek>:
 800760e:	b510      	push	{r4, lr}
 8007610:	460c      	mov	r4, r1
 8007612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007616:	f000 f855 	bl	80076c4 <_lseek_r>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	bf15      	itete	ne
 8007620:	6560      	strne	r0, [r4, #84]	; 0x54
 8007622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800762a:	81a3      	strheq	r3, [r4, #12]
 800762c:	bf18      	it	ne
 800762e:	81a3      	strhne	r3, [r4, #12]
 8007630:	bd10      	pop	{r4, pc}

08007632 <__sclose>:
 8007632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007636:	f000 b813 	b.w	8007660 <_close_r>
	...

0800763c <_write_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	2200      	movs	r2, #0
 8007646:	4d05      	ldr	r5, [pc, #20]	; (800765c <_write_r+0x20>)
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7fa fcf4 	bl	8002038 <_write>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_write_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_write_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20000334 	.word	0x20000334

08007660 <_close_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	2300      	movs	r3, #0
 8007664:	4d05      	ldr	r5, [pc, #20]	; (800767c <_close_r+0x1c>)
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	f7fa fd00 	bl	8002070 <_close>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_close_r+0x1a>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_close_r+0x1a>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20000334 	.word	0x20000334

08007680 <_fstat_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	2300      	movs	r3, #0
 8007684:	4d06      	ldr	r5, [pc, #24]	; (80076a0 <_fstat_r+0x20>)
 8007686:	4604      	mov	r4, r0
 8007688:	4608      	mov	r0, r1
 800768a:	4611      	mov	r1, r2
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	f7fa fcfa 	bl	8002086 <_fstat>
 8007692:	1c43      	adds	r3, r0, #1
 8007694:	d102      	bne.n	800769c <_fstat_r+0x1c>
 8007696:	682b      	ldr	r3, [r5, #0]
 8007698:	b103      	cbz	r3, 800769c <_fstat_r+0x1c>
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	bd38      	pop	{r3, r4, r5, pc}
 800769e:	bf00      	nop
 80076a0:	20000334 	.word	0x20000334

080076a4 <_isatty_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	2300      	movs	r3, #0
 80076a8:	4d05      	ldr	r5, [pc, #20]	; (80076c0 <_isatty_r+0x1c>)
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	f7fa fcf8 	bl	80020a4 <_isatty>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_isatty_r+0x1a>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_isatty_r+0x1a>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	20000334 	.word	0x20000334

080076c4 <_lseek_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4604      	mov	r4, r0
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	2200      	movs	r2, #0
 80076ce:	4d05      	ldr	r5, [pc, #20]	; (80076e4 <_lseek_r+0x20>)
 80076d0:	602a      	str	r2, [r5, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f7fa fcf0 	bl	80020b8 <_lseek>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_lseek_r+0x1e>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_lseek_r+0x1e>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	20000334 	.word	0x20000334

080076e8 <_read_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4604      	mov	r4, r0
 80076ec:	4608      	mov	r0, r1
 80076ee:	4611      	mov	r1, r2
 80076f0:	2200      	movs	r2, #0
 80076f2:	4d05      	ldr	r5, [pc, #20]	; (8007708 <_read_r+0x20>)
 80076f4:	602a      	str	r2, [r5, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f7fa fc81 	bl	8001ffe <_read>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_read_r+0x1e>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_read_r+0x1e>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	20000334 	.word	0x20000334

0800770c <_init>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr

08007718 <_fini>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr
