
BLDC_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007664  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  08007778  08007778  00017778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e9c  08007e9c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007e9c  08007e9c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e9c  08007e9c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001dc  08008080  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08008080  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012684  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002719  00000000  00000000  00032889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00034fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00035fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdb5  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d9f  00000000  00000000  00052cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b81  00000000  00000000  00066a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f861d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005588  00000000  00000000  000f8670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800775c 	.word	0x0800775c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800775c 	.word	0x0800775c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <_Z4_sinf>:
// function approximating the sine calculation by using fixed size array
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(a < _PI_2){
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff f9f5 	bl	8000428 <__aeabi_f2d>
 800103e:	a3c8      	add	r3, pc, #800	; (adr r3, 8001360 <_Z4_sinf+0x330>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff fcba 	bl	80009bc <__aeabi_dcmplt>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d058      	beq.n	8001100 <_Z4_sinf+0xd0>
    //return sine_array[(int)(126.6873* a)];           // float array optimized
    return 0.0001*sine_array[_round(126.6873* a)];      // int array optimized
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff f9ea 	bl	8000428 <__aeabi_f2d>
 8001054:	a3c4      	add	r3, pc, #784	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff fa3d 	bl	80004d8 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	f7ff fcb9 	bl	80009e4 <__aeabi_dcmpge>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d018      	beq.n	80010aa <_Z4_sinf+0x7a>
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f9d5 	bl	8000428 <__aeabi_f2d>
 800107e:	a3ba      	add	r3, pc, #744	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa28 	bl	80004d8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4bbe      	ldr	r3, [pc, #760]	; (8001390 <_Z4_sinf+0x360>)
 8001096:	f7ff f869 	bl	800016c <__adddf3>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fcc9 	bl	8000a38 <__aeabi_d2iz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	e017      	b.n	80010da <_Z4_sinf+0xaa>
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff f9bc 	bl	8000428 <__aeabi_f2d>
 80010b0:	a3ad      	add	r3, pc, #692	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa0f 	bl	80004d8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4bb2      	ldr	r3, [pc, #712]	; (8001390 <_Z4_sinf+0x360>)
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fcb0 	bl	8000a38 <__aeabi_d2iz>
 80010d8:	4603      	mov	r3, r0
 80010da:	4aae      	ldr	r2, [pc, #696]	; (8001394 <_Z4_sinf+0x364>)
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f98f 	bl	8000404 <__aeabi_i2d>
 80010e6:	a3a2      	add	r3, pc, #648	; (adr r3, 8001370 <_Z4_sinf+0x340>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff f9f4 	bl	80004d8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fcc6 	bl	8000a88 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	e12b      	b.n	8001358 <_Z4_sinf+0x328>
  }else if(a < _PI){
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff f991 	bl	8000428 <__aeabi_f2d>
 8001106:	a39c      	add	r3, pc, #624	; (adr r3, 8001378 <_Z4_sinf+0x348>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fc56 	bl	80009bc <__aeabi_dcmplt>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d05c      	beq.n	80011d0 <_Z4_sinf+0x1a0>
    //return sine_array[398 - (int)(126.6873*a)];          // float array optimized
    return 0.0001*sine_array[398 - _round(126.6873*a)];     // int array optimized
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff f986 	bl	8000428 <__aeabi_f2d>
 800111c:	a392      	add	r3, pc, #584	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff f9d9 	bl	80004d8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	f7ff fc55 	bl	80009e4 <__aeabi_dcmpge>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d01a      	beq.n	8001176 <_Z4_sinf+0x146>
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff f971 	bl	8000428 <__aeabi_f2d>
 8001146:	a388      	add	r3, pc, #544	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff f9c4 	bl	80004d8 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b8c      	ldr	r3, [pc, #560]	; (8001390 <_Z4_sinf+0x360>)
 800115e:	f7ff f805 	bl	800016c <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fc65 	bl	8000a38 <__aeabi_d2iz>
 800116e:	4603      	mov	r3, r0
 8001170:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001174:	e019      	b.n	80011aa <_Z4_sinf+0x17a>
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff f956 	bl	8000428 <__aeabi_f2d>
 800117c:	a37a      	add	r3, pc, #488	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff f9a9 	bl	80004d8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b7f      	ldr	r3, [pc, #508]	; (8001390 <_Z4_sinf+0x360>)
 8001194:	f7fe ffe8 	bl	8000168 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc4a 	bl	8000a38 <__aeabi_d2iz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80011aa:	4a7a      	ldr	r2, [pc, #488]	; (8001394 <_Z4_sinf+0x364>)
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f927 	bl	8000404 <__aeabi_i2d>
 80011b6:	a36e      	add	r3, pc, #440	; (adr r3, 8001370 <_Z4_sinf+0x340>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff f98c 	bl	80004d8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fc5e 	bl	8000a88 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	e0c3      	b.n	8001358 <_Z4_sinf+0x328>
  }else if(a < _3PI_2){
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff f929 	bl	8000428 <__aeabi_f2d>
 80011d6:	a36a      	add	r3, pc, #424	; (adr r3, 8001380 <_Z4_sinf+0x350>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fbee 	bl	80009bc <__aeabi_dcmplt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d05c      	beq.n	80012a0 <_Z4_sinf+0x270>
    //return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
    return -0.0001*sine_array[-398 + _round(126.6873*a)];      // int array optimized
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f91e 	bl	8000428 <__aeabi_f2d>
 80011ec:	a35e      	add	r3, pc, #376	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff f971 	bl	80004d8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	f7ff fbed 	bl	80009e4 <__aeabi_dcmpge>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01a      	beq.n	8001246 <_Z4_sinf+0x216>
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff f909 	bl	8000428 <__aeabi_f2d>
 8001216:	a354      	add	r3, pc, #336	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f95c 	bl	80004d8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b58      	ldr	r3, [pc, #352]	; (8001390 <_Z4_sinf+0x360>)
 800122e:	f7fe ff9d 	bl	800016c <__adddf3>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fbfd 	bl	8000a38 <__aeabi_d2iz>
 800123e:	4603      	mov	r3, r0
 8001240:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 8001244:	e019      	b.n	800127a <_Z4_sinf+0x24a>
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff f8ee 	bl	8000428 <__aeabi_f2d>
 800124c:	a346      	add	r3, pc, #280	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f941 	bl	80004d8 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <_Z4_sinf+0x360>)
 8001264:	f7fe ff80 	bl	8000168 <__aeabi_dsub>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fbe2 	bl	8000a38 <__aeabi_d2iz>
 8001274:	4603      	mov	r3, r0
 8001276:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 800127a:	4a46      	ldr	r2, [pc, #280]	; (8001394 <_Z4_sinf+0x364>)
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8bf 	bl	8000404 <__aeabi_i2d>
 8001286:	a340      	add	r3, pc, #256	; (adr r3, 8001388 <_Z4_sinf+0x358>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff f924 	bl	80004d8 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fbf6 	bl	8000a88 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	e05b      	b.n	8001358 <_Z4_sinf+0x328>
  } else {
    //return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
    return -0.0001*sine_array[796 - _round(126.6873*a)];      // int array optimized
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff f8c1 	bl	8000428 <__aeabi_f2d>
 80012a6:	a330      	add	r3, pc, #192	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f914 	bl	80004d8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	f7ff fb90 	bl	80009e4 <__aeabi_dcmpge>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d01a      	beq.n	8001300 <_Z4_sinf+0x2d0>
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff f8ac 	bl	8000428 <__aeabi_f2d>
 80012d0:	a325      	add	r3, pc, #148	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff f8ff 	bl	80004d8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <_Z4_sinf+0x360>)
 80012e8:	f7fe ff40 	bl	800016c <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fba0 	bl	8000a38 <__aeabi_d2iz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80012fe:	e019      	b.n	8001334 <_Z4_sinf+0x304>
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff f891 	bl	8000428 <__aeabi_f2d>
 8001306:	a318      	add	r3, pc, #96	; (adr r3, 8001368 <_Z4_sinf+0x338>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f8e4 	bl	80004d8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <_Z4_sinf+0x360>)
 800131e:	f7fe ff23 	bl	8000168 <__aeabi_dsub>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fb85 	bl	8000a38 <__aeabi_d2iz>
 800132e:	4603      	mov	r3, r0
 8001330:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <_Z4_sinf+0x364>)
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f862 	bl	8000404 <__aeabi_i2d>
 8001340:	a311      	add	r3, pc, #68	; (adr r3, 8001388 <_Z4_sinf+0x358>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff f8c7 	bl	80004d8 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fb99 	bl	8000a88 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	5443d6f4 	.word	0x5443d6f4
 8001364:	3ff921fb 	.word	0x3ff921fb
 8001368:	b923a29c 	.word	0xb923a29c
 800136c:	405fabfc 	.word	0x405fabfc
 8001370:	eb1c432d 	.word	0xeb1c432d
 8001374:	3f1a36e2 	.word	0x3f1a36e2
 8001378:	54442eea 	.word	0x54442eea
 800137c:	400921fb 	.word	0x400921fb
 8001380:	7f330d32 	.word	0x7f330d32
 8001384:	4012d97c 	.word	0x4012d97c
 8001388:	eb1c432d 	.word	0xeb1c432d
 800138c:	bf1a36e2 	.word	0xbf1a36e2
 8001390:	3fe00000 	.word	0x3fe00000
 8001394:	08007788 	.word	0x08007788

08001398 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  float a_sin = a + _PI_2;
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff f841 	bl	8000428 <__aeabi_f2d>
 80013a6:	a31a      	add	r3, pc, #104	; (adr r3, 8001410 <_Z4_cosf+0x78>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7fe fede 	bl	800016c <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb66 	bl	8000a88 <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff f831 	bl	8000428 <__aeabi_f2d>
 80013c6:	a314      	add	r3, pc, #80	; (adr r3, 8001418 <_Z4_cosf+0x80>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff fb14 	bl	80009f8 <__aeabi_dcmpgt>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00f      	beq.n	80013f6 <_Z4_cosf+0x5e>
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff f826 	bl	8000428 <__aeabi_f2d>
 80013dc:	a30e      	add	r3, pc, #56	; (adr r3, 8001418 <_Z4_cosf+0x80>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7fe fec1 	bl	8000168 <__aeabi_dsub>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fb4b 	bl	8000a88 <__aeabi_d2f>
 80013f2:	4603      	mov	r3, r0
 80013f4:	e000      	b.n	80013f8 <_Z4_cosf+0x60>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	60fb      	str	r3, [r7, #12]
  return _sin(a_sin);
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff fe18 	bl	8001030 <_Z4_sinf>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	f3af 8000 	nop.w
 8001410:	5443d6f4 	.word	0x5443d6f4
 8001414:	3ff921fb 	.word	0x3ff921fb
 8001418:	54442eea 	.word	0x54442eea
 800141c:	401921fb 	.word	0x401921fb

08001420 <_ZN9Motor_FOCC1Ef>:
  float a = fmod(angle, _2PI);
  return a >= 0 ? a : (a + _2PI);
}


Motor_FOC::Motor_FOC(float voltage_power_supply_)
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
{
	voltage_power_supply = voltage_power_supply_;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	60da      	str	r2, [r3, #12]
	pole_pairs = 12;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	220c      	movs	r2, #12
 8001434:	609a      	str	r2, [r3, #8]
}
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <_ZN9Motor_FOC7loopFOCEv>:

void Motor_FOC::loopFOC(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	setPhaseVoltage();
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f804 	bl	8001458 <_ZN9Motor_FOC15setPhaseVoltageEv>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_ZN9Motor_FOC15setPhaseVoltageEv>:
{
	electrical_angle = _normalizeAngle(shaft_angle*pole_pairs);
//	return _normalizeAngle((shaft_angle + sensor_offset) * pole_pairs - zero_electric_angle);
}
void Motor_FOC::setPhaseVoltage(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
//			Tb = 0;
//			Tc = 0;
//	}

//	_writeDutyCyclePWM(Ta, Tb, Tc);
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
	...

0800146c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>:
 *  Created on: Nov 24, 2022
 *      Author: hemingshan
 */
#include "magnetic_sensor.hpp"

AS5600::AS5600(I2C_HandleTypeDef &hi2c_, UART_HandleTypeDef &huart_)
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	226c      	movs	r2, #108	; 0x6c
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	220c      	movs	r2, #12
 8001482:	705a      	strb	r2, [r3, #1]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	220d      	movs	r2, #13
 8001488:	709a      	strb	r2, [r3, #2]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	220e      	movs	r2, #14
 800148e:	70da      	strb	r2, [r3, #3]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	220f      	movs	r2, #15
 8001494:	711a      	strb	r2, [r3, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	220b      	movs	r2, #11
 800149a:	715a      	strb	r2, [r3, #5]
{
	/* I2C1 Initialization*/
	hi2c = hi2c_;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	3308      	adds	r3, #8
 80014a2:	4611      	mov	r1, r2
 80014a4:	2254      	movs	r2, #84	; 0x54
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fc42 	bl	8004d30 <memcpy>

	hi2c.Instance = I2C1;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x100>)
 80014b0:	609a      	str	r2, [r3, #8]
	hi2c.Init.ClockSpeed = 100000;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x104>)
 80014b6:	60da      	str	r2, [r3, #12]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
	hi2c.Init.OwnAddress1 = 0;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ca:	619a      	str	r2, [r3, #24]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
	hi2c.Init.OwnAddress2 = 0;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_I2C_Init(&hi2c) != HAL_OK)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3308      	adds	r3, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fa35 	bl	8002958 <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf14      	ite	ne
 80014f4:	2301      	movne	r3, #1
 80014f6:	2300      	moveq	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x96>
	{
		Error_Handler();
 80014fe:	f000 fbcd 	bl	8001c9c <Error_Handler>
	}

	/* UART1 Initialization*/
	huart = huart_;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	335c      	adds	r3, #92	; 0x5c
 8001508:	4611      	mov	r1, r2
 800150a:	2244      	movs	r2, #68	; 0x44
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fc0f 	bl	8004d30 <memcpy>

	huart.Instance = USART1;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x108>)
 8001516:	65da      	str	r2, [r3, #92]	; 0x5c
	huart.Init.BaudRate = 115200;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151e:	661a      	str	r2, [r3, #96]	; 0x60
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	665a      	str	r2, [r3, #100]	; 0x64
	huart.Init.StopBits = UART_STOPBITS_1;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	669a      	str	r2, [r3, #104]	; 0x68
	huart.Init.Parity = UART_PARITY_NONE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	66da      	str	r2, [r3, #108]	; 0x6c
	huart.Init.Mode = UART_MODE_TX_RX;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	220c      	movs	r2, #12
 8001536:	671a      	str	r2, [r3, #112]	; 0x70
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	675a      	str	r2, [r3, #116]	; 0x74
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	679a      	str	r2, [r3, #120]	; 0x78
	if (HAL_UART_Init(&huart) != HAL_OK)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	335c      	adds	r3, #92	; 0x5c
 8001548:	4618      	mov	r0, r3
 800154a:	f002 ffcc 	bl	80044e6 <HAL_UART_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0xf6>
	{
		Error_Handler();
 800155e:	f000 fb9d 	bl	8001c9c <Error_Handler>
	}
}
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40005400 	.word	0x40005400
 8001570:	000186a0 	.word	0x000186a0
 8001574:	40013800 	.word	0x40013800

08001578 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001588:	f040 80bf 	bne.w	800170a <HAL_TIM_PeriodElapsedCallback+0x192>
//	  Uc = 0.5 + trap_120_map[count][2] * 0.5;
//	  _writeDutyCyclePWM(Ua, Ub, Uc);
//	  count++;

	  // SINE PWM:
	  if(times<360*10){
 800158c:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001594:	f280 80b9 	bge.w	800170a <HAL_TIM_PeriodElapsedCallback+0x192>
		  float _ca, _sa, Ualpha, Ubeta;
		  float Ua, Ub, Uc;
		  if(count == 360) count = 0;
 8001598:	4b64      	ldr	r3, [pc, #400]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80015a0:	d102      	bne.n	80015a8 <HAL_TIM_PeriodElapsedCallback+0x30>
 80015a2:	4b62      	ldr	r3, [pc, #392]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

		  float angle_el = _PI_180*count;
 80015a8:	4b60      	ldr	r3, [pc, #384]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ff29 	bl	8000404 <__aeabi_i2d>
 80015b2:	a359      	add	r3, pc, #356	; (adr r3, 8001718 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7fe ff8e 	bl	80004d8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fa60 	bl	8000a88 <__aeabi_d2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
		  _ca = _cos(angle_el);
 80015cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015ce:	f7ff fee3 	bl	8001398 <_Z4_cosf>
 80015d2:	6238      	str	r0, [r7, #32]
		  _sa = _sin(angle_el);
 80015d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015d6:	f7ff fd2b 	bl	8001030 <_Z4_sinf>
 80015da:	61f8      	str	r0, [r7, #28]
		  Ualpha =  - _sa*0.5;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fbac 	bl	8000d44 <__aeabi_fmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	61bb      	str	r3, [r7, #24]
		  Ubeta  =    _ca*0.5;
 80015f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015f4:	6a38      	ldr	r0, [r7, #32]
 80015f6:	f7ff fba5 	bl	8000d44 <__aeabi_fmul>
 80015fa:	4603      	mov	r3, r0
 80015fc:	617b      	str	r3, [r7, #20]

		  Ua = Ualpha/2 + 0.5;
 80015fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001602:	69b8      	ldr	r0, [r7, #24]
 8001604:	f7ff fc52 	bl	8000eac <__aeabi_fdiv>
 8001608:	4603      	mov	r3, r0
 800160a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fa90 	bl	8000b34 <__addsf3>
 8001614:	4603      	mov	r3, r0
 8001616:	613b      	str	r3, [r7, #16]
		  Ub = (-0.5 * Ualpha  + _SQRT3_2 * Ubeta)/2+0.5;
 8001618:	69b8      	ldr	r0, [r7, #24]
 800161a:	f7fe ff05 	bl	8000428 <__aeabi_f2d>
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001624:	f7fe ff58 	bl	80004d8 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	461d      	mov	r5, r3
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f7fe fef9 	bl	8000428 <__aeabi_f2d>
 8001636:	a33a      	add	r3, pc, #232	; (adr r3, 8001720 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe ff4c 	bl	80004d8 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4620      	mov	r0, r4
 8001646:	4629      	mov	r1, r5
 8001648:	f7fe fd90 	bl	800016c <__adddf3>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800165c:	f7ff f866 	bl	800072c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800166e:	f7fe fd7d 	bl	800016c <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa05 	bl	8000a88 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	60fb      	str	r3, [r7, #12]
		  Uc = (-0.5 * Ualpha - _SQRT3_2 * Ubeta)/2+0.5;
 8001682:	69b8      	ldr	r0, [r7, #24]
 8001684:	f7fe fed0 	bl	8000428 <__aeabi_f2d>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800168e:	f7fe ff23 	bl	80004d8 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4614      	mov	r4, r2
 8001698:	461d      	mov	r5, r3
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7fe fec4 	bl	8000428 <__aeabi_f2d>
 80016a0:	a31f      	add	r3, pc, #124	; (adr r3, 8001720 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe ff17 	bl	80004d8 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fd59 	bl	8000168 <__aeabi_dsub>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c6:	f7ff f831 	bl	800072c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80016d8:	f7fe fd48 	bl	800016c <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9d0 	bl	8000a88 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	60bb      	str	r3, [r7, #8]
		  _writeDutyCyclePWM(Ua, Ub, Uc);
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	6938      	ldr	r0, [r7, #16]
 80016f2:	f000 f821 	bl	8001738 <_writeDutyCyclePWM>
		  count++;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80016fe:	6013      	str	r3, [r2, #0]
		  times++;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001708:	6013      	str	r3, [r2, #0]
	  }

  }
}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bdb0      	pop	{r4, r5, r7, pc}
 8001712:	bf00      	nop
 8001714:	f3af 8000 	nop.w
 8001718:	a0431914 	.word	0xa0431914
 800171c:	3f91df46 	.word	0x3f91df46
 8001720:	e857b07f 	.word	0xe857b07f
 8001724:	3febb67a 	.word	0x3febb67a
 8001728:	200001fc 	.word	0x200001fc
 800172c:	200001f8 	.word	0x200001f8
 8001730:	bfe00000 	.word	0xbfe00000
 8001734:	3fe00000 	.word	0x3fe00000

08001738 <_writeDutyCyclePWM>:

void _writeDutyCyclePWM(float dc_a, float dc_b, float dc_c)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
	 TIM1->CCR1 = (int)(dc_a * _PWM_RANGE);
 8001744:	4912      	ldr	r1, [pc, #72]	; (8001790 <_writeDutyCyclePWM+0x58>)
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7ff fafc 	bl	8000d44 <__aeabi_fmul>
 800174c:	4603      	mov	r3, r0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fc48 	bl	8000fe4 <__aeabi_f2iz>
 8001754:	4602      	mov	r2, r0
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <_writeDutyCyclePWM+0x5c>)
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR3 = (int)(dc_b * _PWM_RANGE);
 800175a:	490d      	ldr	r1, [pc, #52]	; (8001790 <_writeDutyCyclePWM+0x58>)
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	f7ff faf1 	bl	8000d44 <__aeabi_fmul>
 8001762:	4603      	mov	r3, r0
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fc3d 	bl	8000fe4 <__aeabi_f2iz>
 800176a:	4602      	mov	r2, r0
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <_writeDutyCyclePWM+0x5c>)
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM1->CCR2 = (int)(dc_c * _PWM_RANGE);
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <_writeDutyCyclePWM+0x58>)
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fae6 	bl	8000d44 <__aeabi_fmul>
 8001778:	4603      	mov	r3, r0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fc32 	bl	8000fe4 <__aeabi_f2iz>
 8001780:	4602      	mov	r2, r0
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <_writeDutyCyclePWM+0x5c>)
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	4479c000 	.word	0x4479c000
 8001794:	40012c00 	.word	0x40012c00

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0ae      	sub	sp, #184	; 0xb8
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179e:	f000 fd1f 	bl	80021e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  AS5600 as5600(hi2c1, huart1);
 80017a2:	f107 0318 	add.w	r3, r7, #24
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <main+0x88>)
 80017a8:	491e      	ldr	r1, [pc, #120]	; (8001824 <main+0x8c>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe5e 	bl	800146c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>
  Motor_FOC motor(12);
 80017b0:	463b      	mov	r3, r7
 80017b2:	491d      	ldr	r1, [pc, #116]	; (8001828 <main+0x90>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fe33 	bl	8001420 <_ZN9Motor_FOCC1Ef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 f83f 	bl	800183c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017be:	f000 fa0b 	bl	8001bd8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80017c2:	f000 f88b 	bl	80018dc <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 80017c6:	f000 f9d9 	bl	8001b7c <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 80017ca:	f000 f8bb 	bl	8001944 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80017ce:	f000 f979 	bl	8001ac4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80017d2:	4816      	ldr	r0, [pc, #88]	; (800182c <main+0x94>)
 80017d4:	f001 fe6e 	bl	80034b4 <HAL_TIM_Base_Start_IT>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80017d8:	2100      	movs	r1, #0
 80017da:	4815      	ldr	r0, [pc, #84]	; (8001830 <main+0x98>)
 80017dc:	f002 fd00 	bl	80041e0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, 	TIM_CHANNEL_2);
 80017e0:	2104      	movs	r1, #4
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <main+0x98>)
 80017e4:	f001 ff08 	bl	80035f8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80017e8:	2108      	movs	r1, #8
 80017ea:	4811      	ldr	r0, [pc, #68]	; (8001830 <main+0x98>)
 80017ec:	f002 fcf8 	bl	80041e0 <HAL_TIMEx_PWMN_Start>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <main+0x9c>)
 80017f8:	f001 f896 	bl	8002928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <main+0xa0>)
 8001804:	f001 f890 	bl	8002928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180e:	480a      	ldr	r0, [pc, #40]	; (8001838 <main+0xa0>)
 8001810:	f001 f88a 	bl	8002928 <HAL_GPIO_WritePin>
	  HAL_Delay(100);


	  motor.move(target);
	  */
	  motor.loopFOC();
 8001814:	463b      	mov	r3, r7
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fe13 	bl	8001442 <_ZN9Motor_FOC7loopFOCEv>
 800181c:	e7fa      	b.n	8001814 <main+0x7c>
 800181e:	bf00      	nop
 8001820:	200002e4 	.word	0x200002e4
 8001824:	20000200 	.word	0x20000200
 8001828:	41400000 	.word	0x41400000
 800182c:	2000029c 	.word	0x2000029c
 8001830:	20000254 	.word	0x20000254
 8001834:	40010c00 	.word	0x40010c00
 8001838:	40010800 	.word	0x40010800

0800183c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b090      	sub	sp, #64	; 0x40
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0318 	add.w	r3, r7, #24
 8001846:	2228      	movs	r2, #40	; 0x28
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fa7e 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2302      	movs	r3, #2
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800187a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	4618      	mov	r0, r3
 8001886:	f001 f9ab 	bl	8002be0 <HAL_RCC_OscConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800189a:	f000 f9ff 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189e:	230f      	movs	r3, #15
 80018a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2302      	movs	r3, #2
 80018a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2102      	movs	r1, #2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fc13 	bl	80030e4 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80018ce:	f000 f9e5 	bl	8001c9c <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3740      	adds	r7, #64	; 0x40
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <_ZL12MX_I2C1_Initv+0x60>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 80018e8:	4a15      	ldr	r2, [pc, #84]	; (8001940 <_ZL12MX_I2C1_Initv+0x64>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <_ZL12MX_I2C1_Initv+0x5c>)
 800191a:	f001 f81d 	bl	8002958 <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800192e:	f000 f9b5 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000200 	.word	0x20000200
 800193c:	40005400 	.word	0x40005400
 8001940:	000186a0 	.word	0x000186a0

08001944 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b092      	sub	sp, #72	; 0x48
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	615a      	str	r2, [r3, #20]
 8001966:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2220      	movs	r2, #32
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f003 f9ec 	bl	8004d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001974:	4b51      	ldr	r3, [pc, #324]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001976:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <_ZL12MX_TIM1_Initv+0x17c>)
 8001978:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 800197c:	2207      	movs	r2, #7
 800197e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001986:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019a0:	4846      	ldr	r0, [pc, #280]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 80019a2:	f001 fdd9 	bl	8003558 <HAL_TIM_PWM_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80019b6:	f000 f971 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c6:	4619      	mov	r1, r3
 80019c8:	483c      	ldr	r0, [pc, #240]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 80019ca:	f002 fca7 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80019de:	f000 f95d 	bl	8001c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e2:	2360      	movs	r3, #96	; 0x60
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80019e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	482c      	ldr	r0, [pc, #176]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001a0a:	f001 ff9f 	bl	800394c <HAL_TIM_PWM_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf14      	ite	ne
 8001a14:	2301      	movne	r3, #1
 8001a16:	2300      	moveq	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 8001a1e:	f000 f93d 	bl	8001c9c <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8001a22:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4822      	ldr	r0, [pc, #136]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001a32:	f001 ff8b 	bl	800394c <HAL_TIM_PWM_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8001a46:	f000 f929 	bl	8001c9c <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 8001a4a:	23fa      	movs	r3, #250	; 0xfa
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	2208      	movs	r2, #8
 8001a54:	4619      	mov	r1, r3
 8001a56:	4819      	ldr	r0, [pc, #100]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001a58:	f001 ff78 	bl	800394c <HAL_TIM_PWM_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <_ZL12MX_TIM1_Initv+0x12c>
  {
    Error_Handler();
 8001a6c:	f000 f916 	bl	8001c9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	480a      	ldr	r0, [pc, #40]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001a94:	f002 fca0 	bl	80043d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <_ZL12MX_TIM1_Initv+0x168>
  {
    Error_Handler();
 8001aa8:	f000 f8f8 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <_ZL12MX_TIM1_Initv+0x178>)
 8001aae:	f000 f9bf 	bl	8001e30 <HAL_TIM_MspPostInit>

}
 8001ab2:	bf00      	nop
 8001ab4:	3748      	adds	r7, #72	; 0x48
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000254 	.word	0x20000254
 8001ac0:	40012c00 	.word	0x40012c00

08001ac4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001aea:	22ef      	movs	r2, #239	; 0xef
 8001aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001af6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b08:	481b      	ldr	r0, [pc, #108]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b0a:	f001 fc83 	bl	8003414 <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001b1e:	f000 f8bd 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4812      	ldr	r0, [pc, #72]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b30:	f001 ffca 	bl	8003ac8 <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001b44:	f000 f8aa 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	4619      	mov	r1, r3
 8001b54:	4808      	ldr	r0, [pc, #32]	; (8001b78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b56:	f002 fbe1 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001b6a:	f000 f897 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000029c 	.word	0x2000029c

08001b7c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b82:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bb4:	f002 fc97 	bl	80044e6 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001bc8:	f000 f868 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200002e4 	.word	0x200002e4
 8001bd4:	40013800 	.word	0x40013800

08001bd8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a1b      	ldr	r2, [pc, #108]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <_ZL12MX_GPIO_Initv+0xb8>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3a:	4816      	ldr	r0, [pc, #88]	; (8001c94 <_ZL12MX_GPIO_Initv+0xbc>)
 8001c3c:	f000 fe74 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001c46:	4814      	ldr	r0, [pc, #80]	; (8001c98 <_ZL12MX_GPIO_Initv+0xc0>)
 8001c48:	f000 fe6e 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <_ZL12MX_GPIO_Initv+0xbc>)
 8001c66:	f000 fcdb 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001c6a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <_ZL12MX_GPIO_Initv+0xc0>)
 8001c84:	f000 fccc 	bl	8002620 <HAL_GPIO_Init>

}
 8001c88:	bf00      	nop
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010c00 	.word	0x40010c00
 8001c98:	40010800 	.word	0x40010800

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <Error_Handler+0x8>
	...

08001ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6193      	str	r3, [r2, #24]
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_MspInit+0x5c>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_MspInit+0x60>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_MspInit+0x60>)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000

08001d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_I2C_MspInit+0x90>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d132      	bne.n	8001d92 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_I2C_MspInit+0x94>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_I2C_MspInit+0x94>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_I2C_MspInit+0x94>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4a:	2312      	movs	r3, #18
 8001d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4812      	ldr	r0, [pc, #72]	; (8001da4 <HAL_I2C_MspInit+0x98>)
 8001d5a:	f000 fc61 	bl	8002620 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_I2C_MspInit+0x9c>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <HAL_I2C_MspInit+0x9c>)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_I2C_MspInit+0x94>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_I2C_MspInit+0x94>)
 8001d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_I2C_MspInit+0x94>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010c00 	.word	0x40010c00
 8001da8:	40010000 	.word	0x40010000

08001dac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_TIM_PWM_MspInit+0x34>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_TIM_PWM_MspInit+0x38>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_TIM_PWM_MspInit+0x38>)
 8001dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc8:	6193      	str	r3, [r2, #24]
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_TIM_PWM_MspInit+0x38>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d113      	bne.n	8001e22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <HAL_TIM_Base_MspInit+0x44>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <HAL_TIM_Base_MspInit+0x44>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_TIM_Base_MspInit+0x44>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	201c      	movs	r0, #28
 8001e18:	f000 fb1b 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e1c:	201c      	movs	r0, #28
 8001e1e:	f000 fb34 	bl	800248a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_TIM_MspPostInit+0x8c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d131      	bne.n	8001eb4 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_TIM_MspPostInit+0x90>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <HAL_TIM_MspPostInit+0x90>)
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_TIM_MspPostInit+0x90>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_TIM_MspPostInit+0x90>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <HAL_TIM_MspPostInit+0x90>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_TIM_MspPostInit+0x90>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001e80:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4619      	mov	r1, r3
 8001e94:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <HAL_TIM_MspPostInit+0x94>)
 8001e96:	f000 fbc3 	bl	8002620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <HAL_TIM_MspPostInit+0x98>)
 8001eb0:	f000 fbb6 	bl	8002620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010c00 	.word	0x40010c00
 8001ec8:	40010800 	.word	0x40010800

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <HAL_UART_MspInit+0xb4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d145      	bne.n	8001f78 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_UART_MspInit+0xb8>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <HAL_UART_MspInit+0xb8>)
 8001ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_UART_MspInit+0xb8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_UART_MspInit+0xb8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_UART_MspInit+0xb8>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_UART_MspInit+0xb8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f1c:	2340      	movs	r3, #64	; 0x40
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4816      	ldr	r0, [pc, #88]	; (8001f88 <HAL_UART_MspInit+0xbc>)
 8001f30:	f000 fb76 	bl	8002620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4810      	ldr	r0, [pc, #64]	; (8001f88 <HAL_UART_MspInit+0xbc>)
 8001f48:	f000 fb6a 	bl	8002620 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_UART_MspInit+0xc0>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_UART_MspInit+0xc0>)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2025      	movs	r0, #37	; 0x25
 8001f6e:	f000 fa70 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f72:	2025      	movs	r0, #37	; 0x25
 8001f74:	f000 fa89 	bl	800248a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010c00 	.word	0x40010c00
 8001f8c:	40010000 	.word	0x40010000

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <NMI_Handler+0x4>

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd6:	f000 f949 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <TIM2_IRQHandler+0x10>)
 8001fe6:	f001 fba9 	bl	800373c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000029c 	.word	0x2000029c

08001ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <USART1_IRQHandler+0x10>)
 8001ffa:	f002 fac1 	bl	8004580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200002e4 	.word	0x200002e4

08002008 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
	return 1;
 800200c:	2301      	movs	r3, #1
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <_kill>:

int _kill(int pid, int sig)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002020:	f002 fe5c 	bl	8004cdc <__errno>
 8002024:	4603      	mov	r3, r0
 8002026:	2216      	movs	r2, #22
 8002028:	601a      	str	r2, [r3, #0]
	return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_exit>:

void _exit (int status)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800203e:	f04f 31ff 	mov.w	r1, #4294967295
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffe7 	bl	8002016 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002048:	e7fe      	b.n	8002048 <_exit+0x12>

0800204a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e00a      	b.n	8002072 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800205c:	f3af 8000 	nop.w
 8002060:	4601      	mov	r1, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	60ba      	str	r2, [r7, #8]
 8002068:	b2ca      	uxtb	r2, r1
 800206a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	dbf0      	blt.n	800205c <_read+0x12>
	}

return len;
 800207a:	687b      	ldr	r3, [r7, #4]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e009      	b.n	80020aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	60ba      	str	r2, [r7, #8]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dbf1      	blt.n	8002096 <_write+0x12>
	}
	return len;
 80020b2:	687b      	ldr	r3, [r7, #4]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_close>:

int _close(int file)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e2:	605a      	str	r2, [r3, #4]
	return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <_isatty>:

int _isatty(int file)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
	return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f002 fdc6 	bl	8004cdc <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20005000 	.word	0x20005000
 800217c:	00000400 	.word	0x00000400
 8002180:	20000328 	.word	0x20000328
 8002184:	20000340 	.word	0x20000340

08002188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021ac:	4c0a      	ldr	r4, [pc, #40]	; (80021d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ba:	f7ff ffe5 	bl	8002188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021be:	f002 fd93 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021c2:	f7ff fae9 	bl	8001798 <main>
  bx lr
 80021c6:	4770      	bx	lr
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021d0:	08007ea4 	.word	0x08007ea4
  ldr r2, =_sbss
 80021d4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021d8:	20000340 	.word	0x20000340

080021dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_2_IRQHandler>
	...

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_Init+0x28>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_Init+0x28>)
 80021ea:	f043 0310 	orr.w	r3, r3, #16
 80021ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 f923 	bl	800243c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f6:	200f      	movs	r0, #15
 80021f8:	f000 f808 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fc:	f7ff fd54 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40022000 	.word	0x40022000

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x54>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x58>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f93b 	bl	80024a6 <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 f903 	bl	8002452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_InitTick+0x5c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000000 	.word	0x20000000
 8002264:	20000008 	.word	0x20000008
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_IncTick+0x1c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_IncTick+0x20>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a03      	ldr	r2, [pc, #12]	; (800228c <HAL_IncTick+0x20>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000008 	.word	0x20000008
 800228c:	2000032c 	.word	0x2000032c

08002290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <HAL_GetTick+0x10>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	2000032c 	.word	0x2000032c

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0b      	blt.n	8002332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4906      	ldr	r1, [pc, #24]	; (800233c <__NVIC_EnableIRQ+0x34>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100

08002340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	db0a      	blt.n	800236a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	490c      	ldr	r1, [pc, #48]	; (800238c <__NVIC_SetPriority+0x4c>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	440b      	add	r3, r1
 8002364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002368:	e00a      	b.n	8002380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <__NVIC_SetPriority+0x50>)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3b04      	subs	r3, #4
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	440b      	add	r3, r1
 800237e:	761a      	strb	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f1c3 0307 	rsb	r3, r3, #7
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	bf28      	it	cs
 80023b2:	2304      	movcs	r3, #4
 80023b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d902      	bls.n	80023c4 <NVIC_EncodePriority+0x30>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3b03      	subs	r3, #3
 80023c2:	e000      	b.n	80023c6 <NVIC_EncodePriority+0x32>
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43d9      	mvns	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	4313      	orrs	r3, r2
         );
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002408:	d301      	bcc.n	800240e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <SysTick_Config+0x40>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002416:	210f      	movs	r1, #15
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f7ff ff90 	bl	8002340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <SysTick_Config+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SysTick_Config+0x40>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff2d 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002464:	f7ff ff42 	bl	80022ec <__NVIC_GetPriorityGrouping>
 8002468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	f7ff ff90 	bl	8002394 <NVIC_EncodePriority>
 8002474:	4602      	mov	r2, r0
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff5f 	bl	8002340 <__NVIC_SetPriority>
}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff35 	bl	8002308 <__NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ffa2 	bl	80023f8 <SysTick_Config>
 80024b4:	4603      	mov	r3, r0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024be:	b480      	push	{r7}
 80024c0:	b085      	sub	sp, #20
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d008      	beq.n	80024e6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e020      	b.n	8002528 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 020e 	bic.w	r2, r2, #14
 80024f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002526:	7bfb      	ldrb	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
	...

08002534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002546:	2b02      	cmp	r3, #2
 8002548:	d005      	beq.n	8002556 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2204      	movs	r2, #4
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e051      	b.n	80025fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 020e 	bic.w	r2, r2, #14
 8002564:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_DMA_Abort_IT+0xd0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d029      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xa0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_DMA_Abort_IT+0xd4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d022      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x9c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_DMA_Abort_IT+0xd8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d01a      	beq.n	80025ca <HAL_DMA_Abort_IT+0x96>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_DMA_Abort_IT+0xdc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d012      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x90>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_DMA_Abort_IT+0xe0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00a      	beq.n	80025be <HAL_DMA_Abort_IT+0x8a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_DMA_Abort_IT+0xe4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d102      	bne.n	80025b8 <HAL_DMA_Abort_IT+0x84>
 80025b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025b6:	e00e      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025bc:	e00b      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025c2:	e008      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	e005      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ce:	e002      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025d0:	2310      	movs	r3, #16
 80025d2:	e000      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025d4:	2301      	movs	r3, #1
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_DMA_Abort_IT+0xe8>)
 80025d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
    } 
  }
  return status;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40020008 	.word	0x40020008
 8002608:	4002001c 	.word	0x4002001c
 800260c:	40020030 	.word	0x40020030
 8002610:	40020044 	.word	0x40020044
 8002614:	40020058 	.word	0x40020058
 8002618:	4002006c 	.word	0x4002006c
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	e169      	b.n	8002908 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002634:	2201      	movs	r2, #1
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 8158 	bne.w	8002902 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a9a      	ldr	r2, [pc, #616]	; (80028c0 <HAL_GPIO_Init+0x2a0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d05e      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 800265c:	4a98      	ldr	r2, [pc, #608]	; (80028c0 <HAL_GPIO_Init+0x2a0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d875      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002662:	4a98      	ldr	r2, [pc, #608]	; (80028c4 <HAL_GPIO_Init+0x2a4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d058      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002668:	4a96      	ldr	r2, [pc, #600]	; (80028c4 <HAL_GPIO_Init+0x2a4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d86f      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800266e:	4a96      	ldr	r2, [pc, #600]	; (80028c8 <HAL_GPIO_Init+0x2a8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d052      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002674:	4a94      	ldr	r2, [pc, #592]	; (80028c8 <HAL_GPIO_Init+0x2a8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d869      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800267a:	4a94      	ldr	r2, [pc, #592]	; (80028cc <HAL_GPIO_Init+0x2ac>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d04c      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002680:	4a92      	ldr	r2, [pc, #584]	; (80028cc <HAL_GPIO_Init+0x2ac>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d863      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002686:	4a92      	ldr	r2, [pc, #584]	; (80028d0 <HAL_GPIO_Init+0x2b0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d046      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 800268c:	4a90      	ldr	r2, [pc, #576]	; (80028d0 <HAL_GPIO_Init+0x2b0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d85d      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002692:	2b12      	cmp	r3, #18
 8002694:	d82a      	bhi.n	80026ec <HAL_GPIO_Init+0xcc>
 8002696:	2b12      	cmp	r3, #18
 8002698:	d859      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_GPIO_Init+0x80>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	0800271b 	.word	0x0800271b
 80026a4:	080026f5 	.word	0x080026f5
 80026a8:	08002707 	.word	0x08002707
 80026ac:	08002749 	.word	0x08002749
 80026b0:	0800274f 	.word	0x0800274f
 80026b4:	0800274f 	.word	0x0800274f
 80026b8:	0800274f 	.word	0x0800274f
 80026bc:	0800274f 	.word	0x0800274f
 80026c0:	0800274f 	.word	0x0800274f
 80026c4:	0800274f 	.word	0x0800274f
 80026c8:	0800274f 	.word	0x0800274f
 80026cc:	0800274f 	.word	0x0800274f
 80026d0:	0800274f 	.word	0x0800274f
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	0800274f 	.word	0x0800274f
 80026dc:	0800274f 	.word	0x0800274f
 80026e0:	0800274f 	.word	0x0800274f
 80026e4:	080026fd 	.word	0x080026fd
 80026e8:	08002711 	.word	0x08002711
 80026ec:	4a79      	ldr	r2, [pc, #484]	; (80028d4 <HAL_GPIO_Init+0x2b4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026f2:	e02c      	b.n	800274e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	623b      	str	r3, [r7, #32]
          break;
 80026fa:	e029      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	3304      	adds	r3, #4
 8002702:	623b      	str	r3, [r7, #32]
          break;
 8002704:	e024      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	3308      	adds	r3, #8
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e01f      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	330c      	adds	r3, #12
 8002716:	623b      	str	r3, [r7, #32]
          break;
 8002718:	e01a      	b.n	8002750 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002722:	2304      	movs	r3, #4
 8002724:	623b      	str	r3, [r7, #32]
          break;
 8002726:	e013      	b.n	8002750 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002730:	2308      	movs	r3, #8
 8002732:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	611a      	str	r2, [r3, #16]
          break;
 800273a:	e009      	b.n	8002750 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800273c:	2308      	movs	r3, #8
 800273e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	615a      	str	r2, [r3, #20]
          break;
 8002746:	e003      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e000      	b.n	8002750 <HAL_GPIO_Init+0x130>
          break;
 800274e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2bff      	cmp	r3, #255	; 0xff
 8002754:	d801      	bhi.n	800275a <HAL_GPIO_Init+0x13a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	e001      	b.n	800275e <HAL_GPIO_Init+0x13e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2bff      	cmp	r3, #255	; 0xff
 8002764:	d802      	bhi.n	800276c <HAL_GPIO_Init+0x14c>
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	e002      	b.n	8002772 <HAL_GPIO_Init+0x152>
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	3b08      	subs	r3, #8
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	210f      	movs	r1, #15
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	6a39      	ldr	r1, [r7, #32]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80b1 	beq.w	8002902 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a0:	4b4d      	ldr	r3, [pc, #308]	; (80028d8 <HAL_GPIO_Init+0x2b8>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a4c      	ldr	r2, [pc, #304]	; (80028d8 <HAL_GPIO_Init+0x2b8>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <HAL_GPIO_Init+0x2b8>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027b8:	4a48      	ldr	r2, [pc, #288]	; (80028dc <HAL_GPIO_Init+0x2bc>)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a40      	ldr	r2, [pc, #256]	; (80028e0 <HAL_GPIO_Init+0x2c0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_GPIO_Init+0x1ec>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3f      	ldr	r2, [pc, #252]	; (80028e4 <HAL_GPIO_Init+0x2c4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00d      	beq.n	8002808 <HAL_GPIO_Init+0x1e8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <HAL_GPIO_Init+0x1e4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a3d      	ldr	r2, [pc, #244]	; (80028ec <HAL_GPIO_Init+0x2cc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_GPIO_Init+0x1e0>
 80027fc:	2303      	movs	r3, #3
 80027fe:	e006      	b.n	800280e <HAL_GPIO_Init+0x1ee>
 8002800:	2304      	movs	r3, #4
 8002802:	e004      	b.n	800280e <HAL_GPIO_Init+0x1ee>
 8002804:	2302      	movs	r3, #2
 8002806:	e002      	b.n	800280e <HAL_GPIO_Init+0x1ee>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_GPIO_Init+0x1ee>
 800280c:	2300      	movs	r3, #0
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	f002 0203 	and.w	r2, r2, #3
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	4093      	lsls	r3, r2
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800281e:	492f      	ldr	r1, [pc, #188]	; (80028dc <HAL_GPIO_Init+0x2bc>)
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	3302      	adds	r3, #2
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	492c      	ldr	r1, [pc, #176]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002846:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	4928      	ldr	r1, [pc, #160]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	4922      	ldr	r1, [pc, #136]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	43db      	mvns	r3, r3
 8002876:	491e      	ldr	r1, [pc, #120]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002878:	4013      	ands	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4918      	ldr	r1, [pc, #96]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	43db      	mvns	r3, r3
 800289e:	4914      	ldr	r1, [pc, #80]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d021      	beq.n	80028f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_GPIO_Init+0x2d0>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
 80028bc:	e021      	b.n	8002902 <HAL_GPIO_Init+0x2e2>
 80028be:	bf00      	nop
 80028c0:	10320000 	.word	0x10320000
 80028c4:	10310000 	.word	0x10310000
 80028c8:	10220000 	.word	0x10220000
 80028cc:	10210000 	.word	0x10210000
 80028d0:	10120000 	.word	0x10120000
 80028d4:	10110000 	.word	0x10110000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40010800 	.word	0x40010800
 80028e4:	40010c00 	.word	0x40010c00
 80028e8:	40011000 	.word	0x40011000
 80028ec:	40011400 	.word	0x40011400
 80028f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_GPIO_Init+0x304>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	4909      	ldr	r1, [pc, #36]	; (8002924 <HAL_GPIO_Init+0x304>)
 80028fe:	4013      	ands	r3, r2
 8002900:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	3301      	adds	r3, #1
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	f47f ae8e 	bne.w	8002634 <HAL_GPIO_Init+0x14>
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	372c      	adds	r7, #44	; 0x2c
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e12b      	b.n	8002bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff f9c4 	bl	8001d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029bc:	f000 fce4 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 80029c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a81      	ldr	r2, [pc, #516]	; (8002bcc <HAL_I2C_Init+0x274>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d807      	bhi.n	80029dc <HAL_I2C_Init+0x84>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a80      	ldr	r2, [pc, #512]	; (8002bd0 <HAL_I2C_Init+0x278>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e006      	b.n	80029ea <HAL_I2C_Init+0x92>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a7d      	ldr	r2, [pc, #500]	; (8002bd4 <HAL_I2C_Init+0x27c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0e7      	b.n	8002bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a78      	ldr	r2, [pc, #480]	; (8002bd8 <HAL_I2C_Init+0x280>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9b      	lsrs	r3, r3, #18
 80029fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_I2C_Init+0x274>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d802      	bhi.n	8002a2c <HAL_I2C_Init+0xd4>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	e009      	b.n	8002a40 <HAL_I2C_Init+0xe8>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_I2C_Init+0x284>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	3301      	adds	r3, #1
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	495c      	ldr	r1, [pc, #368]	; (8002bcc <HAL_I2C_Init+0x274>)
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d819      	bhi.n	8002a94 <HAL_I2C_Init+0x13c>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e59      	subs	r1, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a74:	400b      	ands	r3, r1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_I2C_Init+0x138>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1e59      	subs	r1, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8e:	e051      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e04f      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <HAL_I2C_Init+0x168>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e012      	b.n	8002ae6 <HAL_I2C_Init+0x18e>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Init+0x196>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10e      	bne.n	8002b14 <HAL_I2C_Init+0x1bc>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e58      	subs	r0, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	440b      	add	r3, r1
 8002b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b12:	e00f      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	0099      	lsls	r1, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	6809      	ldr	r1, [r1, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6911      	ldr	r1, [r2, #16]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68d2      	ldr	r2, [r2, #12]
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	000186a0 	.word	0x000186a0
 8002bd0:	001e847f 	.word	0x001e847f
 8002bd4:	003d08ff 	.word	0x003d08ff
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	10624dd3 	.word	0x10624dd3

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e272      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c00:	4b92      	ldr	r3, [pc, #584]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d00c      	beq.n	8002c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c0c:	4b8f      	ldr	r3, [pc, #572]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d112      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5e>
 8002c18:	4b8c      	ldr	r3, [pc, #560]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c24:	d10b      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c26:	4b89      	ldr	r3, [pc, #548]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d06c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x12c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d168      	bne.n	8002d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e24c      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x76>
 8002c48:	4b80      	ldr	r3, [pc, #512]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7f      	ldr	r2, [pc, #508]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e02e      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b7b      	ldr	r3, [pc, #492]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7a      	ldr	r2, [pc, #488]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b78      	ldr	r3, [pc, #480]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a77      	ldr	r2, [pc, #476]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e01d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0xbc>
 8002c82:	4b72      	ldr	r3, [pc, #456]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a71      	ldr	r2, [pc, #452]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a6e      	ldr	r2, [pc, #440]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6a      	ldr	r2, [pc, #424]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a67      	ldr	r2, [pc, #412]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fae8 	bl	8002290 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7ff fae4 	bl	8002290 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e200      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b5d      	ldr	r3, [pc, #372]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xe4>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7ff fad4 	bl	8002290 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7ff fad0 	bl	8002290 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1ec      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x10c>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d063      	beq.n	8002de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1a:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d26:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d11c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x18c>
 8002d32:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x176>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e1c0      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4939      	ldr	r1, [pc, #228]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	e03a      	b.n	8002de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d74:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <HAL_RCC_OscConfig+0x270>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7ff fa89 	bl	8002290 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d82:	f7ff fa85 	bl	8002290 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1a1      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4927      	ldr	r1, [pc, #156]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	e015      	b.n	8002de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_RCC_OscConfig+0x270>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fa68 	bl	8002290 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7ff fa64 	bl	8002290 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e180      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d03a      	beq.n	8002e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d019      	beq.n	8002e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7ff fa48 	bl	8002290 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7ff fa44 	bl	8002290 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e160      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f000 fad8 	bl	80033d8 <RCC_Delay>
 8002e28:	e01c      	b.n	8002e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7ff fa2e 	bl	8002290 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e36:	e00f      	b.n	8002e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e38:	f7ff fa2a 	bl	8002290 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d908      	bls.n	8002e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e146      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	42420000 	.word	0x42420000
 8002e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	4b92      	ldr	r3, [pc, #584]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e9      	bne.n	8002e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a6 	beq.w	8002fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10d      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4a87      	ldr	r2, [pc, #540]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	61d3      	str	r3, [r2, #28]
 8002e8e:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b82      	ldr	r3, [pc, #520]	; (80030a8 <HAL_RCC_OscConfig+0x4c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d118      	bne.n	8002edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eaa:	4b7f      	ldr	r3, [pc, #508]	; (80030a8 <HAL_RCC_OscConfig+0x4c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7e      	ldr	r2, [pc, #504]	; (80030a8 <HAL_RCC_OscConfig+0x4c8>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb6:	f7ff f9eb 	bl	8002290 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebe:	f7ff f9e7 	bl	8002290 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e103      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <HAL_RCC_OscConfig+0x4c8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x312>
 8002ee4:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a6e      	ldr	r2, [pc, #440]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e02d      	b.n	8002f4e <HAL_RCC_OscConfig+0x36e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x334>
 8002efa:	4b6a      	ldr	r3, [pc, #424]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a69      	ldr	r2, [pc, #420]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4b67      	ldr	r3, [pc, #412]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a66      	ldr	r2, [pc, #408]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	e01c      	b.n	8002f4e <HAL_RCC_OscConfig+0x36e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x356>
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a60      	ldr	r2, [pc, #384]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4a5d      	ldr	r2, [pc, #372]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6213      	str	r3, [r2, #32]
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0x36e>
 8002f36:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a5a      	ldr	r2, [pc, #360]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6213      	str	r3, [r2, #32]
 8002f42:	4b58      	ldr	r3, [pc, #352]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4a57      	ldr	r2, [pc, #348]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d015      	beq.n	8002f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7ff f99b 	bl	8002290 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7ff f997 	bl	8002290 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0b1      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ee      	beq.n	8002f5e <HAL_RCC_OscConfig+0x37e>
 8002f80:	e014      	b.n	8002fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7ff f985 	bl	8002290 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7ff f981 	bl	8002290 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e09b      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ee      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4a3b      	ldr	r2, [pc, #236]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8087 	beq.w	80030d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d061      	beq.n	8003098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d146      	bne.n	800306a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b33      	ldr	r3, [pc, #204]	; (80030ac <HAL_RCC_OscConfig+0x4cc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7ff f955 	bl	8002290 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fea:	f7ff f951 	bl	8002290 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e06d      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffc:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d108      	bne.n	8003024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4921      	ldr	r1, [pc, #132]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003024:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a19      	ldr	r1, [r3, #32]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	430b      	orrs	r3, r1
 8003036:	491b      	ldr	r1, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x4cc>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7ff f925 	bl	8002290 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304a:	f7ff f921 	bl	8002290 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e03d      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x46a>
 8003068:	e035      	b.n	80030d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_RCC_OscConfig+0x4cc>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7ff f90e 	bl	8002290 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7ff f90a 	bl	8002290 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e026      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x498>
 8003096:	e01e      	b.n	80030d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e019      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40007000 	.word	0x40007000
 80030ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000

080030e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0d0      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d910      	bls.n	8003128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b67      	ldr	r3, [pc, #412]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	4965      	ldr	r1, [pc, #404]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800314a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d040      	beq.n	8003204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d115      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e073      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06b      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4936      	ldr	r1, [pc, #216]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7ff f85c 	bl	8002290 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7ff f858 	bl	8002290 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e053      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d210      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4922      	ldr	r1, [pc, #136]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4602      	mov	r2, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	490a      	ldr	r1, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	5ccb      	ldrb	r3, [r1, r3]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1cc>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe ffba 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08007aa8 	.word	0x08007aa8
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b490      	push	{r4, r7}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_RCC_GetSysClockFreq+0xac>)
 80032c0:	1d3c      	adds	r4, r7, #4
 80032c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032c8:	f240 2301 	movw	r3, #513	; 0x201
 80032cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e2:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x46>
 80032f6:	e02b      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	e02b      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	0c9b      	lsrs	r3, r3, #18
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3328      	adds	r3, #40	; 0x28
 8003308:	443b      	add	r3, r7
 800330a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800330e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_GetSysClockFreq+0xb0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0c5b      	lsrs	r3, r3, #17
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	3328      	adds	r3, #40	; 0x28
 8003326:	443b      	add	r3, r7
 8003328:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800332c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003332:	fb03 f202 	mul.w	r2, r3, r2
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	e004      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	623b      	str	r3, [r7, #32]
      break;
 800334e:	e002      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003352:	623b      	str	r3, [r7, #32]
      break;
 8003354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003356:	6a3b      	ldr	r3, [r7, #32]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3728      	adds	r7, #40	; 0x28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc90      	pop	{r4, r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	08007778 	.word	0x08007778
 8003368:	40021000 	.word	0x40021000
 800336c:	007a1200 	.word	0x007a1200
 8003370:	003d0900 	.word	0x003d0900

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b02      	ldr	r3, [pc, #8]	; (8003384 <HAL_RCC_GetHCLKFreq+0x10>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	20000000 	.word	0x20000000

08003388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800338c:	f7ff fff2 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	08007ab8 	.word	0x08007ab8

080033b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033b4:	f7ff ffde 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	0adb      	lsrs	r3, r3, #11
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4903      	ldr	r1, [pc, #12]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	08007ab8 	.word	0x08007ab8

080033d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <RCC_Delay+0x34>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <RCC_Delay+0x38>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0a5b      	lsrs	r3, r3, #9
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f4:	bf00      	nop
  }
  while (Delay --);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	60fa      	str	r2, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f9      	bne.n	80033f4 <RCC_Delay+0x1c>
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	20000000 	.word	0x20000000
 8003410:	10624dd3 	.word	0x10624dd3

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe fcd4 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 fc20 	bl	8003c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e03a      	b.n	8003542 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	; (800354c <HAL_TIM_Base_Start_IT+0x98>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d009      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <HAL_TIM_Base_Start_IT+0x9c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <HAL_TIM_Base_Start_IT+0xa0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d010      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	e007      	b.n	8003540 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e041      	b.n	80035ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe fc14 	bl	8001dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 fb7e 	bl	8003c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <HAL_TIM_PWM_Start+0x24>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e022      	b.n	8003662 <HAL_TIM_PWM_Start+0x6a>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b04      	cmp	r3, #4
 8003620:	d109      	bne.n	8003636 <HAL_TIM_PWM_Start+0x3e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	e015      	b.n	8003662 <HAL_TIM_PWM_Start+0x6a>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d109      	bne.n	8003650 <HAL_TIM_PWM_Start+0x58>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e008      	b.n	8003662 <HAL_TIM_PWM_Start+0x6a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e05e      	b.n	8003728 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <HAL_TIM_PWM_Start+0x82>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003678:	e013      	b.n	80036a2 <HAL_TIM_PWM_Start+0xaa>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Start+0x92>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003688:	e00b      	b.n	80036a2 <HAL_TIM_PWM_Start+0xaa>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d104      	bne.n	800369a <HAL_TIM_PWM_Start+0xa2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	e003      	b.n	80036a2 <HAL_TIM_PWM_Start+0xaa>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2201      	movs	r2, #1
 80036a8:	6839      	ldr	r1, [r7, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fd74 	bl	8004198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <HAL_TIM_PWM_Start+0x138>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d107      	bne.n	80036ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_TIM_PWM_Start+0x138>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00e      	beq.n	80036f2 <HAL_TIM_PWM_Start+0xfa>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036dc:	d009      	beq.n	80036f2 <HAL_TIM_PWM_Start+0xfa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a14      	ldr	r2, [pc, #80]	; (8003734 <HAL_TIM_PWM_Start+0x13c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d004      	beq.n	80036f2 <HAL_TIM_PWM_Start+0xfa>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <HAL_TIM_PWM_Start+0x140>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d111      	bne.n	8003716 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d010      	beq.n	8003726 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003714:	e007      	b.n	8003726 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800

0800373c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0202 	mvn.w	r2, #2
 8003768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa6f 	bl	8003c62 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa62 	bl	8003c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa71 	bl	8003c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0204 	mvn.w	r2, #4
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa45 	bl	8003c62 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa38 	bl	8003c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa47 	bl	8003c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d122      	bne.n	8003840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d11b      	bne.n	8003840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0208 	mvn.w	r2, #8
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2204      	movs	r2, #4
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa1b 	bl	8003c62 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa0e 	bl	8003c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fa1d 	bl	8003c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b10      	cmp	r3, #16
 800384c:	d122      	bne.n	8003894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b10      	cmp	r3, #16
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0210 	mvn.w	r2, #16
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2208      	movs	r2, #8
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9f1 	bl	8003c62 <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f9e4 	bl	8003c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f9f3 	bl	8003c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0201 	mvn.w	r2, #1
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fe5c 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fdd0 	bl	800448c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9b7 	bl	8003c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0220 	mvn.w	r2, #32
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fd9b 	bl	800447a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003962:	2302      	movs	r3, #2
 8003964:	e0ac      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	f200 809f 	bhi.w	8003ab4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	080039b1 	.word	0x080039b1
 8003980:	08003ab5 	.word	0x08003ab5
 8003984:	08003ab5 	.word	0x08003ab5
 8003988:	08003ab5 	.word	0x08003ab5
 800398c:	080039f1 	.word	0x080039f1
 8003990:	08003ab5 	.word	0x08003ab5
 8003994:	08003ab5 	.word	0x08003ab5
 8003998:	08003ab5 	.word	0x08003ab5
 800399c:	08003a33 	.word	0x08003a33
 80039a0:	08003ab5 	.word	0x08003ab5
 80039a4:	08003ab5 	.word	0x08003ab5
 80039a8:	08003ab5 	.word	0x08003ab5
 80039ac:	08003a73 	.word	0x08003a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f9d0 	bl	8003d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0208 	orr.w	r2, r2, #8
 80039ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6999      	ldr	r1, [r3, #24]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	619a      	str	r2, [r3, #24]
      break;
 80039ee:	e062      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fa16 	bl	8003e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6999      	ldr	r1, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	619a      	str	r2, [r3, #24]
      break;
 8003a30:	e041      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fa5f 	bl	8003efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0208 	orr.w	r2, r2, #8
 8003a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0204 	bic.w	r2, r2, #4
 8003a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69d9      	ldr	r1, [r3, #28]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	61da      	str	r2, [r3, #28]
      break;
 8003a70:	e021      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 faa9 	bl	8003fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	021a      	lsls	r2, r3, #8
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	61da      	str	r2, [r3, #28]
      break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ab4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_TIM_ConfigClockSource+0x18>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0b3      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x180>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b18:	d03e      	beq.n	8003b98 <HAL_TIM_ConfigClockSource+0xd0>
 8003b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1e:	f200 8087 	bhi.w	8003c30 <HAL_TIM_ConfigClockSource+0x168>
 8003b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b26:	f000 8085 	beq.w	8003c34 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d87f      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x168>
 8003b30:	2b70      	cmp	r3, #112	; 0x70
 8003b32:	d01a      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0xa2>
 8003b34:	2b70      	cmp	r3, #112	; 0x70
 8003b36:	d87b      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x168>
 8003b38:	2b60      	cmp	r3, #96	; 0x60
 8003b3a:	d050      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x116>
 8003b3c:	2b60      	cmp	r3, #96	; 0x60
 8003b3e:	d877      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x168>
 8003b40:	2b50      	cmp	r3, #80	; 0x50
 8003b42:	d03c      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0xf6>
 8003b44:	2b50      	cmp	r3, #80	; 0x50
 8003b46:	d873      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x168>
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d058      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x136>
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d86f      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x168>
 8003b50:	2b30      	cmp	r3, #48	; 0x30
 8003b52:	d064      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x156>
 8003b54:	2b30      	cmp	r3, #48	; 0x30
 8003b56:	d86b      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x168>
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d060      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x156>
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d867      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x168>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d05c      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x156>
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d05a      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b68:	e062      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6899      	ldr	r1, [r3, #8]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f000 faee 	bl	800415a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	609a      	str	r2, [r3, #8]
      break;
 8003b96:	e04e      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6899      	ldr	r1, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f000 fad7 	bl	800415a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bba:	609a      	str	r2, [r3, #8]
      break;
 8003bbc:	e03b      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f000 fa4e 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2150      	movs	r1, #80	; 0x50
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 faa5 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003bdc:	e02b      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 fa6c 	bl	80040c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2160      	movs	r1, #96	; 0x60
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa95 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e01b      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f000 fa2e 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2140      	movs	r1, #64	; 0x40
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fa85 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e00b      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f000 fa7c 	bl	8004126 <TIM_ITRx_SetConfig>
        break;
 8003c2e:	e002      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <TIM_Base_SetConfig+0xb8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x30>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x30>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <TIM_Base_SetConfig+0xbc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x30>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <TIM_Base_SetConfig+0xc0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <TIM_Base_SetConfig+0xb8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_Base_SetConfig+0x62>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d007      	beq.n	8003cfa <TIM_Base_SetConfig+0x62>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <TIM_Base_SetConfig+0xbc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_Base_SetConfig+0x62>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <TIM_Base_SetConfig+0xc0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d108      	bne.n	8003d0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <TIM_Base_SetConfig+0xb8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d103      	bne.n	8003d40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	615a      	str	r2, [r3, #20]
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800

08003d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f023 0201 	bic.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 0302 	bic.w	r3, r3, #2
 8003da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <TIM_OC1_SetConfig+0xc8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10c      	bne.n	8003dd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0308 	bic.w	r3, r3, #8
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <TIM_OC1_SetConfig+0xc8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d111      	bne.n	8003dfe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00

08003e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0210 	bic.w	r2, r3, #16
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0320 	bic.w	r3, r3, #32
 8003e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <TIM_OC2_SetConfig+0xd0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d10d      	bne.n	8003ea4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <TIM_OC2_SetConfig+0xd0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d113      	bne.n	8003ed4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	40012c00 	.word	0x40012c00

08003efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0303 	bic.w	r3, r3, #3
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <TIM_OC3_SetConfig+0xd0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10d      	bne.n	8003f76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <TIM_OC3_SetConfig+0xd0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d113      	bne.n	8003fa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	621a      	str	r2, [r3, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40012c00 	.word	0x40012c00

08003fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800401a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	031b      	lsls	r3, r3, #12
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <TIM_OC4_SetConfig+0x98>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d109      	bne.n	8004044 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	019b      	lsls	r3, r3, #6
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00

0800406c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 030a 	bic.w	r3, r3, #10
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f023 0210 	bic.w	r2, r3, #16
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	031b      	lsls	r3, r3, #12
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004104:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	f043 0307 	orr.w	r3, r3, #7
 8004148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800415a:	b480      	push	{r7}
 800415c:	b087      	sub	sp, #28
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004174:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	021a      	lsls	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	431a      	orrs	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4313      	orrs	r3, r2
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	609a      	str	r2, [r3, #8]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	2201      	movs	r2, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	401a      	ands	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_TIMEx_PWMN_Start+0x24>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e022      	b.n	800424a <HAL_TIMEx_PWMN_Start+0x6a>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d109      	bne.n	800421e <HAL_TIMEx_PWMN_Start+0x3e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	bf14      	ite	ne
 8004216:	2301      	movne	r3, #1
 8004218:	2300      	moveq	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	e015      	b.n	800424a <HAL_TIMEx_PWMN_Start+0x6a>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d109      	bne.n	8004238 <HAL_TIMEx_PWMN_Start+0x58>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e008      	b.n	800424a <HAL_TIMEx_PWMN_Start+0x6a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e059      	b.n	8004306 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <HAL_TIMEx_PWMN_Start+0x82>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004260:	e013      	b.n	800428a <HAL_TIMEx_PWMN_Start+0xaa>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d104      	bne.n	8004272 <HAL_TIMEx_PWMN_Start+0x92>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004270:	e00b      	b.n	800428a <HAL_TIMEx_PWMN_Start+0xaa>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d104      	bne.n	8004282 <HAL_TIMEx_PWMN_Start+0xa2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004280:	e003      	b.n	800428a <HAL_TIMEx_PWMN_Start+0xaa>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2204      	movs	r2, #4
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f903 	bl	800449e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_TIMEx_PWMN_Start+0x130>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_TIMEx_PWMN_Start+0xf0>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ba:	d009      	beq.n	80042d0 <HAL_TIMEx_PWMN_Start+0xf0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a14      	ldr	r2, [pc, #80]	; (8004314 <HAL_TIMEx_PWMN_Start+0x134>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_TIMEx_PWMN_Start+0xf0>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a13      	ldr	r2, [pc, #76]	; (8004318 <HAL_TIMEx_PWMN_Start+0x138>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d111      	bne.n	80042f4 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d010      	beq.n	8004304 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	e007      	b.n	8004304 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800

0800431c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004330:	2302      	movs	r3, #2
 8004332:	e046      	b.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a16      	ldr	r2, [pc, #88]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d009      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10c      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800

080043d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e03d      	b.n	8004470 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	2204      	movs	r2, #4
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	43db      	mvns	r3, r3
 80044c0:	401a      	ands	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	431a      	orrs	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e03f      	b.n	8004578 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fd fcdd 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2224      	movs	r2, #36	; 0x24
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004528:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fb48 	bl	8004bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800453e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800454e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800455e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10d      	bne.n	80045d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_UART_IRQHandler+0x52>
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa4f 	bl	8004a6e <UART_Receive_IT>
      return;
 80045d0:	e17b      	b.n	80048ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80b1 	beq.w	800473c <HAL_UART_IRQHandler+0x1bc>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <HAL_UART_IRQHandler+0x70>
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80a6 	beq.w	800473c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_UART_IRQHandler+0x90>
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_UART_IRQHandler+0xb0>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f043 0202 	orr.w	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_UART_IRQHandler+0xd0>
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00f      	beq.n	800467a <HAL_UART_IRQHandler+0xfa>
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_UART_IRQHandler+0xee>
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f043 0208 	orr.w	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 811e 	beq.w	80048c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <HAL_UART_IRQHandler+0x11e>
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9e8 	bl	8004a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <HAL_UART_IRQHandler+0x146>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d031      	beq.n	800472a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f92a 	bl	8004920 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d023      	beq.n	8004722 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d013      	beq.n	800471a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	4a76      	ldr	r2, [pc, #472]	; (80048d0 <HAL_UART_IRQHandler+0x350>)
 80046f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd ff18 	bl	8002534 <HAL_DMA_Abort_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00e      	b.n	8004738 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f8ec 	bl	80048f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e00a      	b.n	8004738 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8e8 	bl	80048f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e006      	b.n	8004738 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8e4 	bl	80048f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004736:	e0c3      	b.n	80048c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	bf00      	nop
    return;
 800473a:	e0c1      	b.n	80048c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 80a1 	bne.w	8004888 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 809b 	beq.w	8004888 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8095 	beq.w	8004888 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d04e      	beq.n	8004820 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800478c:	8a3b      	ldrh	r3, [r7, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8098 	beq.w	80048c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004798:	8a3a      	ldrh	r2, [r7, #16]
 800479a:	429a      	cmp	r2, r3
 800479c:	f080 8092 	bcs.w	80048c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8a3a      	ldrh	r2, [r7, #16]
 80047a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d02b      	beq.n	8004808 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0210 	bic.w	r2, r2, #16
 80047fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fe5b 	bl	80024be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004810:	b29b      	uxth	r3, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	b29b      	uxth	r3, r3
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f876 	bl	800490a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800481e:	e051      	b.n	80048c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004828:	b29b      	uxth	r3, r3
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d047      	beq.n	80048c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004838:	8a7b      	ldrh	r3, [r7, #18]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d044      	beq.n	80048c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800484c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0210 	bic.w	r2, r2, #16
 800487a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800487c:	8a7b      	ldrh	r3, [r7, #18]
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f842 	bl	800490a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004886:	e01f      	b.n	80048c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_UART_IRQHandler+0x324>
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f87f 	bl	80049a0 <UART_Transmit_IT>
    return;
 80048a2:	e012      	b.n	80048ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <HAL_UART_IRQHandler+0x34a>
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8c0 	bl	8004a3e <UART_EndTransmit_IT>
    return;
 80048be:	e004      	b.n	80048ca <HAL_UART_IRQHandler+0x34a>
    return;
 80048c0:	bf00      	nop
 80048c2:	e002      	b.n	80048ca <HAL_UART_IRQHandler+0x34a>
      return;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_UART_IRQHandler+0x34a>
      return;
 80048c8:	bf00      	nop
  }
}
 80048ca:	3728      	adds	r7, #40	; 0x28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	08004979 	.word	0x08004979

080048d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004936:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0210 	bic.w	r2, r2, #16
 800495e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7ff ffb0 	bl	80048f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b21      	cmp	r3, #33	; 0x21
 80049b2:	d13e      	bne.n	8004a32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d114      	bne.n	80049e8 <UART_Transmit_IT+0x48>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d110      	bne.n	80049e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	1c9a      	adds	r2, r3, #2
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	621a      	str	r2, [r3, #32]
 80049e6:	e008      	b.n	80049fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	1c59      	adds	r1, r3, #1
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6211      	str	r1, [r2, #32]
 80049f2:	781a      	ldrb	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4619      	mov	r1, r3
 8004a08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10f      	bne.n	8004a2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff ff38 	bl	80048d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b22      	cmp	r3, #34	; 0x22
 8004a80:	f040 8099 	bne.w	8004bb6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8c:	d117      	bne.n	8004abe <UART_Receive_IT+0x50>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d113      	bne.n	8004abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	; 0x28
 8004abc:	e026      	b.n	8004b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad0:	d007      	beq.n	8004ae2 <UART_Receive_IT+0x74>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <UART_Receive_IT+0x82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e008      	b.n	8004b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d148      	bne.n	8004bb2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0220 	bic.w	r2, r2, #32
 8004b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d123      	bne.n	8004ba8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0210 	bic.w	r2, r2, #16
 8004b74:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b10      	cmp	r3, #16
 8004b82:	d10a      	bne.n	8004b9a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff feb2 	bl	800490a <HAL_UARTEx_RxEventCallback>
 8004ba6:	e002      	b.n	8004bae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff fe9c 	bl	80048e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e002      	b.n	8004bb8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004bb6:	2302      	movs	r3, #2
  }
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bfa:	f023 030c 	bic.w	r3, r3, #12
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2c      	ldr	r2, [pc, #176]	; (8004cd4 <UART_SetConfig+0x114>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d103      	bne.n	8004c30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe fbc2 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	e002      	b.n	8004c36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7fe fbaa 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8004c34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	441a      	add	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <UART_SetConfig+0x118>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	0119      	lsls	r1, r3, #4
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009a      	lsls	r2, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c6c:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <UART_SetConfig+0x118>)
 8004c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2064      	movs	r0, #100	; 0x64
 8004c76:	fb00 f303 	mul.w	r3, r0, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <UART_SetConfig+0x118>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c8c:	4419      	add	r1, r3
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009a      	lsls	r2, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <UART_SetConfig+0x118>)
 8004ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	2064      	movs	r0, #100	; 0x64
 8004cae:	fb00 f303 	mul.w	r3, r0, r3
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	3332      	adds	r3, #50	; 0x32
 8004cb8:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <UART_SetConfig+0x118>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	440a      	add	r2, r1
 8004cca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40013800 	.word	0x40013800
 8004cd8:	51eb851f 	.word	0x51eb851f

08004cdc <__errno>:
 8004cdc:	4b01      	ldr	r3, [pc, #4]	; (8004ce4 <__errno+0x8>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	2000000c 	.word	0x2000000c

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	2600      	movs	r6, #0
 8004cec:	4d0c      	ldr	r5, [pc, #48]	; (8004d20 <__libc_init_array+0x38>)
 8004cee:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <__libc_init_array+0x3c>)
 8004cf0:	1b64      	subs	r4, r4, r5
 8004cf2:	10a4      	asrs	r4, r4, #2
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	f002 fd30 	bl	800775c <_init>
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	4d0a      	ldr	r5, [pc, #40]	; (8004d28 <__libc_init_array+0x40>)
 8004d00:	4c0a      	ldr	r4, [pc, #40]	; (8004d2c <__libc_init_array+0x44>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	08007e9c 	.word	0x08007e9c
 8004d24:	08007e9c 	.word	0x08007e9c
 8004d28:	08007e9c 	.word	0x08007e9c
 8004d2c:	08007ea0 	.word	0x08007ea0

08004d30 <memcpy>:
 8004d30:	440a      	add	r2, r1
 8004d32:	4291      	cmp	r1, r2
 8004d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d38:	d100      	bne.n	8004d3c <memcpy+0xc>
 8004d3a:	4770      	bx	lr
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	4291      	cmp	r1, r2
 8004d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d48:	d1f9      	bne.n	8004d3e <memcpy+0xe>
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <memset>:
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4402      	add	r2, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <__cvt>:
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d62:	461f      	mov	r7, r3
 8004d64:	bfbb      	ittet	lt
 8004d66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d6a:	461f      	movlt	r7, r3
 8004d6c:	2300      	movge	r3, #0
 8004d6e:	232d      	movlt	r3, #45	; 0x2d
 8004d70:	b088      	sub	sp, #32
 8004d72:	4614      	mov	r4, r2
 8004d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d78:	7013      	strb	r3, [r2, #0]
 8004d7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d80:	f023 0820 	bic.w	r8, r3, #32
 8004d84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d88:	d005      	beq.n	8004d96 <__cvt+0x3a>
 8004d8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d8e:	d100      	bne.n	8004d92 <__cvt+0x36>
 8004d90:	3501      	adds	r5, #1
 8004d92:	2302      	movs	r3, #2
 8004d94:	e000      	b.n	8004d98 <__cvt+0x3c>
 8004d96:	2303      	movs	r3, #3
 8004d98:	aa07      	add	r2, sp, #28
 8004d9a:	9204      	str	r2, [sp, #16]
 8004d9c:	aa06      	add	r2, sp, #24
 8004d9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004da2:	e9cd 3500 	strd	r3, r5, [sp]
 8004da6:	4622      	mov	r2, r4
 8004da8:	463b      	mov	r3, r7
 8004daa:	f000 fcc5 	bl	8005738 <_dtoa_r>
 8004dae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004db2:	4606      	mov	r6, r0
 8004db4:	d102      	bne.n	8004dbc <__cvt+0x60>
 8004db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004db8:	07db      	lsls	r3, r3, #31
 8004dba:	d522      	bpl.n	8004e02 <__cvt+0xa6>
 8004dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dc0:	eb06 0905 	add.w	r9, r6, r5
 8004dc4:	d110      	bne.n	8004de8 <__cvt+0x8c>
 8004dc6:	7833      	ldrb	r3, [r6, #0]
 8004dc8:	2b30      	cmp	r3, #48	; 0x30
 8004dca:	d10a      	bne.n	8004de2 <__cvt+0x86>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd8:	b918      	cbnz	r0, 8004de2 <__cvt+0x86>
 8004dda:	f1c5 0501 	rsb	r5, r5, #1
 8004dde:	f8ca 5000 	str.w	r5, [sl]
 8004de2:	f8da 3000 	ldr.w	r3, [sl]
 8004de6:	4499      	add	r9, r3
 8004de8:	2200      	movs	r2, #0
 8004dea:	2300      	movs	r3, #0
 8004dec:	4620      	mov	r0, r4
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7fb fdda 	bl	80009a8 <__aeabi_dcmpeq>
 8004df4:	b108      	cbz	r0, 8004dfa <__cvt+0x9e>
 8004df6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dfa:	2230      	movs	r2, #48	; 0x30
 8004dfc:	9b07      	ldr	r3, [sp, #28]
 8004dfe:	454b      	cmp	r3, r9
 8004e00:	d307      	bcc.n	8004e12 <__cvt+0xb6>
 8004e02:	4630      	mov	r0, r6
 8004e04:	9b07      	ldr	r3, [sp, #28]
 8004e06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e08:	1b9b      	subs	r3, r3, r6
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	b008      	add	sp, #32
 8004e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	9107      	str	r1, [sp, #28]
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	e7f0      	b.n	8004dfc <__cvt+0xa0>

08004e1a <__exponent>:
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	f803 2b02 	strb.w	r2, [r3], #2
 8004e24:	bfb6      	itet	lt
 8004e26:	222d      	movlt	r2, #45	; 0x2d
 8004e28:	222b      	movge	r2, #43	; 0x2b
 8004e2a:	4249      	neglt	r1, r1
 8004e2c:	2909      	cmp	r1, #9
 8004e2e:	7042      	strb	r2, [r0, #1]
 8004e30:	dd2b      	ble.n	8004e8a <__exponent+0x70>
 8004e32:	f10d 0407 	add.w	r4, sp, #7
 8004e36:	46a4      	mov	ip, r4
 8004e38:	270a      	movs	r7, #10
 8004e3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e3e:	460a      	mov	r2, r1
 8004e40:	46a6      	mov	lr, r4
 8004e42:	fb07 1516 	mls	r5, r7, r6, r1
 8004e46:	2a63      	cmp	r2, #99	; 0x63
 8004e48:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e56:	dcf0      	bgt.n	8004e3a <__exponent+0x20>
 8004e58:	3130      	adds	r1, #48	; 0x30
 8004e5a:	f1ae 0502 	sub.w	r5, lr, #2
 8004e5e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e62:	4629      	mov	r1, r5
 8004e64:	1c44      	adds	r4, r0, #1
 8004e66:	4561      	cmp	r1, ip
 8004e68:	d30a      	bcc.n	8004e80 <__exponent+0x66>
 8004e6a:	f10d 0209 	add.w	r2, sp, #9
 8004e6e:	eba2 020e 	sub.w	r2, r2, lr
 8004e72:	4565      	cmp	r5, ip
 8004e74:	bf88      	it	hi
 8004e76:	2200      	movhi	r2, #0
 8004e78:	4413      	add	r3, r2
 8004e7a:	1a18      	subs	r0, r3, r0
 8004e7c:	b003      	add	sp, #12
 8004e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e84:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e88:	e7ed      	b.n	8004e66 <__exponent+0x4c>
 8004e8a:	2330      	movs	r3, #48	; 0x30
 8004e8c:	3130      	adds	r1, #48	; 0x30
 8004e8e:	7083      	strb	r3, [r0, #2]
 8004e90:	70c1      	strb	r1, [r0, #3]
 8004e92:	1d03      	adds	r3, r0, #4
 8004e94:	e7f1      	b.n	8004e7a <__exponent+0x60>
	...

08004e98 <_printf_float>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	b091      	sub	sp, #68	; 0x44
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	461f      	mov	r7, r3
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	f001 fa33 	bl	8006314 <_localeconv_r>
 8004eae:	6803      	ldr	r3, [r0, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb4:	f7fb f94c 	bl	8000150 <strlen>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	930e      	str	r3, [sp, #56]	; 0x38
 8004ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec0:	900a      	str	r0, [sp, #40]	; 0x28
 8004ec2:	3307      	adds	r3, #7
 8004ec4:	f023 0307 	bic.w	r3, r3, #7
 8004ec8:	f103 0208 	add.w	r2, r3, #8
 8004ecc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ed0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ed4:	f8c8 2000 	str.w	r2, [r8]
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ee0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004ee4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eea:	f04f 32ff 	mov.w	r2, #4294967295
 8004eee:	4640      	mov	r0, r8
 8004ef0:	4b9c      	ldr	r3, [pc, #624]	; (8005164 <_printf_float+0x2cc>)
 8004ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ef4:	f7fb fd8a 	bl	8000a0c <__aeabi_dcmpun>
 8004ef8:	bb70      	cbnz	r0, 8004f58 <_printf_float+0xc0>
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	4640      	mov	r0, r8
 8004f00:	4b98      	ldr	r3, [pc, #608]	; (8005164 <_printf_float+0x2cc>)
 8004f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f04:	f7fb fd64 	bl	80009d0 <__aeabi_dcmple>
 8004f08:	bb30      	cbnz	r0, 8004f58 <_printf_float+0xc0>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4640      	mov	r0, r8
 8004f10:	4651      	mov	r1, sl
 8004f12:	f7fb fd53 	bl	80009bc <__aeabi_dcmplt>
 8004f16:	b110      	cbz	r0, 8004f1e <_printf_float+0x86>
 8004f18:	232d      	movs	r3, #45	; 0x2d
 8004f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f1e:	4b92      	ldr	r3, [pc, #584]	; (8005168 <_printf_float+0x2d0>)
 8004f20:	4892      	ldr	r0, [pc, #584]	; (800516c <_printf_float+0x2d4>)
 8004f22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f26:	bf94      	ite	ls
 8004f28:	4698      	movls	r8, r3
 8004f2a:	4680      	movhi	r8, r0
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	f04f 0a00 	mov.w	sl, #0
 8004f32:	6123      	str	r3, [r4, #16]
 8004f34:	f02b 0304 	bic.w	r3, fp, #4
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	4633      	mov	r3, r6
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4628      	mov	r0, r5
 8004f40:	9700      	str	r7, [sp, #0]
 8004f42:	aa0f      	add	r2, sp, #60	; 0x3c
 8004f44:	f000 f9d4 	bl	80052f0 <_printf_common>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	f040 8090 	bne.w	800506e <_printf_float+0x1d6>
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f52:	b011      	add	sp, #68	; 0x44
 8004f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f58:	4642      	mov	r2, r8
 8004f5a:	4653      	mov	r3, sl
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4651      	mov	r1, sl
 8004f60:	f7fb fd54 	bl	8000a0c <__aeabi_dcmpun>
 8004f64:	b148      	cbz	r0, 8004f7a <_printf_float+0xe2>
 8004f66:	f1ba 0f00 	cmp.w	sl, #0
 8004f6a:	bfb8      	it	lt
 8004f6c:	232d      	movlt	r3, #45	; 0x2d
 8004f6e:	4880      	ldr	r0, [pc, #512]	; (8005170 <_printf_float+0x2d8>)
 8004f70:	bfb8      	it	lt
 8004f72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f76:	4b7f      	ldr	r3, [pc, #508]	; (8005174 <_printf_float+0x2dc>)
 8004f78:	e7d3      	b.n	8004f22 <_printf_float+0x8a>
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	d142      	bne.n	800500a <_printf_float+0x172>
 8004f84:	2306      	movs	r3, #6
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	9206      	str	r2, [sp, #24]
 8004f8c:	aa0e      	add	r2, sp, #56	; 0x38
 8004f8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f92:	aa0d      	add	r2, sp, #52	; 0x34
 8004f94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f98:	9203      	str	r2, [sp, #12]
 8004f9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	6863      	ldr	r3, [r4, #4]
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	4628      	mov	r0, r5
 8004fac:	4653      	mov	r3, sl
 8004fae:	910b      	str	r1, [sp, #44]	; 0x2c
 8004fb0:	f7ff fed4 	bl	8004d5c <__cvt>
 8004fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fb6:	4680      	mov	r8, r0
 8004fb8:	2947      	cmp	r1, #71	; 0x47
 8004fba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fbc:	d108      	bne.n	8004fd0 <_printf_float+0x138>
 8004fbe:	1cc8      	adds	r0, r1, #3
 8004fc0:	db02      	blt.n	8004fc8 <_printf_float+0x130>
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	4299      	cmp	r1, r3
 8004fc6:	dd40      	ble.n	800504a <_printf_float+0x1b2>
 8004fc8:	f1a9 0902 	sub.w	r9, r9, #2
 8004fcc:	fa5f f989 	uxtb.w	r9, r9
 8004fd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fd4:	d81f      	bhi.n	8005016 <_printf_float+0x17e>
 8004fd6:	464a      	mov	r2, r9
 8004fd8:	3901      	subs	r1, #1
 8004fda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fde:	910d      	str	r1, [sp, #52]	; 0x34
 8004fe0:	f7ff ff1b 	bl	8004e1a <__exponent>
 8004fe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fe6:	4682      	mov	sl, r0
 8004fe8:	1813      	adds	r3, r2, r0
 8004fea:	2a01      	cmp	r2, #1
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	dc02      	bgt.n	8004ff6 <_printf_float+0x15e>
 8004ff0:	6822      	ldr	r2, [r4, #0]
 8004ff2:	07d2      	lsls	r2, r2, #31
 8004ff4:	d501      	bpl.n	8004ffa <_printf_float+0x162>
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d09b      	beq.n	8004f3a <_printf_float+0xa2>
 8005002:	232d      	movs	r3, #45	; 0x2d
 8005004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005008:	e797      	b.n	8004f3a <_printf_float+0xa2>
 800500a:	2947      	cmp	r1, #71	; 0x47
 800500c:	d1bc      	bne.n	8004f88 <_printf_float+0xf0>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ba      	bne.n	8004f88 <_printf_float+0xf0>
 8005012:	2301      	movs	r3, #1
 8005014:	e7b7      	b.n	8004f86 <_printf_float+0xee>
 8005016:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800501a:	d118      	bne.n	800504e <_printf_float+0x1b6>
 800501c:	2900      	cmp	r1, #0
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	dd0b      	ble.n	800503a <_printf_float+0x1a2>
 8005022:	6121      	str	r1, [r4, #16]
 8005024:	b913      	cbnz	r3, 800502c <_printf_float+0x194>
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	07d0      	lsls	r0, r2, #31
 800502a:	d502      	bpl.n	8005032 <_printf_float+0x19a>
 800502c:	3301      	adds	r3, #1
 800502e:	440b      	add	r3, r1
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	f04f 0a00 	mov.w	sl, #0
 8005036:	65a1      	str	r1, [r4, #88]	; 0x58
 8005038:	e7df      	b.n	8004ffa <_printf_float+0x162>
 800503a:	b913      	cbnz	r3, 8005042 <_printf_float+0x1aa>
 800503c:	6822      	ldr	r2, [r4, #0]
 800503e:	07d2      	lsls	r2, r2, #31
 8005040:	d501      	bpl.n	8005046 <_printf_float+0x1ae>
 8005042:	3302      	adds	r3, #2
 8005044:	e7f4      	b.n	8005030 <_printf_float+0x198>
 8005046:	2301      	movs	r3, #1
 8005048:	e7f2      	b.n	8005030 <_printf_float+0x198>
 800504a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800504e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005050:	4299      	cmp	r1, r3
 8005052:	db05      	blt.n	8005060 <_printf_float+0x1c8>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	6121      	str	r1, [r4, #16]
 8005058:	07d8      	lsls	r0, r3, #31
 800505a:	d5ea      	bpl.n	8005032 <_printf_float+0x19a>
 800505c:	1c4b      	adds	r3, r1, #1
 800505e:	e7e7      	b.n	8005030 <_printf_float+0x198>
 8005060:	2900      	cmp	r1, #0
 8005062:	bfcc      	ite	gt
 8005064:	2201      	movgt	r2, #1
 8005066:	f1c1 0202 	rsble	r2, r1, #2
 800506a:	4413      	add	r3, r2
 800506c:	e7e0      	b.n	8005030 <_printf_float+0x198>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	055a      	lsls	r2, r3, #21
 8005072:	d407      	bmi.n	8005084 <_printf_float+0x1ec>
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	4642      	mov	r2, r8
 8005078:	4631      	mov	r1, r6
 800507a:	4628      	mov	r0, r5
 800507c:	47b8      	blx	r7
 800507e:	3001      	adds	r0, #1
 8005080:	d12b      	bne.n	80050da <_printf_float+0x242>
 8005082:	e764      	b.n	8004f4e <_printf_float+0xb6>
 8005084:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005088:	f240 80dd 	bls.w	8005246 <_printf_float+0x3ae>
 800508c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	f7fb fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8005098:	2800      	cmp	r0, #0
 800509a:	d033      	beq.n	8005104 <_printf_float+0x26c>
 800509c:	2301      	movs	r3, #1
 800509e:	4631      	mov	r1, r6
 80050a0:	4628      	mov	r0, r5
 80050a2:	4a35      	ldr	r2, [pc, #212]	; (8005178 <_printf_float+0x2e0>)
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f af51 	beq.w	8004f4e <_printf_float+0xb6>
 80050ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050b0:	429a      	cmp	r2, r3
 80050b2:	db02      	blt.n	80050ba <_printf_float+0x222>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	07d8      	lsls	r0, r3, #31
 80050b8:	d50f      	bpl.n	80050da <_printf_float+0x242>
 80050ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f af42 	beq.w	8004f4e <_printf_float+0xb6>
 80050ca:	f04f 0800 	mov.w	r8, #0
 80050ce:	f104 091a 	add.w	r9, r4, #26
 80050d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050d4:	3b01      	subs	r3, #1
 80050d6:	4543      	cmp	r3, r8
 80050d8:	dc09      	bgt.n	80050ee <_printf_float+0x256>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	079b      	lsls	r3, r3, #30
 80050de:	f100 8102 	bmi.w	80052e6 <_printf_float+0x44e>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050e6:	4298      	cmp	r0, r3
 80050e8:	bfb8      	it	lt
 80050ea:	4618      	movlt	r0, r3
 80050ec:	e731      	b.n	8004f52 <_printf_float+0xba>
 80050ee:	2301      	movs	r3, #1
 80050f0:	464a      	mov	r2, r9
 80050f2:	4631      	mov	r1, r6
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b8      	blx	r7
 80050f8:	3001      	adds	r0, #1
 80050fa:	f43f af28 	beq.w	8004f4e <_printf_float+0xb6>
 80050fe:	f108 0801 	add.w	r8, r8, #1
 8005102:	e7e6      	b.n	80050d2 <_printf_float+0x23a>
 8005104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005106:	2b00      	cmp	r3, #0
 8005108:	dc38      	bgt.n	800517c <_printf_float+0x2e4>
 800510a:	2301      	movs	r3, #1
 800510c:	4631      	mov	r1, r6
 800510e:	4628      	mov	r0, r5
 8005110:	4a19      	ldr	r2, [pc, #100]	; (8005178 <_printf_float+0x2e0>)
 8005112:	47b8      	blx	r7
 8005114:	3001      	adds	r0, #1
 8005116:	f43f af1a 	beq.w	8004f4e <_printf_float+0xb6>
 800511a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800511e:	4313      	orrs	r3, r2
 8005120:	d102      	bne.n	8005128 <_printf_float+0x290>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	07d9      	lsls	r1, r3, #31
 8005126:	d5d8      	bpl.n	80050da <_printf_float+0x242>
 8005128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f af0b 	beq.w	8004f4e <_printf_float+0xb6>
 8005138:	f04f 0900 	mov.w	r9, #0
 800513c:	f104 0a1a 	add.w	sl, r4, #26
 8005140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005142:	425b      	negs	r3, r3
 8005144:	454b      	cmp	r3, r9
 8005146:	dc01      	bgt.n	800514c <_printf_float+0x2b4>
 8005148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800514a:	e794      	b.n	8005076 <_printf_float+0x1de>
 800514c:	2301      	movs	r3, #1
 800514e:	4652      	mov	r2, sl
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f43f aef9 	beq.w	8004f4e <_printf_float+0xb6>
 800515c:	f109 0901 	add.w	r9, r9, #1
 8005160:	e7ee      	b.n	8005140 <_printf_float+0x2a8>
 8005162:	bf00      	nop
 8005164:	7fefffff 	.word	0x7fefffff
 8005168:	08007ac4 	.word	0x08007ac4
 800516c:	08007ac8 	.word	0x08007ac8
 8005170:	08007ad0 	.word	0x08007ad0
 8005174:	08007acc 	.word	0x08007acc
 8005178:	08007ad4 	.word	0x08007ad4
 800517c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800517e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005180:	429a      	cmp	r2, r3
 8005182:	bfa8      	it	ge
 8005184:	461a      	movge	r2, r3
 8005186:	2a00      	cmp	r2, #0
 8005188:	4691      	mov	r9, r2
 800518a:	dc37      	bgt.n	80051fc <_printf_float+0x364>
 800518c:	f04f 0b00 	mov.w	fp, #0
 8005190:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005194:	f104 021a 	add.w	r2, r4, #26
 8005198:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800519c:	ebaa 0309 	sub.w	r3, sl, r9
 80051a0:	455b      	cmp	r3, fp
 80051a2:	dc33      	bgt.n	800520c <_printf_float+0x374>
 80051a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051a8:	429a      	cmp	r2, r3
 80051aa:	db3b      	blt.n	8005224 <_printf_float+0x38c>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	07da      	lsls	r2, r3, #31
 80051b0:	d438      	bmi.n	8005224 <_printf_float+0x38c>
 80051b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051b6:	eba3 020a 	sub.w	r2, r3, sl
 80051ba:	eba3 0901 	sub.w	r9, r3, r1
 80051be:	4591      	cmp	r9, r2
 80051c0:	bfa8      	it	ge
 80051c2:	4691      	movge	r9, r2
 80051c4:	f1b9 0f00 	cmp.w	r9, #0
 80051c8:	dc34      	bgt.n	8005234 <_printf_float+0x39c>
 80051ca:	f04f 0800 	mov.w	r8, #0
 80051ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051d2:	f104 0a1a 	add.w	sl, r4, #26
 80051d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	eba3 0309 	sub.w	r3, r3, r9
 80051e0:	4543      	cmp	r3, r8
 80051e2:	f77f af7a 	ble.w	80050da <_printf_float+0x242>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4652      	mov	r2, sl
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	f43f aeac 	beq.w	8004f4e <_printf_float+0xb6>
 80051f6:	f108 0801 	add.w	r8, r8, #1
 80051fa:	e7ec      	b.n	80051d6 <_printf_float+0x33e>
 80051fc:	4613      	mov	r3, r2
 80051fe:	4631      	mov	r1, r6
 8005200:	4642      	mov	r2, r8
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	d1c0      	bne.n	800518c <_printf_float+0x2f4>
 800520a:	e6a0      	b.n	8004f4e <_printf_float+0xb6>
 800520c:	2301      	movs	r3, #1
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	920b      	str	r2, [sp, #44]	; 0x2c
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f ae99 	beq.w	8004f4e <_printf_float+0xb6>
 800521c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800521e:	f10b 0b01 	add.w	fp, fp, #1
 8005222:	e7b9      	b.n	8005198 <_printf_float+0x300>
 8005224:	4631      	mov	r1, r6
 8005226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	d1bf      	bne.n	80051b2 <_printf_float+0x31a>
 8005232:	e68c      	b.n	8004f4e <_printf_float+0xb6>
 8005234:	464b      	mov	r3, r9
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	eb08 020a 	add.w	r2, r8, sl
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	d1c2      	bne.n	80051ca <_printf_float+0x332>
 8005244:	e683      	b.n	8004f4e <_printf_float+0xb6>
 8005246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005248:	2a01      	cmp	r2, #1
 800524a:	dc01      	bgt.n	8005250 <_printf_float+0x3b8>
 800524c:	07db      	lsls	r3, r3, #31
 800524e:	d537      	bpl.n	80052c0 <_printf_float+0x428>
 8005250:	2301      	movs	r3, #1
 8005252:	4642      	mov	r2, r8
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f ae77 	beq.w	8004f4e <_printf_float+0xb6>
 8005260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f ae6f 	beq.w	8004f4e <_printf_float+0xb6>
 8005270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005274:	2200      	movs	r2, #0
 8005276:	2300      	movs	r3, #0
 8005278:	f7fb fb96 	bl	80009a8 <__aeabi_dcmpeq>
 800527c:	b9d8      	cbnz	r0, 80052b6 <_printf_float+0x41e>
 800527e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005280:	f108 0201 	add.w	r2, r8, #1
 8005284:	3b01      	subs	r3, #1
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	d10e      	bne.n	80052ae <_printf_float+0x416>
 8005290:	e65d      	b.n	8004f4e <_printf_float+0xb6>
 8005292:	2301      	movs	r3, #1
 8005294:	464a      	mov	r2, r9
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	47b8      	blx	r7
 800529c:	3001      	adds	r0, #1
 800529e:	f43f ae56 	beq.w	8004f4e <_printf_float+0xb6>
 80052a2:	f108 0801 	add.w	r8, r8, #1
 80052a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052a8:	3b01      	subs	r3, #1
 80052aa:	4543      	cmp	r3, r8
 80052ac:	dcf1      	bgt.n	8005292 <_printf_float+0x3fa>
 80052ae:	4653      	mov	r3, sl
 80052b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052b4:	e6e0      	b.n	8005078 <_printf_float+0x1e0>
 80052b6:	f04f 0800 	mov.w	r8, #0
 80052ba:	f104 091a 	add.w	r9, r4, #26
 80052be:	e7f2      	b.n	80052a6 <_printf_float+0x40e>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4642      	mov	r2, r8
 80052c4:	e7df      	b.n	8005286 <_printf_float+0x3ee>
 80052c6:	2301      	movs	r3, #1
 80052c8:	464a      	mov	r2, r9
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	f43f ae3c 	beq.w	8004f4e <_printf_float+0xb6>
 80052d6:	f108 0801 	add.w	r8, r8, #1
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052de:	1a5b      	subs	r3, r3, r1
 80052e0:	4543      	cmp	r3, r8
 80052e2:	dcf0      	bgt.n	80052c6 <_printf_float+0x42e>
 80052e4:	e6fd      	b.n	80050e2 <_printf_float+0x24a>
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	f104 0919 	add.w	r9, r4, #25
 80052ee:	e7f4      	b.n	80052da <_printf_float+0x442>

080052f0 <_printf_common>:
 80052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	4616      	mov	r6, r2
 80052f6:	4699      	mov	r9, r3
 80052f8:	688a      	ldr	r2, [r1, #8]
 80052fa:	690b      	ldr	r3, [r1, #16]
 80052fc:	4607      	mov	r7, r0
 80052fe:	4293      	cmp	r3, r2
 8005300:	bfb8      	it	lt
 8005302:	4613      	movlt	r3, r2
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800530a:	460c      	mov	r4, r1
 800530c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005310:	b10a      	cbz	r2, 8005316 <_printf_common+0x26>
 8005312:	3301      	adds	r3, #1
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	0699      	lsls	r1, r3, #26
 800531a:	bf42      	ittt	mi
 800531c:	6833      	ldrmi	r3, [r6, #0]
 800531e:	3302      	addmi	r3, #2
 8005320:	6033      	strmi	r3, [r6, #0]
 8005322:	6825      	ldr	r5, [r4, #0]
 8005324:	f015 0506 	ands.w	r5, r5, #6
 8005328:	d106      	bne.n	8005338 <_printf_common+0x48>
 800532a:	f104 0a19 	add.w	sl, r4, #25
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	6832      	ldr	r2, [r6, #0]
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	42ab      	cmp	r3, r5
 8005336:	dc28      	bgt.n	800538a <_printf_common+0x9a>
 8005338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800533c:	1e13      	subs	r3, r2, #0
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	bf18      	it	ne
 8005342:	2301      	movne	r3, #1
 8005344:	0692      	lsls	r2, r2, #26
 8005346:	d42d      	bmi.n	80053a4 <_printf_common+0xb4>
 8005348:	4649      	mov	r1, r9
 800534a:	4638      	mov	r0, r7
 800534c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005350:	47c0      	blx	r8
 8005352:	3001      	adds	r0, #1
 8005354:	d020      	beq.n	8005398 <_printf_common+0xa8>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	68e5      	ldr	r5, [r4, #12]
 800535a:	f003 0306 	and.w	r3, r3, #6
 800535e:	2b04      	cmp	r3, #4
 8005360:	bf18      	it	ne
 8005362:	2500      	movne	r5, #0
 8005364:	6832      	ldr	r2, [r6, #0]
 8005366:	f04f 0600 	mov.w	r6, #0
 800536a:	68a3      	ldr	r3, [r4, #8]
 800536c:	bf08      	it	eq
 800536e:	1aad      	subeq	r5, r5, r2
 8005370:	6922      	ldr	r2, [r4, #16]
 8005372:	bf08      	it	eq
 8005374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005378:	4293      	cmp	r3, r2
 800537a:	bfc4      	itt	gt
 800537c:	1a9b      	subgt	r3, r3, r2
 800537e:	18ed      	addgt	r5, r5, r3
 8005380:	341a      	adds	r4, #26
 8005382:	42b5      	cmp	r5, r6
 8005384:	d11a      	bne.n	80053bc <_printf_common+0xcc>
 8005386:	2000      	movs	r0, #0
 8005388:	e008      	b.n	800539c <_printf_common+0xac>
 800538a:	2301      	movs	r3, #1
 800538c:	4652      	mov	r2, sl
 800538e:	4649      	mov	r1, r9
 8005390:	4638      	mov	r0, r7
 8005392:	47c0      	blx	r8
 8005394:	3001      	adds	r0, #1
 8005396:	d103      	bne.n	80053a0 <_printf_common+0xb0>
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	3501      	adds	r5, #1
 80053a2:	e7c4      	b.n	800532e <_printf_common+0x3e>
 80053a4:	2030      	movs	r0, #48	; 0x30
 80053a6:	18e1      	adds	r1, r4, r3
 80053a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b2:	4422      	add	r2, r4
 80053b4:	3302      	adds	r3, #2
 80053b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053ba:	e7c5      	b.n	8005348 <_printf_common+0x58>
 80053bc:	2301      	movs	r3, #1
 80053be:	4622      	mov	r2, r4
 80053c0:	4649      	mov	r1, r9
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	3001      	adds	r0, #1
 80053c8:	d0e6      	beq.n	8005398 <_printf_common+0xa8>
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7d9      	b.n	8005382 <_printf_common+0x92>
	...

080053d0 <_printf_i>:
 80053d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	7e0f      	ldrb	r7, [r1, #24]
 80053d6:	4691      	mov	r9, r2
 80053d8:	2f78      	cmp	r7, #120	; 0x78
 80053da:	4680      	mov	r8, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	469a      	mov	sl, r3
 80053e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053e6:	d807      	bhi.n	80053f8 <_printf_i+0x28>
 80053e8:	2f62      	cmp	r7, #98	; 0x62
 80053ea:	d80a      	bhi.n	8005402 <_printf_i+0x32>
 80053ec:	2f00      	cmp	r7, #0
 80053ee:	f000 80d9 	beq.w	80055a4 <_printf_i+0x1d4>
 80053f2:	2f58      	cmp	r7, #88	; 0x58
 80053f4:	f000 80a4 	beq.w	8005540 <_printf_i+0x170>
 80053f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005400:	e03a      	b.n	8005478 <_printf_i+0xa8>
 8005402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005406:	2b15      	cmp	r3, #21
 8005408:	d8f6      	bhi.n	80053f8 <_printf_i+0x28>
 800540a:	a101      	add	r1, pc, #4	; (adr r1, 8005410 <_printf_i+0x40>)
 800540c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005410:	08005469 	.word	0x08005469
 8005414:	0800547d 	.word	0x0800547d
 8005418:	080053f9 	.word	0x080053f9
 800541c:	080053f9 	.word	0x080053f9
 8005420:	080053f9 	.word	0x080053f9
 8005424:	080053f9 	.word	0x080053f9
 8005428:	0800547d 	.word	0x0800547d
 800542c:	080053f9 	.word	0x080053f9
 8005430:	080053f9 	.word	0x080053f9
 8005434:	080053f9 	.word	0x080053f9
 8005438:	080053f9 	.word	0x080053f9
 800543c:	0800558b 	.word	0x0800558b
 8005440:	080054ad 	.word	0x080054ad
 8005444:	0800556d 	.word	0x0800556d
 8005448:	080053f9 	.word	0x080053f9
 800544c:	080053f9 	.word	0x080053f9
 8005450:	080055ad 	.word	0x080055ad
 8005454:	080053f9 	.word	0x080053f9
 8005458:	080054ad 	.word	0x080054ad
 800545c:	080053f9 	.word	0x080053f9
 8005460:	080053f9 	.word	0x080053f9
 8005464:	08005575 	.word	0x08005575
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	1d1a      	adds	r2, r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	602a      	str	r2, [r5, #0]
 8005470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005478:	2301      	movs	r3, #1
 800547a:	e0a4      	b.n	80055c6 <_printf_i+0x1f6>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	6829      	ldr	r1, [r5, #0]
 8005480:	0606      	lsls	r6, r0, #24
 8005482:	f101 0304 	add.w	r3, r1, #4
 8005486:	d50a      	bpl.n	800549e <_printf_i+0xce>
 8005488:	680e      	ldr	r6, [r1, #0]
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	2e00      	cmp	r6, #0
 800548e:	da03      	bge.n	8005498 <_printf_i+0xc8>
 8005490:	232d      	movs	r3, #45	; 0x2d
 8005492:	4276      	negs	r6, r6
 8005494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005498:	230a      	movs	r3, #10
 800549a:	485e      	ldr	r0, [pc, #376]	; (8005614 <_printf_i+0x244>)
 800549c:	e019      	b.n	80054d2 <_printf_i+0x102>
 800549e:	680e      	ldr	r6, [r1, #0]
 80054a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054a4:	602b      	str	r3, [r5, #0]
 80054a6:	bf18      	it	ne
 80054a8:	b236      	sxthne	r6, r6
 80054aa:	e7ef      	b.n	800548c <_printf_i+0xbc>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	1d19      	adds	r1, r3, #4
 80054b2:	6029      	str	r1, [r5, #0]
 80054b4:	0601      	lsls	r1, r0, #24
 80054b6:	d501      	bpl.n	80054bc <_printf_i+0xec>
 80054b8:	681e      	ldr	r6, [r3, #0]
 80054ba:	e002      	b.n	80054c2 <_printf_i+0xf2>
 80054bc:	0646      	lsls	r6, r0, #25
 80054be:	d5fb      	bpl.n	80054b8 <_printf_i+0xe8>
 80054c0:	881e      	ldrh	r6, [r3, #0]
 80054c2:	2f6f      	cmp	r7, #111	; 0x6f
 80054c4:	bf0c      	ite	eq
 80054c6:	2308      	moveq	r3, #8
 80054c8:	230a      	movne	r3, #10
 80054ca:	4852      	ldr	r0, [pc, #328]	; (8005614 <_printf_i+0x244>)
 80054cc:	2100      	movs	r1, #0
 80054ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054d2:	6865      	ldr	r5, [r4, #4]
 80054d4:	2d00      	cmp	r5, #0
 80054d6:	bfa8      	it	ge
 80054d8:	6821      	ldrge	r1, [r4, #0]
 80054da:	60a5      	str	r5, [r4, #8]
 80054dc:	bfa4      	itt	ge
 80054de:	f021 0104 	bicge.w	r1, r1, #4
 80054e2:	6021      	strge	r1, [r4, #0]
 80054e4:	b90e      	cbnz	r6, 80054ea <_printf_i+0x11a>
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	d04d      	beq.n	8005586 <_printf_i+0x1b6>
 80054ea:	4615      	mov	r5, r2
 80054ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80054f0:	fb03 6711 	mls	r7, r3, r1, r6
 80054f4:	5dc7      	ldrb	r7, [r0, r7]
 80054f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054fa:	4637      	mov	r7, r6
 80054fc:	42bb      	cmp	r3, r7
 80054fe:	460e      	mov	r6, r1
 8005500:	d9f4      	bls.n	80054ec <_printf_i+0x11c>
 8005502:	2b08      	cmp	r3, #8
 8005504:	d10b      	bne.n	800551e <_printf_i+0x14e>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	07de      	lsls	r6, r3, #31
 800550a:	d508      	bpl.n	800551e <_printf_i+0x14e>
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	6861      	ldr	r1, [r4, #4]
 8005510:	4299      	cmp	r1, r3
 8005512:	bfde      	ittt	le
 8005514:	2330      	movle	r3, #48	; 0x30
 8005516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800551a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800551e:	1b52      	subs	r2, r2, r5
 8005520:	6122      	str	r2, [r4, #16]
 8005522:	464b      	mov	r3, r9
 8005524:	4621      	mov	r1, r4
 8005526:	4640      	mov	r0, r8
 8005528:	f8cd a000 	str.w	sl, [sp]
 800552c:	aa03      	add	r2, sp, #12
 800552e:	f7ff fedf 	bl	80052f0 <_printf_common>
 8005532:	3001      	adds	r0, #1
 8005534:	d14c      	bne.n	80055d0 <_printf_i+0x200>
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	b004      	add	sp, #16
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005540:	4834      	ldr	r0, [pc, #208]	; (8005614 <_printf_i+0x244>)
 8005542:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005546:	6829      	ldr	r1, [r5, #0]
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	f851 6b04 	ldr.w	r6, [r1], #4
 800554e:	6029      	str	r1, [r5, #0]
 8005550:	061d      	lsls	r5, r3, #24
 8005552:	d514      	bpl.n	800557e <_printf_i+0x1ae>
 8005554:	07df      	lsls	r7, r3, #31
 8005556:	bf44      	itt	mi
 8005558:	f043 0320 	orrmi.w	r3, r3, #32
 800555c:	6023      	strmi	r3, [r4, #0]
 800555e:	b91e      	cbnz	r6, 8005568 <_printf_i+0x198>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	f023 0320 	bic.w	r3, r3, #32
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	2310      	movs	r3, #16
 800556a:	e7af      	b.n	80054cc <_printf_i+0xfc>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	f043 0320 	orr.w	r3, r3, #32
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	2378      	movs	r3, #120	; 0x78
 8005576:	4828      	ldr	r0, [pc, #160]	; (8005618 <_printf_i+0x248>)
 8005578:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800557c:	e7e3      	b.n	8005546 <_printf_i+0x176>
 800557e:	0659      	lsls	r1, r3, #25
 8005580:	bf48      	it	mi
 8005582:	b2b6      	uxthmi	r6, r6
 8005584:	e7e6      	b.n	8005554 <_printf_i+0x184>
 8005586:	4615      	mov	r5, r2
 8005588:	e7bb      	b.n	8005502 <_printf_i+0x132>
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	6826      	ldr	r6, [r4, #0]
 800558e:	1d18      	adds	r0, r3, #4
 8005590:	6961      	ldr	r1, [r4, #20]
 8005592:	6028      	str	r0, [r5, #0]
 8005594:	0635      	lsls	r5, r6, #24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	d501      	bpl.n	800559e <_printf_i+0x1ce>
 800559a:	6019      	str	r1, [r3, #0]
 800559c:	e002      	b.n	80055a4 <_printf_i+0x1d4>
 800559e:	0670      	lsls	r0, r6, #25
 80055a0:	d5fb      	bpl.n	800559a <_printf_i+0x1ca>
 80055a2:	8019      	strh	r1, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	4615      	mov	r5, r2
 80055a8:	6123      	str	r3, [r4, #16]
 80055aa:	e7ba      	b.n	8005522 <_printf_i+0x152>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	2100      	movs	r1, #0
 80055b0:	1d1a      	adds	r2, r3, #4
 80055b2:	602a      	str	r2, [r5, #0]
 80055b4:	681d      	ldr	r5, [r3, #0]
 80055b6:	6862      	ldr	r2, [r4, #4]
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 feb7 	bl	800632c <memchr>
 80055be:	b108      	cbz	r0, 80055c4 <_printf_i+0x1f4>
 80055c0:	1b40      	subs	r0, r0, r5
 80055c2:	6060      	str	r0, [r4, #4]
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	2300      	movs	r3, #0
 80055ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ce:	e7a8      	b.n	8005522 <_printf_i+0x152>
 80055d0:	462a      	mov	r2, r5
 80055d2:	4649      	mov	r1, r9
 80055d4:	4640      	mov	r0, r8
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	47d0      	blx	sl
 80055da:	3001      	adds	r0, #1
 80055dc:	d0ab      	beq.n	8005536 <_printf_i+0x166>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	079b      	lsls	r3, r3, #30
 80055e2:	d413      	bmi.n	800560c <_printf_i+0x23c>
 80055e4:	68e0      	ldr	r0, [r4, #12]
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	4298      	cmp	r0, r3
 80055ea:	bfb8      	it	lt
 80055ec:	4618      	movlt	r0, r3
 80055ee:	e7a4      	b.n	800553a <_printf_i+0x16a>
 80055f0:	2301      	movs	r3, #1
 80055f2:	4632      	mov	r2, r6
 80055f4:	4649      	mov	r1, r9
 80055f6:	4640      	mov	r0, r8
 80055f8:	47d0      	blx	sl
 80055fa:	3001      	adds	r0, #1
 80055fc:	d09b      	beq.n	8005536 <_printf_i+0x166>
 80055fe:	3501      	adds	r5, #1
 8005600:	68e3      	ldr	r3, [r4, #12]
 8005602:	9903      	ldr	r1, [sp, #12]
 8005604:	1a5b      	subs	r3, r3, r1
 8005606:	42ab      	cmp	r3, r5
 8005608:	dcf2      	bgt.n	80055f0 <_printf_i+0x220>
 800560a:	e7eb      	b.n	80055e4 <_printf_i+0x214>
 800560c:	2500      	movs	r5, #0
 800560e:	f104 0619 	add.w	r6, r4, #25
 8005612:	e7f5      	b.n	8005600 <_printf_i+0x230>
 8005614:	08007ad6 	.word	0x08007ad6
 8005618:	08007ae7 	.word	0x08007ae7

0800561c <quorem>:
 800561c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	6903      	ldr	r3, [r0, #16]
 8005622:	690c      	ldr	r4, [r1, #16]
 8005624:	4607      	mov	r7, r0
 8005626:	42a3      	cmp	r3, r4
 8005628:	f2c0 8082 	blt.w	8005730 <quorem+0x114>
 800562c:	3c01      	subs	r4, #1
 800562e:	f100 0514 	add.w	r5, r0, #20
 8005632:	f101 0814 	add.w	r8, r1, #20
 8005636:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005640:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005644:	3301      	adds	r3, #1
 8005646:	429a      	cmp	r2, r3
 8005648:	fbb2 f6f3 	udiv	r6, r2, r3
 800564c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005650:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005654:	d331      	bcc.n	80056ba <quorem+0x9e>
 8005656:	f04f 0e00 	mov.w	lr, #0
 800565a:	4640      	mov	r0, r8
 800565c:	46ac      	mov	ip, r5
 800565e:	46f2      	mov	sl, lr
 8005660:	f850 2b04 	ldr.w	r2, [r0], #4
 8005664:	b293      	uxth	r3, r2
 8005666:	fb06 e303 	mla	r3, r6, r3, lr
 800566a:	0c12      	lsrs	r2, r2, #16
 800566c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005670:	b29b      	uxth	r3, r3
 8005672:	fb06 e202 	mla	r2, r6, r2, lr
 8005676:	ebaa 0303 	sub.w	r3, sl, r3
 800567a:	f8dc a000 	ldr.w	sl, [ip]
 800567e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005682:	fa1f fa8a 	uxth.w	sl, sl
 8005686:	4453      	add	r3, sl
 8005688:	f8dc a000 	ldr.w	sl, [ip]
 800568c:	b292      	uxth	r2, r2
 800568e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005692:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005696:	b29b      	uxth	r3, r3
 8005698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800569c:	4581      	cmp	r9, r0
 800569e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056a2:	f84c 3b04 	str.w	r3, [ip], #4
 80056a6:	d2db      	bcs.n	8005660 <quorem+0x44>
 80056a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80056ac:	b92b      	cbnz	r3, 80056ba <quorem+0x9e>
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	3b04      	subs	r3, #4
 80056b2:	429d      	cmp	r5, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	d32f      	bcc.n	8005718 <quorem+0xfc>
 80056b8:	613c      	str	r4, [r7, #16]
 80056ba:	4638      	mov	r0, r7
 80056bc:	f001 f8c2 	bl	8006844 <__mcmp>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	db25      	blt.n	8005710 <quorem+0xf4>
 80056c4:	4628      	mov	r0, r5
 80056c6:	f04f 0c00 	mov.w	ip, #0
 80056ca:	3601      	adds	r6, #1
 80056cc:	f858 1b04 	ldr.w	r1, [r8], #4
 80056d0:	f8d0 e000 	ldr.w	lr, [r0]
 80056d4:	b28b      	uxth	r3, r1
 80056d6:	ebac 0303 	sub.w	r3, ip, r3
 80056da:	fa1f f28e 	uxth.w	r2, lr
 80056de:	4413      	add	r3, r2
 80056e0:	0c0a      	lsrs	r2, r1, #16
 80056e2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056f0:	45c1      	cmp	r9, r8
 80056f2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056f6:	f840 3b04 	str.w	r3, [r0], #4
 80056fa:	d2e7      	bcs.n	80056cc <quorem+0xb0>
 80056fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005704:	b922      	cbnz	r2, 8005710 <quorem+0xf4>
 8005706:	3b04      	subs	r3, #4
 8005708:	429d      	cmp	r5, r3
 800570a:	461a      	mov	r2, r3
 800570c:	d30a      	bcc.n	8005724 <quorem+0x108>
 800570e:	613c      	str	r4, [r7, #16]
 8005710:	4630      	mov	r0, r6
 8005712:	b003      	add	sp, #12
 8005714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	3b04      	subs	r3, #4
 800571c:	2a00      	cmp	r2, #0
 800571e:	d1cb      	bne.n	80056b8 <quorem+0x9c>
 8005720:	3c01      	subs	r4, #1
 8005722:	e7c6      	b.n	80056b2 <quorem+0x96>
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	3b04      	subs	r3, #4
 8005728:	2a00      	cmp	r2, #0
 800572a:	d1f0      	bne.n	800570e <quorem+0xf2>
 800572c:	3c01      	subs	r4, #1
 800572e:	e7eb      	b.n	8005708 <quorem+0xec>
 8005730:	2000      	movs	r0, #0
 8005732:	e7ee      	b.n	8005712 <quorem+0xf6>
 8005734:	0000      	movs	r0, r0
	...

08005738 <_dtoa_r>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	4616      	mov	r6, r2
 800573e:	461f      	mov	r7, r3
 8005740:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005742:	b099      	sub	sp, #100	; 0x64
 8005744:	4605      	mov	r5, r0
 8005746:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800574a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800574e:	b974      	cbnz	r4, 800576e <_dtoa_r+0x36>
 8005750:	2010      	movs	r0, #16
 8005752:	f000 fde3 	bl	800631c <malloc>
 8005756:	4602      	mov	r2, r0
 8005758:	6268      	str	r0, [r5, #36]	; 0x24
 800575a:	b920      	cbnz	r0, 8005766 <_dtoa_r+0x2e>
 800575c:	21ea      	movs	r1, #234	; 0xea
 800575e:	4ba8      	ldr	r3, [pc, #672]	; (8005a00 <_dtoa_r+0x2c8>)
 8005760:	48a8      	ldr	r0, [pc, #672]	; (8005a04 <_dtoa_r+0x2cc>)
 8005762:	f001 fa73 	bl	8006c4c <__assert_func>
 8005766:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800576a:	6004      	str	r4, [r0, #0]
 800576c:	60c4      	str	r4, [r0, #12]
 800576e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	b151      	cbz	r1, 800578a <_dtoa_r+0x52>
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	2301      	movs	r3, #1
 8005778:	4093      	lsls	r3, r2
 800577a:	604a      	str	r2, [r1, #4]
 800577c:	608b      	str	r3, [r1, #8]
 800577e:	4628      	mov	r0, r5
 8005780:	f000 fe22 	bl	80063c8 <_Bfree>
 8005784:	2200      	movs	r2, #0
 8005786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	1e3b      	subs	r3, r7, #0
 800578c:	bfaf      	iteee	ge
 800578e:	2300      	movge	r3, #0
 8005790:	2201      	movlt	r2, #1
 8005792:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005796:	9305      	strlt	r3, [sp, #20]
 8005798:	bfa8      	it	ge
 800579a:	f8c8 3000 	strge.w	r3, [r8]
 800579e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80057a2:	4b99      	ldr	r3, [pc, #612]	; (8005a08 <_dtoa_r+0x2d0>)
 80057a4:	bfb8      	it	lt
 80057a6:	f8c8 2000 	strlt.w	r2, [r8]
 80057aa:	ea33 0309 	bics.w	r3, r3, r9
 80057ae:	d119      	bne.n	80057e4 <_dtoa_r+0xac>
 80057b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80057b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057bc:	4333      	orrs	r3, r6
 80057be:	f000 857f 	beq.w	80062c0 <_dtoa_r+0xb88>
 80057c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057c4:	b953      	cbnz	r3, 80057dc <_dtoa_r+0xa4>
 80057c6:	4b91      	ldr	r3, [pc, #580]	; (8005a0c <_dtoa_r+0x2d4>)
 80057c8:	e022      	b.n	8005810 <_dtoa_r+0xd8>
 80057ca:	4b91      	ldr	r3, [pc, #580]	; (8005a10 <_dtoa_r+0x2d8>)
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	3308      	adds	r3, #8
 80057d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	9803      	ldr	r0, [sp, #12]
 80057d6:	b019      	add	sp, #100	; 0x64
 80057d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057dc:	4b8b      	ldr	r3, [pc, #556]	; (8005a0c <_dtoa_r+0x2d4>)
 80057de:	9303      	str	r3, [sp, #12]
 80057e0:	3303      	adds	r3, #3
 80057e2:	e7f5      	b.n	80057d0 <_dtoa_r+0x98>
 80057e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80057ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	f7fb f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80057f8:	4680      	mov	r8, r0
 80057fa:	b158      	cbz	r0, 8005814 <_dtoa_r+0xdc>
 80057fc:	2301      	movs	r3, #1
 80057fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8558 	beq.w	80062ba <_dtoa_r+0xb82>
 800580a:	4882      	ldr	r0, [pc, #520]	; (8005a14 <_dtoa_r+0x2dc>)
 800580c:	6018      	str	r0, [r3, #0]
 800580e:	1e43      	subs	r3, r0, #1
 8005810:	9303      	str	r3, [sp, #12]
 8005812:	e7df      	b.n	80057d4 <_dtoa_r+0x9c>
 8005814:	ab16      	add	r3, sp, #88	; 0x58
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	ab17      	add	r3, sp, #92	; 0x5c
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4628      	mov	r0, r5
 800581e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005822:	f001 f8b7 	bl	8006994 <__d2b>
 8005826:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800582a:	4683      	mov	fp, r0
 800582c:	2c00      	cmp	r4, #0
 800582e:	d07f      	beq.n	8005930 <_dtoa_r+0x1f8>
 8005830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005836:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800583a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800583e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005842:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005846:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800584a:	2200      	movs	r2, #0
 800584c:	4b72      	ldr	r3, [pc, #456]	; (8005a18 <_dtoa_r+0x2e0>)
 800584e:	f7fa fc8b 	bl	8000168 <__aeabi_dsub>
 8005852:	a365      	add	r3, pc, #404	; (adr r3, 80059e8 <_dtoa_r+0x2b0>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fe3e 	bl	80004d8 <__aeabi_dmul>
 800585c:	a364      	add	r3, pc, #400	; (adr r3, 80059f0 <_dtoa_r+0x2b8>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fa fc83 	bl	800016c <__adddf3>
 8005866:	4606      	mov	r6, r0
 8005868:	4620      	mov	r0, r4
 800586a:	460f      	mov	r7, r1
 800586c:	f7fa fdca 	bl	8000404 <__aeabi_i2d>
 8005870:	a361      	add	r3, pc, #388	; (adr r3, 80059f8 <_dtoa_r+0x2c0>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fa fe2f 	bl	80004d8 <__aeabi_dmul>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4630      	mov	r0, r6
 8005880:	4639      	mov	r1, r7
 8005882:	f7fa fc73 	bl	800016c <__adddf3>
 8005886:	4606      	mov	r6, r0
 8005888:	460f      	mov	r7, r1
 800588a:	f7fb f8d5 	bl	8000a38 <__aeabi_d2iz>
 800588e:	2200      	movs	r2, #0
 8005890:	4682      	mov	sl, r0
 8005892:	2300      	movs	r3, #0
 8005894:	4630      	mov	r0, r6
 8005896:	4639      	mov	r1, r7
 8005898:	f7fb f890 	bl	80009bc <__aeabi_dcmplt>
 800589c:	b148      	cbz	r0, 80058b2 <_dtoa_r+0x17a>
 800589e:	4650      	mov	r0, sl
 80058a0:	f7fa fdb0 	bl	8000404 <__aeabi_i2d>
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	f7fb f87e 	bl	80009a8 <__aeabi_dcmpeq>
 80058ac:	b908      	cbnz	r0, 80058b2 <_dtoa_r+0x17a>
 80058ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058b2:	f1ba 0f16 	cmp.w	sl, #22
 80058b6:	d858      	bhi.n	800596a <_dtoa_r+0x232>
 80058b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058bc:	4b57      	ldr	r3, [pc, #348]	; (8005a1c <_dtoa_r+0x2e4>)
 80058be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f7fb f879 	bl	80009bc <__aeabi_dcmplt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d04f      	beq.n	800596e <_dtoa_r+0x236>
 80058ce:	2300      	movs	r3, #0
 80058d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80058d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80058d8:	1b1c      	subs	r4, r3, r4
 80058da:	1e63      	subs	r3, r4, #1
 80058dc:	9309      	str	r3, [sp, #36]	; 0x24
 80058de:	bf49      	itett	mi
 80058e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80058e4:	2300      	movpl	r3, #0
 80058e6:	9306      	strmi	r3, [sp, #24]
 80058e8:	2300      	movmi	r3, #0
 80058ea:	bf54      	ite	pl
 80058ec:	9306      	strpl	r3, [sp, #24]
 80058ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80058f0:	f1ba 0f00 	cmp.w	sl, #0
 80058f4:	db3d      	blt.n	8005972 <_dtoa_r+0x23a>
 80058f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80058fc:	4453      	add	r3, sl
 80058fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005900:	2300      	movs	r3, #0
 8005902:	930a      	str	r3, [sp, #40]	; 0x28
 8005904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005906:	2b09      	cmp	r3, #9
 8005908:	f200 808c 	bhi.w	8005a24 <_dtoa_r+0x2ec>
 800590c:	2b05      	cmp	r3, #5
 800590e:	bfc4      	itt	gt
 8005910:	3b04      	subgt	r3, #4
 8005912:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005916:	bfc8      	it	gt
 8005918:	2400      	movgt	r4, #0
 800591a:	f1a3 0302 	sub.w	r3, r3, #2
 800591e:	bfd8      	it	le
 8005920:	2401      	movle	r4, #1
 8005922:	2b03      	cmp	r3, #3
 8005924:	f200 808a 	bhi.w	8005a3c <_dtoa_r+0x304>
 8005928:	e8df f003 	tbb	[pc, r3]
 800592c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005930:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005934:	441c      	add	r4, r3
 8005936:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800593a:	2b20      	cmp	r3, #32
 800593c:	bfc3      	ittte	gt
 800593e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005942:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005946:	fa09 f303 	lslgt.w	r3, r9, r3
 800594a:	f1c3 0320 	rsble	r3, r3, #32
 800594e:	bfc6      	itte	gt
 8005950:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005954:	4318      	orrgt	r0, r3
 8005956:	fa06 f003 	lslle.w	r0, r6, r3
 800595a:	f7fa fd43 	bl	80003e4 <__aeabi_ui2d>
 800595e:	2301      	movs	r3, #1
 8005960:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005964:	3c01      	subs	r4, #1
 8005966:	9313      	str	r3, [sp, #76]	; 0x4c
 8005968:	e76f      	b.n	800584a <_dtoa_r+0x112>
 800596a:	2301      	movs	r3, #1
 800596c:	e7b2      	b.n	80058d4 <_dtoa_r+0x19c>
 800596e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005970:	e7b1      	b.n	80058d6 <_dtoa_r+0x19e>
 8005972:	9b06      	ldr	r3, [sp, #24]
 8005974:	eba3 030a 	sub.w	r3, r3, sl
 8005978:	9306      	str	r3, [sp, #24]
 800597a:	f1ca 0300 	rsb	r3, sl, #0
 800597e:	930a      	str	r3, [sp, #40]	; 0x28
 8005980:	2300      	movs	r3, #0
 8005982:	930e      	str	r3, [sp, #56]	; 0x38
 8005984:	e7be      	b.n	8005904 <_dtoa_r+0x1cc>
 8005986:	2300      	movs	r3, #0
 8005988:	930b      	str	r3, [sp, #44]	; 0x2c
 800598a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800598c:	2b00      	cmp	r3, #0
 800598e:	dc58      	bgt.n	8005a42 <_dtoa_r+0x30a>
 8005990:	f04f 0901 	mov.w	r9, #1
 8005994:	464b      	mov	r3, r9
 8005996:	f8cd 9020 	str.w	r9, [sp, #32]
 800599a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800599e:	2200      	movs	r2, #0
 80059a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80059a2:	6042      	str	r2, [r0, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	f102 0614 	add.w	r6, r2, #20
 80059aa:	429e      	cmp	r6, r3
 80059ac:	6841      	ldr	r1, [r0, #4]
 80059ae:	d94e      	bls.n	8005a4e <_dtoa_r+0x316>
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fcc9 	bl	8006348 <_Balloc>
 80059b6:	9003      	str	r0, [sp, #12]
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d14c      	bne.n	8005a56 <_dtoa_r+0x31e>
 80059bc:	4602      	mov	r2, r0
 80059be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059c2:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <_dtoa_r+0x2e8>)
 80059c4:	e6cc      	b.n	8005760 <_dtoa_r+0x28>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e7de      	b.n	8005988 <_dtoa_r+0x250>
 80059ca:	2300      	movs	r3, #0
 80059cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059d0:	eb0a 0903 	add.w	r9, sl, r3
 80059d4:	f109 0301 	add.w	r3, r9, #1
 80059d8:	2b01      	cmp	r3, #1
 80059da:	9308      	str	r3, [sp, #32]
 80059dc:	bfb8      	it	lt
 80059de:	2301      	movlt	r3, #1
 80059e0:	e7dd      	b.n	800599e <_dtoa_r+0x266>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e7f2      	b.n	80059cc <_dtoa_r+0x294>
 80059e6:	bf00      	nop
 80059e8:	636f4361 	.word	0x636f4361
 80059ec:	3fd287a7 	.word	0x3fd287a7
 80059f0:	8b60c8b3 	.word	0x8b60c8b3
 80059f4:	3fc68a28 	.word	0x3fc68a28
 80059f8:	509f79fb 	.word	0x509f79fb
 80059fc:	3fd34413 	.word	0x3fd34413
 8005a00:	08007b05 	.word	0x08007b05
 8005a04:	08007b1c 	.word	0x08007b1c
 8005a08:	7ff00000 	.word	0x7ff00000
 8005a0c:	08007b01 	.word	0x08007b01
 8005a10:	08007af8 	.word	0x08007af8
 8005a14:	08007ad5 	.word	0x08007ad5
 8005a18:	3ff80000 	.word	0x3ff80000
 8005a1c:	08007c10 	.word	0x08007c10
 8005a20:	08007b77 	.word	0x08007b77
 8005a24:	2401      	movs	r4, #1
 8005a26:	2300      	movs	r3, #0
 8005a28:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a2a:	9322      	str	r3, [sp, #136]	; 0x88
 8005a2c:	f04f 39ff 	mov.w	r9, #4294967295
 8005a30:	2200      	movs	r2, #0
 8005a32:	2312      	movs	r3, #18
 8005a34:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a38:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a3a:	e7b0      	b.n	800599e <_dtoa_r+0x266>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a40:	e7f4      	b.n	8005a2c <_dtoa_r+0x2f4>
 8005a42:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005a46:	464b      	mov	r3, r9
 8005a48:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a4c:	e7a7      	b.n	800599e <_dtoa_r+0x266>
 8005a4e:	3101      	adds	r1, #1
 8005a50:	6041      	str	r1, [r0, #4]
 8005a52:	0052      	lsls	r2, r2, #1
 8005a54:	e7a7      	b.n	80059a6 <_dtoa_r+0x26e>
 8005a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a58:	9a03      	ldr	r2, [sp, #12]
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	9b08      	ldr	r3, [sp, #32]
 8005a5e:	2b0e      	cmp	r3, #14
 8005a60:	f200 80a8 	bhi.w	8005bb4 <_dtoa_r+0x47c>
 8005a64:	2c00      	cmp	r4, #0
 8005a66:	f000 80a5 	beq.w	8005bb4 <_dtoa_r+0x47c>
 8005a6a:	f1ba 0f00 	cmp.w	sl, #0
 8005a6e:	dd34      	ble.n	8005ada <_dtoa_r+0x3a2>
 8005a70:	4a9a      	ldr	r2, [pc, #616]	; (8005cdc <_dtoa_r+0x5a4>)
 8005a72:	f00a 030f 	and.w	r3, sl, #15
 8005a76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a7a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a86:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005a8a:	d016      	beq.n	8005aba <_dtoa_r+0x382>
 8005a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a90:	4b93      	ldr	r3, [pc, #588]	; (8005ce0 <_dtoa_r+0x5a8>)
 8005a92:	2703      	movs	r7, #3
 8005a94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a98:	f7fa fe48 	bl	800072c <__aeabi_ddiv>
 8005a9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aa0:	f004 040f 	and.w	r4, r4, #15
 8005aa4:	4e8e      	ldr	r6, [pc, #568]	; (8005ce0 <_dtoa_r+0x5a8>)
 8005aa6:	b954      	cbnz	r4, 8005abe <_dtoa_r+0x386>
 8005aa8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ab0:	f7fa fe3c 	bl	800072c <__aeabi_ddiv>
 8005ab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ab8:	e029      	b.n	8005b0e <_dtoa_r+0x3d6>
 8005aba:	2702      	movs	r7, #2
 8005abc:	e7f2      	b.n	8005aa4 <_dtoa_r+0x36c>
 8005abe:	07e1      	lsls	r1, r4, #31
 8005ac0:	d508      	bpl.n	8005ad4 <_dtoa_r+0x39c>
 8005ac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ac6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aca:	f7fa fd05 	bl	80004d8 <__aeabi_dmul>
 8005ace:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ad2:	3701      	adds	r7, #1
 8005ad4:	1064      	asrs	r4, r4, #1
 8005ad6:	3608      	adds	r6, #8
 8005ad8:	e7e5      	b.n	8005aa6 <_dtoa_r+0x36e>
 8005ada:	f000 80a5 	beq.w	8005c28 <_dtoa_r+0x4f0>
 8005ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ae2:	f1ca 0400 	rsb	r4, sl, #0
 8005ae6:	4b7d      	ldr	r3, [pc, #500]	; (8005cdc <_dtoa_r+0x5a4>)
 8005ae8:	f004 020f 	and.w	r2, r4, #15
 8005aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fcf0 	bl	80004d8 <__aeabi_dmul>
 8005af8:	2702      	movs	r7, #2
 8005afa:	2300      	movs	r3, #0
 8005afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b00:	4e77      	ldr	r6, [pc, #476]	; (8005ce0 <_dtoa_r+0x5a8>)
 8005b02:	1124      	asrs	r4, r4, #4
 8005b04:	2c00      	cmp	r4, #0
 8005b06:	f040 8084 	bne.w	8005c12 <_dtoa_r+0x4da>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1d2      	bne.n	8005ab4 <_dtoa_r+0x37c>
 8005b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 808b 	beq.w	8005c2c <_dtoa_r+0x4f4>
 8005b16:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b22:	2200      	movs	r2, #0
 8005b24:	4b6f      	ldr	r3, [pc, #444]	; (8005ce4 <_dtoa_r+0x5ac>)
 8005b26:	f7fa ff49 	bl	80009bc <__aeabi_dcmplt>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d07e      	beq.n	8005c2c <_dtoa_r+0x4f4>
 8005b2e:	9b08      	ldr	r3, [sp, #32]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d07b      	beq.n	8005c2c <_dtoa_r+0x4f4>
 8005b34:	f1b9 0f00 	cmp.w	r9, #0
 8005b38:	dd38      	ble.n	8005bac <_dtoa_r+0x474>
 8005b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4b69      	ldr	r3, [pc, #420]	; (8005ce8 <_dtoa_r+0x5b0>)
 8005b42:	f7fa fcc9 	bl	80004d8 <__aeabi_dmul>
 8005b46:	464c      	mov	r4, r9
 8005b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b4c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005b50:	3701      	adds	r7, #1
 8005b52:	4638      	mov	r0, r7
 8005b54:	f7fa fc56 	bl	8000404 <__aeabi_i2d>
 8005b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b5c:	f7fa fcbc 	bl	80004d8 <__aeabi_dmul>
 8005b60:	2200      	movs	r2, #0
 8005b62:	4b62      	ldr	r3, [pc, #392]	; (8005cec <_dtoa_r+0x5b4>)
 8005b64:	f7fa fb02 	bl	800016c <__adddf3>
 8005b68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b70:	9611      	str	r6, [sp, #68]	; 0x44
 8005b72:	2c00      	cmp	r4, #0
 8005b74:	d15d      	bne.n	8005c32 <_dtoa_r+0x4fa>
 8005b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4b5c      	ldr	r3, [pc, #368]	; (8005cf0 <_dtoa_r+0x5b8>)
 8005b7e:	f7fa faf3 	bl	8000168 <__aeabi_dsub>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b8a:	4633      	mov	r3, r6
 8005b8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b8e:	f7fa ff33 	bl	80009f8 <__aeabi_dcmpgt>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	f040 829c 	bne.w	80060d0 <_dtoa_r+0x998>
 8005b98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b9e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ba2:	f7fa ff0b 	bl	80009bc <__aeabi_dcmplt>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f040 8290 	bne.w	80060cc <_dtoa_r+0x994>
 8005bac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005bb0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f2c0 8152 	blt.w	8005e60 <_dtoa_r+0x728>
 8005bbc:	f1ba 0f0e 	cmp.w	sl, #14
 8005bc0:	f300 814e 	bgt.w	8005e60 <_dtoa_r+0x728>
 8005bc4:	4b45      	ldr	r3, [pc, #276]	; (8005cdc <_dtoa_r+0x5a4>)
 8005bc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005bd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f280 80db 	bge.w	8005d90 <_dtoa_r+0x658>
 8005bda:	9b08      	ldr	r3, [sp, #32]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f300 80d7 	bgt.w	8005d90 <_dtoa_r+0x658>
 8005be2:	f040 8272 	bne.w	80060ca <_dtoa_r+0x992>
 8005be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bea:	2200      	movs	r2, #0
 8005bec:	4b40      	ldr	r3, [pc, #256]	; (8005cf0 <_dtoa_r+0x5b8>)
 8005bee:	f7fa fc73 	bl	80004d8 <__aeabi_dmul>
 8005bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bf6:	f7fa fef5 	bl	80009e4 <__aeabi_dcmpge>
 8005bfa:	9c08      	ldr	r4, [sp, #32]
 8005bfc:	4626      	mov	r6, r4
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f040 8248 	bne.w	8006094 <_dtoa_r+0x95c>
 8005c04:	2331      	movs	r3, #49	; 0x31
 8005c06:	9f03      	ldr	r7, [sp, #12]
 8005c08:	f10a 0a01 	add.w	sl, sl, #1
 8005c0c:	f807 3b01 	strb.w	r3, [r7], #1
 8005c10:	e244      	b.n	800609c <_dtoa_r+0x964>
 8005c12:	07e2      	lsls	r2, r4, #31
 8005c14:	d505      	bpl.n	8005c22 <_dtoa_r+0x4ea>
 8005c16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c1a:	f7fa fc5d 	bl	80004d8 <__aeabi_dmul>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	3701      	adds	r7, #1
 8005c22:	1064      	asrs	r4, r4, #1
 8005c24:	3608      	adds	r6, #8
 8005c26:	e76d      	b.n	8005b04 <_dtoa_r+0x3cc>
 8005c28:	2702      	movs	r7, #2
 8005c2a:	e770      	b.n	8005b0e <_dtoa_r+0x3d6>
 8005c2c:	46d0      	mov	r8, sl
 8005c2e:	9c08      	ldr	r4, [sp, #32]
 8005c30:	e78f      	b.n	8005b52 <_dtoa_r+0x41a>
 8005c32:	9903      	ldr	r1, [sp, #12]
 8005c34:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <_dtoa_r+0x5a4>)
 8005c36:	4421      	add	r1, r4
 8005c38:	9112      	str	r1, [sp, #72]	; 0x48
 8005c3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c40:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c44:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	d055      	beq.n	8005cf8 <_dtoa_r+0x5c0>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	4929      	ldr	r1, [pc, #164]	; (8005cf4 <_dtoa_r+0x5bc>)
 8005c50:	f7fa fd6c 	bl	800072c <__aeabi_ddiv>
 8005c54:	463b      	mov	r3, r7
 8005c56:	4632      	mov	r2, r6
 8005c58:	f7fa fa86 	bl	8000168 <__aeabi_dsub>
 8005c5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c60:	9f03      	ldr	r7, [sp, #12]
 8005c62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c66:	f7fa fee7 	bl	8000a38 <__aeabi_d2iz>
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	f7fa fbca 	bl	8000404 <__aeabi_i2d>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c78:	f7fa fa76 	bl	8000168 <__aeabi_dsub>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	3430      	adds	r4, #48	; 0x30
 8005c82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c8a:	f807 4b01 	strb.w	r4, [r7], #1
 8005c8e:	f7fa fe95 	bl	80009bc <__aeabi_dcmplt>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d174      	bne.n	8005d80 <_dtoa_r+0x648>
 8005c96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	4911      	ldr	r1, [pc, #68]	; (8005ce4 <_dtoa_r+0x5ac>)
 8005c9e:	f7fa fa63 	bl	8000168 <__aeabi_dsub>
 8005ca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ca6:	f7fa fe89 	bl	80009bc <__aeabi_dcmplt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f040 80b7 	bne.w	8005e1e <_dtoa_r+0x6e6>
 8005cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cb2:	429f      	cmp	r7, r3
 8005cb4:	f43f af7a 	beq.w	8005bac <_dtoa_r+0x474>
 8005cb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <_dtoa_r+0x5b0>)
 8005cc0:	f7fa fc0a 	bl	80004d8 <__aeabi_dmul>
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <_dtoa_r+0x5b0>)
 8005cd0:	f7fa fc02 	bl	80004d8 <__aeabi_dmul>
 8005cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cd8:	e7c3      	b.n	8005c62 <_dtoa_r+0x52a>
 8005cda:	bf00      	nop
 8005cdc:	08007c10 	.word	0x08007c10
 8005ce0:	08007be8 	.word	0x08007be8
 8005ce4:	3ff00000 	.word	0x3ff00000
 8005ce8:	40240000 	.word	0x40240000
 8005cec:	401c0000 	.word	0x401c0000
 8005cf0:	40140000 	.word	0x40140000
 8005cf4:	3fe00000 	.word	0x3fe00000
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	f7fa fbec 	bl	80004d8 <__aeabi_dmul>
 8005d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d06:	9c03      	ldr	r4, [sp, #12]
 8005d08:	9314      	str	r3, [sp, #80]	; 0x50
 8005d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d0e:	f7fa fe93 	bl	8000a38 <__aeabi_d2iz>
 8005d12:	9015      	str	r0, [sp, #84]	; 0x54
 8005d14:	f7fa fb76 	bl	8000404 <__aeabi_i2d>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d20:	f7fa fa22 	bl	8000168 <__aeabi_dsub>
 8005d24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d26:	4606      	mov	r6, r0
 8005d28:	3330      	adds	r3, #48	; 0x30
 8005d2a:	f804 3b01 	strb.w	r3, [r4], #1
 8005d2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d30:	460f      	mov	r7, r1
 8005d32:	429c      	cmp	r4, r3
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	d124      	bne.n	8005d84 <_dtoa_r+0x64c>
 8005d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d3e:	4bb0      	ldr	r3, [pc, #704]	; (8006000 <_dtoa_r+0x8c8>)
 8005d40:	f7fa fa14 	bl	800016c <__adddf3>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fe54 	bl	80009f8 <__aeabi_dcmpgt>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d163      	bne.n	8005e1c <_dtoa_r+0x6e4>
 8005d54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d58:	2000      	movs	r0, #0
 8005d5a:	49a9      	ldr	r1, [pc, #676]	; (8006000 <_dtoa_r+0x8c8>)
 8005d5c:	f7fa fa04 	bl	8000168 <__aeabi_dsub>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa fe28 	bl	80009bc <__aeabi_dcmplt>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	f43f af1d 	beq.w	8005bac <_dtoa_r+0x474>
 8005d72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d74:	1e7b      	subs	r3, r7, #1
 8005d76:	9314      	str	r3, [sp, #80]	; 0x50
 8005d78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005d7c:	2b30      	cmp	r3, #48	; 0x30
 8005d7e:	d0f8      	beq.n	8005d72 <_dtoa_r+0x63a>
 8005d80:	46c2      	mov	sl, r8
 8005d82:	e03b      	b.n	8005dfc <_dtoa_r+0x6c4>
 8005d84:	4b9f      	ldr	r3, [pc, #636]	; (8006004 <_dtoa_r+0x8cc>)
 8005d86:	f7fa fba7 	bl	80004d8 <__aeabi_dmul>
 8005d8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d8e:	e7bc      	b.n	8005d0a <_dtoa_r+0x5d2>
 8005d90:	9f03      	ldr	r7, [sp, #12]
 8005d92:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005d96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	f7fa fcc5 	bl	800072c <__aeabi_ddiv>
 8005da2:	f7fa fe49 	bl	8000a38 <__aeabi_d2iz>
 8005da6:	4604      	mov	r4, r0
 8005da8:	f7fa fb2c 	bl	8000404 <__aeabi_i2d>
 8005dac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005db0:	f7fa fb92 	bl	80004d8 <__aeabi_dmul>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4640      	mov	r0, r8
 8005dba:	4649      	mov	r1, r9
 8005dbc:	f7fa f9d4 	bl	8000168 <__aeabi_dsub>
 8005dc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005dc4:	f807 6b01 	strb.w	r6, [r7], #1
 8005dc8:	9e03      	ldr	r6, [sp, #12]
 8005dca:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005dce:	1bbe      	subs	r6, r7, r6
 8005dd0:	45b4      	cmp	ip, r6
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	d136      	bne.n	8005e46 <_dtoa_r+0x70e>
 8005dd8:	f7fa f9c8 	bl	800016c <__adddf3>
 8005ddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005de0:	4680      	mov	r8, r0
 8005de2:	4689      	mov	r9, r1
 8005de4:	f7fa fe08 	bl	80009f8 <__aeabi_dcmpgt>
 8005de8:	bb58      	cbnz	r0, 8005e42 <_dtoa_r+0x70a>
 8005dea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dee:	4640      	mov	r0, r8
 8005df0:	4649      	mov	r1, r9
 8005df2:	f7fa fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8005df6:	b108      	cbz	r0, 8005dfc <_dtoa_r+0x6c4>
 8005df8:	07e1      	lsls	r1, r4, #31
 8005dfa:	d422      	bmi.n	8005e42 <_dtoa_r+0x70a>
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	4659      	mov	r1, fp
 8005e00:	f000 fae2 	bl	80063c8 <_Bfree>
 8005e04:	2300      	movs	r3, #0
 8005e06:	703b      	strb	r3, [r7, #0]
 8005e08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e0a:	f10a 0001 	add.w	r0, sl, #1
 8005e0e:	6018      	str	r0, [r3, #0]
 8005e10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f43f acde 	beq.w	80057d4 <_dtoa_r+0x9c>
 8005e18:	601f      	str	r7, [r3, #0]
 8005e1a:	e4db      	b.n	80057d4 <_dtoa_r+0x9c>
 8005e1c:	4627      	mov	r7, r4
 8005e1e:	463b      	mov	r3, r7
 8005e20:	461f      	mov	r7, r3
 8005e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e26:	2a39      	cmp	r2, #57	; 0x39
 8005e28:	d107      	bne.n	8005e3a <_dtoa_r+0x702>
 8005e2a:	9a03      	ldr	r2, [sp, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d1f7      	bne.n	8005e20 <_dtoa_r+0x6e8>
 8005e30:	2230      	movs	r2, #48	; 0x30
 8005e32:	9903      	ldr	r1, [sp, #12]
 8005e34:	f108 0801 	add.w	r8, r8, #1
 8005e38:	700a      	strb	r2, [r1, #0]
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	3201      	adds	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	e79e      	b.n	8005d80 <_dtoa_r+0x648>
 8005e42:	46d0      	mov	r8, sl
 8005e44:	e7eb      	b.n	8005e1e <_dtoa_r+0x6e6>
 8005e46:	2200      	movs	r2, #0
 8005e48:	4b6e      	ldr	r3, [pc, #440]	; (8006004 <_dtoa_r+0x8cc>)
 8005e4a:	f7fa fb45 	bl	80004d8 <__aeabi_dmul>
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2300      	movs	r3, #0
 8005e52:	4680      	mov	r8, r0
 8005e54:	4689      	mov	r9, r1
 8005e56:	f7fa fda7 	bl	80009a8 <__aeabi_dcmpeq>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d09b      	beq.n	8005d96 <_dtoa_r+0x65e>
 8005e5e:	e7cd      	b.n	8005dfc <_dtoa_r+0x6c4>
 8005e60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	f000 80d0 	beq.w	8006008 <_dtoa_r+0x8d0>
 8005e68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e6a:	2a01      	cmp	r2, #1
 8005e6c:	f300 80ae 	bgt.w	8005fcc <_dtoa_r+0x894>
 8005e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	f000 80a6 	beq.w	8005fc4 <_dtoa_r+0x88c>
 8005e78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e7e:	9f06      	ldr	r7, [sp, #24]
 8005e80:	9a06      	ldr	r2, [sp, #24]
 8005e82:	2101      	movs	r1, #1
 8005e84:	441a      	add	r2, r3
 8005e86:	9206      	str	r2, [sp, #24]
 8005e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	441a      	add	r2, r3
 8005e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e90:	f000 fb50 	bl	8006534 <__i2b>
 8005e94:	4606      	mov	r6, r0
 8005e96:	2f00      	cmp	r7, #0
 8005e98:	dd0c      	ble.n	8005eb4 <_dtoa_r+0x77c>
 8005e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	dd09      	ble.n	8005eb4 <_dtoa_r+0x77c>
 8005ea0:	42bb      	cmp	r3, r7
 8005ea2:	bfa8      	it	ge
 8005ea4:	463b      	movge	r3, r7
 8005ea6:	9a06      	ldr	r2, [sp, #24]
 8005ea8:	1aff      	subs	r7, r7, r3
 8005eaa:	1ad2      	subs	r2, r2, r3
 8005eac:	9206      	str	r2, [sp, #24]
 8005eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb6:	b1f3      	cbz	r3, 8005ef6 <_dtoa_r+0x7be>
 8005eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 80a8 	beq.w	8006010 <_dtoa_r+0x8d8>
 8005ec0:	2c00      	cmp	r4, #0
 8005ec2:	dd10      	ble.n	8005ee6 <_dtoa_r+0x7ae>
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 fbf1 	bl	80066b0 <__pow5mult>
 8005ece:	465a      	mov	r2, fp
 8005ed0:	4601      	mov	r1, r0
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 fb43 	bl	8006560 <__multiply>
 8005eda:	4680      	mov	r8, r0
 8005edc:	4659      	mov	r1, fp
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 fa72 	bl	80063c8 <_Bfree>
 8005ee4:	46c3      	mov	fp, r8
 8005ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee8:	1b1a      	subs	r2, r3, r4
 8005eea:	d004      	beq.n	8005ef6 <_dtoa_r+0x7be>
 8005eec:	4659      	mov	r1, fp
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f000 fbde 	bl	80066b0 <__pow5mult>
 8005ef4:	4683      	mov	fp, r0
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 fb1b 	bl	8006534 <__i2b>
 8005efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f00:	4604      	mov	r4, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f340 8086 	ble.w	8006014 <_dtoa_r+0x8dc>
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 fbcf 	bl	80066b0 <__pow5mult>
 8005f12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f14:	4604      	mov	r4, r0
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	dd7f      	ble.n	800601a <_dtoa_r+0x8e2>
 8005f1a:	f04f 0800 	mov.w	r8, #0
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f24:	6918      	ldr	r0, [r3, #16]
 8005f26:	f000 fab7 	bl	8006498 <__hi0bits>
 8005f2a:	f1c0 0020 	rsb	r0, r0, #32
 8005f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f30:	4418      	add	r0, r3
 8005f32:	f010 001f 	ands.w	r0, r0, #31
 8005f36:	f000 8092 	beq.w	800605e <_dtoa_r+0x926>
 8005f3a:	f1c0 0320 	rsb	r3, r0, #32
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	f340 808a 	ble.w	8006058 <_dtoa_r+0x920>
 8005f44:	f1c0 001c 	rsb	r0, r0, #28
 8005f48:	9b06      	ldr	r3, [sp, #24]
 8005f4a:	4407      	add	r7, r0
 8005f4c:	4403      	add	r3, r0
 8005f4e:	9306      	str	r3, [sp, #24]
 8005f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f52:	4403      	add	r3, r0
 8005f54:	9309      	str	r3, [sp, #36]	; 0x24
 8005f56:	9b06      	ldr	r3, [sp, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dd05      	ble.n	8005f68 <_dtoa_r+0x830>
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 fbff 	bl	8006764 <__lshift>
 8005f66:	4683      	mov	fp, r0
 8005f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dd05      	ble.n	8005f7a <_dtoa_r+0x842>
 8005f6e:	4621      	mov	r1, r4
 8005f70:	461a      	mov	r2, r3
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fbf6 	bl	8006764 <__lshift>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d070      	beq.n	8006062 <_dtoa_r+0x92a>
 8005f80:	4621      	mov	r1, r4
 8005f82:	4658      	mov	r0, fp
 8005f84:	f000 fc5e 	bl	8006844 <__mcmp>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	da6a      	bge.n	8006062 <_dtoa_r+0x92a>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4659      	mov	r1, fp
 8005f90:	220a      	movs	r2, #10
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 fa3a 	bl	800640c <__multadd>
 8005f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f9a:	4683      	mov	fp, r0
 8005f9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8194 	beq.w	80062ce <_dtoa_r+0xb96>
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	2300      	movs	r3, #0
 8005faa:	220a      	movs	r2, #10
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 fa2d 	bl	800640c <__multadd>
 8005fb2:	f1b9 0f00 	cmp.w	r9, #0
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	f300 8093 	bgt.w	80060e2 <_dtoa_r+0x9aa>
 8005fbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	dc57      	bgt.n	8006072 <_dtoa_r+0x93a>
 8005fc2:	e08e      	b.n	80060e2 <_dtoa_r+0x9aa>
 8005fc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005fc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fca:	e757      	b.n	8005e7c <_dtoa_r+0x744>
 8005fcc:	9b08      	ldr	r3, [sp, #32]
 8005fce:	1e5c      	subs	r4, r3, #1
 8005fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	bfb7      	itett	lt
 8005fd6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005fd8:	1b1c      	subge	r4, r3, r4
 8005fda:	1ae2      	sublt	r2, r4, r3
 8005fdc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005fde:	bfbe      	ittt	lt
 8005fe0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005fe2:	189b      	addlt	r3, r3, r2
 8005fe4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005fe6:	9b08      	ldr	r3, [sp, #32]
 8005fe8:	bfb8      	it	lt
 8005fea:	2400      	movlt	r4, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bfbb      	ittet	lt
 8005ff0:	9b06      	ldrlt	r3, [sp, #24]
 8005ff2:	9a08      	ldrlt	r2, [sp, #32]
 8005ff4:	9f06      	ldrge	r7, [sp, #24]
 8005ff6:	1a9f      	sublt	r7, r3, r2
 8005ff8:	bfac      	ite	ge
 8005ffa:	9b08      	ldrge	r3, [sp, #32]
 8005ffc:	2300      	movlt	r3, #0
 8005ffe:	e73f      	b.n	8005e80 <_dtoa_r+0x748>
 8006000:	3fe00000 	.word	0x3fe00000
 8006004:	40240000 	.word	0x40240000
 8006008:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800600a:	9f06      	ldr	r7, [sp, #24]
 800600c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800600e:	e742      	b.n	8005e96 <_dtoa_r+0x75e>
 8006010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006012:	e76b      	b.n	8005eec <_dtoa_r+0x7b4>
 8006014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006016:	2b01      	cmp	r3, #1
 8006018:	dc19      	bgt.n	800604e <_dtoa_r+0x916>
 800601a:	9b04      	ldr	r3, [sp, #16]
 800601c:	b9bb      	cbnz	r3, 800604e <_dtoa_r+0x916>
 800601e:	9b05      	ldr	r3, [sp, #20]
 8006020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006024:	b99b      	cbnz	r3, 800604e <_dtoa_r+0x916>
 8006026:	9b05      	ldr	r3, [sp, #20]
 8006028:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800602c:	0d1b      	lsrs	r3, r3, #20
 800602e:	051b      	lsls	r3, r3, #20
 8006030:	b183      	cbz	r3, 8006054 <_dtoa_r+0x91c>
 8006032:	f04f 0801 	mov.w	r8, #1
 8006036:	9b06      	ldr	r3, [sp, #24]
 8006038:	3301      	adds	r3, #1
 800603a:	9306      	str	r3, [sp, #24]
 800603c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603e:	3301      	adds	r3, #1
 8006040:	9309      	str	r3, [sp, #36]	; 0x24
 8006042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006044:	2b00      	cmp	r3, #0
 8006046:	f47f af6a 	bne.w	8005f1e <_dtoa_r+0x7e6>
 800604a:	2001      	movs	r0, #1
 800604c:	e76f      	b.n	8005f2e <_dtoa_r+0x7f6>
 800604e:	f04f 0800 	mov.w	r8, #0
 8006052:	e7f6      	b.n	8006042 <_dtoa_r+0x90a>
 8006054:	4698      	mov	r8, r3
 8006056:	e7f4      	b.n	8006042 <_dtoa_r+0x90a>
 8006058:	f43f af7d 	beq.w	8005f56 <_dtoa_r+0x81e>
 800605c:	4618      	mov	r0, r3
 800605e:	301c      	adds	r0, #28
 8006060:	e772      	b.n	8005f48 <_dtoa_r+0x810>
 8006062:	9b08      	ldr	r3, [sp, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dc36      	bgt.n	80060d6 <_dtoa_r+0x99e>
 8006068:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800606a:	2b02      	cmp	r3, #2
 800606c:	dd33      	ble.n	80060d6 <_dtoa_r+0x99e>
 800606e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006072:	f1b9 0f00 	cmp.w	r9, #0
 8006076:	d10d      	bne.n	8006094 <_dtoa_r+0x95c>
 8006078:	4621      	mov	r1, r4
 800607a:	464b      	mov	r3, r9
 800607c:	2205      	movs	r2, #5
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f9c4 	bl	800640c <__multadd>
 8006084:	4601      	mov	r1, r0
 8006086:	4604      	mov	r4, r0
 8006088:	4658      	mov	r0, fp
 800608a:	f000 fbdb 	bl	8006844 <__mcmp>
 800608e:	2800      	cmp	r0, #0
 8006090:	f73f adb8 	bgt.w	8005c04 <_dtoa_r+0x4cc>
 8006094:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006096:	9f03      	ldr	r7, [sp, #12]
 8006098:	ea6f 0a03 	mvn.w	sl, r3
 800609c:	f04f 0800 	mov.w	r8, #0
 80060a0:	4621      	mov	r1, r4
 80060a2:	4628      	mov	r0, r5
 80060a4:	f000 f990 	bl	80063c8 <_Bfree>
 80060a8:	2e00      	cmp	r6, #0
 80060aa:	f43f aea7 	beq.w	8005dfc <_dtoa_r+0x6c4>
 80060ae:	f1b8 0f00 	cmp.w	r8, #0
 80060b2:	d005      	beq.n	80060c0 <_dtoa_r+0x988>
 80060b4:	45b0      	cmp	r8, r6
 80060b6:	d003      	beq.n	80060c0 <_dtoa_r+0x988>
 80060b8:	4641      	mov	r1, r8
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 f984 	bl	80063c8 <_Bfree>
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 f980 	bl	80063c8 <_Bfree>
 80060c8:	e698      	b.n	8005dfc <_dtoa_r+0x6c4>
 80060ca:	2400      	movs	r4, #0
 80060cc:	4626      	mov	r6, r4
 80060ce:	e7e1      	b.n	8006094 <_dtoa_r+0x95c>
 80060d0:	46c2      	mov	sl, r8
 80060d2:	4626      	mov	r6, r4
 80060d4:	e596      	b.n	8005c04 <_dtoa_r+0x4cc>
 80060d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80fd 	beq.w	80062dc <_dtoa_r+0xba4>
 80060e2:	2f00      	cmp	r7, #0
 80060e4:	dd05      	ble.n	80060f2 <_dtoa_r+0x9ba>
 80060e6:	4631      	mov	r1, r6
 80060e8:	463a      	mov	r2, r7
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fb3a 	bl	8006764 <__lshift>
 80060f0:	4606      	mov	r6, r0
 80060f2:	f1b8 0f00 	cmp.w	r8, #0
 80060f6:	d05c      	beq.n	80061b2 <_dtoa_r+0xa7a>
 80060f8:	4628      	mov	r0, r5
 80060fa:	6871      	ldr	r1, [r6, #4]
 80060fc:	f000 f924 	bl	8006348 <_Balloc>
 8006100:	4607      	mov	r7, r0
 8006102:	b928      	cbnz	r0, 8006110 <_dtoa_r+0x9d8>
 8006104:	4602      	mov	r2, r0
 8006106:	f240 21ea 	movw	r1, #746	; 0x2ea
 800610a:	4b7f      	ldr	r3, [pc, #508]	; (8006308 <_dtoa_r+0xbd0>)
 800610c:	f7ff bb28 	b.w	8005760 <_dtoa_r+0x28>
 8006110:	6932      	ldr	r2, [r6, #16]
 8006112:	f106 010c 	add.w	r1, r6, #12
 8006116:	3202      	adds	r2, #2
 8006118:	0092      	lsls	r2, r2, #2
 800611a:	300c      	adds	r0, #12
 800611c:	f7fe fe08 	bl	8004d30 <memcpy>
 8006120:	2201      	movs	r2, #1
 8006122:	4639      	mov	r1, r7
 8006124:	4628      	mov	r0, r5
 8006126:	f000 fb1d 	bl	8006764 <__lshift>
 800612a:	46b0      	mov	r8, r6
 800612c:	4606      	mov	r6, r0
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	9308      	str	r3, [sp, #32]
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	444b      	add	r3, r9
 8006138:	930a      	str	r3, [sp, #40]	; 0x28
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	9309      	str	r3, [sp, #36]	; 0x24
 8006142:	9b08      	ldr	r3, [sp, #32]
 8006144:	4621      	mov	r1, r4
 8006146:	3b01      	subs	r3, #1
 8006148:	4658      	mov	r0, fp
 800614a:	9304      	str	r3, [sp, #16]
 800614c:	f7ff fa66 	bl	800561c <quorem>
 8006150:	4603      	mov	r3, r0
 8006152:	4641      	mov	r1, r8
 8006154:	3330      	adds	r3, #48	; 0x30
 8006156:	9006      	str	r0, [sp, #24]
 8006158:	4658      	mov	r0, fp
 800615a:	930b      	str	r3, [sp, #44]	; 0x2c
 800615c:	f000 fb72 	bl	8006844 <__mcmp>
 8006160:	4632      	mov	r2, r6
 8006162:	4681      	mov	r9, r0
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f000 fb88 	bl	800687c <__mdiff>
 800616c:	68c2      	ldr	r2, [r0, #12]
 800616e:	4607      	mov	r7, r0
 8006170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006172:	bb02      	cbnz	r2, 80061b6 <_dtoa_r+0xa7e>
 8006174:	4601      	mov	r1, r0
 8006176:	4658      	mov	r0, fp
 8006178:	f000 fb64 	bl	8006844 <__mcmp>
 800617c:	4602      	mov	r2, r0
 800617e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006180:	4639      	mov	r1, r7
 8006182:	4628      	mov	r0, r5
 8006184:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006188:	f000 f91e 	bl	80063c8 <_Bfree>
 800618c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800618e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006190:	9f08      	ldr	r7, [sp, #32]
 8006192:	ea43 0102 	orr.w	r1, r3, r2
 8006196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006198:	430b      	orrs	r3, r1
 800619a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800619c:	d10d      	bne.n	80061ba <_dtoa_r+0xa82>
 800619e:	2b39      	cmp	r3, #57	; 0x39
 80061a0:	d029      	beq.n	80061f6 <_dtoa_r+0xabe>
 80061a2:	f1b9 0f00 	cmp.w	r9, #0
 80061a6:	dd01      	ble.n	80061ac <_dtoa_r+0xa74>
 80061a8:	9b06      	ldr	r3, [sp, #24]
 80061aa:	3331      	adds	r3, #49	; 0x31
 80061ac:	9a04      	ldr	r2, [sp, #16]
 80061ae:	7013      	strb	r3, [r2, #0]
 80061b0:	e776      	b.n	80060a0 <_dtoa_r+0x968>
 80061b2:	4630      	mov	r0, r6
 80061b4:	e7b9      	b.n	800612a <_dtoa_r+0x9f2>
 80061b6:	2201      	movs	r2, #1
 80061b8:	e7e2      	b.n	8006180 <_dtoa_r+0xa48>
 80061ba:	f1b9 0f00 	cmp.w	r9, #0
 80061be:	db06      	blt.n	80061ce <_dtoa_r+0xa96>
 80061c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80061c2:	ea41 0909 	orr.w	r9, r1, r9
 80061c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061c8:	ea59 0101 	orrs.w	r1, r9, r1
 80061cc:	d120      	bne.n	8006210 <_dtoa_r+0xad8>
 80061ce:	2a00      	cmp	r2, #0
 80061d0:	ddec      	ble.n	80061ac <_dtoa_r+0xa74>
 80061d2:	4659      	mov	r1, fp
 80061d4:	2201      	movs	r2, #1
 80061d6:	4628      	mov	r0, r5
 80061d8:	9308      	str	r3, [sp, #32]
 80061da:	f000 fac3 	bl	8006764 <__lshift>
 80061de:	4621      	mov	r1, r4
 80061e0:	4683      	mov	fp, r0
 80061e2:	f000 fb2f 	bl	8006844 <__mcmp>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	dc02      	bgt.n	80061f2 <_dtoa_r+0xaba>
 80061ec:	d1de      	bne.n	80061ac <_dtoa_r+0xa74>
 80061ee:	07da      	lsls	r2, r3, #31
 80061f0:	d5dc      	bpl.n	80061ac <_dtoa_r+0xa74>
 80061f2:	2b39      	cmp	r3, #57	; 0x39
 80061f4:	d1d8      	bne.n	80061a8 <_dtoa_r+0xa70>
 80061f6:	2339      	movs	r3, #57	; 0x39
 80061f8:	9a04      	ldr	r2, [sp, #16]
 80061fa:	7013      	strb	r3, [r2, #0]
 80061fc:	463b      	mov	r3, r7
 80061fe:	461f      	mov	r7, r3
 8006200:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006204:	3b01      	subs	r3, #1
 8006206:	2a39      	cmp	r2, #57	; 0x39
 8006208:	d050      	beq.n	80062ac <_dtoa_r+0xb74>
 800620a:	3201      	adds	r2, #1
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	e747      	b.n	80060a0 <_dtoa_r+0x968>
 8006210:	2a00      	cmp	r2, #0
 8006212:	dd03      	ble.n	800621c <_dtoa_r+0xae4>
 8006214:	2b39      	cmp	r3, #57	; 0x39
 8006216:	d0ee      	beq.n	80061f6 <_dtoa_r+0xabe>
 8006218:	3301      	adds	r3, #1
 800621a:	e7c7      	b.n	80061ac <_dtoa_r+0xa74>
 800621c:	9a08      	ldr	r2, [sp, #32]
 800621e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006220:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006224:	428a      	cmp	r2, r1
 8006226:	d02a      	beq.n	800627e <_dtoa_r+0xb46>
 8006228:	4659      	mov	r1, fp
 800622a:	2300      	movs	r3, #0
 800622c:	220a      	movs	r2, #10
 800622e:	4628      	mov	r0, r5
 8006230:	f000 f8ec 	bl	800640c <__multadd>
 8006234:	45b0      	cmp	r8, r6
 8006236:	4683      	mov	fp, r0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	f04f 020a 	mov.w	r2, #10
 8006240:	4641      	mov	r1, r8
 8006242:	4628      	mov	r0, r5
 8006244:	d107      	bne.n	8006256 <_dtoa_r+0xb1e>
 8006246:	f000 f8e1 	bl	800640c <__multadd>
 800624a:	4680      	mov	r8, r0
 800624c:	4606      	mov	r6, r0
 800624e:	9b08      	ldr	r3, [sp, #32]
 8006250:	3301      	adds	r3, #1
 8006252:	9308      	str	r3, [sp, #32]
 8006254:	e775      	b.n	8006142 <_dtoa_r+0xa0a>
 8006256:	f000 f8d9 	bl	800640c <__multadd>
 800625a:	4631      	mov	r1, r6
 800625c:	4680      	mov	r8, r0
 800625e:	2300      	movs	r3, #0
 8006260:	220a      	movs	r2, #10
 8006262:	4628      	mov	r0, r5
 8006264:	f000 f8d2 	bl	800640c <__multadd>
 8006268:	4606      	mov	r6, r0
 800626a:	e7f0      	b.n	800624e <_dtoa_r+0xb16>
 800626c:	f1b9 0f00 	cmp.w	r9, #0
 8006270:	bfcc      	ite	gt
 8006272:	464f      	movgt	r7, r9
 8006274:	2701      	movle	r7, #1
 8006276:	f04f 0800 	mov.w	r8, #0
 800627a:	9a03      	ldr	r2, [sp, #12]
 800627c:	4417      	add	r7, r2
 800627e:	4659      	mov	r1, fp
 8006280:	2201      	movs	r2, #1
 8006282:	4628      	mov	r0, r5
 8006284:	9308      	str	r3, [sp, #32]
 8006286:	f000 fa6d 	bl	8006764 <__lshift>
 800628a:	4621      	mov	r1, r4
 800628c:	4683      	mov	fp, r0
 800628e:	f000 fad9 	bl	8006844 <__mcmp>
 8006292:	2800      	cmp	r0, #0
 8006294:	dcb2      	bgt.n	80061fc <_dtoa_r+0xac4>
 8006296:	d102      	bne.n	800629e <_dtoa_r+0xb66>
 8006298:	9b08      	ldr	r3, [sp, #32]
 800629a:	07db      	lsls	r3, r3, #31
 800629c:	d4ae      	bmi.n	80061fc <_dtoa_r+0xac4>
 800629e:	463b      	mov	r3, r7
 80062a0:	461f      	mov	r7, r3
 80062a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062a6:	2a30      	cmp	r2, #48	; 0x30
 80062a8:	d0fa      	beq.n	80062a0 <_dtoa_r+0xb68>
 80062aa:	e6f9      	b.n	80060a0 <_dtoa_r+0x968>
 80062ac:	9a03      	ldr	r2, [sp, #12]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d1a5      	bne.n	80061fe <_dtoa_r+0xac6>
 80062b2:	2331      	movs	r3, #49	; 0x31
 80062b4:	f10a 0a01 	add.w	sl, sl, #1
 80062b8:	e779      	b.n	80061ae <_dtoa_r+0xa76>
 80062ba:	4b14      	ldr	r3, [pc, #80]	; (800630c <_dtoa_r+0xbd4>)
 80062bc:	f7ff baa8 	b.w	8005810 <_dtoa_r+0xd8>
 80062c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f47f aa81 	bne.w	80057ca <_dtoa_r+0x92>
 80062c8:	4b11      	ldr	r3, [pc, #68]	; (8006310 <_dtoa_r+0xbd8>)
 80062ca:	f7ff baa1 	b.w	8005810 <_dtoa_r+0xd8>
 80062ce:	f1b9 0f00 	cmp.w	r9, #0
 80062d2:	dc03      	bgt.n	80062dc <_dtoa_r+0xba4>
 80062d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	f73f aecb 	bgt.w	8006072 <_dtoa_r+0x93a>
 80062dc:	9f03      	ldr	r7, [sp, #12]
 80062de:	4621      	mov	r1, r4
 80062e0:	4658      	mov	r0, fp
 80062e2:	f7ff f99b 	bl	800561c <quorem>
 80062e6:	9a03      	ldr	r2, [sp, #12]
 80062e8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80062ec:	f807 3b01 	strb.w	r3, [r7], #1
 80062f0:	1aba      	subs	r2, r7, r2
 80062f2:	4591      	cmp	r9, r2
 80062f4:	ddba      	ble.n	800626c <_dtoa_r+0xb34>
 80062f6:	4659      	mov	r1, fp
 80062f8:	2300      	movs	r3, #0
 80062fa:	220a      	movs	r2, #10
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 f885 	bl	800640c <__multadd>
 8006302:	4683      	mov	fp, r0
 8006304:	e7eb      	b.n	80062de <_dtoa_r+0xba6>
 8006306:	bf00      	nop
 8006308:	08007b77 	.word	0x08007b77
 800630c:	08007ad4 	.word	0x08007ad4
 8006310:	08007af8 	.word	0x08007af8

08006314 <_localeconv_r>:
 8006314:	4800      	ldr	r0, [pc, #0]	; (8006318 <_localeconv_r+0x4>)
 8006316:	4770      	bx	lr
 8006318:	20000160 	.word	0x20000160

0800631c <malloc>:
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <malloc+0xc>)
 800631e:	4601      	mov	r1, r0
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	f000 bc0f 	b.w	8006b44 <_malloc_r>
 8006326:	bf00      	nop
 8006328:	2000000c 	.word	0x2000000c

0800632c <memchr>:
 800632c:	4603      	mov	r3, r0
 800632e:	b510      	push	{r4, lr}
 8006330:	b2c9      	uxtb	r1, r1
 8006332:	4402      	add	r2, r0
 8006334:	4293      	cmp	r3, r2
 8006336:	4618      	mov	r0, r3
 8006338:	d101      	bne.n	800633e <memchr+0x12>
 800633a:	2000      	movs	r0, #0
 800633c:	e003      	b.n	8006346 <memchr+0x1a>
 800633e:	7804      	ldrb	r4, [r0, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	428c      	cmp	r4, r1
 8006344:	d1f6      	bne.n	8006334 <memchr+0x8>
 8006346:	bd10      	pop	{r4, pc}

08006348 <_Balloc>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800634c:	4604      	mov	r4, r0
 800634e:	460d      	mov	r5, r1
 8006350:	b976      	cbnz	r6, 8006370 <_Balloc+0x28>
 8006352:	2010      	movs	r0, #16
 8006354:	f7ff ffe2 	bl	800631c <malloc>
 8006358:	4602      	mov	r2, r0
 800635a:	6260      	str	r0, [r4, #36]	; 0x24
 800635c:	b920      	cbnz	r0, 8006368 <_Balloc+0x20>
 800635e:	2166      	movs	r1, #102	; 0x66
 8006360:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <_Balloc+0x78>)
 8006362:	4818      	ldr	r0, [pc, #96]	; (80063c4 <_Balloc+0x7c>)
 8006364:	f000 fc72 	bl	8006c4c <__assert_func>
 8006368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800636c:	6006      	str	r6, [r0, #0]
 800636e:	60c6      	str	r6, [r0, #12]
 8006370:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006372:	68f3      	ldr	r3, [r6, #12]
 8006374:	b183      	cbz	r3, 8006398 <_Balloc+0x50>
 8006376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800637e:	b9b8      	cbnz	r0, 80063b0 <_Balloc+0x68>
 8006380:	2101      	movs	r1, #1
 8006382:	fa01 f605 	lsl.w	r6, r1, r5
 8006386:	1d72      	adds	r2, r6, #5
 8006388:	4620      	mov	r0, r4
 800638a:	0092      	lsls	r2, r2, #2
 800638c:	f000 fb5e 	bl	8006a4c <_calloc_r>
 8006390:	b160      	cbz	r0, 80063ac <_Balloc+0x64>
 8006392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006396:	e00e      	b.n	80063b6 <_Balloc+0x6e>
 8006398:	2221      	movs	r2, #33	; 0x21
 800639a:	2104      	movs	r1, #4
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fb55 	bl	8006a4c <_calloc_r>
 80063a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a4:	60f0      	str	r0, [r6, #12]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e4      	bne.n	8006376 <_Balloc+0x2e>
 80063ac:	2000      	movs	r0, #0
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	6802      	ldr	r2, [r0, #0]
 80063b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063b6:	2300      	movs	r3, #0
 80063b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063bc:	e7f7      	b.n	80063ae <_Balloc+0x66>
 80063be:	bf00      	nop
 80063c0:	08007b05 	.word	0x08007b05
 80063c4:	08007b88 	.word	0x08007b88

080063c8 <_Bfree>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063cc:	4605      	mov	r5, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	b976      	cbnz	r6, 80063f0 <_Bfree+0x28>
 80063d2:	2010      	movs	r0, #16
 80063d4:	f7ff ffa2 	bl	800631c <malloc>
 80063d8:	4602      	mov	r2, r0
 80063da:	6268      	str	r0, [r5, #36]	; 0x24
 80063dc:	b920      	cbnz	r0, 80063e8 <_Bfree+0x20>
 80063de:	218a      	movs	r1, #138	; 0x8a
 80063e0:	4b08      	ldr	r3, [pc, #32]	; (8006404 <_Bfree+0x3c>)
 80063e2:	4809      	ldr	r0, [pc, #36]	; (8006408 <_Bfree+0x40>)
 80063e4:	f000 fc32 	bl	8006c4c <__assert_func>
 80063e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063ec:	6006      	str	r6, [r0, #0]
 80063ee:	60c6      	str	r6, [r0, #12]
 80063f0:	b13c      	cbz	r4, 8006402 <_Bfree+0x3a>
 80063f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063f4:	6862      	ldr	r2, [r4, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063fc:	6021      	str	r1, [r4, #0]
 80063fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	08007b05 	.word	0x08007b05
 8006408:	08007b88 	.word	0x08007b88

0800640c <__multadd>:
 800640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006410:	4607      	mov	r7, r0
 8006412:	460c      	mov	r4, r1
 8006414:	461e      	mov	r6, r3
 8006416:	2000      	movs	r0, #0
 8006418:	690d      	ldr	r5, [r1, #16]
 800641a:	f101 0c14 	add.w	ip, r1, #20
 800641e:	f8dc 3000 	ldr.w	r3, [ip]
 8006422:	3001      	adds	r0, #1
 8006424:	b299      	uxth	r1, r3
 8006426:	fb02 6101 	mla	r1, r2, r1, r6
 800642a:	0c1e      	lsrs	r6, r3, #16
 800642c:	0c0b      	lsrs	r3, r1, #16
 800642e:	fb02 3306 	mla	r3, r2, r6, r3
 8006432:	b289      	uxth	r1, r1
 8006434:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006438:	4285      	cmp	r5, r0
 800643a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800643e:	f84c 1b04 	str.w	r1, [ip], #4
 8006442:	dcec      	bgt.n	800641e <__multadd+0x12>
 8006444:	b30e      	cbz	r6, 800648a <__multadd+0x7e>
 8006446:	68a3      	ldr	r3, [r4, #8]
 8006448:	42ab      	cmp	r3, r5
 800644a:	dc19      	bgt.n	8006480 <__multadd+0x74>
 800644c:	6861      	ldr	r1, [r4, #4]
 800644e:	4638      	mov	r0, r7
 8006450:	3101      	adds	r1, #1
 8006452:	f7ff ff79 	bl	8006348 <_Balloc>
 8006456:	4680      	mov	r8, r0
 8006458:	b928      	cbnz	r0, 8006466 <__multadd+0x5a>
 800645a:	4602      	mov	r2, r0
 800645c:	21b5      	movs	r1, #181	; 0xb5
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <__multadd+0x84>)
 8006460:	480c      	ldr	r0, [pc, #48]	; (8006494 <__multadd+0x88>)
 8006462:	f000 fbf3 	bl	8006c4c <__assert_func>
 8006466:	6922      	ldr	r2, [r4, #16]
 8006468:	f104 010c 	add.w	r1, r4, #12
 800646c:	3202      	adds	r2, #2
 800646e:	0092      	lsls	r2, r2, #2
 8006470:	300c      	adds	r0, #12
 8006472:	f7fe fc5d 	bl	8004d30 <memcpy>
 8006476:	4621      	mov	r1, r4
 8006478:	4638      	mov	r0, r7
 800647a:	f7ff ffa5 	bl	80063c8 <_Bfree>
 800647e:	4644      	mov	r4, r8
 8006480:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006484:	3501      	adds	r5, #1
 8006486:	615e      	str	r6, [r3, #20]
 8006488:	6125      	str	r5, [r4, #16]
 800648a:	4620      	mov	r0, r4
 800648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006490:	08007b77 	.word	0x08007b77
 8006494:	08007b88 	.word	0x08007b88

08006498 <__hi0bits>:
 8006498:	0c02      	lsrs	r2, r0, #16
 800649a:	0412      	lsls	r2, r2, #16
 800649c:	4603      	mov	r3, r0
 800649e:	b9ca      	cbnz	r2, 80064d4 <__hi0bits+0x3c>
 80064a0:	0403      	lsls	r3, r0, #16
 80064a2:	2010      	movs	r0, #16
 80064a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064a8:	bf04      	itt	eq
 80064aa:	021b      	lsleq	r3, r3, #8
 80064ac:	3008      	addeq	r0, #8
 80064ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064b2:	bf04      	itt	eq
 80064b4:	011b      	lsleq	r3, r3, #4
 80064b6:	3004      	addeq	r0, #4
 80064b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064bc:	bf04      	itt	eq
 80064be:	009b      	lsleq	r3, r3, #2
 80064c0:	3002      	addeq	r0, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	db05      	blt.n	80064d2 <__hi0bits+0x3a>
 80064c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064ca:	f100 0001 	add.w	r0, r0, #1
 80064ce:	bf08      	it	eq
 80064d0:	2020      	moveq	r0, #32
 80064d2:	4770      	bx	lr
 80064d4:	2000      	movs	r0, #0
 80064d6:	e7e5      	b.n	80064a4 <__hi0bits+0xc>

080064d8 <__lo0bits>:
 80064d8:	6803      	ldr	r3, [r0, #0]
 80064da:	4602      	mov	r2, r0
 80064dc:	f013 0007 	ands.w	r0, r3, #7
 80064e0:	d00b      	beq.n	80064fa <__lo0bits+0x22>
 80064e2:	07d9      	lsls	r1, r3, #31
 80064e4:	d421      	bmi.n	800652a <__lo0bits+0x52>
 80064e6:	0798      	lsls	r0, r3, #30
 80064e8:	bf49      	itett	mi
 80064ea:	085b      	lsrmi	r3, r3, #1
 80064ec:	089b      	lsrpl	r3, r3, #2
 80064ee:	2001      	movmi	r0, #1
 80064f0:	6013      	strmi	r3, [r2, #0]
 80064f2:	bf5c      	itt	pl
 80064f4:	2002      	movpl	r0, #2
 80064f6:	6013      	strpl	r3, [r2, #0]
 80064f8:	4770      	bx	lr
 80064fa:	b299      	uxth	r1, r3
 80064fc:	b909      	cbnz	r1, 8006502 <__lo0bits+0x2a>
 80064fe:	2010      	movs	r0, #16
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	b2d9      	uxtb	r1, r3
 8006504:	b909      	cbnz	r1, 800650a <__lo0bits+0x32>
 8006506:	3008      	adds	r0, #8
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	0719      	lsls	r1, r3, #28
 800650c:	bf04      	itt	eq
 800650e:	091b      	lsreq	r3, r3, #4
 8006510:	3004      	addeq	r0, #4
 8006512:	0799      	lsls	r1, r3, #30
 8006514:	bf04      	itt	eq
 8006516:	089b      	lsreq	r3, r3, #2
 8006518:	3002      	addeq	r0, #2
 800651a:	07d9      	lsls	r1, r3, #31
 800651c:	d403      	bmi.n	8006526 <__lo0bits+0x4e>
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	f100 0001 	add.w	r0, r0, #1
 8006524:	d003      	beq.n	800652e <__lo0bits+0x56>
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	4770      	bx	lr
 800652a:	2000      	movs	r0, #0
 800652c:	4770      	bx	lr
 800652e:	2020      	movs	r0, #32
 8006530:	4770      	bx	lr
	...

08006534 <__i2b>:
 8006534:	b510      	push	{r4, lr}
 8006536:	460c      	mov	r4, r1
 8006538:	2101      	movs	r1, #1
 800653a:	f7ff ff05 	bl	8006348 <_Balloc>
 800653e:	4602      	mov	r2, r0
 8006540:	b928      	cbnz	r0, 800654e <__i2b+0x1a>
 8006542:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006546:	4b04      	ldr	r3, [pc, #16]	; (8006558 <__i2b+0x24>)
 8006548:	4804      	ldr	r0, [pc, #16]	; (800655c <__i2b+0x28>)
 800654a:	f000 fb7f 	bl	8006c4c <__assert_func>
 800654e:	2301      	movs	r3, #1
 8006550:	6144      	str	r4, [r0, #20]
 8006552:	6103      	str	r3, [r0, #16]
 8006554:	bd10      	pop	{r4, pc}
 8006556:	bf00      	nop
 8006558:	08007b77 	.word	0x08007b77
 800655c:	08007b88 	.word	0x08007b88

08006560 <__multiply>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	4691      	mov	r9, r2
 8006566:	690a      	ldr	r2, [r1, #16]
 8006568:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800656c:	460c      	mov	r4, r1
 800656e:	429a      	cmp	r2, r3
 8006570:	bfbe      	ittt	lt
 8006572:	460b      	movlt	r3, r1
 8006574:	464c      	movlt	r4, r9
 8006576:	4699      	movlt	r9, r3
 8006578:	6927      	ldr	r7, [r4, #16]
 800657a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	6861      	ldr	r1, [r4, #4]
 8006582:	eb07 060a 	add.w	r6, r7, sl
 8006586:	42b3      	cmp	r3, r6
 8006588:	b085      	sub	sp, #20
 800658a:	bfb8      	it	lt
 800658c:	3101      	addlt	r1, #1
 800658e:	f7ff fedb 	bl	8006348 <_Balloc>
 8006592:	b930      	cbnz	r0, 80065a2 <__multiply+0x42>
 8006594:	4602      	mov	r2, r0
 8006596:	f240 115d 	movw	r1, #349	; 0x15d
 800659a:	4b43      	ldr	r3, [pc, #268]	; (80066a8 <__multiply+0x148>)
 800659c:	4843      	ldr	r0, [pc, #268]	; (80066ac <__multiply+0x14c>)
 800659e:	f000 fb55 	bl	8006c4c <__assert_func>
 80065a2:	f100 0514 	add.w	r5, r0, #20
 80065a6:	462b      	mov	r3, r5
 80065a8:	2200      	movs	r2, #0
 80065aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065ae:	4543      	cmp	r3, r8
 80065b0:	d321      	bcc.n	80065f6 <__multiply+0x96>
 80065b2:	f104 0314 	add.w	r3, r4, #20
 80065b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065ba:	f109 0314 	add.w	r3, r9, #20
 80065be:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065c2:	9202      	str	r2, [sp, #8]
 80065c4:	1b3a      	subs	r2, r7, r4
 80065c6:	3a15      	subs	r2, #21
 80065c8:	f022 0203 	bic.w	r2, r2, #3
 80065cc:	3204      	adds	r2, #4
 80065ce:	f104 0115 	add.w	r1, r4, #21
 80065d2:	428f      	cmp	r7, r1
 80065d4:	bf38      	it	cc
 80065d6:	2204      	movcc	r2, #4
 80065d8:	9201      	str	r2, [sp, #4]
 80065da:	9a02      	ldr	r2, [sp, #8]
 80065dc:	9303      	str	r3, [sp, #12]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d80c      	bhi.n	80065fc <__multiply+0x9c>
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	dd03      	ble.n	80065ee <__multiply+0x8e>
 80065e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d059      	beq.n	80066a2 <__multiply+0x142>
 80065ee:	6106      	str	r6, [r0, #16]
 80065f0:	b005      	add	sp, #20
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	f843 2b04 	str.w	r2, [r3], #4
 80065fa:	e7d8      	b.n	80065ae <__multiply+0x4e>
 80065fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006600:	f1ba 0f00 	cmp.w	sl, #0
 8006604:	d023      	beq.n	800664e <__multiply+0xee>
 8006606:	46a9      	mov	r9, r5
 8006608:	f04f 0c00 	mov.w	ip, #0
 800660c:	f104 0e14 	add.w	lr, r4, #20
 8006610:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006614:	f8d9 1000 	ldr.w	r1, [r9]
 8006618:	fa1f fb82 	uxth.w	fp, r2
 800661c:	b289      	uxth	r1, r1
 800661e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006622:	4461      	add	r1, ip
 8006624:	f8d9 c000 	ldr.w	ip, [r9]
 8006628:	0c12      	lsrs	r2, r2, #16
 800662a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800662e:	fb0a c202 	mla	r2, sl, r2, ip
 8006632:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006636:	b289      	uxth	r1, r1
 8006638:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800663c:	4577      	cmp	r7, lr
 800663e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006642:	f849 1b04 	str.w	r1, [r9], #4
 8006646:	d8e3      	bhi.n	8006610 <__multiply+0xb0>
 8006648:	9a01      	ldr	r2, [sp, #4]
 800664a:	f845 c002 	str.w	ip, [r5, r2]
 800664e:	9a03      	ldr	r2, [sp, #12]
 8006650:	3304      	adds	r3, #4
 8006652:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006656:	f1b9 0f00 	cmp.w	r9, #0
 800665a:	d020      	beq.n	800669e <__multiply+0x13e>
 800665c:	46ae      	mov	lr, r5
 800665e:	f04f 0a00 	mov.w	sl, #0
 8006662:	6829      	ldr	r1, [r5, #0]
 8006664:	f104 0c14 	add.w	ip, r4, #20
 8006668:	f8bc b000 	ldrh.w	fp, [ip]
 800666c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006670:	b289      	uxth	r1, r1
 8006672:	fb09 220b 	mla	r2, r9, fp, r2
 8006676:	4492      	add	sl, r2
 8006678:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800667c:	f84e 1b04 	str.w	r1, [lr], #4
 8006680:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006684:	f8be 1000 	ldrh.w	r1, [lr]
 8006688:	0c12      	lsrs	r2, r2, #16
 800668a:	fb09 1102 	mla	r1, r9, r2, r1
 800668e:	4567      	cmp	r7, ip
 8006690:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006698:	d8e6      	bhi.n	8006668 <__multiply+0x108>
 800669a:	9a01      	ldr	r2, [sp, #4]
 800669c:	50a9      	str	r1, [r5, r2]
 800669e:	3504      	adds	r5, #4
 80066a0:	e79b      	b.n	80065da <__multiply+0x7a>
 80066a2:	3e01      	subs	r6, #1
 80066a4:	e79d      	b.n	80065e2 <__multiply+0x82>
 80066a6:	bf00      	nop
 80066a8:	08007b77 	.word	0x08007b77
 80066ac:	08007b88 	.word	0x08007b88

080066b0 <__pow5mult>:
 80066b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b4:	4615      	mov	r5, r2
 80066b6:	f012 0203 	ands.w	r2, r2, #3
 80066ba:	4606      	mov	r6, r0
 80066bc:	460f      	mov	r7, r1
 80066be:	d007      	beq.n	80066d0 <__pow5mult+0x20>
 80066c0:	4c25      	ldr	r4, [pc, #148]	; (8006758 <__pow5mult+0xa8>)
 80066c2:	3a01      	subs	r2, #1
 80066c4:	2300      	movs	r3, #0
 80066c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066ca:	f7ff fe9f 	bl	800640c <__multadd>
 80066ce:	4607      	mov	r7, r0
 80066d0:	10ad      	asrs	r5, r5, #2
 80066d2:	d03d      	beq.n	8006750 <__pow5mult+0xa0>
 80066d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066d6:	b97c      	cbnz	r4, 80066f8 <__pow5mult+0x48>
 80066d8:	2010      	movs	r0, #16
 80066da:	f7ff fe1f 	bl	800631c <malloc>
 80066de:	4602      	mov	r2, r0
 80066e0:	6270      	str	r0, [r6, #36]	; 0x24
 80066e2:	b928      	cbnz	r0, 80066f0 <__pow5mult+0x40>
 80066e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066e8:	4b1c      	ldr	r3, [pc, #112]	; (800675c <__pow5mult+0xac>)
 80066ea:	481d      	ldr	r0, [pc, #116]	; (8006760 <__pow5mult+0xb0>)
 80066ec:	f000 faae 	bl	8006c4c <__assert_func>
 80066f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066f4:	6004      	str	r4, [r0, #0]
 80066f6:	60c4      	str	r4, [r0, #12]
 80066f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006700:	b94c      	cbnz	r4, 8006716 <__pow5mult+0x66>
 8006702:	f240 2171 	movw	r1, #625	; 0x271
 8006706:	4630      	mov	r0, r6
 8006708:	f7ff ff14 	bl	8006534 <__i2b>
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	f8c8 0008 	str.w	r0, [r8, #8]
 8006714:	6003      	str	r3, [r0, #0]
 8006716:	f04f 0900 	mov.w	r9, #0
 800671a:	07eb      	lsls	r3, r5, #31
 800671c:	d50a      	bpl.n	8006734 <__pow5mult+0x84>
 800671e:	4639      	mov	r1, r7
 8006720:	4622      	mov	r2, r4
 8006722:	4630      	mov	r0, r6
 8006724:	f7ff ff1c 	bl	8006560 <__multiply>
 8006728:	4680      	mov	r8, r0
 800672a:	4639      	mov	r1, r7
 800672c:	4630      	mov	r0, r6
 800672e:	f7ff fe4b 	bl	80063c8 <_Bfree>
 8006732:	4647      	mov	r7, r8
 8006734:	106d      	asrs	r5, r5, #1
 8006736:	d00b      	beq.n	8006750 <__pow5mult+0xa0>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	b938      	cbnz	r0, 800674c <__pow5mult+0x9c>
 800673c:	4622      	mov	r2, r4
 800673e:	4621      	mov	r1, r4
 8006740:	4630      	mov	r0, r6
 8006742:	f7ff ff0d 	bl	8006560 <__multiply>
 8006746:	6020      	str	r0, [r4, #0]
 8006748:	f8c0 9000 	str.w	r9, [r0]
 800674c:	4604      	mov	r4, r0
 800674e:	e7e4      	b.n	800671a <__pow5mult+0x6a>
 8006750:	4638      	mov	r0, r7
 8006752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006756:	bf00      	nop
 8006758:	08007cd8 	.word	0x08007cd8
 800675c:	08007b05 	.word	0x08007b05
 8006760:	08007b88 	.word	0x08007b88

08006764 <__lshift>:
 8006764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006768:	460c      	mov	r4, r1
 800676a:	4607      	mov	r7, r0
 800676c:	4691      	mov	r9, r2
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	6849      	ldr	r1, [r1, #4]
 8006772:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800677c:	f108 0601 	add.w	r6, r8, #1
 8006780:	42b3      	cmp	r3, r6
 8006782:	db0b      	blt.n	800679c <__lshift+0x38>
 8006784:	4638      	mov	r0, r7
 8006786:	f7ff fddf 	bl	8006348 <_Balloc>
 800678a:	4605      	mov	r5, r0
 800678c:	b948      	cbnz	r0, 80067a2 <__lshift+0x3e>
 800678e:	4602      	mov	r2, r0
 8006790:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006794:	4b29      	ldr	r3, [pc, #164]	; (800683c <__lshift+0xd8>)
 8006796:	482a      	ldr	r0, [pc, #168]	; (8006840 <__lshift+0xdc>)
 8006798:	f000 fa58 	bl	8006c4c <__assert_func>
 800679c:	3101      	adds	r1, #1
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	e7ee      	b.n	8006780 <__lshift+0x1c>
 80067a2:	2300      	movs	r3, #0
 80067a4:	f100 0114 	add.w	r1, r0, #20
 80067a8:	f100 0210 	add.w	r2, r0, #16
 80067ac:	4618      	mov	r0, r3
 80067ae:	4553      	cmp	r3, sl
 80067b0:	db37      	blt.n	8006822 <__lshift+0xbe>
 80067b2:	6920      	ldr	r0, [r4, #16]
 80067b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067b8:	f104 0314 	add.w	r3, r4, #20
 80067bc:	f019 091f 	ands.w	r9, r9, #31
 80067c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067c8:	d02f      	beq.n	800682a <__lshift+0xc6>
 80067ca:	468a      	mov	sl, r1
 80067cc:	f04f 0c00 	mov.w	ip, #0
 80067d0:	f1c9 0e20 	rsb	lr, r9, #32
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	fa02 f209 	lsl.w	r2, r2, r9
 80067da:	ea42 020c 	orr.w	r2, r2, ip
 80067de:	f84a 2b04 	str.w	r2, [sl], #4
 80067e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e6:	4298      	cmp	r0, r3
 80067e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80067ec:	d8f2      	bhi.n	80067d4 <__lshift+0x70>
 80067ee:	1b03      	subs	r3, r0, r4
 80067f0:	3b15      	subs	r3, #21
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	3304      	adds	r3, #4
 80067f8:	f104 0215 	add.w	r2, r4, #21
 80067fc:	4290      	cmp	r0, r2
 80067fe:	bf38      	it	cc
 8006800:	2304      	movcc	r3, #4
 8006802:	f841 c003 	str.w	ip, [r1, r3]
 8006806:	f1bc 0f00 	cmp.w	ip, #0
 800680a:	d001      	beq.n	8006810 <__lshift+0xac>
 800680c:	f108 0602 	add.w	r6, r8, #2
 8006810:	3e01      	subs	r6, #1
 8006812:	4638      	mov	r0, r7
 8006814:	4621      	mov	r1, r4
 8006816:	612e      	str	r6, [r5, #16]
 8006818:	f7ff fdd6 	bl	80063c8 <_Bfree>
 800681c:	4628      	mov	r0, r5
 800681e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006822:	f842 0f04 	str.w	r0, [r2, #4]!
 8006826:	3301      	adds	r3, #1
 8006828:	e7c1      	b.n	80067ae <__lshift+0x4a>
 800682a:	3904      	subs	r1, #4
 800682c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006830:	4298      	cmp	r0, r3
 8006832:	f841 2f04 	str.w	r2, [r1, #4]!
 8006836:	d8f9      	bhi.n	800682c <__lshift+0xc8>
 8006838:	e7ea      	b.n	8006810 <__lshift+0xac>
 800683a:	bf00      	nop
 800683c:	08007b77 	.word	0x08007b77
 8006840:	08007b88 	.word	0x08007b88

08006844 <__mcmp>:
 8006844:	4603      	mov	r3, r0
 8006846:	690a      	ldr	r2, [r1, #16]
 8006848:	6900      	ldr	r0, [r0, #16]
 800684a:	b530      	push	{r4, r5, lr}
 800684c:	1a80      	subs	r0, r0, r2
 800684e:	d10d      	bne.n	800686c <__mcmp+0x28>
 8006850:	3314      	adds	r3, #20
 8006852:	3114      	adds	r1, #20
 8006854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800685c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006864:	4295      	cmp	r5, r2
 8006866:	d002      	beq.n	800686e <__mcmp+0x2a>
 8006868:	d304      	bcc.n	8006874 <__mcmp+0x30>
 800686a:	2001      	movs	r0, #1
 800686c:	bd30      	pop	{r4, r5, pc}
 800686e:	42a3      	cmp	r3, r4
 8006870:	d3f4      	bcc.n	800685c <__mcmp+0x18>
 8006872:	e7fb      	b.n	800686c <__mcmp+0x28>
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	e7f8      	b.n	800686c <__mcmp+0x28>
	...

0800687c <__mdiff>:
 800687c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	460d      	mov	r5, r1
 8006882:	4607      	mov	r7, r0
 8006884:	4611      	mov	r1, r2
 8006886:	4628      	mov	r0, r5
 8006888:	4614      	mov	r4, r2
 800688a:	f7ff ffdb 	bl	8006844 <__mcmp>
 800688e:	1e06      	subs	r6, r0, #0
 8006890:	d111      	bne.n	80068b6 <__mdiff+0x3a>
 8006892:	4631      	mov	r1, r6
 8006894:	4638      	mov	r0, r7
 8006896:	f7ff fd57 	bl	8006348 <_Balloc>
 800689a:	4602      	mov	r2, r0
 800689c:	b928      	cbnz	r0, 80068aa <__mdiff+0x2e>
 800689e:	f240 2132 	movw	r1, #562	; 0x232
 80068a2:	4b3a      	ldr	r3, [pc, #232]	; (800698c <__mdiff+0x110>)
 80068a4:	483a      	ldr	r0, [pc, #232]	; (8006990 <__mdiff+0x114>)
 80068a6:	f000 f9d1 	bl	8006c4c <__assert_func>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068b0:	4610      	mov	r0, r2
 80068b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b6:	bfa4      	itt	ge
 80068b8:	4623      	movge	r3, r4
 80068ba:	462c      	movge	r4, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	6861      	ldr	r1, [r4, #4]
 80068c0:	bfa6      	itte	ge
 80068c2:	461d      	movge	r5, r3
 80068c4:	2600      	movge	r6, #0
 80068c6:	2601      	movlt	r6, #1
 80068c8:	f7ff fd3e 	bl	8006348 <_Balloc>
 80068cc:	4602      	mov	r2, r0
 80068ce:	b918      	cbnz	r0, 80068d8 <__mdiff+0x5c>
 80068d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068d4:	4b2d      	ldr	r3, [pc, #180]	; (800698c <__mdiff+0x110>)
 80068d6:	e7e5      	b.n	80068a4 <__mdiff+0x28>
 80068d8:	f102 0814 	add.w	r8, r2, #20
 80068dc:	46c2      	mov	sl, r8
 80068de:	f04f 0c00 	mov.w	ip, #0
 80068e2:	6927      	ldr	r7, [r4, #16]
 80068e4:	60c6      	str	r6, [r0, #12]
 80068e6:	692e      	ldr	r6, [r5, #16]
 80068e8:	f104 0014 	add.w	r0, r4, #20
 80068ec:	f105 0914 	add.w	r9, r5, #20
 80068f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80068f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068f8:	3410      	adds	r4, #16
 80068fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80068fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8006902:	fa1f f18b 	uxth.w	r1, fp
 8006906:	448c      	add	ip, r1
 8006908:	b299      	uxth	r1, r3
 800690a:	0c1b      	lsrs	r3, r3, #16
 800690c:	ebac 0101 	sub.w	r1, ip, r1
 8006910:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006914:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006918:	b289      	uxth	r1, r1
 800691a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800691e:	454e      	cmp	r6, r9
 8006920:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006924:	f84a 3b04 	str.w	r3, [sl], #4
 8006928:	d8e7      	bhi.n	80068fa <__mdiff+0x7e>
 800692a:	1b73      	subs	r3, r6, r5
 800692c:	3b15      	subs	r3, #21
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	3515      	adds	r5, #21
 8006934:	3304      	adds	r3, #4
 8006936:	42ae      	cmp	r6, r5
 8006938:	bf38      	it	cc
 800693a:	2304      	movcc	r3, #4
 800693c:	4418      	add	r0, r3
 800693e:	4443      	add	r3, r8
 8006940:	461e      	mov	r6, r3
 8006942:	4605      	mov	r5, r0
 8006944:	4575      	cmp	r5, lr
 8006946:	d30e      	bcc.n	8006966 <__mdiff+0xea>
 8006948:	f10e 0103 	add.w	r1, lr, #3
 800694c:	1a09      	subs	r1, r1, r0
 800694e:	f021 0103 	bic.w	r1, r1, #3
 8006952:	3803      	subs	r0, #3
 8006954:	4586      	cmp	lr, r0
 8006956:	bf38      	it	cc
 8006958:	2100      	movcc	r1, #0
 800695a:	4419      	add	r1, r3
 800695c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006960:	b18b      	cbz	r3, 8006986 <__mdiff+0x10a>
 8006962:	6117      	str	r7, [r2, #16]
 8006964:	e7a4      	b.n	80068b0 <__mdiff+0x34>
 8006966:	f855 8b04 	ldr.w	r8, [r5], #4
 800696a:	fa1f f188 	uxth.w	r1, r8
 800696e:	4461      	add	r1, ip
 8006970:	140c      	asrs	r4, r1, #16
 8006972:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006976:	b289      	uxth	r1, r1
 8006978:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800697c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006980:	f846 1b04 	str.w	r1, [r6], #4
 8006984:	e7de      	b.n	8006944 <__mdiff+0xc8>
 8006986:	3f01      	subs	r7, #1
 8006988:	e7e8      	b.n	800695c <__mdiff+0xe0>
 800698a:	bf00      	nop
 800698c:	08007b77 	.word	0x08007b77
 8006990:	08007b88 	.word	0x08007b88

08006994 <__d2b>:
 8006994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006998:	2101      	movs	r1, #1
 800699a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800699e:	4690      	mov	r8, r2
 80069a0:	461d      	mov	r5, r3
 80069a2:	f7ff fcd1 	bl	8006348 <_Balloc>
 80069a6:	4604      	mov	r4, r0
 80069a8:	b930      	cbnz	r0, 80069b8 <__d2b+0x24>
 80069aa:	4602      	mov	r2, r0
 80069ac:	f240 310a 	movw	r1, #778	; 0x30a
 80069b0:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <__d2b+0xb0>)
 80069b2:	4825      	ldr	r0, [pc, #148]	; (8006a48 <__d2b+0xb4>)
 80069b4:	f000 f94a 	bl	8006c4c <__assert_func>
 80069b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80069bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80069c0:	bb2d      	cbnz	r5, 8006a0e <__d2b+0x7a>
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	f1b8 0300 	subs.w	r3, r8, #0
 80069c8:	d026      	beq.n	8006a18 <__d2b+0x84>
 80069ca:	4668      	mov	r0, sp
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	f7ff fd83 	bl	80064d8 <__lo0bits>
 80069d2:	9900      	ldr	r1, [sp, #0]
 80069d4:	b1f0      	cbz	r0, 8006a14 <__d2b+0x80>
 80069d6:	9a01      	ldr	r2, [sp, #4]
 80069d8:	f1c0 0320 	rsb	r3, r0, #32
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	430b      	orrs	r3, r1
 80069e2:	40c2      	lsrs	r2, r0
 80069e4:	6163      	str	r3, [r4, #20]
 80069e6:	9201      	str	r2, [sp, #4]
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bf14      	ite	ne
 80069ee:	2102      	movne	r1, #2
 80069f0:	2101      	moveq	r1, #1
 80069f2:	61a3      	str	r3, [r4, #24]
 80069f4:	6121      	str	r1, [r4, #16]
 80069f6:	b1c5      	cbz	r5, 8006a2a <__d2b+0x96>
 80069f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069fc:	4405      	add	r5, r0
 80069fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a02:	603d      	str	r5, [r7, #0]
 8006a04:	6030      	str	r0, [r6, #0]
 8006a06:	4620      	mov	r0, r4
 8006a08:	b002      	add	sp, #8
 8006a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a12:	e7d6      	b.n	80069c2 <__d2b+0x2e>
 8006a14:	6161      	str	r1, [r4, #20]
 8006a16:	e7e7      	b.n	80069e8 <__d2b+0x54>
 8006a18:	a801      	add	r0, sp, #4
 8006a1a:	f7ff fd5d 	bl	80064d8 <__lo0bits>
 8006a1e:	2101      	movs	r1, #1
 8006a20:	9b01      	ldr	r3, [sp, #4]
 8006a22:	6121      	str	r1, [r4, #16]
 8006a24:	6163      	str	r3, [r4, #20]
 8006a26:	3020      	adds	r0, #32
 8006a28:	e7e5      	b.n	80069f6 <__d2b+0x62>
 8006a2a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a32:	6038      	str	r0, [r7, #0]
 8006a34:	6918      	ldr	r0, [r3, #16]
 8006a36:	f7ff fd2f 	bl	8006498 <__hi0bits>
 8006a3a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006a3e:	6031      	str	r1, [r6, #0]
 8006a40:	e7e1      	b.n	8006a06 <__d2b+0x72>
 8006a42:	bf00      	nop
 8006a44:	08007b77 	.word	0x08007b77
 8006a48:	08007b88 	.word	0x08007b88

08006a4c <_calloc_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	fba1 5402 	umull	r5, r4, r1, r2
 8006a52:	b934      	cbnz	r4, 8006a62 <_calloc_r+0x16>
 8006a54:	4629      	mov	r1, r5
 8006a56:	f000 f875 	bl	8006b44 <_malloc_r>
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	b928      	cbnz	r0, 8006a6a <_calloc_r+0x1e>
 8006a5e:	4630      	mov	r0, r6
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	220c      	movs	r2, #12
 8006a64:	2600      	movs	r6, #0
 8006a66:	6002      	str	r2, [r0, #0]
 8006a68:	e7f9      	b.n	8006a5e <_calloc_r+0x12>
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	f7fe f96d 	bl	8004d4c <memset>
 8006a72:	e7f4      	b.n	8006a5e <_calloc_r+0x12>

08006a74 <_free_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4605      	mov	r5, r0
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	d040      	beq.n	8006afe <_free_r+0x8a>
 8006a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a80:	1f0c      	subs	r4, r1, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bfb8      	it	lt
 8006a86:	18e4      	addlt	r4, r4, r3
 8006a88:	f000 f922 	bl	8006cd0 <__malloc_lock>
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <_free_r+0x8c>)
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	b933      	cbnz	r3, 8006aa0 <_free_r+0x2c>
 8006a92:	6063      	str	r3, [r4, #4]
 8006a94:	6014      	str	r4, [r2, #0]
 8006a96:	4628      	mov	r0, r5
 8006a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a9c:	f000 b91e 	b.w	8006cdc <__malloc_unlock>
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d908      	bls.n	8006ab6 <_free_r+0x42>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	1821      	adds	r1, r4, r0
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	bf01      	itttt	eq
 8006aac:	6819      	ldreq	r1, [r3, #0]
 8006aae:	685b      	ldreq	r3, [r3, #4]
 8006ab0:	1809      	addeq	r1, r1, r0
 8006ab2:	6021      	streq	r1, [r4, #0]
 8006ab4:	e7ed      	b.n	8006a92 <_free_r+0x1e>
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b10b      	cbz	r3, 8006ac0 <_free_r+0x4c>
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	d9fa      	bls.n	8006ab6 <_free_r+0x42>
 8006ac0:	6811      	ldr	r1, [r2, #0]
 8006ac2:	1850      	adds	r0, r2, r1
 8006ac4:	42a0      	cmp	r0, r4
 8006ac6:	d10b      	bne.n	8006ae0 <_free_r+0x6c>
 8006ac8:	6820      	ldr	r0, [r4, #0]
 8006aca:	4401      	add	r1, r0
 8006acc:	1850      	adds	r0, r2, r1
 8006ace:	4283      	cmp	r3, r0
 8006ad0:	6011      	str	r1, [r2, #0]
 8006ad2:	d1e0      	bne.n	8006a96 <_free_r+0x22>
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4401      	add	r1, r0
 8006ada:	6011      	str	r1, [r2, #0]
 8006adc:	6053      	str	r3, [r2, #4]
 8006ade:	e7da      	b.n	8006a96 <_free_r+0x22>
 8006ae0:	d902      	bls.n	8006ae8 <_free_r+0x74>
 8006ae2:	230c      	movs	r3, #12
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	e7d6      	b.n	8006a96 <_free_r+0x22>
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	1821      	adds	r1, r4, r0
 8006aec:	428b      	cmp	r3, r1
 8006aee:	bf01      	itttt	eq
 8006af0:	6819      	ldreq	r1, [r3, #0]
 8006af2:	685b      	ldreq	r3, [r3, #4]
 8006af4:	1809      	addeq	r1, r1, r0
 8006af6:	6021      	streq	r1, [r4, #0]
 8006af8:	6063      	str	r3, [r4, #4]
 8006afa:	6054      	str	r4, [r2, #4]
 8006afc:	e7cb      	b.n	8006a96 <_free_r+0x22>
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20000330 	.word	0x20000330

08006b04 <sbrk_aligned>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	4e0e      	ldr	r6, [pc, #56]	; (8006b40 <sbrk_aligned+0x3c>)
 8006b08:	460c      	mov	r4, r1
 8006b0a:	6831      	ldr	r1, [r6, #0]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	b911      	cbnz	r1, 8006b16 <sbrk_aligned+0x12>
 8006b10:	f000 f88c 	bl	8006c2c <_sbrk_r>
 8006b14:	6030      	str	r0, [r6, #0]
 8006b16:	4621      	mov	r1, r4
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 f887 	bl	8006c2c <_sbrk_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d00a      	beq.n	8006b38 <sbrk_aligned+0x34>
 8006b22:	1cc4      	adds	r4, r0, #3
 8006b24:	f024 0403 	bic.w	r4, r4, #3
 8006b28:	42a0      	cmp	r0, r4
 8006b2a:	d007      	beq.n	8006b3c <sbrk_aligned+0x38>
 8006b2c:	1a21      	subs	r1, r4, r0
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 f87c 	bl	8006c2c <_sbrk_r>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d101      	bne.n	8006b3c <sbrk_aligned+0x38>
 8006b38:	f04f 34ff 	mov.w	r4, #4294967295
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	20000334 	.word	0x20000334

08006b44 <_malloc_r>:
 8006b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b48:	1ccd      	adds	r5, r1, #3
 8006b4a:	f025 0503 	bic.w	r5, r5, #3
 8006b4e:	3508      	adds	r5, #8
 8006b50:	2d0c      	cmp	r5, #12
 8006b52:	bf38      	it	cc
 8006b54:	250c      	movcc	r5, #12
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	4607      	mov	r7, r0
 8006b5a:	db01      	blt.n	8006b60 <_malloc_r+0x1c>
 8006b5c:	42a9      	cmp	r1, r5
 8006b5e:	d905      	bls.n	8006b6c <_malloc_r+0x28>
 8006b60:	230c      	movs	r3, #12
 8006b62:	2600      	movs	r6, #0
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	4630      	mov	r0, r6
 8006b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b6c:	4e2e      	ldr	r6, [pc, #184]	; (8006c28 <_malloc_r+0xe4>)
 8006b6e:	f000 f8af 	bl	8006cd0 <__malloc_lock>
 8006b72:	6833      	ldr	r3, [r6, #0]
 8006b74:	461c      	mov	r4, r3
 8006b76:	bb34      	cbnz	r4, 8006bc6 <_malloc_r+0x82>
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	f7ff ffc2 	bl	8006b04 <sbrk_aligned>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	4604      	mov	r4, r0
 8006b84:	d14d      	bne.n	8006c22 <_malloc_r+0xde>
 8006b86:	6834      	ldr	r4, [r6, #0]
 8006b88:	4626      	mov	r6, r4
 8006b8a:	2e00      	cmp	r6, #0
 8006b8c:	d140      	bne.n	8006c10 <_malloc_r+0xcc>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	4631      	mov	r1, r6
 8006b92:	4638      	mov	r0, r7
 8006b94:	eb04 0803 	add.w	r8, r4, r3
 8006b98:	f000 f848 	bl	8006c2c <_sbrk_r>
 8006b9c:	4580      	cmp	r8, r0
 8006b9e:	d13a      	bne.n	8006c16 <_malloc_r+0xd2>
 8006ba0:	6821      	ldr	r1, [r4, #0]
 8006ba2:	3503      	adds	r5, #3
 8006ba4:	1a6d      	subs	r5, r5, r1
 8006ba6:	f025 0503 	bic.w	r5, r5, #3
 8006baa:	3508      	adds	r5, #8
 8006bac:	2d0c      	cmp	r5, #12
 8006bae:	bf38      	it	cc
 8006bb0:	250c      	movcc	r5, #12
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	f7ff ffa5 	bl	8006b04 <sbrk_aligned>
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d02b      	beq.n	8006c16 <_malloc_r+0xd2>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	442b      	add	r3, r5
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	e00e      	b.n	8006be4 <_malloc_r+0xa0>
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	1b52      	subs	r2, r2, r5
 8006bca:	d41e      	bmi.n	8006c0a <_malloc_r+0xc6>
 8006bcc:	2a0b      	cmp	r2, #11
 8006bce:	d916      	bls.n	8006bfe <_malloc_r+0xba>
 8006bd0:	1961      	adds	r1, r4, r5
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	6025      	str	r5, [r4, #0]
 8006bd6:	bf18      	it	ne
 8006bd8:	6059      	strne	r1, [r3, #4]
 8006bda:	6863      	ldr	r3, [r4, #4]
 8006bdc:	bf08      	it	eq
 8006bde:	6031      	streq	r1, [r6, #0]
 8006be0:	5162      	str	r2, [r4, r5]
 8006be2:	604b      	str	r3, [r1, #4]
 8006be4:	4638      	mov	r0, r7
 8006be6:	f104 060b 	add.w	r6, r4, #11
 8006bea:	f000 f877 	bl	8006cdc <__malloc_unlock>
 8006bee:	f026 0607 	bic.w	r6, r6, #7
 8006bf2:	1d23      	adds	r3, r4, #4
 8006bf4:	1af2      	subs	r2, r6, r3
 8006bf6:	d0b6      	beq.n	8006b66 <_malloc_r+0x22>
 8006bf8:	1b9b      	subs	r3, r3, r6
 8006bfa:	50a3      	str	r3, [r4, r2]
 8006bfc:	e7b3      	b.n	8006b66 <_malloc_r+0x22>
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	bf0c      	ite	eq
 8006c04:	6032      	streq	r2, [r6, #0]
 8006c06:	605a      	strne	r2, [r3, #4]
 8006c08:	e7ec      	b.n	8006be4 <_malloc_r+0xa0>
 8006c0a:	4623      	mov	r3, r4
 8006c0c:	6864      	ldr	r4, [r4, #4]
 8006c0e:	e7b2      	b.n	8006b76 <_malloc_r+0x32>
 8006c10:	4634      	mov	r4, r6
 8006c12:	6876      	ldr	r6, [r6, #4]
 8006c14:	e7b9      	b.n	8006b8a <_malloc_r+0x46>
 8006c16:	230c      	movs	r3, #12
 8006c18:	4638      	mov	r0, r7
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	f000 f85e 	bl	8006cdc <__malloc_unlock>
 8006c20:	e7a1      	b.n	8006b66 <_malloc_r+0x22>
 8006c22:	6025      	str	r5, [r4, #0]
 8006c24:	e7de      	b.n	8006be4 <_malloc_r+0xa0>
 8006c26:	bf00      	nop
 8006c28:	20000330 	.word	0x20000330

08006c2c <_sbrk_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4d05      	ldr	r5, [pc, #20]	; (8006c48 <_sbrk_r+0x1c>)
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fb fa70 	bl	800211c <_sbrk>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_sbrk_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_sbrk_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	20000338 	.word	0x20000338

08006c4c <__assert_func>:
 8006c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c4e:	4614      	mov	r4, r2
 8006c50:	461a      	mov	r2, r3
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <__assert_func+0x2c>)
 8006c54:	4605      	mov	r5, r0
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68d8      	ldr	r0, [r3, #12]
 8006c5a:	b14c      	cbz	r4, 8006c70 <__assert_func+0x24>
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <__assert_func+0x30>)
 8006c5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c62:	9100      	str	r1, [sp, #0]
 8006c64:	462b      	mov	r3, r5
 8006c66:	4906      	ldr	r1, [pc, #24]	; (8006c80 <__assert_func+0x34>)
 8006c68:	f000 f80e 	bl	8006c88 <fiprintf>
 8006c6c:	f000 fa62 	bl	8007134 <abort>
 8006c70:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <__assert_func+0x38>)
 8006c72:	461c      	mov	r4, r3
 8006c74:	e7f3      	b.n	8006c5e <__assert_func+0x12>
 8006c76:	bf00      	nop
 8006c78:	2000000c 	.word	0x2000000c
 8006c7c:	08007ce4 	.word	0x08007ce4
 8006c80:	08007cf1 	.word	0x08007cf1
 8006c84:	08007d1f 	.word	0x08007d1f

08006c88 <fiprintf>:
 8006c88:	b40e      	push	{r1, r2, r3}
 8006c8a:	b503      	push	{r0, r1, lr}
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	ab03      	add	r3, sp, #12
 8006c90:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <fiprintf+0x20>)
 8006c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	f000 f84d 	bl	8006d38 <_vfiprintf_r>
 8006c9e:	b002      	add	sp, #8
 8006ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca4:	b003      	add	sp, #12
 8006ca6:	4770      	bx	lr
 8006ca8:	2000000c 	.word	0x2000000c

08006cac <__ascii_mbtowc>:
 8006cac:	b082      	sub	sp, #8
 8006cae:	b901      	cbnz	r1, 8006cb2 <__ascii_mbtowc+0x6>
 8006cb0:	a901      	add	r1, sp, #4
 8006cb2:	b142      	cbz	r2, 8006cc6 <__ascii_mbtowc+0x1a>
 8006cb4:	b14b      	cbz	r3, 8006cca <__ascii_mbtowc+0x1e>
 8006cb6:	7813      	ldrb	r3, [r2, #0]
 8006cb8:	600b      	str	r3, [r1, #0]
 8006cba:	7812      	ldrb	r2, [r2, #0]
 8006cbc:	1e10      	subs	r0, r2, #0
 8006cbe:	bf18      	it	ne
 8006cc0:	2001      	movne	r0, #1
 8006cc2:	b002      	add	sp, #8
 8006cc4:	4770      	bx	lr
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	e7fb      	b.n	8006cc2 <__ascii_mbtowc+0x16>
 8006cca:	f06f 0001 	mvn.w	r0, #1
 8006cce:	e7f8      	b.n	8006cc2 <__ascii_mbtowc+0x16>

08006cd0 <__malloc_lock>:
 8006cd0:	4801      	ldr	r0, [pc, #4]	; (8006cd8 <__malloc_lock+0x8>)
 8006cd2:	f000 bbeb 	b.w	80074ac <__retarget_lock_acquire_recursive>
 8006cd6:	bf00      	nop
 8006cd8:	2000033c 	.word	0x2000033c

08006cdc <__malloc_unlock>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <__malloc_unlock+0x8>)
 8006cde:	f000 bbe6 	b.w	80074ae <__retarget_lock_release_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	2000033c 	.word	0x2000033c

08006ce8 <__sfputc_r>:
 8006ce8:	6893      	ldr	r3, [r2, #8]
 8006cea:	b410      	push	{r4}
 8006cec:	3b01      	subs	r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	6093      	str	r3, [r2, #8]
 8006cf2:	da07      	bge.n	8006d04 <__sfputc_r+0x1c>
 8006cf4:	6994      	ldr	r4, [r2, #24]
 8006cf6:	42a3      	cmp	r3, r4
 8006cf8:	db01      	blt.n	8006cfe <__sfputc_r+0x16>
 8006cfa:	290a      	cmp	r1, #10
 8006cfc:	d102      	bne.n	8006d04 <__sfputc_r+0x1c>
 8006cfe:	bc10      	pop	{r4}
 8006d00:	f000 b94a 	b.w	8006f98 <__swbuf_r>
 8006d04:	6813      	ldr	r3, [r2, #0]
 8006d06:	1c58      	adds	r0, r3, #1
 8006d08:	6010      	str	r0, [r2, #0]
 8006d0a:	7019      	strb	r1, [r3, #0]
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	bc10      	pop	{r4}
 8006d10:	4770      	bx	lr

08006d12 <__sfputs_r>:
 8006d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d14:	4606      	mov	r6, r0
 8006d16:	460f      	mov	r7, r1
 8006d18:	4614      	mov	r4, r2
 8006d1a:	18d5      	adds	r5, r2, r3
 8006d1c:	42ac      	cmp	r4, r5
 8006d1e:	d101      	bne.n	8006d24 <__sfputs_r+0x12>
 8006d20:	2000      	movs	r0, #0
 8006d22:	e007      	b.n	8006d34 <__sfputs_r+0x22>
 8006d24:	463a      	mov	r2, r7
 8006d26:	4630      	mov	r0, r6
 8006d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d2c:	f7ff ffdc 	bl	8006ce8 <__sfputc_r>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d1f3      	bne.n	8006d1c <__sfputs_r+0xa>
 8006d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d38 <_vfiprintf_r>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	460d      	mov	r5, r1
 8006d3e:	4614      	mov	r4, r2
 8006d40:	4698      	mov	r8, r3
 8006d42:	4606      	mov	r6, r0
 8006d44:	b09d      	sub	sp, #116	; 0x74
 8006d46:	b118      	cbz	r0, 8006d50 <_vfiprintf_r+0x18>
 8006d48:	6983      	ldr	r3, [r0, #24]
 8006d4a:	b90b      	cbnz	r3, 8006d50 <_vfiprintf_r+0x18>
 8006d4c:	f000 fb10 	bl	8007370 <__sinit>
 8006d50:	4b89      	ldr	r3, [pc, #548]	; (8006f78 <_vfiprintf_r+0x240>)
 8006d52:	429d      	cmp	r5, r3
 8006d54:	d11b      	bne.n	8006d8e <_vfiprintf_r+0x56>
 8006d56:	6875      	ldr	r5, [r6, #4]
 8006d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d5a:	07d9      	lsls	r1, r3, #31
 8006d5c:	d405      	bmi.n	8006d6a <_vfiprintf_r+0x32>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	059a      	lsls	r2, r3, #22
 8006d62:	d402      	bmi.n	8006d6a <_vfiprintf_r+0x32>
 8006d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d66:	f000 fba1 	bl	80074ac <__retarget_lock_acquire_recursive>
 8006d6a:	89ab      	ldrh	r3, [r5, #12]
 8006d6c:	071b      	lsls	r3, r3, #28
 8006d6e:	d501      	bpl.n	8006d74 <_vfiprintf_r+0x3c>
 8006d70:	692b      	ldr	r3, [r5, #16]
 8006d72:	b9eb      	cbnz	r3, 8006db0 <_vfiprintf_r+0x78>
 8006d74:	4629      	mov	r1, r5
 8006d76:	4630      	mov	r0, r6
 8006d78:	f000 f96e 	bl	8007058 <__swsetup_r>
 8006d7c:	b1c0      	cbz	r0, 8006db0 <_vfiprintf_r+0x78>
 8006d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d80:	07dc      	lsls	r4, r3, #31
 8006d82:	d50e      	bpl.n	8006da2 <_vfiprintf_r+0x6a>
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	b01d      	add	sp, #116	; 0x74
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	4b7b      	ldr	r3, [pc, #492]	; (8006f7c <_vfiprintf_r+0x244>)
 8006d90:	429d      	cmp	r5, r3
 8006d92:	d101      	bne.n	8006d98 <_vfiprintf_r+0x60>
 8006d94:	68b5      	ldr	r5, [r6, #8]
 8006d96:	e7df      	b.n	8006d58 <_vfiprintf_r+0x20>
 8006d98:	4b79      	ldr	r3, [pc, #484]	; (8006f80 <_vfiprintf_r+0x248>)
 8006d9a:	429d      	cmp	r5, r3
 8006d9c:	bf08      	it	eq
 8006d9e:	68f5      	ldreq	r5, [r6, #12]
 8006da0:	e7da      	b.n	8006d58 <_vfiprintf_r+0x20>
 8006da2:	89ab      	ldrh	r3, [r5, #12]
 8006da4:	0598      	lsls	r0, r3, #22
 8006da6:	d4ed      	bmi.n	8006d84 <_vfiprintf_r+0x4c>
 8006da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006daa:	f000 fb80 	bl	80074ae <__retarget_lock_release_recursive>
 8006dae:	e7e9      	b.n	8006d84 <_vfiprintf_r+0x4c>
 8006db0:	2300      	movs	r3, #0
 8006db2:	9309      	str	r3, [sp, #36]	; 0x24
 8006db4:	2320      	movs	r3, #32
 8006db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dba:	2330      	movs	r3, #48	; 0x30
 8006dbc:	f04f 0901 	mov.w	r9, #1
 8006dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dc4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f84 <_vfiprintf_r+0x24c>
 8006dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dcc:	4623      	mov	r3, r4
 8006dce:	469a      	mov	sl, r3
 8006dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd4:	b10a      	cbz	r2, 8006dda <_vfiprintf_r+0xa2>
 8006dd6:	2a25      	cmp	r2, #37	; 0x25
 8006dd8:	d1f9      	bne.n	8006dce <_vfiprintf_r+0x96>
 8006dda:	ebba 0b04 	subs.w	fp, sl, r4
 8006dde:	d00b      	beq.n	8006df8 <_vfiprintf_r+0xc0>
 8006de0:	465b      	mov	r3, fp
 8006de2:	4622      	mov	r2, r4
 8006de4:	4629      	mov	r1, r5
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7ff ff93 	bl	8006d12 <__sfputs_r>
 8006dec:	3001      	adds	r0, #1
 8006dee:	f000 80aa 	beq.w	8006f46 <_vfiprintf_r+0x20e>
 8006df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df4:	445a      	add	r2, fp
 8006df6:	9209      	str	r2, [sp, #36]	; 0x24
 8006df8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80a2 	beq.w	8006f46 <_vfiprintf_r+0x20e>
 8006e02:	2300      	movs	r3, #0
 8006e04:	f04f 32ff 	mov.w	r2, #4294967295
 8006e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e0c:	f10a 0a01 	add.w	sl, sl, #1
 8006e10:	9304      	str	r3, [sp, #16]
 8006e12:	9307      	str	r3, [sp, #28]
 8006e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e18:	931a      	str	r3, [sp, #104]	; 0x68
 8006e1a:	4654      	mov	r4, sl
 8006e1c:	2205      	movs	r2, #5
 8006e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e22:	4858      	ldr	r0, [pc, #352]	; (8006f84 <_vfiprintf_r+0x24c>)
 8006e24:	f7ff fa82 	bl	800632c <memchr>
 8006e28:	9a04      	ldr	r2, [sp, #16]
 8006e2a:	b9d8      	cbnz	r0, 8006e64 <_vfiprintf_r+0x12c>
 8006e2c:	06d1      	lsls	r1, r2, #27
 8006e2e:	bf44      	itt	mi
 8006e30:	2320      	movmi	r3, #32
 8006e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e36:	0713      	lsls	r3, r2, #28
 8006e38:	bf44      	itt	mi
 8006e3a:	232b      	movmi	r3, #43	; 0x2b
 8006e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e40:	f89a 3000 	ldrb.w	r3, [sl]
 8006e44:	2b2a      	cmp	r3, #42	; 0x2a
 8006e46:	d015      	beq.n	8006e74 <_vfiprintf_r+0x13c>
 8006e48:	4654      	mov	r4, sl
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f04f 0c0a 	mov.w	ip, #10
 8006e50:	9a07      	ldr	r2, [sp, #28]
 8006e52:	4621      	mov	r1, r4
 8006e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e58:	3b30      	subs	r3, #48	; 0x30
 8006e5a:	2b09      	cmp	r3, #9
 8006e5c:	d94e      	bls.n	8006efc <_vfiprintf_r+0x1c4>
 8006e5e:	b1b0      	cbz	r0, 8006e8e <_vfiprintf_r+0x156>
 8006e60:	9207      	str	r2, [sp, #28]
 8006e62:	e014      	b.n	8006e8e <_vfiprintf_r+0x156>
 8006e64:	eba0 0308 	sub.w	r3, r0, r8
 8006e68:	fa09 f303 	lsl.w	r3, r9, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	46a2      	mov	sl, r4
 8006e70:	9304      	str	r3, [sp, #16]
 8006e72:	e7d2      	b.n	8006e1a <_vfiprintf_r+0xe2>
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	1d19      	adds	r1, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	9103      	str	r1, [sp, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bfbb      	ittet	lt
 8006e80:	425b      	neglt	r3, r3
 8006e82:	f042 0202 	orrlt.w	r2, r2, #2
 8006e86:	9307      	strge	r3, [sp, #28]
 8006e88:	9307      	strlt	r3, [sp, #28]
 8006e8a:	bfb8      	it	lt
 8006e8c:	9204      	strlt	r2, [sp, #16]
 8006e8e:	7823      	ldrb	r3, [r4, #0]
 8006e90:	2b2e      	cmp	r3, #46	; 0x2e
 8006e92:	d10c      	bne.n	8006eae <_vfiprintf_r+0x176>
 8006e94:	7863      	ldrb	r3, [r4, #1]
 8006e96:	2b2a      	cmp	r3, #42	; 0x2a
 8006e98:	d135      	bne.n	8006f06 <_vfiprintf_r+0x1ce>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	3402      	adds	r4, #2
 8006e9e:	1d1a      	adds	r2, r3, #4
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	9203      	str	r2, [sp, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	bfb8      	it	lt
 8006ea8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eac:	9305      	str	r3, [sp, #20]
 8006eae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f88 <_vfiprintf_r+0x250>
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	7821      	ldrb	r1, [r4, #0]
 8006eb8:	f7ff fa38 	bl	800632c <memchr>
 8006ebc:	b140      	cbz	r0, 8006ed0 <_vfiprintf_r+0x198>
 8006ebe:	2340      	movs	r3, #64	; 0x40
 8006ec0:	eba0 000a 	sub.w	r0, r0, sl
 8006ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	3401      	adds	r4, #1
 8006ecc:	4303      	orrs	r3, r0
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed4:	2206      	movs	r2, #6
 8006ed6:	482d      	ldr	r0, [pc, #180]	; (8006f8c <_vfiprintf_r+0x254>)
 8006ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006edc:	f7ff fa26 	bl	800632c <memchr>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d03f      	beq.n	8006f64 <_vfiprintf_r+0x22c>
 8006ee4:	4b2a      	ldr	r3, [pc, #168]	; (8006f90 <_vfiprintf_r+0x258>)
 8006ee6:	bb1b      	cbnz	r3, 8006f30 <_vfiprintf_r+0x1f8>
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	3307      	adds	r3, #7
 8006eec:	f023 0307 	bic.w	r3, r3, #7
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	9303      	str	r3, [sp, #12]
 8006ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef6:	443b      	add	r3, r7
 8006ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8006efa:	e767      	b.n	8006dcc <_vfiprintf_r+0x94>
 8006efc:	460c      	mov	r4, r1
 8006efe:	2001      	movs	r0, #1
 8006f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f04:	e7a5      	b.n	8006e52 <_vfiprintf_r+0x11a>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f04f 0c0a 	mov.w	ip, #10
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	3401      	adds	r4, #1
 8006f10:	9305      	str	r3, [sp, #20]
 8006f12:	4620      	mov	r0, r4
 8006f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f18:	3a30      	subs	r2, #48	; 0x30
 8006f1a:	2a09      	cmp	r2, #9
 8006f1c:	d903      	bls.n	8006f26 <_vfiprintf_r+0x1ee>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0c5      	beq.n	8006eae <_vfiprintf_r+0x176>
 8006f22:	9105      	str	r1, [sp, #20]
 8006f24:	e7c3      	b.n	8006eae <_vfiprintf_r+0x176>
 8006f26:	4604      	mov	r4, r0
 8006f28:	2301      	movs	r3, #1
 8006f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f2e:	e7f0      	b.n	8006f12 <_vfiprintf_r+0x1da>
 8006f30:	ab03      	add	r3, sp, #12
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	462a      	mov	r2, r5
 8006f36:	4630      	mov	r0, r6
 8006f38:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <_vfiprintf_r+0x25c>)
 8006f3a:	a904      	add	r1, sp, #16
 8006f3c:	f7fd ffac 	bl	8004e98 <_printf_float>
 8006f40:	4607      	mov	r7, r0
 8006f42:	1c78      	adds	r0, r7, #1
 8006f44:	d1d6      	bne.n	8006ef4 <_vfiprintf_r+0x1bc>
 8006f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f48:	07d9      	lsls	r1, r3, #31
 8006f4a:	d405      	bmi.n	8006f58 <_vfiprintf_r+0x220>
 8006f4c:	89ab      	ldrh	r3, [r5, #12]
 8006f4e:	059a      	lsls	r2, r3, #22
 8006f50:	d402      	bmi.n	8006f58 <_vfiprintf_r+0x220>
 8006f52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f54:	f000 faab 	bl	80074ae <__retarget_lock_release_recursive>
 8006f58:	89ab      	ldrh	r3, [r5, #12]
 8006f5a:	065b      	lsls	r3, r3, #25
 8006f5c:	f53f af12 	bmi.w	8006d84 <_vfiprintf_r+0x4c>
 8006f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f62:	e711      	b.n	8006d88 <_vfiprintf_r+0x50>
 8006f64:	ab03      	add	r3, sp, #12
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <_vfiprintf_r+0x25c>)
 8006f6e:	a904      	add	r1, sp, #16
 8006f70:	f7fe fa2e 	bl	80053d0 <_printf_i>
 8006f74:	e7e4      	b.n	8006f40 <_vfiprintf_r+0x208>
 8006f76:	bf00      	nop
 8006f78:	08007e5c 	.word	0x08007e5c
 8006f7c:	08007e7c 	.word	0x08007e7c
 8006f80:	08007e3c 	.word	0x08007e3c
 8006f84:	08007d2a 	.word	0x08007d2a
 8006f88:	08007d30 	.word	0x08007d30
 8006f8c:	08007d34 	.word	0x08007d34
 8006f90:	08004e99 	.word	0x08004e99
 8006f94:	08006d13 	.word	0x08006d13

08006f98 <__swbuf_r>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	460e      	mov	r6, r1
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b118      	cbz	r0, 8006faa <__swbuf_r+0x12>
 8006fa2:	6983      	ldr	r3, [r0, #24]
 8006fa4:	b90b      	cbnz	r3, 8006faa <__swbuf_r+0x12>
 8006fa6:	f000 f9e3 	bl	8007370 <__sinit>
 8006faa:	4b21      	ldr	r3, [pc, #132]	; (8007030 <__swbuf_r+0x98>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	d12b      	bne.n	8007008 <__swbuf_r+0x70>
 8006fb0:	686c      	ldr	r4, [r5, #4]
 8006fb2:	69a3      	ldr	r3, [r4, #24]
 8006fb4:	60a3      	str	r3, [r4, #8]
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	071a      	lsls	r2, r3, #28
 8006fba:	d52f      	bpl.n	800701c <__swbuf_r+0x84>
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	b36b      	cbz	r3, 800701c <__swbuf_r+0x84>
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	6820      	ldr	r0, [r4, #0]
 8006fc4:	b2f6      	uxtb	r6, r6
 8006fc6:	1ac0      	subs	r0, r0, r3
 8006fc8:	6963      	ldr	r3, [r4, #20]
 8006fca:	4637      	mov	r7, r6
 8006fcc:	4283      	cmp	r3, r0
 8006fce:	dc04      	bgt.n	8006fda <__swbuf_r+0x42>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 f938 	bl	8007248 <_fflush_r>
 8006fd8:	bb30      	cbnz	r0, 8007028 <__swbuf_r+0x90>
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	3001      	adds	r0, #1
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	60a3      	str	r3, [r4, #8]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	6022      	str	r2, [r4, #0]
 8006fe8:	701e      	strb	r6, [r3, #0]
 8006fea:	6963      	ldr	r3, [r4, #20]
 8006fec:	4283      	cmp	r3, r0
 8006fee:	d004      	beq.n	8006ffa <__swbuf_r+0x62>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	07db      	lsls	r3, r3, #31
 8006ff4:	d506      	bpl.n	8007004 <__swbuf_r+0x6c>
 8006ff6:	2e0a      	cmp	r6, #10
 8006ff8:	d104      	bne.n	8007004 <__swbuf_r+0x6c>
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f000 f923 	bl	8007248 <_fflush_r>
 8007002:	b988      	cbnz	r0, 8007028 <__swbuf_r+0x90>
 8007004:	4638      	mov	r0, r7
 8007006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <__swbuf_r+0x9c>)
 800700a:	429c      	cmp	r4, r3
 800700c:	d101      	bne.n	8007012 <__swbuf_r+0x7a>
 800700e:	68ac      	ldr	r4, [r5, #8]
 8007010:	e7cf      	b.n	8006fb2 <__swbuf_r+0x1a>
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <__swbuf_r+0xa0>)
 8007014:	429c      	cmp	r4, r3
 8007016:	bf08      	it	eq
 8007018:	68ec      	ldreq	r4, [r5, #12]
 800701a:	e7ca      	b.n	8006fb2 <__swbuf_r+0x1a>
 800701c:	4621      	mov	r1, r4
 800701e:	4628      	mov	r0, r5
 8007020:	f000 f81a 	bl	8007058 <__swsetup_r>
 8007024:	2800      	cmp	r0, #0
 8007026:	d0cb      	beq.n	8006fc0 <__swbuf_r+0x28>
 8007028:	f04f 37ff 	mov.w	r7, #4294967295
 800702c:	e7ea      	b.n	8007004 <__swbuf_r+0x6c>
 800702e:	bf00      	nop
 8007030:	08007e5c 	.word	0x08007e5c
 8007034:	08007e7c 	.word	0x08007e7c
 8007038:	08007e3c 	.word	0x08007e3c

0800703c <__ascii_wctomb>:
 800703c:	4603      	mov	r3, r0
 800703e:	4608      	mov	r0, r1
 8007040:	b141      	cbz	r1, 8007054 <__ascii_wctomb+0x18>
 8007042:	2aff      	cmp	r2, #255	; 0xff
 8007044:	d904      	bls.n	8007050 <__ascii_wctomb+0x14>
 8007046:	228a      	movs	r2, #138	; 0x8a
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	4770      	bx	lr
 8007050:	2001      	movs	r0, #1
 8007052:	700a      	strb	r2, [r1, #0]
 8007054:	4770      	bx	lr
	...

08007058 <__swsetup_r>:
 8007058:	4b32      	ldr	r3, [pc, #200]	; (8007124 <__swsetup_r+0xcc>)
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	681d      	ldr	r5, [r3, #0]
 800705e:	4606      	mov	r6, r0
 8007060:	460c      	mov	r4, r1
 8007062:	b125      	cbz	r5, 800706e <__swsetup_r+0x16>
 8007064:	69ab      	ldr	r3, [r5, #24]
 8007066:	b913      	cbnz	r3, 800706e <__swsetup_r+0x16>
 8007068:	4628      	mov	r0, r5
 800706a:	f000 f981 	bl	8007370 <__sinit>
 800706e:	4b2e      	ldr	r3, [pc, #184]	; (8007128 <__swsetup_r+0xd0>)
 8007070:	429c      	cmp	r4, r3
 8007072:	d10f      	bne.n	8007094 <__swsetup_r+0x3c>
 8007074:	686c      	ldr	r4, [r5, #4]
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800707c:	0719      	lsls	r1, r3, #28
 800707e:	d42c      	bmi.n	80070da <__swsetup_r+0x82>
 8007080:	06dd      	lsls	r5, r3, #27
 8007082:	d411      	bmi.n	80070a8 <__swsetup_r+0x50>
 8007084:	2309      	movs	r3, #9
 8007086:	6033      	str	r3, [r6, #0]
 8007088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	e03e      	b.n	8007112 <__swsetup_r+0xba>
 8007094:	4b25      	ldr	r3, [pc, #148]	; (800712c <__swsetup_r+0xd4>)
 8007096:	429c      	cmp	r4, r3
 8007098:	d101      	bne.n	800709e <__swsetup_r+0x46>
 800709a:	68ac      	ldr	r4, [r5, #8]
 800709c:	e7eb      	b.n	8007076 <__swsetup_r+0x1e>
 800709e:	4b24      	ldr	r3, [pc, #144]	; (8007130 <__swsetup_r+0xd8>)
 80070a0:	429c      	cmp	r4, r3
 80070a2:	bf08      	it	eq
 80070a4:	68ec      	ldreq	r4, [r5, #12]
 80070a6:	e7e6      	b.n	8007076 <__swsetup_r+0x1e>
 80070a8:	0758      	lsls	r0, r3, #29
 80070aa:	d512      	bpl.n	80070d2 <__swsetup_r+0x7a>
 80070ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ae:	b141      	cbz	r1, 80070c2 <__swsetup_r+0x6a>
 80070b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070b4:	4299      	cmp	r1, r3
 80070b6:	d002      	beq.n	80070be <__swsetup_r+0x66>
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff fcdb 	bl	8006a74 <_free_r>
 80070be:	2300      	movs	r3, #0
 80070c0:	6363      	str	r3, [r4, #52]	; 0x34
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	2300      	movs	r3, #0
 80070cc:	6063      	str	r3, [r4, #4]
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f043 0308 	orr.w	r3, r3, #8
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	b94b      	cbnz	r3, 80070f2 <__swsetup_r+0x9a>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e8:	d003      	beq.n	80070f2 <__swsetup_r+0x9a>
 80070ea:	4621      	mov	r1, r4
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 fa05 	bl	80074fc <__smakebuf_r>
 80070f2:	89a0      	ldrh	r0, [r4, #12]
 80070f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f8:	f010 0301 	ands.w	r3, r0, #1
 80070fc:	d00a      	beq.n	8007114 <__swsetup_r+0xbc>
 80070fe:	2300      	movs	r3, #0
 8007100:	60a3      	str	r3, [r4, #8]
 8007102:	6963      	ldr	r3, [r4, #20]
 8007104:	425b      	negs	r3, r3
 8007106:	61a3      	str	r3, [r4, #24]
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	b943      	cbnz	r3, 800711e <__swsetup_r+0xc6>
 800710c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007110:	d1ba      	bne.n	8007088 <__swsetup_r+0x30>
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	0781      	lsls	r1, r0, #30
 8007116:	bf58      	it	pl
 8007118:	6963      	ldrpl	r3, [r4, #20]
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	e7f4      	b.n	8007108 <__swsetup_r+0xb0>
 800711e:	2000      	movs	r0, #0
 8007120:	e7f7      	b.n	8007112 <__swsetup_r+0xba>
 8007122:	bf00      	nop
 8007124:	2000000c 	.word	0x2000000c
 8007128:	08007e5c 	.word	0x08007e5c
 800712c:	08007e7c 	.word	0x08007e7c
 8007130:	08007e3c 	.word	0x08007e3c

08007134 <abort>:
 8007134:	2006      	movs	r0, #6
 8007136:	b508      	push	{r3, lr}
 8007138:	f000 fa48 	bl	80075cc <raise>
 800713c:	2001      	movs	r0, #1
 800713e:	f7fa ff7a 	bl	8002036 <_exit>
	...

08007144 <__sflush_r>:
 8007144:	898a      	ldrh	r2, [r1, #12]
 8007146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007148:	4605      	mov	r5, r0
 800714a:	0710      	lsls	r0, r2, #28
 800714c:	460c      	mov	r4, r1
 800714e:	d457      	bmi.n	8007200 <__sflush_r+0xbc>
 8007150:	684b      	ldr	r3, [r1, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dc04      	bgt.n	8007160 <__sflush_r+0x1c>
 8007156:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc01      	bgt.n	8007160 <__sflush_r+0x1c>
 800715c:	2000      	movs	r0, #0
 800715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007162:	2e00      	cmp	r6, #0
 8007164:	d0fa      	beq.n	800715c <__sflush_r+0x18>
 8007166:	2300      	movs	r3, #0
 8007168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800716c:	682f      	ldr	r7, [r5, #0]
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	d032      	beq.n	80071d8 <__sflush_r+0x94>
 8007172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	075a      	lsls	r2, r3, #29
 8007178:	d505      	bpl.n	8007186 <__sflush_r+0x42>
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	1ac0      	subs	r0, r0, r3
 800717e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007180:	b10b      	cbz	r3, 8007186 <__sflush_r+0x42>
 8007182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007184:	1ac0      	subs	r0, r0, r3
 8007186:	2300      	movs	r3, #0
 8007188:	4602      	mov	r2, r0
 800718a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800718c:	4628      	mov	r0, r5
 800718e:	6a21      	ldr	r1, [r4, #32]
 8007190:	47b0      	blx	r6
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	d106      	bne.n	80071a6 <__sflush_r+0x62>
 8007198:	6829      	ldr	r1, [r5, #0]
 800719a:	291d      	cmp	r1, #29
 800719c:	d82c      	bhi.n	80071f8 <__sflush_r+0xb4>
 800719e:	4a29      	ldr	r2, [pc, #164]	; (8007244 <__sflush_r+0x100>)
 80071a0:	40ca      	lsrs	r2, r1
 80071a2:	07d6      	lsls	r6, r2, #31
 80071a4:	d528      	bpl.n	80071f8 <__sflush_r+0xb4>
 80071a6:	2200      	movs	r2, #0
 80071a8:	6062      	str	r2, [r4, #4]
 80071aa:	6922      	ldr	r2, [r4, #16]
 80071ac:	04d9      	lsls	r1, r3, #19
 80071ae:	6022      	str	r2, [r4, #0]
 80071b0:	d504      	bpl.n	80071bc <__sflush_r+0x78>
 80071b2:	1c42      	adds	r2, r0, #1
 80071b4:	d101      	bne.n	80071ba <__sflush_r+0x76>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	b903      	cbnz	r3, 80071bc <__sflush_r+0x78>
 80071ba:	6560      	str	r0, [r4, #84]	; 0x54
 80071bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071be:	602f      	str	r7, [r5, #0]
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d0cb      	beq.n	800715c <__sflush_r+0x18>
 80071c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071c8:	4299      	cmp	r1, r3
 80071ca:	d002      	beq.n	80071d2 <__sflush_r+0x8e>
 80071cc:	4628      	mov	r0, r5
 80071ce:	f7ff fc51 	bl	8006a74 <_free_r>
 80071d2:	2000      	movs	r0, #0
 80071d4:	6360      	str	r0, [r4, #52]	; 0x34
 80071d6:	e7c2      	b.n	800715e <__sflush_r+0x1a>
 80071d8:	6a21      	ldr	r1, [r4, #32]
 80071da:	2301      	movs	r3, #1
 80071dc:	4628      	mov	r0, r5
 80071de:	47b0      	blx	r6
 80071e0:	1c41      	adds	r1, r0, #1
 80071e2:	d1c7      	bne.n	8007174 <__sflush_r+0x30>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0c4      	beq.n	8007174 <__sflush_r+0x30>
 80071ea:	2b1d      	cmp	r3, #29
 80071ec:	d001      	beq.n	80071f2 <__sflush_r+0xae>
 80071ee:	2b16      	cmp	r3, #22
 80071f0:	d101      	bne.n	80071f6 <__sflush_r+0xb2>
 80071f2:	602f      	str	r7, [r5, #0]
 80071f4:	e7b2      	b.n	800715c <__sflush_r+0x18>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	e7ae      	b.n	800715e <__sflush_r+0x1a>
 8007200:	690f      	ldr	r7, [r1, #16]
 8007202:	2f00      	cmp	r7, #0
 8007204:	d0aa      	beq.n	800715c <__sflush_r+0x18>
 8007206:	0793      	lsls	r3, r2, #30
 8007208:	bf18      	it	ne
 800720a:	2300      	movne	r3, #0
 800720c:	680e      	ldr	r6, [r1, #0]
 800720e:	bf08      	it	eq
 8007210:	694b      	ldreq	r3, [r1, #20]
 8007212:	1bf6      	subs	r6, r6, r7
 8007214:	600f      	str	r7, [r1, #0]
 8007216:	608b      	str	r3, [r1, #8]
 8007218:	2e00      	cmp	r6, #0
 800721a:	dd9f      	ble.n	800715c <__sflush_r+0x18>
 800721c:	4633      	mov	r3, r6
 800721e:	463a      	mov	r2, r7
 8007220:	4628      	mov	r0, r5
 8007222:	6a21      	ldr	r1, [r4, #32]
 8007224:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007228:	47e0      	blx	ip
 800722a:	2800      	cmp	r0, #0
 800722c:	dc06      	bgt.n	800723c <__sflush_r+0xf8>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	e790      	b.n	800715e <__sflush_r+0x1a>
 800723c:	4407      	add	r7, r0
 800723e:	1a36      	subs	r6, r6, r0
 8007240:	e7ea      	b.n	8007218 <__sflush_r+0xd4>
 8007242:	bf00      	nop
 8007244:	20400001 	.word	0x20400001

08007248 <_fflush_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	b913      	cbnz	r3, 8007258 <_fflush_r+0x10>
 8007252:	2500      	movs	r5, #0
 8007254:	4628      	mov	r0, r5
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	b118      	cbz	r0, 8007262 <_fflush_r+0x1a>
 800725a:	6983      	ldr	r3, [r0, #24]
 800725c:	b90b      	cbnz	r3, 8007262 <_fflush_r+0x1a>
 800725e:	f000 f887 	bl	8007370 <__sinit>
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <_fflush_r+0x6c>)
 8007264:	429c      	cmp	r4, r3
 8007266:	d11b      	bne.n	80072a0 <_fflush_r+0x58>
 8007268:	686c      	ldr	r4, [r5, #4]
 800726a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0ef      	beq.n	8007252 <_fflush_r+0xa>
 8007272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007274:	07d0      	lsls	r0, r2, #31
 8007276:	d404      	bmi.n	8007282 <_fflush_r+0x3a>
 8007278:	0599      	lsls	r1, r3, #22
 800727a:	d402      	bmi.n	8007282 <_fflush_r+0x3a>
 800727c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800727e:	f000 f915 	bl	80074ac <__retarget_lock_acquire_recursive>
 8007282:	4628      	mov	r0, r5
 8007284:	4621      	mov	r1, r4
 8007286:	f7ff ff5d 	bl	8007144 <__sflush_r>
 800728a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800728c:	4605      	mov	r5, r0
 800728e:	07da      	lsls	r2, r3, #31
 8007290:	d4e0      	bmi.n	8007254 <_fflush_r+0xc>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	059b      	lsls	r3, r3, #22
 8007296:	d4dd      	bmi.n	8007254 <_fflush_r+0xc>
 8007298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800729a:	f000 f908 	bl	80074ae <__retarget_lock_release_recursive>
 800729e:	e7d9      	b.n	8007254 <_fflush_r+0xc>
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <_fflush_r+0x70>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d101      	bne.n	80072aa <_fflush_r+0x62>
 80072a6:	68ac      	ldr	r4, [r5, #8]
 80072a8:	e7df      	b.n	800726a <_fflush_r+0x22>
 80072aa:	4b04      	ldr	r3, [pc, #16]	; (80072bc <_fflush_r+0x74>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	bf08      	it	eq
 80072b0:	68ec      	ldreq	r4, [r5, #12]
 80072b2:	e7da      	b.n	800726a <_fflush_r+0x22>
 80072b4:	08007e5c 	.word	0x08007e5c
 80072b8:	08007e7c 	.word	0x08007e7c
 80072bc:	08007e3c 	.word	0x08007e3c

080072c0 <std>:
 80072c0:	2300      	movs	r3, #0
 80072c2:	b510      	push	{r4, lr}
 80072c4:	4604      	mov	r4, r0
 80072c6:	e9c0 3300 	strd	r3, r3, [r0]
 80072ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ce:	6083      	str	r3, [r0, #8]
 80072d0:	8181      	strh	r1, [r0, #12]
 80072d2:	6643      	str	r3, [r0, #100]	; 0x64
 80072d4:	81c2      	strh	r2, [r0, #14]
 80072d6:	6183      	str	r3, [r0, #24]
 80072d8:	4619      	mov	r1, r3
 80072da:	2208      	movs	r2, #8
 80072dc:	305c      	adds	r0, #92	; 0x5c
 80072de:	f7fd fd35 	bl	8004d4c <memset>
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <std+0x38>)
 80072e4:	6224      	str	r4, [r4, #32]
 80072e6:	6263      	str	r3, [r4, #36]	; 0x24
 80072e8:	4b04      	ldr	r3, [pc, #16]	; (80072fc <std+0x3c>)
 80072ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80072ec:	4b04      	ldr	r3, [pc, #16]	; (8007300 <std+0x40>)
 80072ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <std+0x44>)
 80072f2:	6323      	str	r3, [r4, #48]	; 0x30
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	bf00      	nop
 80072f8:	08007605 	.word	0x08007605
 80072fc:	08007627 	.word	0x08007627
 8007300:	0800765f 	.word	0x0800765f
 8007304:	08007683 	.word	0x08007683

08007308 <_cleanup_r>:
 8007308:	4901      	ldr	r1, [pc, #4]	; (8007310 <_cleanup_r+0x8>)
 800730a:	f000 b8af 	b.w	800746c <_fwalk_reent>
 800730e:	bf00      	nop
 8007310:	08007249 	.word	0x08007249

08007314 <__sfmoreglue>:
 8007314:	2268      	movs	r2, #104	; 0x68
 8007316:	b570      	push	{r4, r5, r6, lr}
 8007318:	1e4d      	subs	r5, r1, #1
 800731a:	4355      	muls	r5, r2
 800731c:	460e      	mov	r6, r1
 800731e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007322:	f7ff fc0f 	bl	8006b44 <_malloc_r>
 8007326:	4604      	mov	r4, r0
 8007328:	b140      	cbz	r0, 800733c <__sfmoreglue+0x28>
 800732a:	2100      	movs	r1, #0
 800732c:	e9c0 1600 	strd	r1, r6, [r0]
 8007330:	300c      	adds	r0, #12
 8007332:	60a0      	str	r0, [r4, #8]
 8007334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007338:	f7fd fd08 	bl	8004d4c <memset>
 800733c:	4620      	mov	r0, r4
 800733e:	bd70      	pop	{r4, r5, r6, pc}

08007340 <__sfp_lock_acquire>:
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <__sfp_lock_acquire+0x8>)
 8007342:	f000 b8b3 	b.w	80074ac <__retarget_lock_acquire_recursive>
 8007346:	bf00      	nop
 8007348:	2000033d 	.word	0x2000033d

0800734c <__sfp_lock_release>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__sfp_lock_release+0x8>)
 800734e:	f000 b8ae 	b.w	80074ae <__retarget_lock_release_recursive>
 8007352:	bf00      	nop
 8007354:	2000033d 	.word	0x2000033d

08007358 <__sinit_lock_acquire>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__sinit_lock_acquire+0x8>)
 800735a:	f000 b8a7 	b.w	80074ac <__retarget_lock_acquire_recursive>
 800735e:	bf00      	nop
 8007360:	2000033e 	.word	0x2000033e

08007364 <__sinit_lock_release>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sinit_lock_release+0x8>)
 8007366:	f000 b8a2 	b.w	80074ae <__retarget_lock_release_recursive>
 800736a:	bf00      	nop
 800736c:	2000033e 	.word	0x2000033e

08007370 <__sinit>:
 8007370:	b510      	push	{r4, lr}
 8007372:	4604      	mov	r4, r0
 8007374:	f7ff fff0 	bl	8007358 <__sinit_lock_acquire>
 8007378:	69a3      	ldr	r3, [r4, #24]
 800737a:	b11b      	cbz	r3, 8007384 <__sinit+0x14>
 800737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007380:	f7ff bff0 	b.w	8007364 <__sinit_lock_release>
 8007384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007388:	6523      	str	r3, [r4, #80]	; 0x50
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <__sinit+0x68>)
 800738c:	4a13      	ldr	r2, [pc, #76]	; (80073dc <__sinit+0x6c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	62a2      	str	r2, [r4, #40]	; 0x28
 8007392:	42a3      	cmp	r3, r4
 8007394:	bf08      	it	eq
 8007396:	2301      	moveq	r3, #1
 8007398:	4620      	mov	r0, r4
 800739a:	bf08      	it	eq
 800739c:	61a3      	streq	r3, [r4, #24]
 800739e:	f000 f81f 	bl	80073e0 <__sfp>
 80073a2:	6060      	str	r0, [r4, #4]
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 f81b 	bl	80073e0 <__sfp>
 80073aa:	60a0      	str	r0, [r4, #8]
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 f817 	bl	80073e0 <__sfp>
 80073b2:	2200      	movs	r2, #0
 80073b4:	2104      	movs	r1, #4
 80073b6:	60e0      	str	r0, [r4, #12]
 80073b8:	6860      	ldr	r0, [r4, #4]
 80073ba:	f7ff ff81 	bl	80072c0 <std>
 80073be:	2201      	movs	r2, #1
 80073c0:	2109      	movs	r1, #9
 80073c2:	68a0      	ldr	r0, [r4, #8]
 80073c4:	f7ff ff7c 	bl	80072c0 <std>
 80073c8:	2202      	movs	r2, #2
 80073ca:	2112      	movs	r1, #18
 80073cc:	68e0      	ldr	r0, [r4, #12]
 80073ce:	f7ff ff77 	bl	80072c0 <std>
 80073d2:	2301      	movs	r3, #1
 80073d4:	61a3      	str	r3, [r4, #24]
 80073d6:	e7d1      	b.n	800737c <__sinit+0xc>
 80073d8:	08007ac0 	.word	0x08007ac0
 80073dc:	08007309 	.word	0x08007309

080073e0 <__sfp>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	4607      	mov	r7, r0
 80073e4:	f7ff ffac 	bl	8007340 <__sfp_lock_acquire>
 80073e8:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <__sfp+0x84>)
 80073ea:	681e      	ldr	r6, [r3, #0]
 80073ec:	69b3      	ldr	r3, [r6, #24]
 80073ee:	b913      	cbnz	r3, 80073f6 <__sfp+0x16>
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff ffbd 	bl	8007370 <__sinit>
 80073f6:	3648      	adds	r6, #72	; 0x48
 80073f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	d503      	bpl.n	8007408 <__sfp+0x28>
 8007400:	6833      	ldr	r3, [r6, #0]
 8007402:	b30b      	cbz	r3, 8007448 <__sfp+0x68>
 8007404:	6836      	ldr	r6, [r6, #0]
 8007406:	e7f7      	b.n	80073f8 <__sfp+0x18>
 8007408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800740c:	b9d5      	cbnz	r5, 8007444 <__sfp+0x64>
 800740e:	4b16      	ldr	r3, [pc, #88]	; (8007468 <__sfp+0x88>)
 8007410:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007414:	60e3      	str	r3, [r4, #12]
 8007416:	6665      	str	r5, [r4, #100]	; 0x64
 8007418:	f000 f847 	bl	80074aa <__retarget_lock_init_recursive>
 800741c:	f7ff ff96 	bl	800734c <__sfp_lock_release>
 8007420:	2208      	movs	r2, #8
 8007422:	4629      	mov	r1, r5
 8007424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800742c:	6025      	str	r5, [r4, #0]
 800742e:	61a5      	str	r5, [r4, #24]
 8007430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007434:	f7fd fc8a 	bl	8004d4c <memset>
 8007438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800743c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007440:	4620      	mov	r0, r4
 8007442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007444:	3468      	adds	r4, #104	; 0x68
 8007446:	e7d9      	b.n	80073fc <__sfp+0x1c>
 8007448:	2104      	movs	r1, #4
 800744a:	4638      	mov	r0, r7
 800744c:	f7ff ff62 	bl	8007314 <__sfmoreglue>
 8007450:	4604      	mov	r4, r0
 8007452:	6030      	str	r0, [r6, #0]
 8007454:	2800      	cmp	r0, #0
 8007456:	d1d5      	bne.n	8007404 <__sfp+0x24>
 8007458:	f7ff ff78 	bl	800734c <__sfp_lock_release>
 800745c:	230c      	movs	r3, #12
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	e7ee      	b.n	8007440 <__sfp+0x60>
 8007462:	bf00      	nop
 8007464:	08007ac0 	.word	0x08007ac0
 8007468:	ffff0001 	.word	0xffff0001

0800746c <_fwalk_reent>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4606      	mov	r6, r0
 8007472:	4688      	mov	r8, r1
 8007474:	2700      	movs	r7, #0
 8007476:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800747a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800747e:	f1b9 0901 	subs.w	r9, r9, #1
 8007482:	d505      	bpl.n	8007490 <_fwalk_reent+0x24>
 8007484:	6824      	ldr	r4, [r4, #0]
 8007486:	2c00      	cmp	r4, #0
 8007488:	d1f7      	bne.n	800747a <_fwalk_reent+0xe>
 800748a:	4638      	mov	r0, r7
 800748c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007490:	89ab      	ldrh	r3, [r5, #12]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d907      	bls.n	80074a6 <_fwalk_reent+0x3a>
 8007496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800749a:	3301      	adds	r3, #1
 800749c:	d003      	beq.n	80074a6 <_fwalk_reent+0x3a>
 800749e:	4629      	mov	r1, r5
 80074a0:	4630      	mov	r0, r6
 80074a2:	47c0      	blx	r8
 80074a4:	4307      	orrs	r7, r0
 80074a6:	3568      	adds	r5, #104	; 0x68
 80074a8:	e7e9      	b.n	800747e <_fwalk_reent+0x12>

080074aa <__retarget_lock_init_recursive>:
 80074aa:	4770      	bx	lr

080074ac <__retarget_lock_acquire_recursive>:
 80074ac:	4770      	bx	lr

080074ae <__retarget_lock_release_recursive>:
 80074ae:	4770      	bx	lr

080074b0 <__swhatbuf_r>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	460e      	mov	r6, r1
 80074b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b8:	4614      	mov	r4, r2
 80074ba:	2900      	cmp	r1, #0
 80074bc:	461d      	mov	r5, r3
 80074be:	b096      	sub	sp, #88	; 0x58
 80074c0:	da08      	bge.n	80074d4 <__swhatbuf_r+0x24>
 80074c2:	2200      	movs	r2, #0
 80074c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	061a      	lsls	r2, r3, #24
 80074cc:	d410      	bmi.n	80074f0 <__swhatbuf_r+0x40>
 80074ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074d2:	e00e      	b.n	80074f2 <__swhatbuf_r+0x42>
 80074d4:	466a      	mov	r2, sp
 80074d6:	f000 f8fb 	bl	80076d0 <_fstat_r>
 80074da:	2800      	cmp	r0, #0
 80074dc:	dbf1      	blt.n	80074c2 <__swhatbuf_r+0x12>
 80074de:	9a01      	ldr	r2, [sp, #4]
 80074e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074e8:	425a      	negs	r2, r3
 80074ea:	415a      	adcs	r2, r3
 80074ec:	602a      	str	r2, [r5, #0]
 80074ee:	e7ee      	b.n	80074ce <__swhatbuf_r+0x1e>
 80074f0:	2340      	movs	r3, #64	; 0x40
 80074f2:	2000      	movs	r0, #0
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	b016      	add	sp, #88	; 0x58
 80074f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080074fc <__smakebuf_r>:
 80074fc:	898b      	ldrh	r3, [r1, #12]
 80074fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007500:	079d      	lsls	r5, r3, #30
 8007502:	4606      	mov	r6, r0
 8007504:	460c      	mov	r4, r1
 8007506:	d507      	bpl.n	8007518 <__smakebuf_r+0x1c>
 8007508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	2301      	movs	r3, #1
 8007512:	6163      	str	r3, [r4, #20]
 8007514:	b002      	add	sp, #8
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	466a      	mov	r2, sp
 800751a:	ab01      	add	r3, sp, #4
 800751c:	f7ff ffc8 	bl	80074b0 <__swhatbuf_r>
 8007520:	9900      	ldr	r1, [sp, #0]
 8007522:	4605      	mov	r5, r0
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff fb0d 	bl	8006b44 <_malloc_r>
 800752a:	b948      	cbnz	r0, 8007540 <__smakebuf_r+0x44>
 800752c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007530:	059a      	lsls	r2, r3, #22
 8007532:	d4ef      	bmi.n	8007514 <__smakebuf_r+0x18>
 8007534:	f023 0303 	bic.w	r3, r3, #3
 8007538:	f043 0302 	orr.w	r3, r3, #2
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	e7e3      	b.n	8007508 <__smakebuf_r+0xc>
 8007540:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <__smakebuf_r+0x7c>)
 8007542:	62b3      	str	r3, [r6, #40]	; 0x28
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	6020      	str	r0, [r4, #0]
 8007548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	6120      	str	r0, [r4, #16]
 8007552:	6163      	str	r3, [r4, #20]
 8007554:	9b01      	ldr	r3, [sp, #4]
 8007556:	b15b      	cbz	r3, 8007570 <__smakebuf_r+0x74>
 8007558:	4630      	mov	r0, r6
 800755a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800755e:	f000 f8c9 	bl	80076f4 <_isatty_r>
 8007562:	b128      	cbz	r0, 8007570 <__smakebuf_r+0x74>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	f043 0301 	orr.w	r3, r3, #1
 800756e:	81a3      	strh	r3, [r4, #12]
 8007570:	89a0      	ldrh	r0, [r4, #12]
 8007572:	4305      	orrs	r5, r0
 8007574:	81a5      	strh	r5, [r4, #12]
 8007576:	e7cd      	b.n	8007514 <__smakebuf_r+0x18>
 8007578:	08007309 	.word	0x08007309

0800757c <_raise_r>:
 800757c:	291f      	cmp	r1, #31
 800757e:	b538      	push	{r3, r4, r5, lr}
 8007580:	4604      	mov	r4, r0
 8007582:	460d      	mov	r5, r1
 8007584:	d904      	bls.n	8007590 <_raise_r+0x14>
 8007586:	2316      	movs	r3, #22
 8007588:	6003      	str	r3, [r0, #0]
 800758a:	f04f 30ff 	mov.w	r0, #4294967295
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007592:	b112      	cbz	r2, 800759a <_raise_r+0x1e>
 8007594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007598:	b94b      	cbnz	r3, 80075ae <_raise_r+0x32>
 800759a:	4620      	mov	r0, r4
 800759c:	f000 f830 	bl	8007600 <_getpid_r>
 80075a0:	462a      	mov	r2, r5
 80075a2:	4601      	mov	r1, r0
 80075a4:	4620      	mov	r0, r4
 80075a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075aa:	f000 b817 	b.w	80075dc <_kill_r>
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d00a      	beq.n	80075c8 <_raise_r+0x4c>
 80075b2:	1c59      	adds	r1, r3, #1
 80075b4:	d103      	bne.n	80075be <_raise_r+0x42>
 80075b6:	2316      	movs	r3, #22
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	2001      	movs	r0, #1
 80075bc:	e7e7      	b.n	800758e <_raise_r+0x12>
 80075be:	2400      	movs	r4, #0
 80075c0:	4628      	mov	r0, r5
 80075c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075c6:	4798      	blx	r3
 80075c8:	2000      	movs	r0, #0
 80075ca:	e7e0      	b.n	800758e <_raise_r+0x12>

080075cc <raise>:
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <raise+0xc>)
 80075ce:	4601      	mov	r1, r0
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f7ff bfd3 	b.w	800757c <_raise_r>
 80075d6:	bf00      	nop
 80075d8:	2000000c 	.word	0x2000000c

080075dc <_kill_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	2300      	movs	r3, #0
 80075e0:	4d06      	ldr	r5, [pc, #24]	; (80075fc <_kill_r+0x20>)
 80075e2:	4604      	mov	r4, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	f7fa fd14 	bl	8002016 <_kill>
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	d102      	bne.n	80075f8 <_kill_r+0x1c>
 80075f2:	682b      	ldr	r3, [r5, #0]
 80075f4:	b103      	cbz	r3, 80075f8 <_kill_r+0x1c>
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
 80075fa:	bf00      	nop
 80075fc:	20000338 	.word	0x20000338

08007600 <_getpid_r>:
 8007600:	f7fa bd02 	b.w	8002008 <_getpid>

08007604 <__sread>:
 8007604:	b510      	push	{r4, lr}
 8007606:	460c      	mov	r4, r1
 8007608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760c:	f000 f894 	bl	8007738 <_read_r>
 8007610:	2800      	cmp	r0, #0
 8007612:	bfab      	itete	ge
 8007614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007616:	89a3      	ldrhlt	r3, [r4, #12]
 8007618:	181b      	addge	r3, r3, r0
 800761a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800761e:	bfac      	ite	ge
 8007620:	6563      	strge	r3, [r4, #84]	; 0x54
 8007622:	81a3      	strhlt	r3, [r4, #12]
 8007624:	bd10      	pop	{r4, pc}

08007626 <__swrite>:
 8007626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762a:	461f      	mov	r7, r3
 800762c:	898b      	ldrh	r3, [r1, #12]
 800762e:	4605      	mov	r5, r0
 8007630:	05db      	lsls	r3, r3, #23
 8007632:	460c      	mov	r4, r1
 8007634:	4616      	mov	r6, r2
 8007636:	d505      	bpl.n	8007644 <__swrite+0x1e>
 8007638:	2302      	movs	r3, #2
 800763a:	2200      	movs	r2, #0
 800763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007640:	f000 f868 	bl	8007714 <_lseek_r>
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	4632      	mov	r2, r6
 8007648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	4628      	mov	r0, r5
 8007650:	463b      	mov	r3, r7
 8007652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800765a:	f000 b817 	b.w	800768c <_write_r>

0800765e <__sseek>:
 800765e:	b510      	push	{r4, lr}
 8007660:	460c      	mov	r4, r1
 8007662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007666:	f000 f855 	bl	8007714 <_lseek_r>
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	bf15      	itete	ne
 8007670:	6560      	strne	r0, [r4, #84]	; 0x54
 8007672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800767a:	81a3      	strheq	r3, [r4, #12]
 800767c:	bf18      	it	ne
 800767e:	81a3      	strhne	r3, [r4, #12]
 8007680:	bd10      	pop	{r4, pc}

08007682 <__sclose>:
 8007682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007686:	f000 b813 	b.w	80076b0 <_close_r>
	...

0800768c <_write_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	2200      	movs	r2, #0
 8007696:	4d05      	ldr	r5, [pc, #20]	; (80076ac <_write_r+0x20>)
 8007698:	602a      	str	r2, [r5, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	f7fa fcf2 	bl	8002084 <_write>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_write_r+0x1e>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_write_r+0x1e>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	20000338 	.word	0x20000338

080076b0 <_close_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	2300      	movs	r3, #0
 80076b4:	4d05      	ldr	r5, [pc, #20]	; (80076cc <_close_r+0x1c>)
 80076b6:	4604      	mov	r4, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	602b      	str	r3, [r5, #0]
 80076bc:	f7fa fcfe 	bl	80020bc <_close>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_close_r+0x1a>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_close_r+0x1a>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	20000338 	.word	0x20000338

080076d0 <_fstat_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	2300      	movs	r3, #0
 80076d4:	4d06      	ldr	r5, [pc, #24]	; (80076f0 <_fstat_r+0x20>)
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	4611      	mov	r1, r2
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	f7fa fcf8 	bl	80020d2 <_fstat>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d102      	bne.n	80076ec <_fstat_r+0x1c>
 80076e6:	682b      	ldr	r3, [r5, #0]
 80076e8:	b103      	cbz	r3, 80076ec <_fstat_r+0x1c>
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	bd38      	pop	{r3, r4, r5, pc}
 80076ee:	bf00      	nop
 80076f0:	20000338 	.word	0x20000338

080076f4 <_isatty_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	2300      	movs	r3, #0
 80076f8:	4d05      	ldr	r5, [pc, #20]	; (8007710 <_isatty_r+0x1c>)
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	602b      	str	r3, [r5, #0]
 8007700:	f7fa fcf6 	bl	80020f0 <_isatty>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_isatty_r+0x1a>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_isatty_r+0x1a>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	20000338 	.word	0x20000338

08007714 <_lseek_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	4611      	mov	r1, r2
 800771c:	2200      	movs	r2, #0
 800771e:	4d05      	ldr	r5, [pc, #20]	; (8007734 <_lseek_r+0x20>)
 8007720:	602a      	str	r2, [r5, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f7fa fcee 	bl	8002104 <_lseek>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_lseek_r+0x1e>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_lseek_r+0x1e>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	20000338 	.word	0x20000338

08007738 <_read_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	2200      	movs	r2, #0
 8007742:	4d05      	ldr	r5, [pc, #20]	; (8007758 <_read_r+0x20>)
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7fa fc7f 	bl	800204a <_read>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_read_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_read_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	20000338 	.word	0x20000338

0800775c <_init>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	bf00      	nop
 8007760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007762:	bc08      	pop	{r3}
 8007764:	469e      	mov	lr, r3
 8007766:	4770      	bx	lr

08007768 <_fini>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr
