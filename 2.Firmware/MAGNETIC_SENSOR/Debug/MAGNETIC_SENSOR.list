
MAGNETIC_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc8  08004fc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004fc8  08004fc8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fc8  08004fc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08005040  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08005040  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c96  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba4  00000000  00000000  00029d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019083  00000000  00000000  0002cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cac0  00000000  00000000  00045c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853d8  00000000  00000000  000526eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7ac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b54  00000000  00000000  000d7b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f04 	.word	0x08004f04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004f04 	.word	0x08004f04

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>:
 *  Created on: Nov 24, 2022
 *      Author: hemingshan
 */
#include "magnetic_sensor.hpp"

AS5600::AS5600(I2C_HandleTypeDef &hi2c_, UART_HandleTypeDef &huart_)
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	226c      	movs	r2, #108	; 0x6c
 800016c:	701a      	strb	r2, [r3, #0]
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	2200      	movs	r2, #0
 8000172:	705a      	strb	r2, [r3, #1]
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	2201      	movs	r2, #1
 8000178:	709a      	strb	r2, [r3, #2]
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	2202      	movs	r2, #2
 800017e:	70da      	strb	r2, [r3, #3]
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	2203      	movs	r2, #3
 8000184:	711a      	strb	r2, [r3, #4]
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	2204      	movs	r2, #4
 800018a:	715a      	strb	r2, [r3, #5]
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	2205      	movs	r2, #5
 8000190:	719a      	strb	r2, [r3, #6]
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	2206      	movs	r2, #6
 8000196:	71da      	strb	r2, [r3, #7]
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2207      	movs	r2, #7
 800019c:	721a      	strb	r2, [r3, #8]
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	2208      	movs	r2, #8
 80001a2:	725a      	strb	r2, [r3, #9]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	220c      	movs	r2, #12
 80001a8:	729a      	strb	r2, [r3, #10]
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	220d      	movs	r2, #13
 80001ae:	72da      	strb	r2, [r3, #11]
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	220e      	movs	r2, #14
 80001b4:	731a      	strb	r2, [r3, #12]
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	220f      	movs	r2, #15
 80001ba:	735a      	strb	r2, [r3, #13]
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	220b      	movs	r2, #11
 80001c0:	739a      	strb	r2, [r3, #14]
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	221a      	movs	r2, #26
 80001c6:	73da      	strb	r2, [r3, #15]
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	221b      	movs	r2, #27
 80001cc:	741a      	strb	r2, [r3, #16]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	221c      	movs	r2, #28
 80001d2:	745a      	strb	r2, [r3, #17]
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	749a      	strb	r2, [r3, #18]
{
	/* I2C1 Initialization*/
	hi2c = hi2c_;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	68ba      	ldr	r2, [r7, #8]
 80001de:	3314      	adds	r3, #20
 80001e0:	4611      	mov	r1, r2
 80001e2:	2254      	movs	r2, #84	; 0x54
 80001e4:	4618      	mov	r0, r3
 80001e6:	f004 fa0b 	bl	8004600 <memcpy>

	hi2c.Instance = I2C1;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	4a30      	ldr	r2, [pc, #192]	; (80002b0 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x154>)
 80001ee:	615a      	str	r2, [r3, #20]
	hi2c.Init.ClockSpeed = 100000;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a30      	ldr	r2, [pc, #192]	; (80002b4 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x158>)
 80001f4:	619a      	str	r2, [r3, #24]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2200      	movs	r2, #0
 80001fa:	61da      	str	r2, [r3, #28]
	hi2c.Init.OwnAddress1 = 0;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	2200      	movs	r2, #0
 8000200:	621a      	str	r2, [r3, #32]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000208:	625a      	str	r2, [r3, #36]	; 0x24
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2200      	movs	r2, #0
 800020e:	629a      	str	r2, [r3, #40]	; 0x28
	hi2c.Init.OwnAddress2 = 0;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2200      	movs	r2, #0
 8000214:	62da      	str	r2, [r3, #44]	; 0x2c
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	2200      	movs	r2, #0
 800021a:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2200      	movs	r2, #0
 8000220:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_I2C_Init(&hi2c) != HAL_OK)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3314      	adds	r3, #20
 8000226:	4618      	mov	r0, r3
 8000228:	f001 f8ea 	bl	8001400 <HAL_I2C_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	bf14      	ite	ne
 8000232:	2301      	movne	r3, #1
 8000234:	2300      	moveq	r3, #0
 8000236:	b2db      	uxtb	r3, r3
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0xe4>
	{
		Error_Handler();
 800023c:	f000 fa22 	bl	8000684 <Error_Handler>
	}

	/* UART1 Initialization*/
	huart = huart_;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	3368      	adds	r3, #104	; 0x68
 8000246:	4611      	mov	r1, r2
 8000248:	2244      	movs	r2, #68	; 0x44
 800024a:	4618      	mov	r0, r3
 800024c:	f004 f9d8 	bl	8004600 <memcpy>

	huart.Instance = USART1;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x15c>)
 8000254:	669a      	str	r2, [r3, #104]	; 0x68
	huart.Init.BaudRate = 115200;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800025c:	66da      	str	r2, [r3, #108]	; 0x6c
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2200      	movs	r2, #0
 8000262:	671a      	str	r2, [r3, #112]	; 0x70
	huart.Init.StopBits = UART_STOPBITS_1;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2200      	movs	r2, #0
 8000268:	675a      	str	r2, [r3, #116]	; 0x74
	huart.Init.Parity = UART_PARITY_NONE;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	2200      	movs	r2, #0
 800026e:	679a      	str	r2, [r3, #120]	; 0x78
	huart.Init.Mode = UART_MODE_TX_RX;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	220c      	movs	r2, #12
 8000274:	67da      	str	r2, [r3, #124]	; 0x7c
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	2200      	movs	r2, #0
 800027a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2200      	movs	r2, #0
 8000282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if (HAL_UART_Init(&huart) != HAL_OK)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3368      	adds	r3, #104	; 0x68
 800028a:	4618      	mov	r0, r3
 800028c:	f003 ffd6 	bl	800423c <HAL_UART_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	bf14      	ite	ne
 8000296:	2301      	movne	r3, #1
 8000298:	2300      	moveq	r3, #0
 800029a:	b2db      	uxtb	r3, r3
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x148>
	{
		Error_Handler();
 80002a0:	f000 f9f0 	bl	8000684 <Error_Handler>
	}
}
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	4618      	mov	r0, r3
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40005400 	.word	0x40005400
 80002b4:	000186a0 	.word	0x000186a0
 80002b8:	40013800 	.word	0x40013800

080002bc <_ZN6AS56007ReadRegEh>:
	HAL_I2C_Master_Transmit(&hi2c,(AS5600_ADDR),&Data,1,10);
	HAL_I2C_Mem_Write(&hi2c,(AS5600_ADDR),Reg,1,&Data,1,100);
}

uint8_t AS5600::ReadReg(uint8_t Reg)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af04      	add	r7, sp, #16
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	70fb      	strb	r3, [r7, #3]
	uint8_t DataRead = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c,(AS5600_ADDR),Reg,1,&DataRead,1,100);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f103 0014 	add.w	r0, r3, #20
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	b299      	uxth	r1, r3
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	b29a      	uxth	r2, r3
 80002dc:	2364      	movs	r3, #100	; 0x64
 80002de:	9302      	str	r3, [sp, #8]
 80002e0:	2301      	movs	r3, #1
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	f107 030f 	add.w	r3, r7, #15
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2301      	movs	r3, #1
 80002ec:	f001 f9cc 	bl	8001688 <HAL_I2C_Mem_Read>

	return DataRead;
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <_ZN6AS56008GetAngleEv>:
uint16_t AS5600::GetAngle(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b087      	sub	sp, #28
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uint8_t buf[12];
//	Data[0] = ReadReg(ANGLE_L);
//	Data[1] = (ReadReg(ANGLE_H) << 8);
	int Data = (ReadReg(ANGLE_L)|(ReadReg(ANGLE_H) << 8));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7b5b      	ldrb	r3, [r3, #13]
 8000308:	4619      	mov	r1, r3
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f7ff ffd6 	bl	80002bc <_ZN6AS56007ReadRegEh>
 8000310:	4603      	mov	r3, r0
 8000312:	461c      	mov	r4, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7b1b      	ldrb	r3, [r3, #12]
 8000318:	4619      	mov	r1, r3
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f7ff ffce 	bl	80002bc <_ZN6AS56007ReadRegEh>
 8000320:	4603      	mov	r3, r0
 8000322:	021b      	lsls	r3, r3, #8
 8000324:	4323      	orrs	r3, r4
 8000326:	617b      	str	r3, [r7, #20]
	sprintf((char*)buf,"%d\r\n",(ReadReg(ANGLE_L)|(ReadReg(ANGLE_H) << 8)));
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	7b5b      	ldrb	r3, [r3, #13]
 800032c:	4619      	mov	r1, r3
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f7ff ffc4 	bl	80002bc <_ZN6AS56007ReadRegEh>
 8000334:	4603      	mov	r3, r0
 8000336:	461c      	mov	r4, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7b1b      	ldrb	r3, [r3, #12]
 800033c:	4619      	mov	r1, r3
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ffbc 	bl	80002bc <_ZN6AS56007ReadRegEh>
 8000344:	4603      	mov	r3, r0
 8000346:	021b      	lsls	r3, r3, #8
 8000348:	ea44 0203 	orr.w	r2, r4, r3
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	4911      	ldr	r1, [pc, #68]	; (8000398 <_ZN6AS56008GetAngleEv+0x9c>)
 8000352:	4618      	mov	r0, r3
 8000354:	f004 f96a 	bl	800462c <siprintf>
	sprintf((char*)buf,"%d\r\n",Data);
 8000358:	f107 0308 	add.w	r3, r7, #8
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	490e      	ldr	r1, [pc, #56]	; (8000398 <_ZN6AS56008GetAngleEv+0x9c>)
 8000360:	4618      	mov	r0, r3
 8000362:	f004 f963 	bl	800462c <siprintf>
	HAL_UART_Transmit(&huart, buf,  strlen((char*)buf), HAL_MAX_DELAY);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff feeb 	bl	800014c <strlen>
 8000376:	4603      	mov	r3, r0
 8000378:	b29a      	uxth	r2, r3
 800037a:	f107 0108 	add.w	r1, r7, #8
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	4620      	mov	r0, r4
 8000384:	f003 ffa7 	bl	80042d6 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000388:	2064      	movs	r0, #100	; 0x64
 800038a:	f000 fba1 	bl	8000ad0 <HAL_Delay>
//	return Data;
	return 1;
 800038e:	2301      	movs	r3, #1
}
 8000390:	4618      	mov	r0, r3
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd90      	pop	{r4, r7, pc}
 8000398:	08004f1c 	.word	0x08004f1c

0800039c <_ZN6AS56009GetStatusEv>:

uint8_t AS5600::GetStatus(void)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b087      	sub	sp, #28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
#if DEBUG
	uint8_t buf[12];
	sprintf((char*)buf,"%x\r\n",(ReadReg(STATUS) & 0x38));
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7b9b      	ldrb	r3, [r3, #14]
 80003a8:	4619      	mov	r1, r3
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ff86 	bl	80002bc <_ZN6AS56007ReadRegEh>
 80003b0:	4603      	mov	r3, r0
 80003b2:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	4929      	ldr	r1, [pc, #164]	; (8000460 <_ZN6AS56009GetStatusEv+0xc4>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f004 f935 	bl	800462c <siprintf>
	if ((ReadReg(STATUS) & 0x38) == 0x20)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	7b9b      	ldrb	r3, [r3, #14]
 80003c6:	4619      	mov	r1, r3
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ff77 	bl	80002bc <_ZN6AS56007ReadRegEh>
 80003ce:	4603      	mov	r3, r0
 80003d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80003d4:	2b20      	cmp	r3, #32
 80003d6:	bf0c      	ite	eq
 80003d8:	2301      	moveq	r3, #1
 80003da:	2300      	movne	r3, #0
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d01a      	beq.n	8000418 <_ZN6AS56009GetStatusEv+0x7c>
	{
		strcpy((char*)buf, "Magnet!\r\n");
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <_ZN6AS56009GetStatusEv+0xc8>)
 80003e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80003ea:	c303      	stmia	r3!, {r0, r1}
 80003ec:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff fea7 	bl	800014c <strlen>
 80003fe:	4603      	mov	r3, r0
 8000400:	b29a      	uxth	r2, r3
 8000402:	f107 010c 	add.w	r1, r7, #12
 8000406:	f04f 33ff 	mov.w	r3, #4294967295
 800040a:	4620      	mov	r0, r4
 800040c:	f003 ff63 	bl	80042d6 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000410:	2064      	movs	r0, #100	; 0x64
 8000412:	f000 fb5d 	bl	8000ad0 <HAL_Delay>
 8000416:	e014      	b.n	8000442 <_ZN6AS56009GetStatusEv+0xa6>
	}
	else{
		strcpy((char*)buf, "NO Magnet!\r\n");
 8000418:	f107 030c 	add.w	r3, r7, #12
 800041c:	4a12      	ldr	r2, [pc, #72]	; (8000468 <_ZN6AS56009GetStatusEv+0xcc>)
 800041e:	461c      	mov	r4, r3
 8000420:	4613      	mov	r3, r2
 8000422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000424:	c407      	stmia	r4!, {r0, r1, r2}
 8000426:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart, buf, 2, HAL_MAX_DELAY);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800042e:	f107 010c 	add.w	r1, r7, #12
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
 8000436:	2202      	movs	r2, #2
 8000438:	f003 ff4d 	bl	80042d6 <HAL_UART_Transmit>
		HAL_Delay(100);
 800043c:	2064      	movs	r0, #100	; 0x64
 800043e:	f000 fb47 	bl	8000ad0 <HAL_Delay>
	}
#endif
	return ReadReg(STATUS) & 0x38;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	7b9b      	ldrb	r3, [r3, #14]
 8000446:	4619      	mov	r1, r3
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff37 	bl	80002bc <_ZN6AS56007ReadRegEh>
 800044e:	4603      	mov	r3, r0
 8000450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000454:	b2db      	uxtb	r3, r3
}
 8000456:	4618      	mov	r0, r3
 8000458:	371c      	adds	r7, #28
 800045a:	46bd      	mov	sp, r7
 800045c:	bd90      	pop	{r4, r7, pc}
 800045e:	bf00      	nop
 8000460:	08004f24 	.word	0x08004f24
 8000464:	08004f2c 	.word	0x08004f2c
 8000468:	08004f38 	.word	0x08004f38

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0ac      	sub	sp, #176	; 0xb0
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000472:	f000 facb 	bl	8000a0c <HAL_Init>

  /* USER CODE BEGIN Init */
  AS5600 as5600(hi2c1, huart1);
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <main+0x44>)
 800047a:	490e      	ldr	r1, [pc, #56]	; (80004b4 <main+0x48>)
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fe6d 	bl	800015c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f819 	bl	80004b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 f8db 	bl	8000640 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800048a:	f000 f8bb 	bl	8000604 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 800048e:	f000 f859 	bl	8000544 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 8000492:	f000 f889 	bl	80005a8 <_ZL19MX_USART1_UART_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	as5600.GetStatus();
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff7f 	bl	800039c <_ZN6AS56009GetStatusEv>
	as5600.GetAngle();
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff2b 	bl	80002fc <_ZN6AS56008GetAngleEv>
//	  int Data = 100;
//	  sprintf((char*)buf,"%d\r\n",Data);
//	  HAL_UART_Transmit(&huart1, buf,  strlen((char*)buf), HAL_MAX_DELAY);
	HAL_Delay(100);
 80004a6:	2064      	movs	r0, #100	; 0x64
 80004a8:	f000 fb12 	bl	8000ad0 <HAL_Delay>
	as5600.GetStatus();
 80004ac:	e7f3      	b.n	8000496 <main+0x2a>
 80004ae:	bf00      	nop
 80004b0:	20000124 	.word	0x20000124
 80004b4:	2000008c 	.word	0x2000008c

080004b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b090      	sub	sp, #64	; 0x40
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0318 	add.w	r3, r7, #24
 80004c2:	2228      	movs	r2, #40	; 0x28
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 f8a8 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e2:	2310      	movs	r3, #16
 80004e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	f107 0318 	add.w	r3, r7, #24
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fa8a 	bl	8003a08 <HAL_RCC_OscConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	bf14      	ite	ne
 80004fa:	2301      	movne	r3, #1
 80004fc:	2300      	moveq	r3, #0
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8000504:	f000 f8be 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	230f      	movs	r3, #15
 800050a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f003 fcf3 	bl	8003f0c <HAL_RCC_ClockConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	bf14      	ite	ne
 800052c:	2301      	movne	r3, #1
 800052e:	2300      	moveq	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8000536:	f000 f8a5 	bl	8000684 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3740      	adds	r7, #64	; 0x40
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800054a:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <_ZL12MX_I2C1_Initv+0x60>)
 800054c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000550:	f242 7210 	movw	r2, #10000	; 0x2710
 8000554:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000564:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000568:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000578:	2200      	movs	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800057e:	2200      	movs	r2, #0
 8000580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000584:	f000 ff3c 	bl	8001400 <HAL_I2C_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <_ZL12MX_I2C1_Initv+0x58>
  {
    Error_Handler();
 8000598:	f000 f874 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	40005400 	.word	0x40005400

080005a8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <_ZL19MX_USART1_UART_Initv+0x58>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005e0:	f003 fe2c 	bl	800423c <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf14      	ite	ne
 80005ea:	2301      	movne	r3, #1
 80005ec:	2300      	moveq	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80005f4:	f000 f846 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000124 	.word	0x20000124
 8000600:	40013800 	.word	0x40013800

08000604 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <_ZL11MX_DMA_Initv+0x38>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <_ZL11MX_DMA_Initv+0x38>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <_ZL11MX_DMA_Initv+0x38>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2011      	movs	r0, #17
 8000628:	f000 fb4d 	bl	8000cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800062c:	2011      	movs	r0, #17
 800062e:	f000 fb66 	bl	8000cfe <HAL_NVIC_EnableIRQ>

}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <_ZL12MX_GPIO_Initv+0x40>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <_ZL12MX_GPIO_Initv+0x40>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <_ZL12MX_GPIO_Initv+0x40>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <_ZL12MX_GPIO_Initv+0x40>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <_ZL12MX_GPIO_Initv+0x40>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <_ZL12MX_GPIO_Initv+0x40>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_MspInit+0x5c>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_MspInit+0x5c>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_MspInit+0x5c>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x5c>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_MspInit+0x5c>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <HAL_MspInit+0x5c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_MspInit+0x60>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_MspInit+0x60>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010000 	.word	0x40010000

080006f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <HAL_I2C_MspInit+0xfc>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d169      	bne.n	80007e8 <HAL_I2C_MspInit+0xf4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <HAL_I2C_MspInit+0x100>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a36      	ldr	r2, [pc, #216]	; (80007f4 <HAL_I2C_MspInit+0x100>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <HAL_I2C_MspInit+0x100>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000732:	2312      	movs	r3, #18
 8000734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	2303      	movs	r3, #3
 8000738:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	482d      	ldr	r0, [pc, #180]	; (80007f8 <HAL_I2C_MspInit+0x104>)
 8000742:	f000 fcd9 	bl	80010f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <HAL_I2C_MspInit+0x108>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <HAL_I2C_MspInit+0x108>)
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000762:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <HAL_I2C_MspInit+0x100>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a23      	ldr	r2, [pc, #140]	; (80007f4 <HAL_I2C_MspInit+0x100>)
 8000768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <HAL_I2C_MspInit+0x100>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <HAL_I2C_MspInit+0x110>)
 800077e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 800079a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800079e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 80007a2:	2220      	movs	r2, #32
 80007a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 80007ae:	f000 fac1 	bl	8000d34 <HAL_DMA_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 80007b8:	f7ff ff64 	bl	8000684 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 80007c0:	639a      	str	r2, [r3, #56]	; 0x38
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_I2C_MspInit+0x10c>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	201f      	movs	r0, #31
 80007ce:	f000 fa7a 	bl	8000cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007d2:	201f      	movs	r0, #31
 80007d4:	f000 fa93 	bl	8000cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	2020      	movs	r0, #32
 80007de:	f000 fa72 	bl	8000cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007e2:	2020      	movs	r0, #32
 80007e4:	f000 fa8b 	bl	8000cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010c00 	.word	0x40010c00
 80007fc:	40010000 	.word	0x40010000
 8000800:	200000e0 	.word	0x200000e0
 8000804:	40020080 	.word	0x40020080

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a22      	ldr	r2, [pc, #136]	; (80008ac <HAL_UART_MspInit+0xa4>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d13d      	bne.n	80008a4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <HAL_UART_MspInit+0xa8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <HAL_UART_MspInit+0xa8>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <HAL_UART_MspInit+0xa8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0xa8>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <HAL_UART_MspInit+0xa8>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0xa8>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <HAL_UART_MspInit+0xac>)
 800086c:	f000 fc44 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <HAL_UART_MspInit+0xac>)
 8000884:	f000 fc38 	bl	80010f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_UART_MspInit+0xb0>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_UART_MspInit+0xb0>)
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	40010000 	.word	0x40010000

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000902:	f000 f8c9 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <DMA1_Channel7_IRQHandler+0x10>)
 8000912:	f000 fadf 	bl	8000ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000e0 	.word	0x200000e0

08000920 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <I2C1_EV_IRQHandler+0x10>)
 8000926:	f001 f917 	bl	8001b58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000008c 	.word	0x2000008c

08000934 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <I2C1_ER_IRQHandler+0x10>)
 800093a:	f001 fa7e 	bl	8001e3a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <_sbrk+0x5c>)
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <_sbrk+0x60>)
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <_sbrk+0x64>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <_sbrk+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d207      	bcs.n	8000988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000978:	f003 fe18 	bl	80045ac <__errno>
 800097c:	4603      	mov	r3, r0
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	e009      	b.n	800099c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <_sbrk+0x64>)
 8000998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20005000 	.word	0x20005000
 80009a8:	00000400 	.word	0x00000400
 80009ac:	20000168 	.word	0x20000168
 80009b0:	20000180 	.word	0x20000180

080009b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009e6:	f7ff ffe5 	bl	80009b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f003 fde5 	bl	80045b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ee:	f7ff fd3d 	bl	800046c <main>
  bx lr
 80009f2:	4770      	bx	lr
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009fc:	08004fd0 	.word	0x08004fd0
  ldr r2, =_sbss
 8000a00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a04:	20000180 	.word	0x20000180

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x28>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x28>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f947 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fe32 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f95f 	bl	8000d1a <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 f927 	bl	8000cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	2000016c 	.word	0x2000016c

08000abc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	2000016c 	.word	0x2000016c

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff0 	bl	8000abc <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffe0 	bl	8000abc <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4906      	ldr	r1, [pc, #24]	; (8000bb0 <__NVIC_EnableIRQ+0x34>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff90 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff2d 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff42 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff90 	bl	8000c08 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5f 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff35 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffa2 	bl	8000c6c <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e043      	b.n	8000dd2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <HAL_DMA_Init+0xa8>)
 8000d52:	4413      	add	r3, r2
 8000d54:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <HAL_DMA_Init+0xac>)
 8000d56:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	009a      	lsls	r2, r3, #2
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <HAL_DMA_Init+0xb0>)
 8000d66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	bffdfff8 	.word	0xbffdfff8
 8000de0:	cccccccd 	.word	0xcccccccd
 8000de4:	40020000 	.word	0x40020000

08000de8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d005      	beq.n	8000e0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2204      	movs	r2, #4
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e051      	b.n	8000eae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 020e 	bic.w	r2, r2, #14
 8000e18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0201 	bic.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_DMA_Abort_IT+0xd0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d029      	beq.n	8000e88 <HAL_DMA_Abort_IT+0xa0>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <HAL_DMA_Abort_IT+0xd4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d022      	beq.n	8000e84 <HAL_DMA_Abort_IT+0x9c>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_DMA_Abort_IT+0xd8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d01a      	beq.n	8000e7e <HAL_DMA_Abort_IT+0x96>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_DMA_Abort_IT+0xdc>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d012      	beq.n	8000e78 <HAL_DMA_Abort_IT+0x90>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_DMA_Abort_IT+0xe0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00a      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x8a>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_DMA_Abort_IT+0xe4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d102      	bne.n	8000e6c <HAL_DMA_Abort_IT+0x84>
 8000e66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e6a:	e00e      	b.n	8000e8a <HAL_DMA_Abort_IT+0xa2>
 8000e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e70:	e00b      	b.n	8000e8a <HAL_DMA_Abort_IT+0xa2>
 8000e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e76:	e008      	b.n	8000e8a <HAL_DMA_Abort_IT+0xa2>
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	e005      	b.n	8000e8a <HAL_DMA_Abort_IT+0xa2>
 8000e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e82:	e002      	b.n	8000e8a <HAL_DMA_Abort_IT+0xa2>
 8000e84:	2310      	movs	r3, #16
 8000e86:	e000      	b.n	8000e8a <HAL_DMA_Abort_IT+0xa2>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_DMA_Abort_IT+0xe8>)
 8000e8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	4798      	blx	r3
    } 
  }
  return status;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40020008 	.word	0x40020008
 8000ebc:	4002001c 	.word	0x4002001c
 8000ec0:	40020030 	.word	0x40020030
 8000ec4:	40020044 	.word	0x40020044
 8000ec8:	40020058 	.word	0x40020058
 8000ecc:	4002006c 	.word	0x4002006c
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d04f      	beq.n	8000f9c <HAL_DMA_IRQHandler+0xc8>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d04a      	beq.n	8000f9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d107      	bne.n	8000f24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0204 	bic.w	r2, r2, #4
 8000f22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a66      	ldr	r2, [pc, #408]	; (80010c4 <HAL_DMA_IRQHandler+0x1f0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d029      	beq.n	8000f82 <HAL_DMA_IRQHandler+0xae>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_DMA_IRQHandler+0x1f4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d022      	beq.n	8000f7e <HAL_DMA_IRQHandler+0xaa>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a63      	ldr	r2, [pc, #396]	; (80010cc <HAL_DMA_IRQHandler+0x1f8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01a      	beq.n	8000f78 <HAL_DMA_IRQHandler+0xa4>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a62      	ldr	r2, [pc, #392]	; (80010d0 <HAL_DMA_IRQHandler+0x1fc>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d012      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x9e>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a60      	ldr	r2, [pc, #384]	; (80010d4 <HAL_DMA_IRQHandler+0x200>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00a      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x98>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a5f      	ldr	r2, [pc, #380]	; (80010d8 <HAL_DMA_IRQHandler+0x204>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d102      	bne.n	8000f66 <HAL_DMA_IRQHandler+0x92>
 8000f60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f64:	e00e      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f6a:	e00b      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f70:	e008      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f76:	e005      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7c:	e002      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f7e:	2340      	movs	r3, #64	; 0x40
 8000f80:	e000      	b.n	8000f84 <HAL_DMA_IRQHandler+0xb0>
 8000f82:	2304      	movs	r3, #4
 8000f84:	4a55      	ldr	r2, [pc, #340]	; (80010dc <HAL_DMA_IRQHandler+0x208>)
 8000f86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 8094 	beq.w	80010ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f9a:	e08e      	b.n	80010ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d056      	beq.n	800105a <HAL_DMA_IRQHandler+0x186>
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d051      	beq.n	800105a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0320 	and.w	r3, r3, #32
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 020a 	bic.w	r2, r2, #10
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <HAL_DMA_IRQHandler+0x1f0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d029      	beq.n	800103a <HAL_DMA_IRQHandler+0x166>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <HAL_DMA_IRQHandler+0x1f4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d022      	beq.n	8001036 <HAL_DMA_IRQHandler+0x162>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a35      	ldr	r2, [pc, #212]	; (80010cc <HAL_DMA_IRQHandler+0x1f8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01a      	beq.n	8001030 <HAL_DMA_IRQHandler+0x15c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d012      	beq.n	800102a <HAL_DMA_IRQHandler+0x156>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_DMA_IRQHandler+0x200>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00a      	beq.n	8001024 <HAL_DMA_IRQHandler+0x150>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_DMA_IRQHandler+0x204>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d102      	bne.n	800101e <HAL_DMA_IRQHandler+0x14a>
 8001018:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800101c:	e00e      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 800101e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001022:	e00b      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 8001024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001028:	e008      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 800102a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102e:	e005      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 8001030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001034:	e002      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 8001036:	2320      	movs	r3, #32
 8001038:	e000      	b.n	800103c <HAL_DMA_IRQHandler+0x168>
 800103a:	2302      	movs	r3, #2
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <HAL_DMA_IRQHandler+0x208>)
 800103e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	2b00      	cmp	r3, #0
 800104e:	d034      	beq.n	80010ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001058:	e02f      	b.n	80010ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	2208      	movs	r2, #8
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d028      	beq.n	80010bc <HAL_DMA_IRQHandler+0x1e8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d023      	beq.n	80010bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 020e 	bic.w	r2, r2, #14
 8001082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4798      	blx	r3
    }
  }
  return;
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
}
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40020008 	.word	0x40020008
 80010c8:	4002001c 	.word	0x4002001c
 80010cc:	40020030 	.word	0x40020030
 80010d0:	40020044 	.word	0x40020044
 80010d4:	40020058 	.word	0x40020058
 80010d8:	4002006c 	.word	0x4002006c
 80010dc:	40020000 	.word	0x40020000

080010e0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e169      	b.n	80013e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800110c:	2201      	movs	r2, #1
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8158 	bne.w	80013da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4a9a      	ldr	r2, [pc, #616]	; (8001398 <HAL_GPIO_Init+0x2a0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d05e      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001134:	4a98      	ldr	r2, [pc, #608]	; (8001398 <HAL_GPIO_Init+0x2a0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d875      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800113a:	4a98      	ldr	r2, [pc, #608]	; (800139c <HAL_GPIO_Init+0x2a4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d058      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001140:	4a96      	ldr	r2, [pc, #600]	; (800139c <HAL_GPIO_Init+0x2a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d86f      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001146:	4a96      	ldr	r2, [pc, #600]	; (80013a0 <HAL_GPIO_Init+0x2a8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d052      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 800114c:	4a94      	ldr	r2, [pc, #592]	; (80013a0 <HAL_GPIO_Init+0x2a8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d869      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001152:	4a94      	ldr	r2, [pc, #592]	; (80013a4 <HAL_GPIO_Init+0x2ac>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d04c      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001158:	4a92      	ldr	r2, [pc, #584]	; (80013a4 <HAL_GPIO_Init+0x2ac>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d863      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800115e:	4a92      	ldr	r2, [pc, #584]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d046      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001164:	4a90      	ldr	r2, [pc, #576]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d85d      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d82a      	bhi.n	80011c4 <HAL_GPIO_Init+0xcc>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d859      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <HAL_GPIO_Init+0x80>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011df 	.word	0x080011df
 8001184:	08001221 	.word	0x08001221
 8001188:	08001227 	.word	0x08001227
 800118c:	08001227 	.word	0x08001227
 8001190:	08001227 	.word	0x08001227
 8001194:	08001227 	.word	0x08001227
 8001198:	08001227 	.word	0x08001227
 800119c:	08001227 	.word	0x08001227
 80011a0:	08001227 	.word	0x08001227
 80011a4:	08001227 	.word	0x08001227
 80011a8:	08001227 	.word	0x08001227
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001227 	.word	0x08001227
 80011b4:	08001227 	.word	0x08001227
 80011b8:	08001227 	.word	0x08001227
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	4a79      	ldr	r2, [pc, #484]	; (80013ac <HAL_GPIO_Init+0x2b4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ca:	e02c      	b.n	8001226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e029      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	3304      	adds	r3, #4
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e024      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	3308      	adds	r3, #8
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e01f      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	330c      	adds	r3, #12
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e01a      	b.n	8001228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e013      	b.n	8001228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	611a      	str	r2, [r3, #16]
          break;
 8001212:	e009      	b.n	8001228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	615a      	str	r2, [r3, #20]
          break;
 800121e:	e003      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x130>
          break;
 8001226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2bff      	cmp	r3, #255	; 0xff
 800122c:	d801      	bhi.n	8001232 <HAL_GPIO_Init+0x13a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_Init+0x13e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	d802      	bhi.n	8001244 <HAL_GPIO_Init+0x14c>
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x152>
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	3b08      	subs	r3, #8
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	210f      	movs	r1, #15
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	401a      	ands	r2, r3
 800125c:	6a39      	ldr	r1, [r7, #32]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	431a      	orrs	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80b1 	beq.w	80013da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HAL_GPIO_Init+0x2c0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d013      	beq.n	80012e4 <HAL_GPIO_Init+0x1ec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a3f      	ldr	r2, [pc, #252]	; (80013bc <HAL_GPIO_Init+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_GPIO_Init+0x1e8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a3e      	ldr	r2, [pc, #248]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a3d      	ldr	r2, [pc, #244]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x1e0>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012d8:	2304      	movs	r3, #4
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e4:	2300      	movs	r3, #0
 80012e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f6:	492f      	ldr	r1, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	492c      	ldr	r1, [pc, #176]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4928      	ldr	r1, [pc, #160]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4922      	ldr	r1, [pc, #136]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	491e      	ldr	r1, [pc, #120]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	4918      	ldr	r1, [pc, #96]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4914      	ldr	r1, [pc, #80]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d021      	beq.n	80013cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	490e      	ldr	r1, [pc, #56]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	60cb      	str	r3, [r1, #12]
 8001394:	e021      	b.n	80013da <HAL_GPIO_Init+0x2e2>
 8001396:	bf00      	nop
 8001398:	10320000 	.word	0x10320000
 800139c:	10310000 	.word	0x10310000
 80013a0:	10220000 	.word	0x10220000
 80013a4:	10210000 	.word	0x10210000
 80013a8:	10120000 	.word	0x10120000
 80013ac:	10110000 	.word	0x10110000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000
 80013b8:	40010800 	.word	0x40010800
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40011400 	.word	0x40011400
 80013c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_GPIO_Init+0x304>)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	4909      	ldr	r1, [pc, #36]	; (80013fc <HAL_GPIO_Init+0x304>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3301      	adds	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f47f ae8e 	bne.w	800110c <HAL_GPIO_Init+0x14>
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	372c      	adds	r7, #44	; 0x2c
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e12b      	b.n	800166a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff f964 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001464:	f002 fea4 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8001468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a81      	ldr	r2, [pc, #516]	; (8001674 <HAL_I2C_Init+0x274>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d807      	bhi.n	8001484 <HAL_I2C_Init+0x84>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a80      	ldr	r2, [pc, #512]	; (8001678 <HAL_I2C_Init+0x278>)
 8001478:	4293      	cmp	r3, r2
 800147a:	bf94      	ite	ls
 800147c:	2301      	movls	r3, #1
 800147e:	2300      	movhi	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e006      	b.n	8001492 <HAL_I2C_Init+0x92>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a7d      	ldr	r2, [pc, #500]	; (800167c <HAL_I2C_Init+0x27c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	bf94      	ite	ls
 800148c:	2301      	movls	r3, #1
 800148e:	2300      	movhi	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e0e7      	b.n	800166a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4a78      	ldr	r2, [pc, #480]	; (8001680 <HAL_I2C_Init+0x280>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9b      	lsrs	r3, r3, #18
 80014a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a6a      	ldr	r2, [pc, #424]	; (8001674 <HAL_I2C_Init+0x274>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d802      	bhi.n	80014d4 <HAL_I2C_Init+0xd4>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3301      	adds	r3, #1
 80014d2:	e009      	b.n	80014e8 <HAL_I2C_Init+0xe8>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4a69      	ldr	r2, [pc, #420]	; (8001684 <HAL_I2C_Init+0x284>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	3301      	adds	r3, #1
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	495c      	ldr	r1, [pc, #368]	; (8001674 <HAL_I2C_Init+0x274>)
 8001504:	428b      	cmp	r3, r1
 8001506:	d819      	bhi.n	800153c <HAL_I2C_Init+0x13c>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e59      	subs	r1, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fbb1 f3f3 	udiv	r3, r1, r3
 8001516:	1c59      	adds	r1, r3, #1
 8001518:	f640 73fc 	movw	r3, #4092	; 0xffc
 800151c:	400b      	ands	r3, r1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00a      	beq.n	8001538 <HAL_I2C_Init+0x138>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e59      	subs	r1, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	e051      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 8001538:	2304      	movs	r3, #4
 800153a:	e04f      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d111      	bne.n	8001568 <HAL_I2C_Init+0x168>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	440b      	add	r3, r1
 8001552:	fbb0 f3f3 	udiv	r3, r0, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	e012      	b.n	800158e <HAL_I2C_Init+0x18e>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	0099      	lsls	r1, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	fbb0 f3f3 	udiv	r3, r0, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Init+0x196>
 8001592:	2301      	movs	r3, #1
 8001594:	e022      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10e      	bne.n	80015bc <HAL_I2C_Init+0x1bc>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1e58      	subs	r0, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6859      	ldr	r1, [r3, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	0099      	lsls	r1, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	6809      	ldr	r1, [r1, #0]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800160a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6911      	ldr	r1, [r2, #16]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68d2      	ldr	r2, [r2, #12]
 8001616:	4311      	orrs	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	430b      	orrs	r3, r1
 800161e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2220      	movs	r2, #32
 8001656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	000186a0 	.word	0x000186a0
 8001678:	001e847f 	.word	0x001e847f
 800167c:	003d08ff 	.word	0x003d08ff
 8001680:	431bde83 	.word	0x431bde83
 8001684:	10624dd3 	.word	0x10624dd3

08001688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	461a      	mov	r2, r3
 8001696:	4603      	mov	r3, r0
 8001698:	817b      	strh	r3, [r7, #10]
 800169a:	460b      	mov	r3, r1
 800169c:	813b      	strh	r3, [r7, #8]
 800169e:	4613      	mov	r3, r2
 80016a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016a6:	f7ff fa09 	bl	8000abc <HAL_GetTick>
 80016aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	f040 8244 	bne.w	8001b42 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2319      	movs	r3, #25
 80016c0:	2201      	movs	r2, #1
 80016c2:	4982      	ldr	r1, [pc, #520]	; (80018cc <HAL_I2C_Mem_Read+0x244>)
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f001 ffb7 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
 80016d2:	e237      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_I2C_Mem_Read+0x5a>
 80016de:	2302      	movs	r3, #2
 80016e0:	e230      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d007      	beq.n	8001708 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2222      	movs	r2, #34	; 0x22
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4a62      	ldr	r2, [pc, #392]	; (80018d0 <HAL_I2C_Mem_Read+0x248>)
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800174a:	88f8      	ldrh	r0, [r7, #6]
 800174c:	893a      	ldrh	r2, [r7, #8]
 800174e:	8979      	ldrh	r1, [r7, #10]
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4603      	mov	r3, r0
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f001 fddc 	bl	8003318 <I2C_RequestMemoryRead>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e1ec      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	2b00      	cmp	r3, #0
 8001770:	d113      	bne.n	800179a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e1c0      	b.n	8001b1c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d11e      	bne.n	80017e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017b2:	b672      	cpsid	i
}
 80017b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017dc:	b662      	cpsie	i
}
 80017de:	e035      	b.n	800184c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d11e      	bne.n	8001826 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001820:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001822:	b662      	cpsie	i
}
 8001824:	e012      	b.n	800184c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001834:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800184c:	e166      	b.n	8001b1c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	2b03      	cmp	r3, #3
 8001854:	f200 811f 	bhi.w	8001a96 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	2b01      	cmp	r3, #1
 800185e:	d123      	bne.n	80018a8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001862:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f002 f831 	bl	80038cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e167      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018a6:	e139      	b.n	8001b1c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d152      	bne.n	8001956 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b6:	2200      	movs	r2, #0
 80018b8:	4906      	ldr	r1, [pc, #24]	; (80018d4 <HAL_I2C_Mem_Read+0x24c>)
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f001 febc 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e13c      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
 80018ca:	bf00      	nop
 80018cc:	00100002 	.word	0x00100002
 80018d0:	ffff0000 	.word	0xffff0000
 80018d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800191e:	b662      	cpsie	i
}
 8001920:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001954:	e0e2      	b.n	8001b1c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195c:	2200      	movs	r2, #0
 800195e:	497b      	ldr	r1, [pc, #492]	; (8001b4c <HAL_I2C_Mem_Read+0x4c4>)
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f001 fe69 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0e9      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800197e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80019b6:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <HAL_I2C_Mem_Read+0x4c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4a65      	ldr	r2, [pc, #404]	; (8001b54 <HAL_I2C_Mem_Read+0x4cc>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0a1a      	lsrs	r2, r3, #8
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00da      	lsls	r2, r3, #3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d118      	bne.n	8001a0e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f043 0220 	orr.w	r2, r3, #32
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80019fe:	b662      	cpsie	i
}
 8001a00:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e09a      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d1d9      	bne.n	80019d0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5e:	b662      	cpsie	i
}
 8001a60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a94:	e042      	b.n	8001b1c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f001 ff16 	bl	80038cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e04c      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d118      	bne.n	8001b1c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f47f ae94 	bne.w	800184e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	00010004 	.word	0x00010004
 8001b50:	20000000 	.word	0x20000000
 8001b54:	14f8b589 	.word	0x14f8b589

08001b58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d003      	beq.n	8001b90 <HAL_I2C_EV_IRQHandler+0x38>
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	f040 80c1 	bne.w	8001d12 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001bb0:	d003      	beq.n	8001bba <HAL_I2C_EV_IRQHandler+0x62>
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_EV_IRQHandler+0x66>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x68>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f000 8132 	beq.w	8001e2a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00c      	beq.n	8001bea <HAL_I2C_EV_IRQHandler+0x92>
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	0a5b      	lsrs	r3, r3, #9
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 fef9 	bl	80039d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fd77 	bl	80026d6 <I2C_Master_SB>
 8001be8:	e092      	b.n	8001d10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0xb2>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	0a5b      	lsrs	r3, r3, #9
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fdec 	bl	80027e0 <I2C_Master_ADD10>
 8001c08:	e082      	b.n	8001d10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_I2C_EV_IRQHandler+0xd2>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	0a5b      	lsrs	r3, r3, #9
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fe05 	bl	8002832 <I2C_Master_ADDR>
 8001c28:	e072      	b.n	8001d10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03b      	beq.n	8001cae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c44:	f000 80f3 	beq.w	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	09db      	lsrs	r3, r3, #7
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00f      	beq.n	8001c74 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	0a9b      	lsrs	r3, r3, #10
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d103      	bne.n	8001c74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f9f1 	bl	8002054 <I2C_MasterTransmit_TXE>
 8001c72:	e04d      	b.n	8001d10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80d6 	beq.w	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	0a5b      	lsrs	r3, r3, #9
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80cf 	beq.w	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	2b21      	cmp	r3, #33	; 0x21
 8001c94:	d103      	bne.n	8001c9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fa78 	bl	800218c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c9c:	e0c7      	b.n	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	f040 80c4 	bne.w	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fae6 	bl	8002278 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cac:	e0bf      	b.n	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cbc:	f000 80b7 	beq.w	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	099b      	lsrs	r3, r3, #6
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00f      	beq.n	8001cec <HAL_I2C_EV_IRQHandler+0x194>
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	0a9b      	lsrs	r3, r3, #10
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d009      	beq.n	8001cec <HAL_I2C_EV_IRQHandler+0x194>
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fb5b 	bl	80023a0 <I2C_MasterReceive_RXNE>
 8001cea:	e011      	b.n	8001d10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 809a 	beq.w	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	0a5b      	lsrs	r3, r3, #9
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8093 	beq.w	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fbfa 	bl	8002502 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d0e:	e08e      	b.n	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d10:	e08d      	b.n	8001e2e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e007      	b.n	8001d34 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d012      	beq.n	8001d66 <HAL_I2C_EV_IRQHandler+0x20e>
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	0a5b      	lsrs	r3, r3, #9
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00c      	beq.n	8001d66 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001d5c:	69b9      	ldr	r1, [r7, #24]
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 ffbe 	bl	8002ce0 <I2C_Slave_ADDR>
 8001d64:	e066      	b.n	8001e34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_I2C_EV_IRQHandler+0x22e>
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	0a5b      	lsrs	r3, r3, #9
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fff8 	bl	8002d74 <I2C_Slave_STOPF>
 8001d84:	e056      	b.n	8001e34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	2b21      	cmp	r3, #33	; 0x21
 8001d8a:	d002      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x23a>
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
 8001d8e:	2b29      	cmp	r3, #41	; 0x29
 8001d90:	d125      	bne.n	8001dde <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	09db      	lsrs	r3, r3, #7
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00f      	beq.n	8001dbe <HAL_I2C_EV_IRQHandler+0x266>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	0a9b      	lsrs	r3, r3, #10
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_I2C_EV_IRQHandler+0x266>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fed6 	bl	8002b68 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dbc:	e039      	b.n	8001e32 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d033      	beq.n	8001e32 <HAL_I2C_EV_IRQHandler+0x2da>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	0a5b      	lsrs	r3, r3, #9
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d02d      	beq.n	8001e32 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 ff03 	bl	8002be2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ddc:	e029      	b.n	8001e32 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00f      	beq.n	8001e0a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	0a9b      	lsrs	r3, r3, #10
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 ff0d 	bl	8002c22 <I2C_SlaveReceive_RXNE>
 8001e08:	e014      	b.n	8001e34 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00e      	beq.n	8001e34 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	0a5b      	lsrs	r3, r3, #9
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 ff3b 	bl	8002c9e <I2C_SlaveReceive_BTF>
 8001e28:	e004      	b.n	8001e34 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001e2a:	bf00      	nop
 8001e2c:	e002      	b.n	8001e34 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e32:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b08a      	sub	sp, #40	; 0x28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e5c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <HAL_I2C_ER_IRQHandler+0x5e>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d010      	beq.n	8001e98 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e86:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	0a5b      	lsrs	r3, r3, #9
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_I2C_ER_IRQHandler+0x88>
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f043 0302 	orr.w	r3, r3, #2
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001ec0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	0a9b      	lsrs	r3, r3, #10
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03f      	beq.n	8001f4e <HAL_I2C_ER_IRQHandler+0x114>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d039      	beq.n	8001f4e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8001eda:	7efb      	ldrb	r3, [r7, #27]
 8001edc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001ef4:	7ebb      	ldrb	r3, [r7, #26]
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d112      	bne.n	8001f20 <HAL_I2C_ER_IRQHandler+0xe6>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10f      	bne.n	8001f20 <HAL_I2C_ER_IRQHandler+0xe6>
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b21      	cmp	r3, #33	; 0x21
 8001f04:	d008      	beq.n	8001f18 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	2b29      	cmp	r3, #41	; 0x29
 8001f0a:	d005      	beq.n	8001f18 <HAL_I2C_ER_IRQHandler+0xde>
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	2b28      	cmp	r3, #40	; 0x28
 8001f10:	d106      	bne.n	8001f20 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b21      	cmp	r3, #33	; 0x21
 8001f16:	d103      	bne.n	8001f20 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 f85b 	bl	8002fd4 <I2C_Slave_AF>
 8001f1e:	e016      	b.n	8001f4e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f28:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f32:	7efb      	ldrb	r3, [r7, #27]
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d002      	beq.n	8001f3e <HAL_I2C_ER_IRQHandler+0x104>
 8001f38:	7efb      	ldrb	r3, [r7, #27]
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	0adb      	lsrs	r3, r3, #11
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00e      	beq.n	8001f78 <HAL_I2C_ER_IRQHandler+0x13e>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001f76:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f001 f892 	bl	80030b4 <I2C_ITError>
  }
}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
 8001fec:	4613      	mov	r3, r2
 8001fee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002062:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800206a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	2b00      	cmp	r3, #0
 8002078:	d150      	bne.n	800211c <I2C_MasterTransmit_TXE+0xc8>
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	2b21      	cmp	r3, #33	; 0x21
 800207e:	d14d      	bne.n	800211c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d01d      	beq.n	80020c2 <I2C_MasterTransmit_TXE+0x6e>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b20      	cmp	r3, #32
 800208a:	d01a      	beq.n	80020c2 <I2C_MasterTransmit_TXE+0x6e>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002092:	d016      	beq.n	80020c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2211      	movs	r2, #17
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff6c 	bl	8001f98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020c0:	e060      	b.n	8002184 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d107      	bne.n	800210c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff81 	bl	800200c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800210a:	e03b      	b.n	8002184 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff3f 	bl	8001f98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800211a:	e033      	b.n	8002184 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b21      	cmp	r3, #33	; 0x21
 8002120:	d005      	beq.n	800212e <I2C_MasterTransmit_TXE+0xda>
 8002122:	7bbb      	ldrb	r3, [r7, #14]
 8002124:	2b40      	cmp	r3, #64	; 0x40
 8002126:	d12d      	bne.n	8002184 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	2b22      	cmp	r3, #34	; 0x22
 800212c:	d12a      	bne.n	8002184 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d108      	bne.n	800214a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002146:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002148:	e01c      	b.n	8002184 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d103      	bne.n	800215e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f88e 	bl	8002278 <I2C_MemoryTransmit_TXE_BTF>
}
 800215c:	e012      	b.n	8002184 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002182:	e7ff      	b.n	8002184 <I2C_MasterTransmit_TXE+0x130>
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b21      	cmp	r3, #33	; 0x21
 80021a4:	d164      	bne.n	8002270 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021d4:	e04c      	b.n	8002270 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d01d      	beq.n	8002218 <I2C_MasterTransmit_BTF+0x8c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d01a      	beq.n	8002218 <I2C_MasterTransmit_BTF+0x8c>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021e8:	d016      	beq.n	8002218 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2211      	movs	r2, #17
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fec1 	bl	8001f98 <HAL_I2C_MasterTxCpltCallback>
}
 8002216:	e02b      	b.n	8002270 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002226:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d107      	bne.n	8002262 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fed6 	bl	800200c <HAL_I2C_MemTxCpltCallback>
}
 8002260:	e006      	b.n	8002270 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fe94 	bl	8001f98 <HAL_I2C_MasterTxCpltCallback>
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002286:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11d      	bne.n	80022cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10b      	bne.n	80022b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229c:	b2da      	uxtb	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80022ae:	e073      	b.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	121b      	asrs	r3, r3, #8
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022ca:	e065      	b.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d10b      	bne.n	80022ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022ea:	e055      	b.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d151      	bne.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	2b22      	cmp	r3, #34	; 0x22
 80022f8:	d10d      	bne.n	8002316 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002308:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002314:	e040      	b.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2b21      	cmp	r3, #33	; 0x21
 8002324:	d112      	bne.n	800234c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800234a:	e025      	b.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d120      	bne.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b21      	cmp	r3, #33	; 0x21
 800235a:	d11d      	bne.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800236a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fe3a 	bl	800200c <HAL_I2C_MemTxCpltCallback>
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b22      	cmp	r3, #34	; 0x22
 80023b2:	f040 80a2 	bne.w	80024fa <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d921      	bls.n	8002408 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	f040 8082 	bne.w	80024fa <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002406:	e078      	b.n	80024fa <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	2b02      	cmp	r3, #2
 800240e:	d074      	beq.n	80024fa <I2C_MasterReceive_RXNE+0x15a>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d002      	beq.n	800241c <I2C_MasterReceive_RXNE+0x7c>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d16e      	bne.n	80024fa <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f001 fa23 	bl	8003868 <I2C_WaitOnSTOPRequestThroughIT>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d142      	bne.n	80024ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002436:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002446:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d10a      	bne.n	8002498 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fdc4 	bl	800201e <HAL_I2C_MemRxCpltCallback>
}
 8002496:	e030      	b.n	80024fa <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2212      	movs	r2, #18
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fd7f 	bl	8001faa <HAL_I2C_MasterRxCpltCallback>
}
 80024ac:	e025      	b.n	80024fa <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fd9b 	bl	8002030 <HAL_I2C_ErrorCallback>
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b04      	cmp	r3, #4
 8002518:	d11b      	bne.n	8002552 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002528:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002550:	e0bd      	b.n	80026ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d129      	bne.n	80025b0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d00a      	beq.n	8002588 <I2C_MasterReceive_BTF+0x86>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d007      	beq.n	8002588 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025ae:	e08e      	b.n	80026ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d176      	bne.n	80026a8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d002      	beq.n	80025c6 <I2C_MasterReceive_BTF+0xc4>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d108      	bne.n	80025d8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e019      	b.n	800260c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d002      	beq.n	80025e4 <I2C_MasterReceive_BTF+0xe2>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d108      	bne.n	80025f6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e00a      	b.n	800260c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d007      	beq.n	800260c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002666:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d10a      	bne.n	8002692 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fcc7 	bl	800201e <HAL_I2C_MemRxCpltCallback>
}
 8002690:	e01d      	b.n	80026ce <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2212      	movs	r2, #18
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fc82 	bl	8001faa <HAL_I2C_MasterRxCpltCallback>
}
 80026a6:	e012      	b.n	80026ce <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d117      	bne.n	800271a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002702:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002704:	e067      	b.n	80027d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]
}
 8002718:	e05d      	b.n	80027d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002722:	d133      	bne.n	800278c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b21      	cmp	r3, #33	; 0x21
 800272e:	d109      	bne.n	8002744 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	e008      	b.n	8002756 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <I2C_Master_SB+0x92>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	d108      	bne.n	800277a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	2b00      	cmp	r3, #0
 800276e:	d032      	beq.n	80027d6 <I2C_Master_SB+0x100>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	d02d      	beq.n	80027d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002788:	605a      	str	r2, [r3, #4]
}
 800278a:	e024      	b.n	80027d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10e      	bne.n	80027b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	b29b      	uxth	r3, r3
 800279a:	11db      	asrs	r3, r3, #7
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 0306 	and.w	r3, r3, #6
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f063 030f 	orn	r3, r3, #15
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]
}
 80027b0:	e011      	b.n	80027d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10d      	bne.n	80027d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	b29b      	uxth	r3, r3
 80027c0:	11db      	asrs	r3, r3, #7
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f003 0306 	and.w	r3, r3, #6
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f063 030e 	orn	r3, r3, #14
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	611a      	str	r2, [r3, #16]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <I2C_Master_ADD10+0x26>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <I2C_Master_ADD10+0x48>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002826:	605a      	str	r2, [r3, #4]
  }
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002832:	b480      	push	{r7}
 8002834:	b091      	sub	sp, #68	; 0x44
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002840:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b22      	cmp	r3, #34	; 0x22
 800285a:	f040 8174 	bne.w	8002b46 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <I2C_Master_ADDR+0x54>
 8002866:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d10b      	bne.n	8002886 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	633b      	str	r3, [r7, #48]	; 0x30
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	e16b      	b.n	8002b5e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11d      	bne.n	80028ca <I2C_Master_ADDR+0x98>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002896:	d118      	bne.n	80028ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002898:	2300      	movs	r3, #0
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	651a      	str	r2, [r3, #80]	; 0x50
 80028c8:	e149      	b.n	8002b5e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d113      	bne.n	80028fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e120      	b.n	8002b3e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	f040 808a 	bne.w	8002a1c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800290e:	d137      	bne.n	8002980 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292e:	d113      	bne.n	8002958 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	e0f2      	b.n	8002b3e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	623b      	str	r3, [r7, #32]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e0de      	b.n	8002b3e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002982:	2b08      	cmp	r3, #8
 8002984:	d02e      	beq.n	80029e4 <I2C_Master_ADDR+0x1b2>
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	2b20      	cmp	r3, #32
 800298a:	d02b      	beq.n	80029e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	2b12      	cmp	r3, #18
 8002990:	d102      	bne.n	8002998 <I2C_Master_ADDR+0x166>
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	2b01      	cmp	r3, #1
 8002996:	d125      	bne.n	80029e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	2b04      	cmp	r3, #4
 800299c:	d00e      	beq.n	80029bc <I2C_Master_ADDR+0x18a>
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d00b      	beq.n	80029bc <I2C_Master_ADDR+0x18a>
 80029a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d008      	beq.n	80029bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e007      	b.n	80029cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	e0ac      	b.n	8002b3e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e090      	b.n	8002b3e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d158      	bne.n	8002ad8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d021      	beq.n	8002a70 <I2C_Master_ADDR+0x23e>
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d01e      	beq.n	8002a70 <I2C_Master_ADDR+0x23e>
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d01b      	beq.n	8002a70 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a46:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e012      	b.n	8002a96 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa4:	d14b      	bne.n	8002b3e <I2C_Master_ADDR+0x30c>
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aac:	d00b      	beq.n	8002ac6 <I2C_Master_ADDR+0x294>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d008      	beq.n	8002ac6 <I2C_Master_ADDR+0x294>
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d005      	beq.n	8002ac6 <I2C_Master_ADDR+0x294>
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d002      	beq.n	8002ac6 <I2C_Master_ADDR+0x294>
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d13b      	bne.n	8002b3e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	e032      	b.n	8002b3e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af6:	d117      	bne.n	8002b28 <I2C_Master_ADDR+0x2f6>
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002afe:	d00b      	beq.n	8002b18 <I2C_Master_ADDR+0x2e6>
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d008      	beq.n	8002b18 <I2C_Master_ADDR+0x2e6>
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d005      	beq.n	8002b18 <I2C_Master_ADDR+0x2e6>
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d002      	beq.n	8002b18 <I2C_Master_ADDR+0x2e6>
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d107      	bne.n	8002b28 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b26:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b44:	e00b      	b.n	8002b5e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
}
 8002b5c:	e7ff      	b.n	8002b5e <I2C_Master_ADDR+0x32c>
 8002b5e:	bf00      	nop
 8002b60:	3744      	adds	r7, #68	; 0x44
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02b      	beq.n	8002bda <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d114      	bne.n	8002bda <I2C_SlaveTransmit_TXE+0x72>
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b29      	cmp	r3, #41	; 0x29
 8002bb4:	d111      	bne.n	8002bda <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2221      	movs	r2, #33	; 0x21
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2228      	movs	r2, #40	; 0x28
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff f9f1 	bl	8001fbc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d011      	beq.n	8002c18 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d02c      	beq.n	8002c96 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d114      	bne.n	8002c96 <I2C_SlaveReceive_RXNE+0x74>
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c70:	d111      	bne.n	8002c96 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2222      	movs	r2, #34	; 0x22
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2228      	movs	r2, #40	; 0x28
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff f99c 	bl	8001fce <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cfa:	2b28      	cmp	r3, #40	; 0x28
 8002cfc:	d127      	bne.n	8002d4e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	09db      	lsrs	r3, r3, #7
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	81bb      	strh	r3, [r7, #12]
 8002d30:	e002      	b.n	8002d38 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d40:	89ba      	ldrh	r2, [r7, #12]
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff f94a 	bl	8001fe0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d4c:	e00e      	b.n	8002d6c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd0:	d172      	bne.n	8002eb8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b22      	cmp	r3, #34	; 0x22
 8002dd6:	d002      	beq.n	8002dde <I2C_Slave_STOPF+0x6a>
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b2a      	cmp	r3, #42	; 0x2a
 8002ddc:	d135      	bne.n	8002e4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f962 	bl	80010e0 <HAL_DMA_GetState>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d049      	beq.n	8002eb6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	4a69      	ldr	r2, [pc, #420]	; (8002fcc <I2C_Slave_STOPF+0x258>)
 8002e28:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd ffda 	bl	8000de8 <HAL_DMA_Abort_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03d      	beq.n	8002eb6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e44:	4610      	mov	r0, r2
 8002e46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e48:	e035      	b.n	8002eb6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0204 	orr.w	r2, r3, #4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f92c 	bl	80010e0 <HAL_DMA_GetState>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d014      	beq.n	8002eb8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	4a4e      	ldr	r2, [pc, #312]	; (8002fcc <I2C_Slave_STOPF+0x258>)
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd ffa4 	bl	8000de8 <HAL_DMA_Abort_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
 8002eb4:	e000      	b.n	8002eb8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eb6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03e      	beq.n	8002f40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d112      	bne.n	8002ef6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d112      	bne.n	8002f2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f043 0204 	orr.w	r2, r3, #4
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8b3 	bl	80030b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f4e:	e039      	b.n	8002fc4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b2a      	cmp	r3, #42	; 0x2a
 8002f54:	d109      	bne.n	8002f6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2228      	movs	r2, #40	; 0x28
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff f832 	bl	8001fce <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b28      	cmp	r3, #40	; 0x28
 8002f74:	d111      	bne.n	8002f9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <I2C_Slave_STOPF+0x25c>)
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff f831 	bl	8001ffa <HAL_I2C_ListenCpltCallback>
}
 8002f98:	e014      	b.n	8002fc4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	2b22      	cmp	r3, #34	; 0x22
 8002fa0:	d002      	beq.n	8002fa8 <I2C_Slave_STOPF+0x234>
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b22      	cmp	r3, #34	; 0x22
 8002fa6:	d10d      	bne.n	8002fc4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff f805 	bl	8001fce <HAL_I2C_SlaveRxCpltCallback>
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	080034e9 	.word	0x080034e9
 8002fd0:	ffff0000 	.word	0xffff0000

08002fd4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d002      	beq.n	8002ff6 <I2C_Slave_AF+0x22>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d129      	bne.n	800304a <I2C_Slave_AF+0x76>
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b28      	cmp	r3, #40	; 0x28
 8002ffa:	d126      	bne.n	800304a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	; (80030b0 <I2C_Slave_AF+0xdc>)
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003010:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800301a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe ffd9 	bl	8001ffa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003048:	e02e      	b.n	80030a8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b21      	cmp	r3, #33	; 0x21
 800304e:	d126      	bne.n	800309e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <I2C_Slave_AF+0xdc>)
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2221      	movs	r2, #33	; 0x21
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800307a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003084:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe ff90 	bl	8001fbc <HAL_I2C_SlaveTxCpltCallback>
}
 800309c:	e004      	b.n	80030a8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a6:	615a      	str	r2, [r3, #20]
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030cc:	7bbb      	ldrb	r3, [r7, #14]
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d002      	beq.n	80030d8 <I2C_ITError+0x24>
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d10a      	bne.n	80030ee <I2C_ITError+0x3a>
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b22      	cmp	r3, #34	; 0x22
 80030dc:	d107      	bne.n	80030ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030f4:	2b28      	cmp	r3, #40	; 0x28
 80030f6:	d107      	bne.n	8003108 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2228      	movs	r2, #40	; 0x28
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003106:	e015      	b.n	8003134 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003116:	d00a      	beq.n	800312e <I2C_ITError+0x7a>
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b60      	cmp	r3, #96	; 0x60
 800311c:	d007      	beq.n	800312e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003142:	d161      	bne.n	8003208 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003152:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800315c:	2b01      	cmp	r3, #1
 800315e:	d020      	beq.n	80031a2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	4a6a      	ldr	r2, [pc, #424]	; (8003310 <I2C_ITError+0x25c>)
 8003166:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fe3b 	bl	8000de8 <HAL_DMA_Abort_IT>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8089 	beq.w	800328c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800319c:	4610      	mov	r0, r2
 800319e:	4798      	blx	r3
 80031a0:	e074      	b.n	800328c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	4a5a      	ldr	r2, [pc, #360]	; (8003310 <I2C_ITError+0x25c>)
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd fe1a 	bl	8000de8 <HAL_DMA_Abort_IT>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d068      	beq.n	800328c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d10b      	bne.n	80031e0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003202:	4610      	mov	r0, r2
 8003204:	4798      	blx	r3
 8003206:	e041      	b.n	800328c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b60      	cmp	r3, #96	; 0x60
 8003212:	d125      	bne.n	8003260 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d10b      	bne.n	8003248 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fe fef2 	bl	8002042 <HAL_I2C_AbortCpltCallback>
 800325e:	e015      	b.n	800328c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d10b      	bne.n	8003286 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fe fed2 	bl	8002030 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10e      	bne.n	80032ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032c8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d113      	bne.n	8003306 <I2C_ITError+0x252>
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	2b28      	cmp	r3, #40	; 0x28
 80032e2:	d110      	bne.n	8003306 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <I2C_ITError+0x260>)
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7fe fe7a 	bl	8001ffa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	080034e9 	.word	0x080034e9
 8003314:	ffff0000 	.word	0xffff0000

08003318 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	817b      	strh	r3, [r7, #10]
 800332a:	460b      	mov	r3, r1
 800332c:	813b      	strh	r3, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003340:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	2200      	movs	r2, #0
 800335a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f96a 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003378:	d103      	bne.n	8003382 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0aa      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	4952      	ldr	r1, [pc, #328]	; (80034e4 <I2C_RequestMemoryRead+0x1cc>)
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f9a2 	bl	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e097      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa0c 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d107      	bne.n	80033ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e076      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	e021      	b.n	8003444 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	b29b      	uxth	r3, r3
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	6a39      	ldr	r1, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f9e6 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d107      	bne.n	8003436 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e050      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800343a:	893b      	ldrh	r3, [r7, #8]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	6a39      	ldr	r1, [r7, #32]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f9cb 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	2b04      	cmp	r3, #4
 800345a:	d107      	bne.n	800346c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e035      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2200      	movs	r2, #0
 8003488:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f8d3 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a6:	d103      	bne.n	80034b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e013      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034b4:	897b      	ldrh	r3, [r7, #10]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	4906      	ldr	r1, [pc, #24]	; (80034e4 <I2C_RequestMemoryRead+0x1cc>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f90b 	bl	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	00010002 	.word	0x00010002

080034e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003502:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <I2C_DMAAbort+0x148>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	08db      	lsrs	r3, r3, #3
 8003508:	4a4a      	ldr	r2, [pc, #296]	; (8003634 <I2C_DMAAbort+0x14c>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0a1a      	lsrs	r2, r3, #8
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00da      	lsls	r2, r3, #3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f043 0220 	orr.w	r2, r3, #32
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800352e:	e00a      	b.n	8003546 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3b01      	subs	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003544:	d0ea      	beq.n	800351c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003552:	2200      	movs	r2, #0
 8003554:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	2200      	movs	r2, #0
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003574:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	2200      	movs	r2, #0
 800358a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	2200      	movs	r2, #0
 800359a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b60      	cmp	r3, #96	; 0x60
 80035b6:	d10e      	bne.n	80035d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035ce:	6978      	ldr	r0, [r7, #20]
 80035d0:	f7fe fd37 	bl	8002042 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035d4:	e027      	b.n	8003626 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035dc:	2b28      	cmp	r3, #40	; 0x28
 80035de:	d117      	bne.n	8003610 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2228      	movs	r2, #40	; 0x28
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800360e:	e007      	b.n	8003620 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f7fe fd05 	bl	8002030 <HAL_I2C_ErrorCallback>
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000
 8003634:	14f8b589 	.word	0x14f8b589

08003638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003648:	e025      	b.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d021      	beq.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fd fa33 	bl	8000abc <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e023      	b.n	80036de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d10d      	bne.n	80036bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	e00c      	b.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d0b6      	beq.n	800364a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f4:	e051      	b.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d123      	bne.n	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003714:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800371e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e046      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d021      	beq.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7fd f9b1 	bl	8000abc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e020      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10c      	bne.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf14      	ite	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	2300      	moveq	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e00b      	b.n	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d18d      	bne.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f0:	e02d      	b.n	800384e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f8c0 	bl	8003978 <I2C_IsAcknowledgeFailed>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e02d      	b.n	800385e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d021      	beq.n	800384e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fd f957 	bl	8000abc <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d116      	bne.n	800384e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e007      	b.n	800385e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d1ca      	bne.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	08db      	lsrs	r3, r3, #3
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	0a1a      	lsrs	r2, r3, #8
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b01      	subs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e008      	b.n	80038b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b4:	d0e9      	beq.n	800388a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000000 	.word	0x20000000
 80038c8:	14f8b589 	.word	0x14f8b589

080038cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d8:	e042      	b.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d119      	bne.n	800391c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0210 	mvn.w	r2, #16
 80038f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e029      	b.n	8003970 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391c:	f7fd f8ce 	bl	8000abc <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	d302      	bcc.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d116      	bne.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e007      	b.n	8003970 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d1b5      	bne.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d11b      	bne.n	80039c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003998:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f043 0204 	orr.w	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80039e4:	d103      	bne.n	80039ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80039ec:	e007      	b.n	80039fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039f6:	d102      	bne.n	80039fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2208      	movs	r2, #8
 80039fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e272      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8087 	beq.w	8003b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a28:	4b92      	ldr	r3, [pc, #584]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d00c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a34:	4b8f      	ldr	r3, [pc, #572]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d112      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5e>
 8003a40:	4b8c      	ldr	r3, [pc, #560]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d10b      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4e:	4b89      	ldr	r3, [pc, #548]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d06c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x12c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d168      	bne.n	8003b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e24c      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x76>
 8003a70:	4b80      	ldr	r3, [pc, #512]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a7f      	ldr	r2, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e02e      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x98>
 8003a86:	4b7b      	ldr	r3, [pc, #492]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7a      	ldr	r2, [pc, #488]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b78      	ldr	r3, [pc, #480]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a77      	ldr	r2, [pc, #476]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0xbc>
 8003aaa:	4b72      	ldr	r3, [pc, #456]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a71      	ldr	r2, [pc, #452]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003ac4:	4b6b      	ldr	r3, [pc, #428]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6a      	ldr	r2, [pc, #424]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fc ffea 	bl	8000abc <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fc ffe6 	bl	8000abc <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e200      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xe4>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fc ffd6 	bl	8000abc <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fc ffd2 	bl	8000abc <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1ec      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x10c>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b42:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b4e:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x18c>
 8003b5a:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x176>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c0      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4939      	ldr	r1, [pc, #228]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fc ff8b 	bl	8000abc <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fc ff87 	bl	8000abc <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1a1      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4927      	ldr	r1, [pc, #156]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fc ff6a 	bl	8000abc <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fc ff66 	bl	8000abc <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e180      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03a      	beq.n	8003c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7fc ff4a 	bl	8000abc <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fc ff46 	bl	8000abc <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e160      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f000 fad8 	bl	8004200 <RCC_Delay>
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fc ff30 	bl	8000abc <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5e:	e00f      	b.n	8003c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fc ff2c 	bl	8000abc <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d908      	bls.n	8003c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e146      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	42420000 	.word	0x42420000
 8003c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b92      	ldr	r3, [pc, #584]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e9      	bne.n	8003c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a6 	beq.w	8003de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	4b88      	ldr	r3, [pc, #544]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4a87      	ldr	r2, [pc, #540]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	61d3      	str	r3, [r2, #28]
 8003cb6:	4b85      	ldr	r3, [pc, #532]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b82      	ldr	r3, [pc, #520]	; (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b7f      	ldr	r3, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7e      	ldr	r2, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fc feed 	bl	8000abc <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce6:	f7fc fee9 	bl	8000abc <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b64      	cmp	r3, #100	; 0x64
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e103      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	4b75      	ldr	r3, [pc, #468]	; (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x312>
 8003d0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6213      	str	r3, [r2, #32]
 8003d18:	e02d      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x334>
 8003d22:	4b6a      	ldr	r3, [pc, #424]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4a69      	ldr	r2, [pc, #420]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6213      	str	r3, [r2, #32]
 8003d2e:	4b67      	ldr	r3, [pc, #412]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4a66      	ldr	r2, [pc, #408]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6213      	str	r3, [r2, #32]
 8003d3a:	e01c      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x356>
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4a60      	ldr	r2, [pc, #384]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6213      	str	r3, [r2, #32]
 8003d50:	4b5e      	ldr	r3, [pc, #376]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4a5d      	ldr	r2, [pc, #372]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6213      	str	r3, [r2, #32]
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a5a      	ldr	r2, [pc, #360]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6213      	str	r3, [r2, #32]
 8003d6a:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4a57      	ldr	r2, [pc, #348]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d015      	beq.n	8003daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fc fe9d 	bl	8000abc <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fc fe99 	bl	8000abc <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0b1      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ee      	beq.n	8003d86 <HAL_RCC_OscConfig+0x37e>
 8003da8:	e014      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fc fe87 	bl	8000abc <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fc fe83 	bl	8000abc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e09b      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	4b40      	ldr	r3, [pc, #256]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ee      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b3c      	ldr	r3, [pc, #240]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8087 	beq.w	8003efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d061      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d146      	bne.n	8003e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e04:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fc fe57 	bl	8000abc <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fc fe53 	bl	8000abc <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e06d      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e24:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d108      	bne.n	8003e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4921      	ldr	r1, [pc, #132]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a19      	ldr	r1, [r3, #32]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	491b      	ldr	r1, [pc, #108]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fc fe27 	bl	8000abc <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e72:	f7fc fe23 	bl	8000abc <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e03d      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x46a>
 8003e90:	e035      	b.n	8003efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fc fe10 	bl	8000abc <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fc fe0c 	bl	8000abc <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e026      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x498>
 8003ebe:	e01e      	b.n	8003efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e019      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_OscConfig+0x500>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000

08003f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0d0      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d910      	bls.n	8003f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b67      	ldr	r3, [pc, #412]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0207 	bic.w	r2, r3, #7
 8003f36:	4965      	ldr	r1, [pc, #404]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0b8      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f68:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a58      	ldr	r2, [pc, #352]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a52      	ldr	r2, [pc, #328]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	494d      	ldr	r1, [pc, #308]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d040      	beq.n	800402c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d115      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e073      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06b      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f023 0203 	bic.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4936      	ldr	r1, [pc, #216]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ffc:	f7fc fd5e 	bl	8000abc <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	e00a      	b.n	800401a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fc fd5a 	bl	8000abc <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e053      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 020c 	and.w	r2, r3, #12
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	429a      	cmp	r2, r3
 800402a:	d1eb      	bne.n	8004004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d210      	bcs.n	800405c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 0207 	bic.w	r2, r3, #7
 8004042:	4922      	ldr	r1, [pc, #136]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e032      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4916      	ldr	r1, [pc, #88]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	490e      	ldr	r1, [pc, #56]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800409a:	f000 f821 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 800409e:	4602      	mov	r2, r0
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	490a      	ldr	r1, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	5ccb      	ldrb	r3, [r1, r3]
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <HAL_RCC_ClockConfig+0x1cc>)
 80040b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_RCC_ClockConfig+0x1d0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc fcbc 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40022000 	.word	0x40022000
 80040d0:	40021000 	.word	0x40021000
 80040d4:	08004f7c 	.word	0x08004f7c
 80040d8:	20000000 	.word	0x20000000
 80040dc:	20000004 	.word	0x20000004

080040e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	b490      	push	{r4, r7}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040e6:	4b29      	ldr	r3, [pc, #164]	; (800418c <HAL_RCC_GetSysClockFreq+0xac>)
 80040e8:	1d3c      	adds	r4, r7, #4
 80040ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040f0:	f240 2301 	movw	r3, #513	; 0x201
 80040f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	2300      	movs	r3, #0
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800410a:	4b21      	ldr	r3, [pc, #132]	; (8004190 <HAL_RCC_GetSysClockFreq+0xb0>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b04      	cmp	r3, #4
 8004118:	d002      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x40>
 800411a:	2b08      	cmp	r3, #8
 800411c:	d003      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x46>
 800411e:	e02b      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004122:	623b      	str	r3, [r7, #32]
      break;
 8004124:	e02b      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	0c9b      	lsrs	r3, r3, #18
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	3328      	adds	r3, #40	; 0x28
 8004130:	443b      	add	r3, r7
 8004132:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004136:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d012      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	0c5b      	lsrs	r3, r3, #17
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	3328      	adds	r3, #40	; 0x28
 800414e:	443b      	add	r3, r7
 8004150:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004154:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4a0e      	ldr	r2, [pc, #56]	; (8004194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800415a:	fb03 f202 	mul.w	r2, r3, r2
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
 8004166:	e004      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	4a0b      	ldr	r2, [pc, #44]	; (8004198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800416c:	fb02 f303 	mul.w	r3, r2, r3
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	623b      	str	r3, [r7, #32]
      break;
 8004176:	e002      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800417a:	623b      	str	r3, [r7, #32]
      break;
 800417c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417e:	6a3b      	ldr	r3, [r7, #32]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3728      	adds	r7, #40	; 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bc90      	pop	{r4, r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	08004f6c 	.word	0x08004f6c
 8004190:	40021000 	.word	0x40021000
 8004194:	007a1200 	.word	0x007a1200
 8004198:	003d0900 	.word	0x003d0900

0800419c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <HAL_RCC_GetHCLKFreq+0x10>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000000 	.word	0x20000000

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b4:	f7ff fff2 	bl	800419c <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000
 80041d4:	08004f8c 	.word	0x08004f8c

080041d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041dc:	f7ff ffde 	bl	800419c <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	0adb      	lsrs	r3, r3, #11
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4903      	ldr	r1, [pc, #12]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40021000 	.word	0x40021000
 80041fc:	08004f8c 	.word	0x08004f8c

08004200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <RCC_Delay+0x34>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <RCC_Delay+0x38>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0a5b      	lsrs	r3, r3, #9
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800421c:	bf00      	nop
  }
  while (Delay --);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	60fa      	str	r2, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f9      	bne.n	800421c <RCC_Delay+0x1c>
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	20000000 	.word	0x20000000
 8004238:	10624dd3 	.word	0x10624dd3

0800423c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e03f      	b.n	80042ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fad0 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	; 0x24
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800427e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f905 	bl	8004490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b08a      	sub	sp, #40	; 0x28
 80042da:	af02      	add	r7, sp, #8
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d17c      	bne.n	80043f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_UART_Transmit+0x2c>
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e075      	b.n	80043f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_UART_Transmit+0x3e>
 8004310:	2302      	movs	r3, #2
 8004312:	e06e      	b.n	80043f2 <HAL_UART_Transmit+0x11c>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2221      	movs	r2, #33	; 0x21
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432a:	f7fc fbc7 	bl	8000abc <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d108      	bne.n	8004358 <HAL_UART_Transmit+0x82>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e003      	b.n	8004360 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004368:	e02a      	b.n	80043c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2200      	movs	r2, #0
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f840 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e036      	b.n	80043f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	3302      	adds	r3, #2
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e007      	b.n	80043b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1cf      	bne.n	800436a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2140      	movs	r1, #64	; 0x40
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f810 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e006      	b.n	80043f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043f0:	2302      	movs	r3, #2
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440a:	e02c      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d028      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0x30>
 800441a:	f7fc fb4f 	bl	8000abc <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	429a      	cmp	r2, r3
 8004428:	d21d      	bcs.n	8004466 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004438:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00f      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4013      	ands	r3, r2
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	bf0c      	ite	eq
 8004476:	2301      	moveq	r3, #1
 8004478:	2300      	movne	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	429a      	cmp	r2, r3
 8004482:	d0c3      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044ca:	f023 030c 	bic.w	r3, r3, #12
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2c      	ldr	r2, [pc, #176]	; (80045a4 <UART_SetConfig+0x114>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044f8:	f7ff fe6e 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	e002      	b.n	8004506 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004500:	f7ff fe56 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8004504:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009a      	lsls	r2, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <UART_SetConfig+0x118>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	0119      	lsls	r1, r3, #4
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009a      	lsls	r2, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fbb2 f2f3 	udiv	r2, r2, r3
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <UART_SetConfig+0x118>)
 800453e:	fba3 0302 	umull	r0, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2064      	movs	r0, #100	; 0x64
 8004546:	fb00 f303 	mul.w	r3, r0, r3
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	3332      	adds	r3, #50	; 0x32
 8004550:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <UART_SetConfig+0x118>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455c:	4419      	add	r1, r3
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	009a      	lsls	r2, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	fbb2 f2f3 	udiv	r2, r2, r3
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <UART_SetConfig+0x118>)
 8004576:	fba3 0302 	umull	r0, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2064      	movs	r0, #100	; 0x64
 800457e:	fb00 f303 	mul.w	r3, r0, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	; 0x32
 8004588:	4a07      	ldr	r2, [pc, #28]	; (80045a8 <UART_SetConfig+0x118>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	440a      	add	r2, r1
 800459a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40013800 	.word	0x40013800
 80045a8:	51eb851f 	.word	0x51eb851f

080045ac <__errno>:
 80045ac:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <__errno+0x8>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	2000000c 	.word	0x2000000c

080045b8 <__libc_init_array>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	2600      	movs	r6, #0
 80045bc:	4d0c      	ldr	r5, [pc, #48]	; (80045f0 <__libc_init_array+0x38>)
 80045be:	4c0d      	ldr	r4, [pc, #52]	; (80045f4 <__libc_init_array+0x3c>)
 80045c0:	1b64      	subs	r4, r4, r5
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	42a6      	cmp	r6, r4
 80045c6:	d109      	bne.n	80045dc <__libc_init_array+0x24>
 80045c8:	f000 fc9c 	bl	8004f04 <_init>
 80045cc:	2600      	movs	r6, #0
 80045ce:	4d0a      	ldr	r5, [pc, #40]	; (80045f8 <__libc_init_array+0x40>)
 80045d0:	4c0a      	ldr	r4, [pc, #40]	; (80045fc <__libc_init_array+0x44>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	42a6      	cmp	r6, r4
 80045d8:	d105      	bne.n	80045e6 <__libc_init_array+0x2e>
 80045da:	bd70      	pop	{r4, r5, r6, pc}
 80045dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e0:	4798      	blx	r3
 80045e2:	3601      	adds	r6, #1
 80045e4:	e7ee      	b.n	80045c4 <__libc_init_array+0xc>
 80045e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ea:	4798      	blx	r3
 80045ec:	3601      	adds	r6, #1
 80045ee:	e7f2      	b.n	80045d6 <__libc_init_array+0x1e>
 80045f0:	08004fc8 	.word	0x08004fc8
 80045f4:	08004fc8 	.word	0x08004fc8
 80045f8:	08004fc8 	.word	0x08004fc8
 80045fc:	08004fcc 	.word	0x08004fcc

08004600 <memcpy>:
 8004600:	440a      	add	r2, r1
 8004602:	4291      	cmp	r1, r2
 8004604:	f100 33ff 	add.w	r3, r0, #4294967295
 8004608:	d100      	bne.n	800460c <memcpy+0xc>
 800460a:	4770      	bx	lr
 800460c:	b510      	push	{r4, lr}
 800460e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004612:	4291      	cmp	r1, r2
 8004614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004618:	d1f9      	bne.n	800460e <memcpy+0xe>
 800461a:	bd10      	pop	{r4, pc}

0800461c <memset>:
 800461c:	4603      	mov	r3, r0
 800461e:	4402      	add	r2, r0
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	f803 1b01 	strb.w	r1, [r3], #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <siprintf>:
 800462c:	b40e      	push	{r1, r2, r3}
 800462e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004632:	b500      	push	{lr}
 8004634:	b09c      	sub	sp, #112	; 0x70
 8004636:	ab1d      	add	r3, sp, #116	; 0x74
 8004638:	9002      	str	r0, [sp, #8]
 800463a:	9006      	str	r0, [sp, #24]
 800463c:	9107      	str	r1, [sp, #28]
 800463e:	9104      	str	r1, [sp, #16]
 8004640:	4808      	ldr	r0, [pc, #32]	; (8004664 <siprintf+0x38>)
 8004642:	4909      	ldr	r1, [pc, #36]	; (8004668 <siprintf+0x3c>)
 8004644:	f853 2b04 	ldr.w	r2, [r3], #4
 8004648:	9105      	str	r1, [sp, #20]
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	a902      	add	r1, sp, #8
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	f000 f868 	bl	8004724 <_svfiprintf_r>
 8004654:	2200      	movs	r2, #0
 8004656:	9b02      	ldr	r3, [sp, #8]
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	b01c      	add	sp, #112	; 0x70
 800465c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004660:	b003      	add	sp, #12
 8004662:	4770      	bx	lr
 8004664:	2000000c 	.word	0x2000000c
 8004668:	ffff0208 	.word	0xffff0208

0800466c <__ssputs_r>:
 800466c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004670:	688e      	ldr	r6, [r1, #8]
 8004672:	4682      	mov	sl, r0
 8004674:	429e      	cmp	r6, r3
 8004676:	460c      	mov	r4, r1
 8004678:	4690      	mov	r8, r2
 800467a:	461f      	mov	r7, r3
 800467c:	d838      	bhi.n	80046f0 <__ssputs_r+0x84>
 800467e:	898a      	ldrh	r2, [r1, #12]
 8004680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004684:	d032      	beq.n	80046ec <__ssputs_r+0x80>
 8004686:	6825      	ldr	r5, [r4, #0]
 8004688:	6909      	ldr	r1, [r1, #16]
 800468a:	3301      	adds	r3, #1
 800468c:	eba5 0901 	sub.w	r9, r5, r1
 8004690:	6965      	ldr	r5, [r4, #20]
 8004692:	444b      	add	r3, r9
 8004694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800469c:	106d      	asrs	r5, r5, #1
 800469e:	429d      	cmp	r5, r3
 80046a0:	bf38      	it	cc
 80046a2:	461d      	movcc	r5, r3
 80046a4:	0553      	lsls	r3, r2, #21
 80046a6:	d531      	bpl.n	800470c <__ssputs_r+0xa0>
 80046a8:	4629      	mov	r1, r5
 80046aa:	f000 fb61 	bl	8004d70 <_malloc_r>
 80046ae:	4606      	mov	r6, r0
 80046b0:	b950      	cbnz	r0, 80046c8 <__ssputs_r+0x5c>
 80046b2:	230c      	movs	r3, #12
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	f8ca 3000 	str.w	r3, [sl]
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c8:	464a      	mov	r2, r9
 80046ca:	6921      	ldr	r1, [r4, #16]
 80046cc:	f7ff ff98 	bl	8004600 <memcpy>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046da:	81a3      	strh	r3, [r4, #12]
 80046dc:	6126      	str	r6, [r4, #16]
 80046de:	444e      	add	r6, r9
 80046e0:	6026      	str	r6, [r4, #0]
 80046e2:	463e      	mov	r6, r7
 80046e4:	6165      	str	r5, [r4, #20]
 80046e6:	eba5 0509 	sub.w	r5, r5, r9
 80046ea:	60a5      	str	r5, [r4, #8]
 80046ec:	42be      	cmp	r6, r7
 80046ee:	d900      	bls.n	80046f2 <__ssputs_r+0x86>
 80046f0:	463e      	mov	r6, r7
 80046f2:	4632      	mov	r2, r6
 80046f4:	4641      	mov	r1, r8
 80046f6:	6820      	ldr	r0, [r4, #0]
 80046f8:	f000 fab8 	bl	8004c6c <memmove>
 80046fc:	68a3      	ldr	r3, [r4, #8]
 80046fe:	2000      	movs	r0, #0
 8004700:	1b9b      	subs	r3, r3, r6
 8004702:	60a3      	str	r3, [r4, #8]
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	4433      	add	r3, r6
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	e7db      	b.n	80046c4 <__ssputs_r+0x58>
 800470c:	462a      	mov	r2, r5
 800470e:	f000 fba3 	bl	8004e58 <_realloc_r>
 8004712:	4606      	mov	r6, r0
 8004714:	2800      	cmp	r0, #0
 8004716:	d1e1      	bne.n	80046dc <__ssputs_r+0x70>
 8004718:	4650      	mov	r0, sl
 800471a:	6921      	ldr	r1, [r4, #16]
 800471c:	f000 fac0 	bl	8004ca0 <_free_r>
 8004720:	e7c7      	b.n	80046b2 <__ssputs_r+0x46>
	...

08004724 <_svfiprintf_r>:
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	4698      	mov	r8, r3
 800472a:	898b      	ldrh	r3, [r1, #12]
 800472c:	4607      	mov	r7, r0
 800472e:	061b      	lsls	r3, r3, #24
 8004730:	460d      	mov	r5, r1
 8004732:	4614      	mov	r4, r2
 8004734:	b09d      	sub	sp, #116	; 0x74
 8004736:	d50e      	bpl.n	8004756 <_svfiprintf_r+0x32>
 8004738:	690b      	ldr	r3, [r1, #16]
 800473a:	b963      	cbnz	r3, 8004756 <_svfiprintf_r+0x32>
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	f000 fb17 	bl	8004d70 <_malloc_r>
 8004742:	6028      	str	r0, [r5, #0]
 8004744:	6128      	str	r0, [r5, #16]
 8004746:	b920      	cbnz	r0, 8004752 <_svfiprintf_r+0x2e>
 8004748:	230c      	movs	r3, #12
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	e0d1      	b.n	80048f6 <_svfiprintf_r+0x1d2>
 8004752:	2340      	movs	r3, #64	; 0x40
 8004754:	616b      	str	r3, [r5, #20]
 8004756:	2300      	movs	r3, #0
 8004758:	9309      	str	r3, [sp, #36]	; 0x24
 800475a:	2320      	movs	r3, #32
 800475c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004760:	2330      	movs	r3, #48	; 0x30
 8004762:	f04f 0901 	mov.w	r9, #1
 8004766:	f8cd 800c 	str.w	r8, [sp, #12]
 800476a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004910 <_svfiprintf_r+0x1ec>
 800476e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004772:	4623      	mov	r3, r4
 8004774:	469a      	mov	sl, r3
 8004776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800477a:	b10a      	cbz	r2, 8004780 <_svfiprintf_r+0x5c>
 800477c:	2a25      	cmp	r2, #37	; 0x25
 800477e:	d1f9      	bne.n	8004774 <_svfiprintf_r+0x50>
 8004780:	ebba 0b04 	subs.w	fp, sl, r4
 8004784:	d00b      	beq.n	800479e <_svfiprintf_r+0x7a>
 8004786:	465b      	mov	r3, fp
 8004788:	4622      	mov	r2, r4
 800478a:	4629      	mov	r1, r5
 800478c:	4638      	mov	r0, r7
 800478e:	f7ff ff6d 	bl	800466c <__ssputs_r>
 8004792:	3001      	adds	r0, #1
 8004794:	f000 80aa 	beq.w	80048ec <_svfiprintf_r+0x1c8>
 8004798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800479a:	445a      	add	r2, fp
 800479c:	9209      	str	r2, [sp, #36]	; 0x24
 800479e:	f89a 3000 	ldrb.w	r3, [sl]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80a2 	beq.w	80048ec <_svfiprintf_r+0x1c8>
 80047a8:	2300      	movs	r3, #0
 80047aa:	f04f 32ff 	mov.w	r2, #4294967295
 80047ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047b2:	f10a 0a01 	add.w	sl, sl, #1
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	9307      	str	r3, [sp, #28]
 80047ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047be:	931a      	str	r3, [sp, #104]	; 0x68
 80047c0:	4654      	mov	r4, sl
 80047c2:	2205      	movs	r2, #5
 80047c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c8:	4851      	ldr	r0, [pc, #324]	; (8004910 <_svfiprintf_r+0x1ec>)
 80047ca:	f000 fa41 	bl	8004c50 <memchr>
 80047ce:	9a04      	ldr	r2, [sp, #16]
 80047d0:	b9d8      	cbnz	r0, 800480a <_svfiprintf_r+0xe6>
 80047d2:	06d0      	lsls	r0, r2, #27
 80047d4:	bf44      	itt	mi
 80047d6:	2320      	movmi	r3, #32
 80047d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047dc:	0711      	lsls	r1, r2, #28
 80047de:	bf44      	itt	mi
 80047e0:	232b      	movmi	r3, #43	; 0x2b
 80047e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e6:	f89a 3000 	ldrb.w	r3, [sl]
 80047ea:	2b2a      	cmp	r3, #42	; 0x2a
 80047ec:	d015      	beq.n	800481a <_svfiprintf_r+0xf6>
 80047ee:	4654      	mov	r4, sl
 80047f0:	2000      	movs	r0, #0
 80047f2:	f04f 0c0a 	mov.w	ip, #10
 80047f6:	9a07      	ldr	r2, [sp, #28]
 80047f8:	4621      	mov	r1, r4
 80047fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047fe:	3b30      	subs	r3, #48	; 0x30
 8004800:	2b09      	cmp	r3, #9
 8004802:	d94e      	bls.n	80048a2 <_svfiprintf_r+0x17e>
 8004804:	b1b0      	cbz	r0, 8004834 <_svfiprintf_r+0x110>
 8004806:	9207      	str	r2, [sp, #28]
 8004808:	e014      	b.n	8004834 <_svfiprintf_r+0x110>
 800480a:	eba0 0308 	sub.w	r3, r0, r8
 800480e:	fa09 f303 	lsl.w	r3, r9, r3
 8004812:	4313      	orrs	r3, r2
 8004814:	46a2      	mov	sl, r4
 8004816:	9304      	str	r3, [sp, #16]
 8004818:	e7d2      	b.n	80047c0 <_svfiprintf_r+0x9c>
 800481a:	9b03      	ldr	r3, [sp, #12]
 800481c:	1d19      	adds	r1, r3, #4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	9103      	str	r1, [sp, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	bfbb      	ittet	lt
 8004826:	425b      	neglt	r3, r3
 8004828:	f042 0202 	orrlt.w	r2, r2, #2
 800482c:	9307      	strge	r3, [sp, #28]
 800482e:	9307      	strlt	r3, [sp, #28]
 8004830:	bfb8      	it	lt
 8004832:	9204      	strlt	r2, [sp, #16]
 8004834:	7823      	ldrb	r3, [r4, #0]
 8004836:	2b2e      	cmp	r3, #46	; 0x2e
 8004838:	d10c      	bne.n	8004854 <_svfiprintf_r+0x130>
 800483a:	7863      	ldrb	r3, [r4, #1]
 800483c:	2b2a      	cmp	r3, #42	; 0x2a
 800483e:	d135      	bne.n	80048ac <_svfiprintf_r+0x188>
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	3402      	adds	r4, #2
 8004844:	1d1a      	adds	r2, r3, #4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	9203      	str	r2, [sp, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfb8      	it	lt
 800484e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004914 <_svfiprintf_r+0x1f0>
 8004858:	2203      	movs	r2, #3
 800485a:	4650      	mov	r0, sl
 800485c:	7821      	ldrb	r1, [r4, #0]
 800485e:	f000 f9f7 	bl	8004c50 <memchr>
 8004862:	b140      	cbz	r0, 8004876 <_svfiprintf_r+0x152>
 8004864:	2340      	movs	r3, #64	; 0x40
 8004866:	eba0 000a 	sub.w	r0, r0, sl
 800486a:	fa03 f000 	lsl.w	r0, r3, r0
 800486e:	9b04      	ldr	r3, [sp, #16]
 8004870:	3401      	adds	r4, #1
 8004872:	4303      	orrs	r3, r0
 8004874:	9304      	str	r3, [sp, #16]
 8004876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487a:	2206      	movs	r2, #6
 800487c:	4826      	ldr	r0, [pc, #152]	; (8004918 <_svfiprintf_r+0x1f4>)
 800487e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004882:	f000 f9e5 	bl	8004c50 <memchr>
 8004886:	2800      	cmp	r0, #0
 8004888:	d038      	beq.n	80048fc <_svfiprintf_r+0x1d8>
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <_svfiprintf_r+0x1f8>)
 800488c:	bb1b      	cbnz	r3, 80048d6 <_svfiprintf_r+0x1b2>
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	3307      	adds	r3, #7
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	3308      	adds	r3, #8
 8004898:	9303      	str	r3, [sp, #12]
 800489a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800489c:	4433      	add	r3, r6
 800489e:	9309      	str	r3, [sp, #36]	; 0x24
 80048a0:	e767      	b.n	8004772 <_svfiprintf_r+0x4e>
 80048a2:	460c      	mov	r4, r1
 80048a4:	2001      	movs	r0, #1
 80048a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048aa:	e7a5      	b.n	80047f8 <_svfiprintf_r+0xd4>
 80048ac:	2300      	movs	r3, #0
 80048ae:	f04f 0c0a 	mov.w	ip, #10
 80048b2:	4619      	mov	r1, r3
 80048b4:	3401      	adds	r4, #1
 80048b6:	9305      	str	r3, [sp, #20]
 80048b8:	4620      	mov	r0, r4
 80048ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048be:	3a30      	subs	r2, #48	; 0x30
 80048c0:	2a09      	cmp	r2, #9
 80048c2:	d903      	bls.n	80048cc <_svfiprintf_r+0x1a8>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0c5      	beq.n	8004854 <_svfiprintf_r+0x130>
 80048c8:	9105      	str	r1, [sp, #20]
 80048ca:	e7c3      	b.n	8004854 <_svfiprintf_r+0x130>
 80048cc:	4604      	mov	r4, r0
 80048ce:	2301      	movs	r3, #1
 80048d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048d4:	e7f0      	b.n	80048b8 <_svfiprintf_r+0x194>
 80048d6:	ab03      	add	r3, sp, #12
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	462a      	mov	r2, r5
 80048dc:	4638      	mov	r0, r7
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <_svfiprintf_r+0x1fc>)
 80048e0:	a904      	add	r1, sp, #16
 80048e2:	f3af 8000 	nop.w
 80048e6:	1c42      	adds	r2, r0, #1
 80048e8:	4606      	mov	r6, r0
 80048ea:	d1d6      	bne.n	800489a <_svfiprintf_r+0x176>
 80048ec:	89ab      	ldrh	r3, [r5, #12]
 80048ee:	065b      	lsls	r3, r3, #25
 80048f0:	f53f af2c 	bmi.w	800474c <_svfiprintf_r+0x28>
 80048f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048f6:	b01d      	add	sp, #116	; 0x74
 80048f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fc:	ab03      	add	r3, sp, #12
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	462a      	mov	r2, r5
 8004902:	4638      	mov	r0, r7
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <_svfiprintf_r+0x1fc>)
 8004906:	a904      	add	r1, sp, #16
 8004908:	f000 f87c 	bl	8004a04 <_printf_i>
 800490c:	e7eb      	b.n	80048e6 <_svfiprintf_r+0x1c2>
 800490e:	bf00      	nop
 8004910:	08004f94 	.word	0x08004f94
 8004914:	08004f9a 	.word	0x08004f9a
 8004918:	08004f9e 	.word	0x08004f9e
 800491c:	00000000 	.word	0x00000000
 8004920:	0800466d 	.word	0x0800466d

08004924 <_printf_common>:
 8004924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	4616      	mov	r6, r2
 800492a:	4699      	mov	r9, r3
 800492c:	688a      	ldr	r2, [r1, #8]
 800492e:	690b      	ldr	r3, [r1, #16]
 8004930:	4607      	mov	r7, r0
 8004932:	4293      	cmp	r3, r2
 8004934:	bfb8      	it	lt
 8004936:	4613      	movlt	r3, r2
 8004938:	6033      	str	r3, [r6, #0]
 800493a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800493e:	460c      	mov	r4, r1
 8004940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004944:	b10a      	cbz	r2, 800494a <_printf_common+0x26>
 8004946:	3301      	adds	r3, #1
 8004948:	6033      	str	r3, [r6, #0]
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	0699      	lsls	r1, r3, #26
 800494e:	bf42      	ittt	mi
 8004950:	6833      	ldrmi	r3, [r6, #0]
 8004952:	3302      	addmi	r3, #2
 8004954:	6033      	strmi	r3, [r6, #0]
 8004956:	6825      	ldr	r5, [r4, #0]
 8004958:	f015 0506 	ands.w	r5, r5, #6
 800495c:	d106      	bne.n	800496c <_printf_common+0x48>
 800495e:	f104 0a19 	add.w	sl, r4, #25
 8004962:	68e3      	ldr	r3, [r4, #12]
 8004964:	6832      	ldr	r2, [r6, #0]
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	42ab      	cmp	r3, r5
 800496a:	dc28      	bgt.n	80049be <_printf_common+0x9a>
 800496c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004970:	1e13      	subs	r3, r2, #0
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	bf18      	it	ne
 8004976:	2301      	movne	r3, #1
 8004978:	0692      	lsls	r2, r2, #26
 800497a:	d42d      	bmi.n	80049d8 <_printf_common+0xb4>
 800497c:	4649      	mov	r1, r9
 800497e:	4638      	mov	r0, r7
 8004980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004984:	47c0      	blx	r8
 8004986:	3001      	adds	r0, #1
 8004988:	d020      	beq.n	80049cc <_printf_common+0xa8>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	68e5      	ldr	r5, [r4, #12]
 800498e:	f003 0306 	and.w	r3, r3, #6
 8004992:	2b04      	cmp	r3, #4
 8004994:	bf18      	it	ne
 8004996:	2500      	movne	r5, #0
 8004998:	6832      	ldr	r2, [r6, #0]
 800499a:	f04f 0600 	mov.w	r6, #0
 800499e:	68a3      	ldr	r3, [r4, #8]
 80049a0:	bf08      	it	eq
 80049a2:	1aad      	subeq	r5, r5, r2
 80049a4:	6922      	ldr	r2, [r4, #16]
 80049a6:	bf08      	it	eq
 80049a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049ac:	4293      	cmp	r3, r2
 80049ae:	bfc4      	itt	gt
 80049b0:	1a9b      	subgt	r3, r3, r2
 80049b2:	18ed      	addgt	r5, r5, r3
 80049b4:	341a      	adds	r4, #26
 80049b6:	42b5      	cmp	r5, r6
 80049b8:	d11a      	bne.n	80049f0 <_printf_common+0xcc>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e008      	b.n	80049d0 <_printf_common+0xac>
 80049be:	2301      	movs	r3, #1
 80049c0:	4652      	mov	r2, sl
 80049c2:	4649      	mov	r1, r9
 80049c4:	4638      	mov	r0, r7
 80049c6:	47c0      	blx	r8
 80049c8:	3001      	adds	r0, #1
 80049ca:	d103      	bne.n	80049d4 <_printf_common+0xb0>
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295
 80049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d4:	3501      	adds	r5, #1
 80049d6:	e7c4      	b.n	8004962 <_printf_common+0x3e>
 80049d8:	2030      	movs	r0, #48	; 0x30
 80049da:	18e1      	adds	r1, r4, r3
 80049dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049e6:	4422      	add	r2, r4
 80049e8:	3302      	adds	r3, #2
 80049ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ee:	e7c5      	b.n	800497c <_printf_common+0x58>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4622      	mov	r2, r4
 80049f4:	4649      	mov	r1, r9
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c0      	blx	r8
 80049fa:	3001      	adds	r0, #1
 80049fc:	d0e6      	beq.n	80049cc <_printf_common+0xa8>
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7d9      	b.n	80049b6 <_printf_common+0x92>
	...

08004a04 <_printf_i>:
 8004a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	7e0f      	ldrb	r7, [r1, #24]
 8004a0a:	4691      	mov	r9, r2
 8004a0c:	2f78      	cmp	r7, #120	; 0x78
 8004a0e:	4680      	mov	r8, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	469a      	mov	sl, r3
 8004a14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a1a:	d807      	bhi.n	8004a2c <_printf_i+0x28>
 8004a1c:	2f62      	cmp	r7, #98	; 0x62
 8004a1e:	d80a      	bhi.n	8004a36 <_printf_i+0x32>
 8004a20:	2f00      	cmp	r7, #0
 8004a22:	f000 80d9 	beq.w	8004bd8 <_printf_i+0x1d4>
 8004a26:	2f58      	cmp	r7, #88	; 0x58
 8004a28:	f000 80a4 	beq.w	8004b74 <_printf_i+0x170>
 8004a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a34:	e03a      	b.n	8004aac <_printf_i+0xa8>
 8004a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a3a:	2b15      	cmp	r3, #21
 8004a3c:	d8f6      	bhi.n	8004a2c <_printf_i+0x28>
 8004a3e:	a101      	add	r1, pc, #4	; (adr r1, 8004a44 <_printf_i+0x40>)
 8004a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004ab1 	.word	0x08004ab1
 8004a4c:	08004a2d 	.word	0x08004a2d
 8004a50:	08004a2d 	.word	0x08004a2d
 8004a54:	08004a2d 	.word	0x08004a2d
 8004a58:	08004a2d 	.word	0x08004a2d
 8004a5c:	08004ab1 	.word	0x08004ab1
 8004a60:	08004a2d 	.word	0x08004a2d
 8004a64:	08004a2d 	.word	0x08004a2d
 8004a68:	08004a2d 	.word	0x08004a2d
 8004a6c:	08004a2d 	.word	0x08004a2d
 8004a70:	08004bbf 	.word	0x08004bbf
 8004a74:	08004ae1 	.word	0x08004ae1
 8004a78:	08004ba1 	.word	0x08004ba1
 8004a7c:	08004a2d 	.word	0x08004a2d
 8004a80:	08004a2d 	.word	0x08004a2d
 8004a84:	08004be1 	.word	0x08004be1
 8004a88:	08004a2d 	.word	0x08004a2d
 8004a8c:	08004ae1 	.word	0x08004ae1
 8004a90:	08004a2d 	.word	0x08004a2d
 8004a94:	08004a2d 	.word	0x08004a2d
 8004a98:	08004ba9 	.word	0x08004ba9
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	602a      	str	r2, [r5, #0]
 8004aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0a4      	b.n	8004bfa <_printf_i+0x1f6>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	6829      	ldr	r1, [r5, #0]
 8004ab4:	0606      	lsls	r6, r0, #24
 8004ab6:	f101 0304 	add.w	r3, r1, #4
 8004aba:	d50a      	bpl.n	8004ad2 <_printf_i+0xce>
 8004abc:	680e      	ldr	r6, [r1, #0]
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	2e00      	cmp	r6, #0
 8004ac2:	da03      	bge.n	8004acc <_printf_i+0xc8>
 8004ac4:	232d      	movs	r3, #45	; 0x2d
 8004ac6:	4276      	negs	r6, r6
 8004ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004acc:	230a      	movs	r3, #10
 8004ace:	485e      	ldr	r0, [pc, #376]	; (8004c48 <_printf_i+0x244>)
 8004ad0:	e019      	b.n	8004b06 <_printf_i+0x102>
 8004ad2:	680e      	ldr	r6, [r1, #0]
 8004ad4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	bf18      	it	ne
 8004adc:	b236      	sxthne	r6, r6
 8004ade:	e7ef      	b.n	8004ac0 <_printf_i+0xbc>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	1d19      	adds	r1, r3, #4
 8004ae6:	6029      	str	r1, [r5, #0]
 8004ae8:	0601      	lsls	r1, r0, #24
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0xec>
 8004aec:	681e      	ldr	r6, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <_printf_i+0xf2>
 8004af0:	0646      	lsls	r6, r0, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0xe8>
 8004af4:	881e      	ldrh	r6, [r3, #0]
 8004af6:	2f6f      	cmp	r7, #111	; 0x6f
 8004af8:	bf0c      	ite	eq
 8004afa:	2308      	moveq	r3, #8
 8004afc:	230a      	movne	r3, #10
 8004afe:	4852      	ldr	r0, [pc, #328]	; (8004c48 <_printf_i+0x244>)
 8004b00:	2100      	movs	r1, #0
 8004b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b06:	6865      	ldr	r5, [r4, #4]
 8004b08:	2d00      	cmp	r5, #0
 8004b0a:	bfa8      	it	ge
 8004b0c:	6821      	ldrge	r1, [r4, #0]
 8004b0e:	60a5      	str	r5, [r4, #8]
 8004b10:	bfa4      	itt	ge
 8004b12:	f021 0104 	bicge.w	r1, r1, #4
 8004b16:	6021      	strge	r1, [r4, #0]
 8004b18:	b90e      	cbnz	r6, 8004b1e <_printf_i+0x11a>
 8004b1a:	2d00      	cmp	r5, #0
 8004b1c:	d04d      	beq.n	8004bba <_printf_i+0x1b6>
 8004b1e:	4615      	mov	r5, r2
 8004b20:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b24:	fb03 6711 	mls	r7, r3, r1, r6
 8004b28:	5dc7      	ldrb	r7, [r0, r7]
 8004b2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b2e:	4637      	mov	r7, r6
 8004b30:	42bb      	cmp	r3, r7
 8004b32:	460e      	mov	r6, r1
 8004b34:	d9f4      	bls.n	8004b20 <_printf_i+0x11c>
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d10b      	bne.n	8004b52 <_printf_i+0x14e>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	07de      	lsls	r6, r3, #31
 8004b3e:	d508      	bpl.n	8004b52 <_printf_i+0x14e>
 8004b40:	6923      	ldr	r3, [r4, #16]
 8004b42:	6861      	ldr	r1, [r4, #4]
 8004b44:	4299      	cmp	r1, r3
 8004b46:	bfde      	ittt	le
 8004b48:	2330      	movle	r3, #48	; 0x30
 8004b4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b52:	1b52      	subs	r2, r2, r5
 8004b54:	6122      	str	r2, [r4, #16]
 8004b56:	464b      	mov	r3, r9
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	f8cd a000 	str.w	sl, [sp]
 8004b60:	aa03      	add	r2, sp, #12
 8004b62:	f7ff fedf 	bl	8004924 <_printf_common>
 8004b66:	3001      	adds	r0, #1
 8004b68:	d14c      	bne.n	8004c04 <_printf_i+0x200>
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	b004      	add	sp, #16
 8004b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b74:	4834      	ldr	r0, [pc, #208]	; (8004c48 <_printf_i+0x244>)
 8004b76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b7a:	6829      	ldr	r1, [r5, #0]
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b82:	6029      	str	r1, [r5, #0]
 8004b84:	061d      	lsls	r5, r3, #24
 8004b86:	d514      	bpl.n	8004bb2 <_printf_i+0x1ae>
 8004b88:	07df      	lsls	r7, r3, #31
 8004b8a:	bf44      	itt	mi
 8004b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b90:	6023      	strmi	r3, [r4, #0]
 8004b92:	b91e      	cbnz	r6, 8004b9c <_printf_i+0x198>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	f023 0320 	bic.w	r3, r3, #32
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	e7af      	b.n	8004b00 <_printf_i+0xfc>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f043 0320 	orr.w	r3, r3, #32
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	2378      	movs	r3, #120	; 0x78
 8004baa:	4828      	ldr	r0, [pc, #160]	; (8004c4c <_printf_i+0x248>)
 8004bac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bb0:	e7e3      	b.n	8004b7a <_printf_i+0x176>
 8004bb2:	0659      	lsls	r1, r3, #25
 8004bb4:	bf48      	it	mi
 8004bb6:	b2b6      	uxthmi	r6, r6
 8004bb8:	e7e6      	b.n	8004b88 <_printf_i+0x184>
 8004bba:	4615      	mov	r5, r2
 8004bbc:	e7bb      	b.n	8004b36 <_printf_i+0x132>
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	6826      	ldr	r6, [r4, #0]
 8004bc2:	1d18      	adds	r0, r3, #4
 8004bc4:	6961      	ldr	r1, [r4, #20]
 8004bc6:	6028      	str	r0, [r5, #0]
 8004bc8:	0635      	lsls	r5, r6, #24
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	d501      	bpl.n	8004bd2 <_printf_i+0x1ce>
 8004bce:	6019      	str	r1, [r3, #0]
 8004bd0:	e002      	b.n	8004bd8 <_printf_i+0x1d4>
 8004bd2:	0670      	lsls	r0, r6, #25
 8004bd4:	d5fb      	bpl.n	8004bce <_printf_i+0x1ca>
 8004bd6:	8019      	strh	r1, [r3, #0]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4615      	mov	r5, r2
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	e7ba      	b.n	8004b56 <_printf_i+0x152>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	2100      	movs	r1, #0
 8004be4:	1d1a      	adds	r2, r3, #4
 8004be6:	602a      	str	r2, [r5, #0]
 8004be8:	681d      	ldr	r5, [r3, #0]
 8004bea:	6862      	ldr	r2, [r4, #4]
 8004bec:	4628      	mov	r0, r5
 8004bee:	f000 f82f 	bl	8004c50 <memchr>
 8004bf2:	b108      	cbz	r0, 8004bf8 <_printf_i+0x1f4>
 8004bf4:	1b40      	subs	r0, r0, r5
 8004bf6:	6060      	str	r0, [r4, #4]
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	6123      	str	r3, [r4, #16]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c02:	e7a8      	b.n	8004b56 <_printf_i+0x152>
 8004c04:	462a      	mov	r2, r5
 8004c06:	4649      	mov	r1, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	6923      	ldr	r3, [r4, #16]
 8004c0c:	47d0      	blx	sl
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d0ab      	beq.n	8004b6a <_printf_i+0x166>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	079b      	lsls	r3, r3, #30
 8004c16:	d413      	bmi.n	8004c40 <_printf_i+0x23c>
 8004c18:	68e0      	ldr	r0, [r4, #12]
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	4298      	cmp	r0, r3
 8004c1e:	bfb8      	it	lt
 8004c20:	4618      	movlt	r0, r3
 8004c22:	e7a4      	b.n	8004b6e <_printf_i+0x16a>
 8004c24:	2301      	movs	r3, #1
 8004c26:	4632      	mov	r2, r6
 8004c28:	4649      	mov	r1, r9
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	47d0      	blx	sl
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d09b      	beq.n	8004b6a <_printf_i+0x166>
 8004c32:	3501      	adds	r5, #1
 8004c34:	68e3      	ldr	r3, [r4, #12]
 8004c36:	9903      	ldr	r1, [sp, #12]
 8004c38:	1a5b      	subs	r3, r3, r1
 8004c3a:	42ab      	cmp	r3, r5
 8004c3c:	dcf2      	bgt.n	8004c24 <_printf_i+0x220>
 8004c3e:	e7eb      	b.n	8004c18 <_printf_i+0x214>
 8004c40:	2500      	movs	r5, #0
 8004c42:	f104 0619 	add.w	r6, r4, #25
 8004c46:	e7f5      	b.n	8004c34 <_printf_i+0x230>
 8004c48:	08004fa5 	.word	0x08004fa5
 8004c4c:	08004fb6 	.word	0x08004fb6

08004c50 <memchr>:
 8004c50:	4603      	mov	r3, r0
 8004c52:	b510      	push	{r4, lr}
 8004c54:	b2c9      	uxtb	r1, r1
 8004c56:	4402      	add	r2, r0
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	d101      	bne.n	8004c62 <memchr+0x12>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e003      	b.n	8004c6a <memchr+0x1a>
 8004c62:	7804      	ldrb	r4, [r0, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	428c      	cmp	r4, r1
 8004c68:	d1f6      	bne.n	8004c58 <memchr+0x8>
 8004c6a:	bd10      	pop	{r4, pc}

08004c6c <memmove>:
 8004c6c:	4288      	cmp	r0, r1
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	eb01 0402 	add.w	r4, r1, r2
 8004c74:	d902      	bls.n	8004c7c <memmove+0x10>
 8004c76:	4284      	cmp	r4, r0
 8004c78:	4623      	mov	r3, r4
 8004c7a:	d807      	bhi.n	8004c8c <memmove+0x20>
 8004c7c:	1e43      	subs	r3, r0, #1
 8004c7e:	42a1      	cmp	r1, r4
 8004c80:	d008      	beq.n	8004c94 <memmove+0x28>
 8004c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8a:	e7f8      	b.n	8004c7e <memmove+0x12>
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	4402      	add	r2, r0
 8004c90:	428a      	cmp	r2, r1
 8004c92:	d100      	bne.n	8004c96 <memmove+0x2a>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c9e:	e7f7      	b.n	8004c90 <memmove+0x24>

08004ca0 <_free_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	d040      	beq.n	8004d2a <_free_r+0x8a>
 8004ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cac:	1f0c      	subs	r4, r1, #4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bfb8      	it	lt
 8004cb2:	18e4      	addlt	r4, r4, r3
 8004cb4:	f000 f910 	bl	8004ed8 <__malloc_lock>
 8004cb8:	4a1c      	ldr	r2, [pc, #112]	; (8004d2c <_free_r+0x8c>)
 8004cba:	6813      	ldr	r3, [r2, #0]
 8004cbc:	b933      	cbnz	r3, 8004ccc <_free_r+0x2c>
 8004cbe:	6063      	str	r3, [r4, #4]
 8004cc0:	6014      	str	r4, [r2, #0]
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cc8:	f000 b90c 	b.w	8004ee4 <__malloc_unlock>
 8004ccc:	42a3      	cmp	r3, r4
 8004cce:	d908      	bls.n	8004ce2 <_free_r+0x42>
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	1821      	adds	r1, r4, r0
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	bf01      	itttt	eq
 8004cd8:	6819      	ldreq	r1, [r3, #0]
 8004cda:	685b      	ldreq	r3, [r3, #4]
 8004cdc:	1809      	addeq	r1, r1, r0
 8004cde:	6021      	streq	r1, [r4, #0]
 8004ce0:	e7ed      	b.n	8004cbe <_free_r+0x1e>
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b10b      	cbz	r3, 8004cec <_free_r+0x4c>
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	d9fa      	bls.n	8004ce2 <_free_r+0x42>
 8004cec:	6811      	ldr	r1, [r2, #0]
 8004cee:	1850      	adds	r0, r2, r1
 8004cf0:	42a0      	cmp	r0, r4
 8004cf2:	d10b      	bne.n	8004d0c <_free_r+0x6c>
 8004cf4:	6820      	ldr	r0, [r4, #0]
 8004cf6:	4401      	add	r1, r0
 8004cf8:	1850      	adds	r0, r2, r1
 8004cfa:	4283      	cmp	r3, r0
 8004cfc:	6011      	str	r1, [r2, #0]
 8004cfe:	d1e0      	bne.n	8004cc2 <_free_r+0x22>
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4401      	add	r1, r0
 8004d06:	6011      	str	r1, [r2, #0]
 8004d08:	6053      	str	r3, [r2, #4]
 8004d0a:	e7da      	b.n	8004cc2 <_free_r+0x22>
 8004d0c:	d902      	bls.n	8004d14 <_free_r+0x74>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	602b      	str	r3, [r5, #0]
 8004d12:	e7d6      	b.n	8004cc2 <_free_r+0x22>
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	1821      	adds	r1, r4, r0
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	bf01      	itttt	eq
 8004d1c:	6819      	ldreq	r1, [r3, #0]
 8004d1e:	685b      	ldreq	r3, [r3, #4]
 8004d20:	1809      	addeq	r1, r1, r0
 8004d22:	6021      	streq	r1, [r4, #0]
 8004d24:	6063      	str	r3, [r4, #4]
 8004d26:	6054      	str	r4, [r2, #4]
 8004d28:	e7cb      	b.n	8004cc2 <_free_r+0x22>
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	20000170 	.word	0x20000170

08004d30 <sbrk_aligned>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	4e0e      	ldr	r6, [pc, #56]	; (8004d6c <sbrk_aligned+0x3c>)
 8004d34:	460c      	mov	r4, r1
 8004d36:	6831      	ldr	r1, [r6, #0]
 8004d38:	4605      	mov	r5, r0
 8004d3a:	b911      	cbnz	r1, 8004d42 <sbrk_aligned+0x12>
 8004d3c:	f000 f8bc 	bl	8004eb8 <_sbrk_r>
 8004d40:	6030      	str	r0, [r6, #0]
 8004d42:	4621      	mov	r1, r4
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 f8b7 	bl	8004eb8 <_sbrk_r>
 8004d4a:	1c43      	adds	r3, r0, #1
 8004d4c:	d00a      	beq.n	8004d64 <sbrk_aligned+0x34>
 8004d4e:	1cc4      	adds	r4, r0, #3
 8004d50:	f024 0403 	bic.w	r4, r4, #3
 8004d54:	42a0      	cmp	r0, r4
 8004d56:	d007      	beq.n	8004d68 <sbrk_aligned+0x38>
 8004d58:	1a21      	subs	r1, r4, r0
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f8ac 	bl	8004eb8 <_sbrk_r>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d101      	bne.n	8004d68 <sbrk_aligned+0x38>
 8004d64:	f04f 34ff 	mov.w	r4, #4294967295
 8004d68:	4620      	mov	r0, r4
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	20000174 	.word	0x20000174

08004d70 <_malloc_r>:
 8004d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	1ccd      	adds	r5, r1, #3
 8004d76:	f025 0503 	bic.w	r5, r5, #3
 8004d7a:	3508      	adds	r5, #8
 8004d7c:	2d0c      	cmp	r5, #12
 8004d7e:	bf38      	it	cc
 8004d80:	250c      	movcc	r5, #12
 8004d82:	2d00      	cmp	r5, #0
 8004d84:	4607      	mov	r7, r0
 8004d86:	db01      	blt.n	8004d8c <_malloc_r+0x1c>
 8004d88:	42a9      	cmp	r1, r5
 8004d8a:	d905      	bls.n	8004d98 <_malloc_r+0x28>
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	2600      	movs	r6, #0
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	4630      	mov	r0, r6
 8004d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d98:	4e2e      	ldr	r6, [pc, #184]	; (8004e54 <_malloc_r+0xe4>)
 8004d9a:	f000 f89d 	bl	8004ed8 <__malloc_lock>
 8004d9e:	6833      	ldr	r3, [r6, #0]
 8004da0:	461c      	mov	r4, r3
 8004da2:	bb34      	cbnz	r4, 8004df2 <_malloc_r+0x82>
 8004da4:	4629      	mov	r1, r5
 8004da6:	4638      	mov	r0, r7
 8004da8:	f7ff ffc2 	bl	8004d30 <sbrk_aligned>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	4604      	mov	r4, r0
 8004db0:	d14d      	bne.n	8004e4e <_malloc_r+0xde>
 8004db2:	6834      	ldr	r4, [r6, #0]
 8004db4:	4626      	mov	r6, r4
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	d140      	bne.n	8004e3c <_malloc_r+0xcc>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	eb04 0803 	add.w	r8, r4, r3
 8004dc4:	f000 f878 	bl	8004eb8 <_sbrk_r>
 8004dc8:	4580      	cmp	r8, r0
 8004dca:	d13a      	bne.n	8004e42 <_malloc_r+0xd2>
 8004dcc:	6821      	ldr	r1, [r4, #0]
 8004dce:	3503      	adds	r5, #3
 8004dd0:	1a6d      	subs	r5, r5, r1
 8004dd2:	f025 0503 	bic.w	r5, r5, #3
 8004dd6:	3508      	adds	r5, #8
 8004dd8:	2d0c      	cmp	r5, #12
 8004dda:	bf38      	it	cc
 8004ddc:	250c      	movcc	r5, #12
 8004dde:	4638      	mov	r0, r7
 8004de0:	4629      	mov	r1, r5
 8004de2:	f7ff ffa5 	bl	8004d30 <sbrk_aligned>
 8004de6:	3001      	adds	r0, #1
 8004de8:	d02b      	beq.n	8004e42 <_malloc_r+0xd2>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	442b      	add	r3, r5
 8004dee:	6023      	str	r3, [r4, #0]
 8004df0:	e00e      	b.n	8004e10 <_malloc_r+0xa0>
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	1b52      	subs	r2, r2, r5
 8004df6:	d41e      	bmi.n	8004e36 <_malloc_r+0xc6>
 8004df8:	2a0b      	cmp	r2, #11
 8004dfa:	d916      	bls.n	8004e2a <_malloc_r+0xba>
 8004dfc:	1961      	adds	r1, r4, r5
 8004dfe:	42a3      	cmp	r3, r4
 8004e00:	6025      	str	r5, [r4, #0]
 8004e02:	bf18      	it	ne
 8004e04:	6059      	strne	r1, [r3, #4]
 8004e06:	6863      	ldr	r3, [r4, #4]
 8004e08:	bf08      	it	eq
 8004e0a:	6031      	streq	r1, [r6, #0]
 8004e0c:	5162      	str	r2, [r4, r5]
 8004e0e:	604b      	str	r3, [r1, #4]
 8004e10:	4638      	mov	r0, r7
 8004e12:	f104 060b 	add.w	r6, r4, #11
 8004e16:	f000 f865 	bl	8004ee4 <__malloc_unlock>
 8004e1a:	f026 0607 	bic.w	r6, r6, #7
 8004e1e:	1d23      	adds	r3, r4, #4
 8004e20:	1af2      	subs	r2, r6, r3
 8004e22:	d0b6      	beq.n	8004d92 <_malloc_r+0x22>
 8004e24:	1b9b      	subs	r3, r3, r6
 8004e26:	50a3      	str	r3, [r4, r2]
 8004e28:	e7b3      	b.n	8004d92 <_malloc_r+0x22>
 8004e2a:	6862      	ldr	r2, [r4, #4]
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	bf0c      	ite	eq
 8004e30:	6032      	streq	r2, [r6, #0]
 8004e32:	605a      	strne	r2, [r3, #4]
 8004e34:	e7ec      	b.n	8004e10 <_malloc_r+0xa0>
 8004e36:	4623      	mov	r3, r4
 8004e38:	6864      	ldr	r4, [r4, #4]
 8004e3a:	e7b2      	b.n	8004da2 <_malloc_r+0x32>
 8004e3c:	4634      	mov	r4, r6
 8004e3e:	6876      	ldr	r6, [r6, #4]
 8004e40:	e7b9      	b.n	8004db6 <_malloc_r+0x46>
 8004e42:	230c      	movs	r3, #12
 8004e44:	4638      	mov	r0, r7
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	f000 f84c 	bl	8004ee4 <__malloc_unlock>
 8004e4c:	e7a1      	b.n	8004d92 <_malloc_r+0x22>
 8004e4e:	6025      	str	r5, [r4, #0]
 8004e50:	e7de      	b.n	8004e10 <_malloc_r+0xa0>
 8004e52:	bf00      	nop
 8004e54:	20000170 	.word	0x20000170

08004e58 <_realloc_r>:
 8004e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5c:	4680      	mov	r8, r0
 8004e5e:	4614      	mov	r4, r2
 8004e60:	460e      	mov	r6, r1
 8004e62:	b921      	cbnz	r1, 8004e6e <_realloc_r+0x16>
 8004e64:	4611      	mov	r1, r2
 8004e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6a:	f7ff bf81 	b.w	8004d70 <_malloc_r>
 8004e6e:	b92a      	cbnz	r2, 8004e7c <_realloc_r+0x24>
 8004e70:	f7ff ff16 	bl	8004ca0 <_free_r>
 8004e74:	4625      	mov	r5, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e7c:	f000 f838 	bl	8004ef0 <_malloc_usable_size_r>
 8004e80:	4284      	cmp	r4, r0
 8004e82:	4607      	mov	r7, r0
 8004e84:	d802      	bhi.n	8004e8c <_realloc_r+0x34>
 8004e86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e8a:	d812      	bhi.n	8004eb2 <_realloc_r+0x5a>
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4640      	mov	r0, r8
 8004e90:	f7ff ff6e 	bl	8004d70 <_malloc_r>
 8004e94:	4605      	mov	r5, r0
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d0ed      	beq.n	8004e76 <_realloc_r+0x1e>
 8004e9a:	42bc      	cmp	r4, r7
 8004e9c:	4622      	mov	r2, r4
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	bf28      	it	cs
 8004ea2:	463a      	movcs	r2, r7
 8004ea4:	f7ff fbac 	bl	8004600 <memcpy>
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4640      	mov	r0, r8
 8004eac:	f7ff fef8 	bl	8004ca0 <_free_r>
 8004eb0:	e7e1      	b.n	8004e76 <_realloc_r+0x1e>
 8004eb2:	4635      	mov	r5, r6
 8004eb4:	e7df      	b.n	8004e76 <_realloc_r+0x1e>
	...

08004eb8 <_sbrk_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	2300      	movs	r3, #0
 8004ebc:	4d05      	ldr	r5, [pc, #20]	; (8004ed4 <_sbrk_r+0x1c>)
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	f7fb fd40 	bl	8000948 <_sbrk>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_sbrk_r+0x1a>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_sbrk_r+0x1a>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20000178 	.word	0x20000178

08004ed8 <__malloc_lock>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <__malloc_lock+0x8>)
 8004eda:	f000 b811 	b.w	8004f00 <__retarget_lock_acquire_recursive>
 8004ede:	bf00      	nop
 8004ee0:	2000017c 	.word	0x2000017c

08004ee4 <__malloc_unlock>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__malloc_unlock+0x8>)
 8004ee6:	f000 b80c 	b.w	8004f02 <__retarget_lock_release_recursive>
 8004eea:	bf00      	nop
 8004eec:	2000017c 	.word	0x2000017c

08004ef0 <_malloc_usable_size_r>:
 8004ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef4:	1f18      	subs	r0, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bfbc      	itt	lt
 8004efa:	580b      	ldrlt	r3, [r1, r0]
 8004efc:	18c0      	addlt	r0, r0, r3
 8004efe:	4770      	bx	lr

08004f00 <__retarget_lock_acquire_recursive>:
 8004f00:	4770      	bx	lr

08004f02 <__retarget_lock_release_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <_init>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	bf00      	nop
 8004f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	4770      	bx	lr

08004f10 <_fini>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr
