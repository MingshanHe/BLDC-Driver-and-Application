
MAGNETIC_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800311c  0800311c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800311c  0800311c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800311c  0800311c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003194  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003194  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b23  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001809  00000000  00000000  00028bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ee5  00000000  00000000  0002b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbc0  00000000  00000000  0004444d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085194  00000000  00000000  0005000d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d51a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d4  00000000  00000000  000d51f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003058 	.word	0x08003058

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003058 	.word	0x08003058

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>:
 *  Created on: Nov 24, 2022
 *      Author: hemingshan
 */
#include "magnetic_sensor.hpp"

AS5600::AS5600(I2C_HandleTypeDef &hi2c_, UART_HandleTypeDef &huart_)
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	226c      	movs	r2, #108	; 0x6c
 800016c:	701a      	strb	r2, [r3, #0]
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	2200      	movs	r2, #0
 8000172:	705a      	strb	r2, [r3, #1]
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	2201      	movs	r2, #1
 8000178:	709a      	strb	r2, [r3, #2]
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	2202      	movs	r2, #2
 800017e:	70da      	strb	r2, [r3, #3]
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	2203      	movs	r2, #3
 8000184:	711a      	strb	r2, [r3, #4]
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	2204      	movs	r2, #4
 800018a:	715a      	strb	r2, [r3, #5]
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	2205      	movs	r2, #5
 8000190:	719a      	strb	r2, [r3, #6]
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	2206      	movs	r2, #6
 8000196:	71da      	strb	r2, [r3, #7]
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2207      	movs	r2, #7
 800019c:	721a      	strb	r2, [r3, #8]
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	2208      	movs	r2, #8
 80001a2:	725a      	strb	r2, [r3, #9]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	220c      	movs	r2, #12
 80001a8:	729a      	strb	r2, [r3, #10]
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	220d      	movs	r2, #13
 80001ae:	72da      	strb	r2, [r3, #11]
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	220e      	movs	r2, #14
 80001b4:	731a      	strb	r2, [r3, #12]
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	220f      	movs	r2, #15
 80001ba:	735a      	strb	r2, [r3, #13]
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	220b      	movs	r2, #11
 80001c0:	739a      	strb	r2, [r3, #14]
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	221a      	movs	r2, #26
 80001c6:	73da      	strb	r2, [r3, #15]
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	221b      	movs	r2, #27
 80001cc:	741a      	strb	r2, [r3, #16]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	221c      	movs	r2, #28
 80001d2:	745a      	strb	r2, [r3, #17]
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	749a      	strb	r2, [r3, #18]
{
	/* I2C1 Initialization*/
	hi2c = hi2c_;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	68ba      	ldr	r2, [r7, #8]
 80001de:	3314      	adds	r3, #20
 80001e0:	4611      	mov	r1, r2
 80001e2:	2254      	movs	r2, #84	; 0x54
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 fab5 	bl	8002754 <memcpy>

	hi2c.Instance = I2C1;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	4a30      	ldr	r2, [pc, #192]	; (80002b0 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x154>)
 80001ee:	615a      	str	r2, [r3, #20]
	hi2c.Init.ClockSpeed = 100000;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a30      	ldr	r2, [pc, #192]	; (80002b4 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x158>)
 80001f4:	619a      	str	r2, [r3, #24]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2200      	movs	r2, #0
 80001fa:	61da      	str	r2, [r3, #28]
	hi2c.Init.OwnAddress1 = 0;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	2200      	movs	r2, #0
 8000200:	621a      	str	r2, [r3, #32]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000208:	625a      	str	r2, [r3, #36]	; 0x24
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2200      	movs	r2, #0
 800020e:	629a      	str	r2, [r3, #40]	; 0x28
	hi2c.Init.OwnAddress2 = 0;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2200      	movs	r2, #0
 8000214:	62da      	str	r2, [r3, #44]	; 0x2c
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	2200      	movs	r2, #0
 800021a:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2200      	movs	r2, #0
 8000220:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_I2C_Init(&hi2c) != HAL_OK)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3314      	adds	r3, #20
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fe68 	bl	8000efc <HAL_I2C_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	bf14      	ite	ne
 8000232:	2301      	movne	r3, #1
 8000234:	2300      	moveq	r3, #0
 8000236:	b2db      	uxtb	r3, r3
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0xe4>
	{
		Error_Handler();
 800023c:	f000 fa04 	bl	8000648 <Error_Handler>
	}

	/* UART1 Initialization*/
	huart = huart_;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	3368      	adds	r3, #104	; 0x68
 8000246:	4611      	mov	r1, r2
 8000248:	2244      	movs	r2, #68	; 0x44
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fa82 	bl	8002754 <memcpy>

	huart.Instance = USART1;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x15c>)
 8000254:	669a      	str	r2, [r3, #104]	; 0x68
	huart.Init.BaudRate = 115200;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800025c:	66da      	str	r2, [r3, #108]	; 0x6c
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2200      	movs	r2, #0
 8000262:	671a      	str	r2, [r3, #112]	; 0x70
	huart.Init.StopBits = UART_STOPBITS_1;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2200      	movs	r2, #0
 8000268:	675a      	str	r2, [r3, #116]	; 0x74
	huart.Init.Parity = UART_PARITY_NONE;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	2200      	movs	r2, #0
 800026e:	679a      	str	r2, [r3, #120]	; 0x78
	huart.Init.Mode = UART_MODE_TX_RX;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	220c      	movs	r2, #12
 8000274:	67da      	str	r2, [r3, #124]	; 0x7c
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	2200      	movs	r2, #0
 800027a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2200      	movs	r2, #0
 8000282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if (HAL_UART_Init(&huart) != HAL_OK)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3368      	adds	r3, #104	; 0x68
 800028a:	4618      	mov	r0, r3
 800028c:	f002 f880 	bl	8002390 <HAL_UART_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	bf14      	ite	ne
 8000296:	2301      	movne	r3, #1
 8000298:	2300      	moveq	r3, #0
 800029a:	b2db      	uxtb	r3, r3
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef+0x148>
	{
		Error_Handler();
 80002a0:	f000 f9d2 	bl	8000648 <Error_Handler>
	}
}
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	4618      	mov	r0, r3
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40005400 	.word	0x40005400
 80002b4:	000186a0 	.word	0x000186a0
 80002b8:	40013800 	.word	0x40013800

080002bc <_ZN6AS56007ReadRegEh>:
	HAL_I2C_Master_Transmit(&hi2c,(AS5600_ADDR),&Data,1,10);
	HAL_I2C_Mem_Write(&hi2c,(AS5600_ADDR),Reg,1,&Data,1,100);
}

uint8_t AS5600::ReadReg(uint8_t Reg)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af04      	add	r7, sp, #16
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	70fb      	strb	r3, [r7, #3]
	uint8_t DataRead = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c,(AS5600_ADDR),Reg,1,&DataRead,1,100);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f103 0014 	add.w	r0, r3, #20
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	b299      	uxth	r1, r3
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	b29a      	uxth	r2, r3
 80002dc:	2364      	movs	r3, #100	; 0x64
 80002de:	9302      	str	r3, [sp, #8]
 80002e0:	2301      	movs	r3, #1
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	f107 030f 	add.w	r3, r7, #15
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2301      	movs	r3, #1
 80002ec:	f000 ff4a 	bl	8001184 <HAL_I2C_Mem_Read>

	return DataRead;
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <_ZN6AS56008GetAngleEv>:
uint16_t AS5600::GetAngle(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b087      	sub	sp, #28
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uint8_t buf[12];
//	Data[0] = ReadReg(ANGLE_L);
//	Data[1] = (ReadReg(ANGLE_H) << 8);
	int Data = (ReadReg(ANGLE_L)|(ReadReg(ANGLE_H) << 8));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7b5b      	ldrb	r3, [r3, #13]
 8000308:	4619      	mov	r1, r3
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f7ff ffd6 	bl	80002bc <_ZN6AS56007ReadRegEh>
 8000310:	4603      	mov	r3, r0
 8000312:	461c      	mov	r4, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7b1b      	ldrb	r3, [r3, #12]
 8000318:	4619      	mov	r1, r3
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f7ff ffce 	bl	80002bc <_ZN6AS56007ReadRegEh>
 8000320:	4603      	mov	r3, r0
 8000322:	021b      	lsls	r3, r3, #8
 8000324:	4323      	orrs	r3, r4
 8000326:	617b      	str	r3, [r7, #20]
	sprintf((char*)buf,"%d\r\n",(ReadReg(ANGLE_L)|(ReadReg(ANGLE_H) << 8)));
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	7b5b      	ldrb	r3, [r3, #13]
 800032c:	4619      	mov	r1, r3
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f7ff ffc4 	bl	80002bc <_ZN6AS56007ReadRegEh>
 8000334:	4603      	mov	r3, r0
 8000336:	461c      	mov	r4, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7b1b      	ldrb	r3, [r3, #12]
 800033c:	4619      	mov	r1, r3
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ffbc 	bl	80002bc <_ZN6AS56007ReadRegEh>
 8000344:	4603      	mov	r3, r0
 8000346:	021b      	lsls	r3, r3, #8
 8000348:	ea44 0203 	orr.w	r2, r4, r3
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	4911      	ldr	r1, [pc, #68]	; (8000398 <_ZN6AS56008GetAngleEv+0x9c>)
 8000352:	4618      	mov	r0, r3
 8000354:	f002 fa14 	bl	8002780 <siprintf>
	sprintf((char*)buf,"%d\r\n",Data);
 8000358:	f107 0308 	add.w	r3, r7, #8
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	490e      	ldr	r1, [pc, #56]	; (8000398 <_ZN6AS56008GetAngleEv+0x9c>)
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fa0d 	bl	8002780 <siprintf>
	HAL_UART_Transmit(&huart, buf,  strlen((char*)buf), HAL_MAX_DELAY);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff feeb 	bl	800014c <strlen>
 8000376:	4603      	mov	r3, r0
 8000378:	b29a      	uxth	r2, r3
 800037a:	f107 0108 	add.w	r1, r7, #8
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	4620      	mov	r0, r4
 8000384:	f002 f851 	bl	800242a <HAL_UART_Transmit>
	HAL_Delay(100);
 8000388:	2064      	movs	r0, #100	; 0x64
 800038a:	f000 fb2b 	bl	80009e4 <HAL_Delay>
//	return Data;
	return 1;
 800038e:	2301      	movs	r3, #1
}
 8000390:	4618      	mov	r0, r3
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd90      	pop	{r4, r7, pc}
 8000398:	08003070 	.word	0x08003070

0800039c <_ZN6AS56009GetStatusEv>:

uint8_t AS5600::GetStatus(void)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b087      	sub	sp, #28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
#if DEBUG
	uint8_t buf[12];
	sprintf((char*)buf,"%x\r\n",(ReadReg(STATUS) & 0x38));
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7b9b      	ldrb	r3, [r3, #14]
 80003a8:	4619      	mov	r1, r3
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ff86 	bl	80002bc <_ZN6AS56007ReadRegEh>
 80003b0:	4603      	mov	r3, r0
 80003b2:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	4929      	ldr	r1, [pc, #164]	; (8000460 <_ZN6AS56009GetStatusEv+0xc4>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 f9df 	bl	8002780 <siprintf>
	if ((ReadReg(STATUS) & 0x38) == 0x20)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	7b9b      	ldrb	r3, [r3, #14]
 80003c6:	4619      	mov	r1, r3
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ff77 	bl	80002bc <_ZN6AS56007ReadRegEh>
 80003ce:	4603      	mov	r3, r0
 80003d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80003d4:	2b20      	cmp	r3, #32
 80003d6:	bf0c      	ite	eq
 80003d8:	2301      	moveq	r3, #1
 80003da:	2300      	movne	r3, #0
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d01a      	beq.n	8000418 <_ZN6AS56009GetStatusEv+0x7c>
	{
		strcpy((char*)buf, "Magnet!\r\n");
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <_ZN6AS56009GetStatusEv+0xc8>)
 80003e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80003ea:	c303      	stmia	r3!, {r0, r1}
 80003ec:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff fea7 	bl	800014c <strlen>
 80003fe:	4603      	mov	r3, r0
 8000400:	b29a      	uxth	r2, r3
 8000402:	f107 010c 	add.w	r1, r7, #12
 8000406:	f04f 33ff 	mov.w	r3, #4294967295
 800040a:	4620      	mov	r0, r4
 800040c:	f002 f80d 	bl	800242a <HAL_UART_Transmit>
		HAL_Delay(100);
 8000410:	2064      	movs	r0, #100	; 0x64
 8000412:	f000 fae7 	bl	80009e4 <HAL_Delay>
 8000416:	e014      	b.n	8000442 <_ZN6AS56009GetStatusEv+0xa6>
	}
	else{
		strcpy((char*)buf, "NO Magnet!\r\n");
 8000418:	f107 030c 	add.w	r3, r7, #12
 800041c:	4a12      	ldr	r2, [pc, #72]	; (8000468 <_ZN6AS56009GetStatusEv+0xcc>)
 800041e:	461c      	mov	r4, r3
 8000420:	4613      	mov	r3, r2
 8000422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000424:	c407      	stmia	r4!, {r0, r1, r2}
 8000426:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart, buf, 2, HAL_MAX_DELAY);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800042e:	f107 010c 	add.w	r1, r7, #12
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
 8000436:	2202      	movs	r2, #2
 8000438:	f001 fff7 	bl	800242a <HAL_UART_Transmit>
		HAL_Delay(100);
 800043c:	2064      	movs	r0, #100	; 0x64
 800043e:	f000 fad1 	bl	80009e4 <HAL_Delay>
	}
#endif
	return ReadReg(STATUS) & 0x38;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	7b9b      	ldrb	r3, [r3, #14]
 8000446:	4619      	mov	r1, r3
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff37 	bl	80002bc <_ZN6AS56007ReadRegEh>
 800044e:	4603      	mov	r3, r0
 8000450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000454:	b2db      	uxtb	r3, r3
}
 8000456:	4618      	mov	r0, r3
 8000458:	371c      	adds	r7, #28
 800045a:	46bd      	mov	sp, r7
 800045c:	bd90      	pop	{r4, r7, pc}
 800045e:	bf00      	nop
 8000460:	08003078 	.word	0x08003078
 8000464:	08003080 	.word	0x08003080
 8000468:	0800308c 	.word	0x0800308c

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0ac      	sub	sp, #176	; 0xb0
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000472:	f000 fa55 	bl	8000920 <HAL_Init>

  /* USER CODE BEGIN Init */
  AS5600 as5600(hi2c1, huart1);
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <main+0x40>)
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <main+0x44>)
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fe6d 	bl	800015c <_ZN6AS5600C1ER17I2C_HandleTypeDefR20__UART_HandleTypeDef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f817 	bl	80004b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 f8bd 	bl	8000604 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800048a:	f000 f859 	bl	8000540 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 800048e:	f000 f88b 	bl	80005a8 <_ZL19MX_USART1_UART_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	as5600.GetStatus();
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff81 	bl	800039c <_ZN6AS56009GetStatusEv>
	as5600.GetAngle();
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff2d 	bl	80002fc <_ZN6AS56008GetAngleEv>
	HAL_Delay(100);
 80004a2:	2064      	movs	r0, #100	; 0x64
 80004a4:	f000 fa9e 	bl	80009e4 <HAL_Delay>
	as5600.GetStatus();
 80004a8:	e7f3      	b.n	8000492 <main+0x26>
 80004aa:	bf00      	nop
 80004ac:	200000e0 	.word	0x200000e0
 80004b0:	2000008c 	.word	0x2000008c

080004b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b090      	sub	sp, #64	; 0x40
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	f107 0318 	add.w	r3, r7, #24
 80004be:	2228      	movs	r2, #40	; 0x28
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 f954 	bl	8002770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004da:	2301      	movs	r3, #1
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004de:	2310      	movs	r3, #16
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0318 	add.w	r3, r7, #24
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fb36 	bl	8001b5c <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	bf14      	ite	ne
 80004f6:	2301      	movne	r3, #1
 80004f8:	2300      	moveq	r3, #0
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8000500:	f000 f8a2 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000504:	230f      	movs	r3, #15
 8000506:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f001 fd9f 	bl	8002060 <HAL_RCC_ClockConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf14      	ite	ne
 8000528:	2301      	movne	r3, #1
 800052a:	2300      	moveq	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8000532:	f000 f889 	bl	8000648 <Error_Handler>
  }
}
 8000536:	bf00      	nop
 8000538:	3740      	adds	r7, #64	; 0x40
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <_ZL12MX_I2C1_Initv+0x60>)
 8000548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 800054c:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <_ZL12MX_I2C1_Initv+0x64>)
 800054e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 800055e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000562:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 8000566:	2200      	movs	r2, #0
 8000568:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <_ZL12MX_I2C1_Initv+0x5c>)
 800057e:	f000 fcbd 	bl	8000efc <HAL_I2C_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000592:	f000 f859 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	40005400 	.word	0x40005400
 80005a4:	000186a0 	.word	0x000186a0

080005a8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <_ZL19MX_USART1_UART_Initv+0x58>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005e0:	f001 fed6 	bl	8002390 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf14      	ite	ne
 80005ea:	2301      	movne	r3, #1
 80005ec:	2300      	moveq	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80005f4:	f000 f828 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000e0 	.word	0x200000e0
 8000600:	40013800 	.word	0x40013800

08000604 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <_ZL12MX_GPIO_Initv+0x40>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <_ZL12MX_GPIO_Initv+0x40>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <_ZL12MX_GPIO_Initv+0x40>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <_ZL12MX_GPIO_Initv+0x40>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <_ZL12MX_GPIO_Initv+0x40>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <_ZL12MX_GPIO_Initv+0x40>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x8>
	...

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_MspInit+0x5c>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <HAL_MspInit+0x5c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_MspInit+0x5c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_MspInit+0x5c>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_MspInit+0x5c>)
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_MspInit+0x5c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_MspInit+0x60>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <HAL_MspInit+0x60>)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010000 	.word	0x40010000

080006b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <HAL_I2C_MspInit+0x90>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d132      	bne.n	800073e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <HAL_I2C_MspInit+0x94>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <HAL_I2C_MspInit+0x94>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_I2C_MspInit+0x94>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f6:	2312      	movs	r3, #18
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <HAL_I2C_MspInit+0x98>)
 8000706:	f000 fa75 	bl	8000bf4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_I2C_MspInit+0x9c>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <HAL_I2C_MspInit+0x9c>)
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_I2C_MspInit+0x94>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_I2C_MspInit+0x94>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_I2C_MspInit+0x94>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400
 800074c:	40021000 	.word	0x40021000
 8000750:	40010c00 	.word	0x40010c00
 8000754:	40010000 	.word	0x40010000

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a22      	ldr	r2, [pc, #136]	; (80007fc <HAL_UART_MspInit+0xa4>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d13d      	bne.n	80007f4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_UART_MspInit+0xa8>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a20      	ldr	r2, [pc, #128]	; (8000800 <HAL_UART_MspInit+0xa8>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_UART_MspInit+0xa8>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_UART_MspInit+0xa8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <HAL_UART_MspInit+0xa8>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_UART_MspInit+0xa8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007a8:	2340      	movs	r3, #64	; 0x40
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <HAL_UART_MspInit+0xac>)
 80007bc:	f000 fa1a 	bl	8000bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <HAL_UART_MspInit+0xac>)
 80007d4:	f000 fa0e 	bl	8000bf4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_UART_MspInit+0xb0>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
 80007de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_UART_MspInit+0xb0>)
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40013800 	.word	0x40013800
 8000800:	40021000 	.word	0x40021000
 8000804:	40010c00 	.word	0x40010c00
 8000808:	40010000 	.word	0x40010000

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f8ab 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f001 ff38 	bl	8002700 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20005000 	.word	0x20005000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	20000124 	.word	0x20000124
 80008c4:	20000140 	.word	0x20000140

080008c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d6:	490d      	ldr	r1, [pc, #52]	; (800090c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008ec:	4c0a      	ldr	r4, [pc, #40]	; (8000918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008fa:	f7ff ffe5 	bl	80008c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f001 ff05 	bl	800270c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fdb3 	bl	800046c <main>
  bx lr
 8000906:	4770      	bx	lr
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000910:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 8000914:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000918:	2000013c 	.word	0x2000013c

0800091c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_2_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_Init+0x28>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_Init+0x28>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f92b 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	200f      	movs	r0, #15
 8000938:	f000 f808 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff fe8a 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x54>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x58>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f935 	bl	8000bda <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f90b 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_InitTick+0x5c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x1c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x20>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <HAL_IncTick+0x20>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000128 	.word	0x20000128

080009d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000128 	.word	0x20000128

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff fff0 	bl	80009d0 <HAL_GetTick>
 80009f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0a:	bf00      	nop
 8000a0c:	f7ff ffe0 	bl	80009d0 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff90 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff49 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff5e 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff90 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5f 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffb0 	bl	8000b48 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e169      	b.n	8000edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8158 	bne.w	8000ed6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4a9a      	ldr	r2, [pc, #616]	; (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d05e      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c30:	4a98      	ldr	r2, [pc, #608]	; (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d875      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c36:	4a98      	ldr	r2, [pc, #608]	; (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d058      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c3c:	4a96      	ldr	r2, [pc, #600]	; (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d86f      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c42:	4a96      	ldr	r2, [pc, #600]	; (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d052      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c48:	4a94      	ldr	r2, [pc, #592]	; (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d869      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a94      	ldr	r2, [pc, #592]	; (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d04c      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c54:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d863      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c5a:	4a92      	ldr	r2, [pc, #584]	; (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c60:	4a90      	ldr	r2, [pc, #576]	; (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d85d      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d82a      	bhi.n	8000cc0 <HAL_GPIO_Init+0xcc>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d859      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <HAL_GPIO_Init+0x80>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cc9 	.word	0x08000cc9
 8000c7c:	08000cdb 	.word	0x08000cdb
 8000c80:	08000d1d 	.word	0x08000d1d
 8000c84:	08000d23 	.word	0x08000d23
 8000c88:	08000d23 	.word	0x08000d23
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d23 	.word	0x08000d23
 8000c94:	08000d23 	.word	0x08000d23
 8000c98:	08000d23 	.word	0x08000d23
 8000c9c:	08000d23 	.word	0x08000d23
 8000ca0:	08000d23 	.word	0x08000d23
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d23 	.word	0x08000d23
 8000cb0:	08000d23 	.word	0x08000d23
 8000cb4:	08000d23 	.word	0x08000d23
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	4a79      	ldr	r2, [pc, #484]	; (8000ea8 <HAL_GPIO_Init+0x2b4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e029      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e024      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01f      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e01a      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e013      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e009      	b.n	8000d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e003      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          break;
 8000d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d801      	bhi.n	8000d2e <HAL_GPIO_Init+0x13a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e001      	b.n	8000d32 <HAL_GPIO_Init+0x13e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d802      	bhi.n	8000d40 <HAL_GPIO_Init+0x14c>
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x152>
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3b08      	subs	r3, #8
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b1 	beq.w	8000ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d74:	4b4d      	ldr	r3, [pc, #308]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b4a      	ldr	r3, [pc, #296]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <HAL_GPIO_Init+0x2c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d013      	beq.n	8000de0 <HAL_GPIO_Init+0x1ec>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d00d      	beq.n	8000ddc <HAL_GPIO_Init+0x1e8>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d007      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d101      	bne.n	8000dd4 <HAL_GPIO_Init+0x1e0>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e004      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000de0:	2300      	movs	r3, #0
 8000de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de4:	f002 0203 	and.w	r2, r2, #3
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	4093      	lsls	r3, r2
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df2:	492f      	ldr	r1, [pc, #188]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	492c      	ldr	r1, [pc, #176]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4928      	ldr	r1, [pc, #160]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	491e      	ldr	r1, [pc, #120]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	4918      	ldr	r1, [pc, #96]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4914      	ldr	r1, [pc, #80]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d021      	beq.n	8000ec8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60cb      	str	r3, [r1, #12]
 8000e90:	e021      	b.n	8000ed6 <HAL_GPIO_Init+0x2e2>
 8000e92:	bf00      	nop
 8000e94:	10320000 	.word	0x10320000
 8000e98:	10310000 	.word	0x10310000
 8000e9c:	10220000 	.word	0x10220000
 8000ea0:	10210000 	.word	0x10210000
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	10110000 	.word	0x10110000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40011400 	.word	0x40011400
 8000ec4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3301      	adds	r3, #1
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f47f ae8e 	bne.w	8000c08 <HAL_GPIO_Init+0x14>
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	372c      	adds	r7, #44	; 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e12b      	b.n	8001166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d106      	bne.n	8000f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fbc8 	bl	80006b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0201 	bic.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f60:	f001 f9d0 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8000f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	4a81      	ldr	r2, [pc, #516]	; (8001170 <HAL_I2C_Init+0x274>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d807      	bhi.n	8000f80 <HAL_I2C_Init+0x84>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4a80      	ldr	r2, [pc, #512]	; (8001174 <HAL_I2C_Init+0x278>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	bf94      	ite	ls
 8000f78:	2301      	movls	r3, #1
 8000f7a:	2300      	movhi	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	e006      	b.n	8000f8e <HAL_I2C_Init+0x92>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4a7d      	ldr	r2, [pc, #500]	; (8001178 <HAL_I2C_Init+0x27c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	bf94      	ite	ls
 8000f88:	2301      	movls	r3, #1
 8000f8a:	2300      	movhi	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e0e7      	b.n	8001166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4a78      	ldr	r2, [pc, #480]	; (800117c <HAL_I2C_Init+0x280>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9b      	lsrs	r3, r3, #18
 8000fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a6a      	ldr	r2, [pc, #424]	; (8001170 <HAL_I2C_Init+0x274>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d802      	bhi.n	8000fd0 <HAL_I2C_Init+0xd4>
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	e009      	b.n	8000fe4 <HAL_I2C_Init+0xe8>
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	4a69      	ldr	r2, [pc, #420]	; (8001180 <HAL_I2C_Init+0x284>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	099b      	lsrs	r3, r3, #6
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	495c      	ldr	r1, [pc, #368]	; (8001170 <HAL_I2C_Init+0x274>)
 8001000:	428b      	cmp	r3, r1
 8001002:	d819      	bhi.n	8001038 <HAL_I2C_Init+0x13c>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1e59      	subs	r1, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001012:	1c59      	adds	r1, r3, #1
 8001014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001018:	400b      	ands	r3, r1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00a      	beq.n	8001034 <HAL_I2C_Init+0x138>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1e59      	subs	r1, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fbb1 f3f3 	udiv	r3, r1, r3
 800102c:	3301      	adds	r3, #1
 800102e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001032:	e051      	b.n	80010d8 <HAL_I2C_Init+0x1dc>
 8001034:	2304      	movs	r3, #4
 8001036:	e04f      	b.n	80010d8 <HAL_I2C_Init+0x1dc>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d111      	bne.n	8001064 <HAL_I2C_Init+0x168>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1e58      	subs	r0, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	440b      	add	r3, r1
 800104e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001052:	3301      	adds	r3, #1
 8001054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf0c      	ite	eq
 800105c:	2301      	moveq	r3, #1
 800105e:	2300      	movne	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	e012      	b.n	800108a <HAL_I2C_Init+0x18e>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	1e58      	subs	r0, r3, #1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6859      	ldr	r1, [r3, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	0099      	lsls	r1, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	fbb0 f3f3 	udiv	r3, r0, r3
 800107a:	3301      	adds	r3, #1
 800107c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf0c      	ite	eq
 8001084:	2301      	moveq	r3, #1
 8001086:	2300      	movne	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_I2C_Init+0x196>
 800108e:	2301      	movs	r3, #1
 8001090:	e022      	b.n	80010d8 <HAL_I2C_Init+0x1dc>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10e      	bne.n	80010b8 <HAL_I2C_Init+0x1bc>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1e58      	subs	r0, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6859      	ldr	r1, [r3, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	440b      	add	r3, r1
 80010a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ac:	3301      	adds	r3, #1
 80010ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b6:	e00f      	b.n	80010d8 <HAL_I2C_Init+0x1dc>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1e58      	subs	r0, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6859      	ldr	r1, [r3, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	0099      	lsls	r1, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	6809      	ldr	r1, [r1, #0]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69da      	ldr	r2, [r3, #28]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6911      	ldr	r1, [r2, #16]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68d2      	ldr	r2, [r2, #12]
 8001112:	4311      	orrs	r1, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	430b      	orrs	r3, r1
 800111a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2220      	movs	r2, #32
 8001152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	000186a0 	.word	0x000186a0
 8001174:	001e847f 	.word	0x001e847f
 8001178:	003d08ff 	.word	0x003d08ff
 800117c:	431bde83 	.word	0x431bde83
 8001180:	10624dd3 	.word	0x10624dd3

08001184 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af02      	add	r7, sp, #8
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	4608      	mov	r0, r1
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	4603      	mov	r3, r0
 8001194:	817b      	strh	r3, [r7, #10]
 8001196:	460b      	mov	r3, r1
 8001198:	813b      	strh	r3, [r7, #8]
 800119a:	4613      	mov	r3, r2
 800119c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011a2:	f7ff fc15 	bl	80009d0 <HAL_GetTick>
 80011a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b20      	cmp	r3, #32
 80011b2:	f040 8244 	bne.w	800163e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2319      	movs	r3, #25
 80011bc:	2201      	movs	r2, #1
 80011be:	4982      	ldr	r1, [pc, #520]	; (80013c8 <HAL_I2C_Mem_Read+0x244>)
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f000 fb2f 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80011cc:	2302      	movs	r3, #2
 80011ce:	e237      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d101      	bne.n	80011de <HAL_I2C_Mem_Read+0x5a>
 80011da:	2302      	movs	r3, #2
 80011dc:	e230      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d007      	beq.n	8001204 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001212:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2222      	movs	r2, #34	; 0x22
 8001218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a62      	ldr	r2, [pc, #392]	; (80013cc <HAL_I2C_Mem_Read+0x248>)
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001246:	88f8      	ldrh	r0, [r7, #6]
 8001248:	893a      	ldrh	r2, [r7, #8]
 800124a:	8979      	ldrh	r1, [r7, #10]
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	4603      	mov	r3, r0
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 f9fc 	bl	8001654 <I2C_RequestMemoryRead>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e1ec      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126a:	2b00      	cmp	r3, #0
 800126c:	d113      	bne.n	8001296 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e1c0      	b.n	8001618 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129a:	2b01      	cmp	r3, #1
 800129c:	d11e      	bne.n	80012dc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012ae:	b672      	cpsid	i
}
 80012b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012d8:	b662      	cpsie	i
}
 80012da:	e035      	b.n	8001348 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d11e      	bne.n	8001322 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800131c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800131e:	b662      	cpsie	i
}
 8001320:	e012      	b.n	8001348 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001330:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001348:	e166      	b.n	8001618 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	2b03      	cmp	r3, #3
 8001350:	f200 811f 	bhi.w	8001592 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001358:	2b01      	cmp	r3, #1
 800135a:	d123      	bne.n	80013a4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800135c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 fb76 	bl	8001a52 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e167      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138c:	3b01      	subs	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001398:	b29b      	uxth	r3, r3
 800139a:	3b01      	subs	r3, #1
 800139c:	b29a      	uxth	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80013a2:	e139      	b.n	8001618 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d152      	bne.n	8001452 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b2:	2200      	movs	r2, #0
 80013b4:	4906      	ldr	r1, [pc, #24]	; (80013d0 <HAL_I2C_Mem_Read+0x24c>)
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 fa34 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e13c      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
 80013c6:	bf00      	nop
 80013c8:	00100002 	.word	0x00100002
 80013cc:	ffff0000 	.word	0xffff0000
 80013d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001404:	3b01      	subs	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001410:	b29b      	uxth	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800141a:	b662      	cpsie	i
}
 800141c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143a:	3b01      	subs	r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001446:	b29b      	uxth	r3, r3
 8001448:	3b01      	subs	r3, #1
 800144a:	b29a      	uxth	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001450:	e0e2      	b.n	8001618 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001458:	2200      	movs	r2, #0
 800145a:	497b      	ldr	r1, [pc, #492]	; (8001648 <HAL_I2C_Mem_Read+0x4c4>)
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f9e1 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0e9      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800147a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149c:	3b01      	subs	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80014b2:	4b66      	ldr	r3, [pc, #408]	; (800164c <HAL_I2C_Mem_Read+0x4c8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	4a65      	ldr	r2, [pc, #404]	; (8001650 <HAL_I2C_Mem_Read+0x4cc>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0a1a      	lsrs	r2, r3, #8
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00da      	lsls	r2, r3, #3
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d118      	bne.n	800150a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2220      	movs	r2, #32
 80014e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f043 0220 	orr.w	r2, r3, #32
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80014fa:	b662      	cpsie	i
}
 80014fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e09a      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b04      	cmp	r3, #4
 8001516:	d1d9      	bne.n	80014cc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001544:	3b01      	subs	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b01      	subs	r3, #1
 8001554:	b29a      	uxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800155a:	b662      	cpsie	i
}
 800155c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157a:	3b01      	subs	r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	3b01      	subs	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001590:	e042      	b.n	8001618 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001594:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fa5b 	bl	8001a52 <I2C_WaitOnRXNEFlagUntilTimeout>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e04c      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d118      	bne.n	8001618 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001602:	3b01      	subs	r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160e:	b29b      	uxth	r3, r3
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	f47f ae94 	bne.w	800134a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800163e:	2302      	movs	r3, #2
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	00010004 	.word	0x00010004
 800164c:	20000000 	.word	0x20000000
 8001650:	14f8b589 	.word	0x14f8b589

08001654 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	4608      	mov	r0, r1
 800165e:	4611      	mov	r1, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4603      	mov	r3, r0
 8001664:	817b      	strh	r3, [r7, #10]
 8001666:	460b      	mov	r3, r1
 8001668:	813b      	strh	r3, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800167c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800168c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	2200      	movs	r2, #0
 8001696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f8c2 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00d      	beq.n	80016c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b4:	d103      	bne.n	80016be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0aa      	b.n	8001818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016c2:	897b      	ldrh	r3, [r7, #10]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	4952      	ldr	r1, [pc, #328]	; (8001820 <I2C_RequestMemoryRead+0x1cc>)
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 f8fa 	bl	80018d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e097      	b.n	8001818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001700:	6a39      	ldr	r1, [r7, #32]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f964 	bl	80019d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00d      	beq.n	800172a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2b04      	cmp	r3, #4
 8001714:	d107      	bne.n	8001726 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001724:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e076      	b.n	8001818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001730:	893b      	ldrh	r3, [r7, #8]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	e021      	b.n	8001780 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800173c:	893b      	ldrh	r3, [r7, #8]
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	b2da      	uxtb	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	6a39      	ldr	r1, [r7, #32]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 f93e 	bl	80019d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b04      	cmp	r3, #4
 8001760:	d107      	bne.n	8001772 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001770:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e050      	b.n	8001818 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001776:	893b      	ldrh	r3, [r7, #8]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001782:	6a39      	ldr	r1, [r7, #32]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f923 	bl	80019d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00d      	beq.n	80017ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	2b04      	cmp	r3, #4
 8001796:	d107      	bne.n	80017a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e035      	b.n	8001818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f82b 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e2:	d103      	bne.n	80017ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e013      	b.n	8001818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80017f0:	897b      	ldrh	r3, [r7, #10]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	6a3a      	ldr	r2, [r7, #32]
 8001804:	4906      	ldr	r1, [pc, #24]	; (8001820 <I2C_RequestMemoryRead+0x1cc>)
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f863 	bl	80018d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	00010002 	.word	0x00010002

08001824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001834:	e025      	b.n	8001882 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d021      	beq.n	8001882 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800183e:	f7ff f8c7 	bl	80009d0 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d302      	bcc.n	8001854 <I2C_WaitOnFlagUntilTimeout+0x30>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d116      	bne.n	8001882 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2220      	movs	r2, #32
 800185e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f043 0220 	orr.w	r2, r3, #32
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e023      	b.n	80018ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10d      	bne.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4013      	ands	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	e00c      	b.n	80018c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4013      	ands	r3, r2
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d0b6      	beq.n	8001836 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018e0:	e051      	b.n	8001986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f0:	d123      	bne.n	800193a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001900:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800190a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f043 0204 	orr.w	r2, r3, #4
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e046      	b.n	80019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d021      	beq.n	8001986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001942:	f7ff f845 	bl	80009d0 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d302      	bcc.n	8001958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d116      	bne.n	8001986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f043 0220 	orr.w	r2, r3, #32
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e020      	b.n	80019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10c      	bne.n	80019aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4013      	ands	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	e00b      	b.n	80019c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	43da      	mvns	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	4013      	ands	r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d18d      	bne.n	80018e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019dc:	e02d      	b.n	8001a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f88d 	bl	8001afe <I2C_IsAcknowledgeFailed>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e02d      	b.n	8001a4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f4:	d021      	beq.n	8001a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f6:	f7fe ffeb 	bl	80009d0 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d302      	bcc.n	8001a0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d116      	bne.n	8001a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f043 0220 	orr.w	r2, r3, #32
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e007      	b.n	8001a4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a44:	2b80      	cmp	r3, #128	; 0x80
 8001a46:	d1ca      	bne.n	80019de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a5e:	e042      	b.n	8001ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d119      	bne.n	8001aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f06f 0210 	mvn.w	r2, #16
 8001a76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e029      	b.n	8001af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa2:	f7fe ff95 	bl	80009d0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d302      	bcc.n	8001ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d116      	bne.n	8001ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f043 0220 	orr.w	r2, r3, #32
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e007      	b.n	8001af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af0:	2b40      	cmp	r3, #64	; 0x40
 8001af2:	d1b5      	bne.n	8001a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b14:	d11b      	bne.n	8001b4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f043 0204 	orr.w	r2, r3, #4
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e272      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d00c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b88:	4b8f      	ldr	r3, [pc, #572]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d112      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
 8001b94:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d10b      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x12c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d168      	bne.n	8001c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e24c      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x76>
 8001bc4:	4b80      	ldr	r3, [pc, #512]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a7f      	ldr	r2, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e02e      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7a      	ldr	r2, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0xbc>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001c18:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a67      	ldr	r2, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe feca 	bl	80009d0 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7fe fec6 	bl	80009d0 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e200      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe4>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7fe feb6 	bl	80009d0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7fe feb2 	bl	80009d0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1ec      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x10c>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c96:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e1c0      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4939      	ldr	r1, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7fe fe6b 	bl	80009d0 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7fe fe67 	bl	80009d0 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1a1      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe fe4a 	bl	80009d0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7fe fe46 	bl	80009d0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e180      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d019      	beq.n	8001da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7fe fe2a 	bl	80009d0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7fe fe26 	bl	80009d0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e160      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 fad8 	bl	8002354 <RCC_Delay>
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7fe fe10 	bl	80009d0 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	e00f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7fe fe0c 	bl	80009d0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d908      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e146      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	42420000 	.word	0x42420000
 8001dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b92      	ldr	r3, [pc, #584]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e9      	bne.n	8001db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a6 	beq.w	8001f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b8b      	ldr	r3, [pc, #556]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a87      	ldr	r2, [pc, #540]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b85      	ldr	r3, [pc, #532]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b82      	ldr	r3, [pc, #520]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b7f      	ldr	r3, [pc, #508]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7e      	ldr	r2, [pc, #504]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7fe fdcd 	bl	80009d0 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7fe fdc9 	bl	80009d0 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e103      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b75      	ldr	r3, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x312>
 8001e60:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e02d      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x334>
 8001e76:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a69      	ldr	r2, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a66      	ldr	r2, [pc, #408]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	e01c      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x356>
 8001e98:	4b61      	ldr	r3, [pc, #388]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	4b5e      	ldr	r3, [pc, #376]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a57      	ldr	r2, [pc, #348]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fd7d 	bl	80009d0 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7fe fd79 	bl	80009d0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0b1      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ee      	beq.n	8001eda <HAL_RCC_OscConfig+0x37e>
 8001efc:	e014      	b.n	8001f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7fe fd67 	bl	80009d0 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe fd63 	bl	80009d0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e09b      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	4b40      	ldr	r3, [pc, #256]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8087 	beq.w	8002052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d061      	beq.n	8002014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d146      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fd37 	bl	80009d0 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7fe fd33 	bl	80009d0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e06d      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4921      	ldr	r1, [pc, #132]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a19      	ldr	r1, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	491b      	ldr	r1, [pc, #108]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fd07 	bl	80009d0 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe fd03 	bl	80009d0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e03d      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x46a>
 8001fe4:	e035      	b.n	8002052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe fcf0 	bl	80009d0 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe fcec 	bl	80009d0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e026      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x498>
 8002012:	e01e      	b.n	8002052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e019      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x500>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	429a      	cmp	r2, r3
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d0      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4965      	ldr	r1, [pc, #404]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d040      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e073      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4936      	ldr	r1, [pc, #216]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7fe fc3e 	bl	80009d0 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fc3a 	bl	80009d0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e053      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d210      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	490a      	ldr	r1, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1cc>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fb9c 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	080030d0 	.word	0x080030d0
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b490      	push	{r4, r7}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800223c:	1d3c      	adds	r4, r7, #4
 800223e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002244:	f240 2301 	movw	r3, #513	; 0x201
 8002248:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225e:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x40>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x46>
 8002272:	e02b      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	e02b      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3328      	adds	r3, #40	; 0x28
 8002284:	443b      	add	r3, r7
 8002286:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800228a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d012      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	0c5b      	lsrs	r3, r3, #17
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	3328      	adds	r3, #40	; 0x28
 80022a2:	443b      	add	r3, r7
 80022a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	fb03 f202 	mul.w	r2, r3, r2
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	e004      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	623b      	str	r3, [r7, #32]
      break;
 80022ca:	e002      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ce:	623b      	str	r3, [r7, #32]
      break;
 80022d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3728      	adds	r7, #40	; 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc90      	pop	{r4, r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	080030c0 	.word	0x080030c0
 80022e4:	40021000 	.word	0x40021000
 80022e8:	007a1200 	.word	0x007a1200
 80022ec:	003d0900 	.word	0x003d0900

080022f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f4:	4b02      	ldr	r3, [pc, #8]	; (8002300 <HAL_RCC_GetHCLKFreq+0x10>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000000 	.word	0x20000000

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002308:	f7ff fff2 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4903      	ldr	r1, [pc, #12]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	080030e0 	.word	0x080030e0

0800232c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002330:	f7ff ffde 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0adb      	lsrs	r3, r3, #11
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	080030e0 	.word	0x080030e0

08002354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <RCC_Delay+0x34>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <RCC_Delay+0x38>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0a5b      	lsrs	r3, r3, #9
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002370:	bf00      	nop
  }
  while (Delay --);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	60fa      	str	r2, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f9      	bne.n	8002370 <RCC_Delay+0x1c>
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	20000000 	.word	0x20000000
 800238c:	10624dd3 	.word	0x10624dd3

08002390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e03f      	b.n	8002422 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe f9ce 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f905 	bl	80025e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b08a      	sub	sp, #40	; 0x28
 800242e:	af02      	add	r7, sp, #8
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	d17c      	bne.n	8002544 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_UART_Transmit+0x2c>
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e075      	b.n	8002546 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_UART_Transmit+0x3e>
 8002464:	2302      	movs	r3, #2
 8002466:	e06e      	b.n	8002546 <HAL_UART_Transmit+0x11c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2221      	movs	r2, #33	; 0x21
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247e:	f7fe faa7 	bl	80009d0 <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002498:	d108      	bne.n	80024ac <HAL_UART_Transmit+0x82>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e003      	b.n	80024b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024bc:	e02a      	b.n	8002514 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	; 0x80
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f840 	bl	800254e <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e036      	b.n	8002546 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10b      	bne.n	80024f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	3302      	adds	r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e007      	b.n	8002506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	3301      	adds	r3, #1
 8002504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1cf      	bne.n	80024be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f810 	bl	800254e <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e006      	b.n	8002546 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255e:	e02c      	b.n	80025ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d028      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <UART_WaitOnFlagUntilTimeout+0x30>
 800256e:	f7fe fa2f 	bl	80009d0 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	429a      	cmp	r2, r3
 800257c:	d21d      	bcs.n	80025ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800258c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e00f      	b.n	80025da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d0c3      	beq.n	8002560 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800261e:	f023 030c 	bic.w	r3, r3, #12
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	430b      	orrs	r3, r1
 800262a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <UART_SetConfig+0x114>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d103      	bne.n	8002654 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800264c:	f7ff fe6e 	bl	800232c <HAL_RCC_GetPCLK2Freq>
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	e002      	b.n	800265a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002654:	f7ff fe56 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8002658:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <UART_SetConfig+0x118>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	0119      	lsls	r1, r3, #4
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <UART_SetConfig+0x118>)
 8002692:	fba3 0302 	umull	r0, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2064      	movs	r0, #100	; 0x64
 800269a:	fb00 f303 	mul.w	r3, r0, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	3332      	adds	r3, #50	; 0x32
 80026a4:	4a15      	ldr	r2, [pc, #84]	; (80026fc <UART_SetConfig+0x118>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b0:	4419      	add	r1, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009a      	lsls	r2, r3, #2
 80026bc:	441a      	add	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <UART_SetConfig+0x118>)
 80026ca:	fba3 0302 	umull	r0, r3, r3, r2
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2064      	movs	r0, #100	; 0x64
 80026d2:	fb00 f303 	mul.w	r3, r0, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	3332      	adds	r3, #50	; 0x32
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <UART_SetConfig+0x118>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	440a      	add	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40013800 	.word	0x40013800
 80026fc:	51eb851f 	.word	0x51eb851f

08002700 <__errno>:
 8002700:	4b01      	ldr	r3, [pc, #4]	; (8002708 <__errno+0x8>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	2000000c 	.word	0x2000000c

0800270c <__libc_init_array>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	2600      	movs	r6, #0
 8002710:	4d0c      	ldr	r5, [pc, #48]	; (8002744 <__libc_init_array+0x38>)
 8002712:	4c0d      	ldr	r4, [pc, #52]	; (8002748 <__libc_init_array+0x3c>)
 8002714:	1b64      	subs	r4, r4, r5
 8002716:	10a4      	asrs	r4, r4, #2
 8002718:	42a6      	cmp	r6, r4
 800271a:	d109      	bne.n	8002730 <__libc_init_array+0x24>
 800271c:	f000 fc9c 	bl	8003058 <_init>
 8002720:	2600      	movs	r6, #0
 8002722:	4d0a      	ldr	r5, [pc, #40]	; (800274c <__libc_init_array+0x40>)
 8002724:	4c0a      	ldr	r4, [pc, #40]	; (8002750 <__libc_init_array+0x44>)
 8002726:	1b64      	subs	r4, r4, r5
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	42a6      	cmp	r6, r4
 800272c:	d105      	bne.n	800273a <__libc_init_array+0x2e>
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	f855 3b04 	ldr.w	r3, [r5], #4
 8002734:	4798      	blx	r3
 8002736:	3601      	adds	r6, #1
 8002738:	e7ee      	b.n	8002718 <__libc_init_array+0xc>
 800273a:	f855 3b04 	ldr.w	r3, [r5], #4
 800273e:	4798      	blx	r3
 8002740:	3601      	adds	r6, #1
 8002742:	e7f2      	b.n	800272a <__libc_init_array+0x1e>
 8002744:	0800311c 	.word	0x0800311c
 8002748:	0800311c 	.word	0x0800311c
 800274c:	0800311c 	.word	0x0800311c
 8002750:	08003120 	.word	0x08003120

08002754 <memcpy>:
 8002754:	440a      	add	r2, r1
 8002756:	4291      	cmp	r1, r2
 8002758:	f100 33ff 	add.w	r3, r0, #4294967295
 800275c:	d100      	bne.n	8002760 <memcpy+0xc>
 800275e:	4770      	bx	lr
 8002760:	b510      	push	{r4, lr}
 8002762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002766:	4291      	cmp	r1, r2
 8002768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800276c:	d1f9      	bne.n	8002762 <memcpy+0xe>
 800276e:	bd10      	pop	{r4, pc}

08002770 <memset>:
 8002770:	4603      	mov	r3, r0
 8002772:	4402      	add	r2, r0
 8002774:	4293      	cmp	r3, r2
 8002776:	d100      	bne.n	800277a <memset+0xa>
 8002778:	4770      	bx	lr
 800277a:	f803 1b01 	strb.w	r1, [r3], #1
 800277e:	e7f9      	b.n	8002774 <memset+0x4>

08002780 <siprintf>:
 8002780:	b40e      	push	{r1, r2, r3}
 8002782:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002786:	b500      	push	{lr}
 8002788:	b09c      	sub	sp, #112	; 0x70
 800278a:	ab1d      	add	r3, sp, #116	; 0x74
 800278c:	9002      	str	r0, [sp, #8]
 800278e:	9006      	str	r0, [sp, #24]
 8002790:	9107      	str	r1, [sp, #28]
 8002792:	9104      	str	r1, [sp, #16]
 8002794:	4808      	ldr	r0, [pc, #32]	; (80027b8 <siprintf+0x38>)
 8002796:	4909      	ldr	r1, [pc, #36]	; (80027bc <siprintf+0x3c>)
 8002798:	f853 2b04 	ldr.w	r2, [r3], #4
 800279c:	9105      	str	r1, [sp, #20]
 800279e:	6800      	ldr	r0, [r0, #0]
 80027a0:	a902      	add	r1, sp, #8
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	f000 f868 	bl	8002878 <_svfiprintf_r>
 80027a8:	2200      	movs	r2, #0
 80027aa:	9b02      	ldr	r3, [sp, #8]
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	b01c      	add	sp, #112	; 0x70
 80027b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027b4:	b003      	add	sp, #12
 80027b6:	4770      	bx	lr
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	ffff0208 	.word	0xffff0208

080027c0 <__ssputs_r>:
 80027c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c4:	688e      	ldr	r6, [r1, #8]
 80027c6:	4682      	mov	sl, r0
 80027c8:	429e      	cmp	r6, r3
 80027ca:	460c      	mov	r4, r1
 80027cc:	4690      	mov	r8, r2
 80027ce:	461f      	mov	r7, r3
 80027d0:	d838      	bhi.n	8002844 <__ssputs_r+0x84>
 80027d2:	898a      	ldrh	r2, [r1, #12]
 80027d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027d8:	d032      	beq.n	8002840 <__ssputs_r+0x80>
 80027da:	6825      	ldr	r5, [r4, #0]
 80027dc:	6909      	ldr	r1, [r1, #16]
 80027de:	3301      	adds	r3, #1
 80027e0:	eba5 0901 	sub.w	r9, r5, r1
 80027e4:	6965      	ldr	r5, [r4, #20]
 80027e6:	444b      	add	r3, r9
 80027e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027f0:	106d      	asrs	r5, r5, #1
 80027f2:	429d      	cmp	r5, r3
 80027f4:	bf38      	it	cc
 80027f6:	461d      	movcc	r5, r3
 80027f8:	0553      	lsls	r3, r2, #21
 80027fa:	d531      	bpl.n	8002860 <__ssputs_r+0xa0>
 80027fc:	4629      	mov	r1, r5
 80027fe:	f000 fb61 	bl	8002ec4 <_malloc_r>
 8002802:	4606      	mov	r6, r0
 8002804:	b950      	cbnz	r0, 800281c <__ssputs_r+0x5c>
 8002806:	230c      	movs	r3, #12
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	f8ca 3000 	str.w	r3, [sl]
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002816:	81a3      	strh	r3, [r4, #12]
 8002818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800281c:	464a      	mov	r2, r9
 800281e:	6921      	ldr	r1, [r4, #16]
 8002820:	f7ff ff98 	bl	8002754 <memcpy>
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800282a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282e:	81a3      	strh	r3, [r4, #12]
 8002830:	6126      	str	r6, [r4, #16]
 8002832:	444e      	add	r6, r9
 8002834:	6026      	str	r6, [r4, #0]
 8002836:	463e      	mov	r6, r7
 8002838:	6165      	str	r5, [r4, #20]
 800283a:	eba5 0509 	sub.w	r5, r5, r9
 800283e:	60a5      	str	r5, [r4, #8]
 8002840:	42be      	cmp	r6, r7
 8002842:	d900      	bls.n	8002846 <__ssputs_r+0x86>
 8002844:	463e      	mov	r6, r7
 8002846:	4632      	mov	r2, r6
 8002848:	4641      	mov	r1, r8
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	f000 fab8 	bl	8002dc0 <memmove>
 8002850:	68a3      	ldr	r3, [r4, #8]
 8002852:	2000      	movs	r0, #0
 8002854:	1b9b      	subs	r3, r3, r6
 8002856:	60a3      	str	r3, [r4, #8]
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	4433      	add	r3, r6
 800285c:	6023      	str	r3, [r4, #0]
 800285e:	e7db      	b.n	8002818 <__ssputs_r+0x58>
 8002860:	462a      	mov	r2, r5
 8002862:	f000 fba3 	bl	8002fac <_realloc_r>
 8002866:	4606      	mov	r6, r0
 8002868:	2800      	cmp	r0, #0
 800286a:	d1e1      	bne.n	8002830 <__ssputs_r+0x70>
 800286c:	4650      	mov	r0, sl
 800286e:	6921      	ldr	r1, [r4, #16]
 8002870:	f000 fac0 	bl	8002df4 <_free_r>
 8002874:	e7c7      	b.n	8002806 <__ssputs_r+0x46>
	...

08002878 <_svfiprintf_r>:
 8002878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287c:	4698      	mov	r8, r3
 800287e:	898b      	ldrh	r3, [r1, #12]
 8002880:	4607      	mov	r7, r0
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	460d      	mov	r5, r1
 8002886:	4614      	mov	r4, r2
 8002888:	b09d      	sub	sp, #116	; 0x74
 800288a:	d50e      	bpl.n	80028aa <_svfiprintf_r+0x32>
 800288c:	690b      	ldr	r3, [r1, #16]
 800288e:	b963      	cbnz	r3, 80028aa <_svfiprintf_r+0x32>
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	f000 fb17 	bl	8002ec4 <_malloc_r>
 8002896:	6028      	str	r0, [r5, #0]
 8002898:	6128      	str	r0, [r5, #16]
 800289a:	b920      	cbnz	r0, 80028a6 <_svfiprintf_r+0x2e>
 800289c:	230c      	movs	r3, #12
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	e0d1      	b.n	8002a4a <_svfiprintf_r+0x1d2>
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	616b      	str	r3, [r5, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9309      	str	r3, [sp, #36]	; 0x24
 80028ae:	2320      	movs	r3, #32
 80028b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028b4:	2330      	movs	r3, #48	; 0x30
 80028b6:	f04f 0901 	mov.w	r9, #1
 80028ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80028be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002a64 <_svfiprintf_r+0x1ec>
 80028c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028c6:	4623      	mov	r3, r4
 80028c8:	469a      	mov	sl, r3
 80028ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028ce:	b10a      	cbz	r2, 80028d4 <_svfiprintf_r+0x5c>
 80028d0:	2a25      	cmp	r2, #37	; 0x25
 80028d2:	d1f9      	bne.n	80028c8 <_svfiprintf_r+0x50>
 80028d4:	ebba 0b04 	subs.w	fp, sl, r4
 80028d8:	d00b      	beq.n	80028f2 <_svfiprintf_r+0x7a>
 80028da:	465b      	mov	r3, fp
 80028dc:	4622      	mov	r2, r4
 80028de:	4629      	mov	r1, r5
 80028e0:	4638      	mov	r0, r7
 80028e2:	f7ff ff6d 	bl	80027c0 <__ssputs_r>
 80028e6:	3001      	adds	r0, #1
 80028e8:	f000 80aa 	beq.w	8002a40 <_svfiprintf_r+0x1c8>
 80028ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ee:	445a      	add	r2, fp
 80028f0:	9209      	str	r2, [sp, #36]	; 0x24
 80028f2:	f89a 3000 	ldrb.w	r3, [sl]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80a2 	beq.w	8002a40 <_svfiprintf_r+0x1c8>
 80028fc:	2300      	movs	r3, #0
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002906:	f10a 0a01 	add.w	sl, sl, #1
 800290a:	9304      	str	r3, [sp, #16]
 800290c:	9307      	str	r3, [sp, #28]
 800290e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002912:	931a      	str	r3, [sp, #104]	; 0x68
 8002914:	4654      	mov	r4, sl
 8002916:	2205      	movs	r2, #5
 8002918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800291c:	4851      	ldr	r0, [pc, #324]	; (8002a64 <_svfiprintf_r+0x1ec>)
 800291e:	f000 fa41 	bl	8002da4 <memchr>
 8002922:	9a04      	ldr	r2, [sp, #16]
 8002924:	b9d8      	cbnz	r0, 800295e <_svfiprintf_r+0xe6>
 8002926:	06d0      	lsls	r0, r2, #27
 8002928:	bf44      	itt	mi
 800292a:	2320      	movmi	r3, #32
 800292c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002930:	0711      	lsls	r1, r2, #28
 8002932:	bf44      	itt	mi
 8002934:	232b      	movmi	r3, #43	; 0x2b
 8002936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800293a:	f89a 3000 	ldrb.w	r3, [sl]
 800293e:	2b2a      	cmp	r3, #42	; 0x2a
 8002940:	d015      	beq.n	800296e <_svfiprintf_r+0xf6>
 8002942:	4654      	mov	r4, sl
 8002944:	2000      	movs	r0, #0
 8002946:	f04f 0c0a 	mov.w	ip, #10
 800294a:	9a07      	ldr	r2, [sp, #28]
 800294c:	4621      	mov	r1, r4
 800294e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002952:	3b30      	subs	r3, #48	; 0x30
 8002954:	2b09      	cmp	r3, #9
 8002956:	d94e      	bls.n	80029f6 <_svfiprintf_r+0x17e>
 8002958:	b1b0      	cbz	r0, 8002988 <_svfiprintf_r+0x110>
 800295a:	9207      	str	r2, [sp, #28]
 800295c:	e014      	b.n	8002988 <_svfiprintf_r+0x110>
 800295e:	eba0 0308 	sub.w	r3, r0, r8
 8002962:	fa09 f303 	lsl.w	r3, r9, r3
 8002966:	4313      	orrs	r3, r2
 8002968:	46a2      	mov	sl, r4
 800296a:	9304      	str	r3, [sp, #16]
 800296c:	e7d2      	b.n	8002914 <_svfiprintf_r+0x9c>
 800296e:	9b03      	ldr	r3, [sp, #12]
 8002970:	1d19      	adds	r1, r3, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	9103      	str	r1, [sp, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	bfbb      	ittet	lt
 800297a:	425b      	neglt	r3, r3
 800297c:	f042 0202 	orrlt.w	r2, r2, #2
 8002980:	9307      	strge	r3, [sp, #28]
 8002982:	9307      	strlt	r3, [sp, #28]
 8002984:	bfb8      	it	lt
 8002986:	9204      	strlt	r2, [sp, #16]
 8002988:	7823      	ldrb	r3, [r4, #0]
 800298a:	2b2e      	cmp	r3, #46	; 0x2e
 800298c:	d10c      	bne.n	80029a8 <_svfiprintf_r+0x130>
 800298e:	7863      	ldrb	r3, [r4, #1]
 8002990:	2b2a      	cmp	r3, #42	; 0x2a
 8002992:	d135      	bne.n	8002a00 <_svfiprintf_r+0x188>
 8002994:	9b03      	ldr	r3, [sp, #12]
 8002996:	3402      	adds	r4, #2
 8002998:	1d1a      	adds	r2, r3, #4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	9203      	str	r2, [sp, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bfb8      	it	lt
 80029a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80029a6:	9305      	str	r3, [sp, #20]
 80029a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002a68 <_svfiprintf_r+0x1f0>
 80029ac:	2203      	movs	r2, #3
 80029ae:	4650      	mov	r0, sl
 80029b0:	7821      	ldrb	r1, [r4, #0]
 80029b2:	f000 f9f7 	bl	8002da4 <memchr>
 80029b6:	b140      	cbz	r0, 80029ca <_svfiprintf_r+0x152>
 80029b8:	2340      	movs	r3, #64	; 0x40
 80029ba:	eba0 000a 	sub.w	r0, r0, sl
 80029be:	fa03 f000 	lsl.w	r0, r3, r0
 80029c2:	9b04      	ldr	r3, [sp, #16]
 80029c4:	3401      	adds	r4, #1
 80029c6:	4303      	orrs	r3, r0
 80029c8:	9304      	str	r3, [sp, #16]
 80029ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ce:	2206      	movs	r2, #6
 80029d0:	4826      	ldr	r0, [pc, #152]	; (8002a6c <_svfiprintf_r+0x1f4>)
 80029d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029d6:	f000 f9e5 	bl	8002da4 <memchr>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d038      	beq.n	8002a50 <_svfiprintf_r+0x1d8>
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <_svfiprintf_r+0x1f8>)
 80029e0:	bb1b      	cbnz	r3, 8002a2a <_svfiprintf_r+0x1b2>
 80029e2:	9b03      	ldr	r3, [sp, #12]
 80029e4:	3307      	adds	r3, #7
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	3308      	adds	r3, #8
 80029ec:	9303      	str	r3, [sp, #12]
 80029ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f0:	4433      	add	r3, r6
 80029f2:	9309      	str	r3, [sp, #36]	; 0x24
 80029f4:	e767      	b.n	80028c6 <_svfiprintf_r+0x4e>
 80029f6:	460c      	mov	r4, r1
 80029f8:	2001      	movs	r0, #1
 80029fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80029fe:	e7a5      	b.n	800294c <_svfiprintf_r+0xd4>
 8002a00:	2300      	movs	r3, #0
 8002a02:	f04f 0c0a 	mov.w	ip, #10
 8002a06:	4619      	mov	r1, r3
 8002a08:	3401      	adds	r4, #1
 8002a0a:	9305      	str	r3, [sp, #20]
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a12:	3a30      	subs	r2, #48	; 0x30
 8002a14:	2a09      	cmp	r2, #9
 8002a16:	d903      	bls.n	8002a20 <_svfiprintf_r+0x1a8>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0c5      	beq.n	80029a8 <_svfiprintf_r+0x130>
 8002a1c:	9105      	str	r1, [sp, #20]
 8002a1e:	e7c3      	b.n	80029a8 <_svfiprintf_r+0x130>
 8002a20:	4604      	mov	r4, r0
 8002a22:	2301      	movs	r3, #1
 8002a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a28:	e7f0      	b.n	8002a0c <_svfiprintf_r+0x194>
 8002a2a:	ab03      	add	r3, sp, #12
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	462a      	mov	r2, r5
 8002a30:	4638      	mov	r0, r7
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <_svfiprintf_r+0x1fc>)
 8002a34:	a904      	add	r1, sp, #16
 8002a36:	f3af 8000 	nop.w
 8002a3a:	1c42      	adds	r2, r0, #1
 8002a3c:	4606      	mov	r6, r0
 8002a3e:	d1d6      	bne.n	80029ee <_svfiprintf_r+0x176>
 8002a40:	89ab      	ldrh	r3, [r5, #12]
 8002a42:	065b      	lsls	r3, r3, #25
 8002a44:	f53f af2c 	bmi.w	80028a0 <_svfiprintf_r+0x28>
 8002a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a4a:	b01d      	add	sp, #116	; 0x74
 8002a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a50:	ab03      	add	r3, sp, #12
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	462a      	mov	r2, r5
 8002a56:	4638      	mov	r0, r7
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <_svfiprintf_r+0x1fc>)
 8002a5a:	a904      	add	r1, sp, #16
 8002a5c:	f000 f87c 	bl	8002b58 <_printf_i>
 8002a60:	e7eb      	b.n	8002a3a <_svfiprintf_r+0x1c2>
 8002a62:	bf00      	nop
 8002a64:	080030e8 	.word	0x080030e8
 8002a68:	080030ee 	.word	0x080030ee
 8002a6c:	080030f2 	.word	0x080030f2
 8002a70:	00000000 	.word	0x00000000
 8002a74:	080027c1 	.word	0x080027c1

08002a78 <_printf_common>:
 8002a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a7c:	4616      	mov	r6, r2
 8002a7e:	4699      	mov	r9, r3
 8002a80:	688a      	ldr	r2, [r1, #8]
 8002a82:	690b      	ldr	r3, [r1, #16]
 8002a84:	4607      	mov	r7, r0
 8002a86:	4293      	cmp	r3, r2
 8002a88:	bfb8      	it	lt
 8002a8a:	4613      	movlt	r3, r2
 8002a8c:	6033      	str	r3, [r6, #0]
 8002a8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a92:	460c      	mov	r4, r1
 8002a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a98:	b10a      	cbz	r2, 8002a9e <_printf_common+0x26>
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	6033      	str	r3, [r6, #0]
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	0699      	lsls	r1, r3, #26
 8002aa2:	bf42      	ittt	mi
 8002aa4:	6833      	ldrmi	r3, [r6, #0]
 8002aa6:	3302      	addmi	r3, #2
 8002aa8:	6033      	strmi	r3, [r6, #0]
 8002aaa:	6825      	ldr	r5, [r4, #0]
 8002aac:	f015 0506 	ands.w	r5, r5, #6
 8002ab0:	d106      	bne.n	8002ac0 <_printf_common+0x48>
 8002ab2:	f104 0a19 	add.w	sl, r4, #25
 8002ab6:	68e3      	ldr	r3, [r4, #12]
 8002ab8:	6832      	ldr	r2, [r6, #0]
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	42ab      	cmp	r3, r5
 8002abe:	dc28      	bgt.n	8002b12 <_printf_common+0x9a>
 8002ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ac4:	1e13      	subs	r3, r2, #0
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	bf18      	it	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	0692      	lsls	r2, r2, #26
 8002ace:	d42d      	bmi.n	8002b2c <_printf_common+0xb4>
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	4638      	mov	r0, r7
 8002ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ad8:	47c0      	blx	r8
 8002ada:	3001      	adds	r0, #1
 8002adc:	d020      	beq.n	8002b20 <_printf_common+0xa8>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	68e5      	ldr	r5, [r4, #12]
 8002ae2:	f003 0306 	and.w	r3, r3, #6
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf18      	it	ne
 8002aea:	2500      	movne	r5, #0
 8002aec:	6832      	ldr	r2, [r6, #0]
 8002aee:	f04f 0600 	mov.w	r6, #0
 8002af2:	68a3      	ldr	r3, [r4, #8]
 8002af4:	bf08      	it	eq
 8002af6:	1aad      	subeq	r5, r5, r2
 8002af8:	6922      	ldr	r2, [r4, #16]
 8002afa:	bf08      	it	eq
 8002afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b00:	4293      	cmp	r3, r2
 8002b02:	bfc4      	itt	gt
 8002b04:	1a9b      	subgt	r3, r3, r2
 8002b06:	18ed      	addgt	r5, r5, r3
 8002b08:	341a      	adds	r4, #26
 8002b0a:	42b5      	cmp	r5, r6
 8002b0c:	d11a      	bne.n	8002b44 <_printf_common+0xcc>
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e008      	b.n	8002b24 <_printf_common+0xac>
 8002b12:	2301      	movs	r3, #1
 8002b14:	4652      	mov	r2, sl
 8002b16:	4649      	mov	r1, r9
 8002b18:	4638      	mov	r0, r7
 8002b1a:	47c0      	blx	r8
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d103      	bne.n	8002b28 <_printf_common+0xb0>
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b28:	3501      	adds	r5, #1
 8002b2a:	e7c4      	b.n	8002ab6 <_printf_common+0x3e>
 8002b2c:	2030      	movs	r0, #48	; 0x30
 8002b2e:	18e1      	adds	r1, r4, r3
 8002b30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b3a:	4422      	add	r2, r4
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b42:	e7c5      	b.n	8002ad0 <_printf_common+0x58>
 8002b44:	2301      	movs	r3, #1
 8002b46:	4622      	mov	r2, r4
 8002b48:	4649      	mov	r1, r9
 8002b4a:	4638      	mov	r0, r7
 8002b4c:	47c0      	blx	r8
 8002b4e:	3001      	adds	r0, #1
 8002b50:	d0e6      	beq.n	8002b20 <_printf_common+0xa8>
 8002b52:	3601      	adds	r6, #1
 8002b54:	e7d9      	b.n	8002b0a <_printf_common+0x92>
	...

08002b58 <_printf_i>:
 8002b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b5c:	7e0f      	ldrb	r7, [r1, #24]
 8002b5e:	4691      	mov	r9, r2
 8002b60:	2f78      	cmp	r7, #120	; 0x78
 8002b62:	4680      	mov	r8, r0
 8002b64:	460c      	mov	r4, r1
 8002b66:	469a      	mov	sl, r3
 8002b68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b6e:	d807      	bhi.n	8002b80 <_printf_i+0x28>
 8002b70:	2f62      	cmp	r7, #98	; 0x62
 8002b72:	d80a      	bhi.n	8002b8a <_printf_i+0x32>
 8002b74:	2f00      	cmp	r7, #0
 8002b76:	f000 80d9 	beq.w	8002d2c <_printf_i+0x1d4>
 8002b7a:	2f58      	cmp	r7, #88	; 0x58
 8002b7c:	f000 80a4 	beq.w	8002cc8 <_printf_i+0x170>
 8002b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b88:	e03a      	b.n	8002c00 <_printf_i+0xa8>
 8002b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b8e:	2b15      	cmp	r3, #21
 8002b90:	d8f6      	bhi.n	8002b80 <_printf_i+0x28>
 8002b92:	a101      	add	r1, pc, #4	; (adr r1, 8002b98 <_printf_i+0x40>)
 8002b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b98:	08002bf1 	.word	0x08002bf1
 8002b9c:	08002c05 	.word	0x08002c05
 8002ba0:	08002b81 	.word	0x08002b81
 8002ba4:	08002b81 	.word	0x08002b81
 8002ba8:	08002b81 	.word	0x08002b81
 8002bac:	08002b81 	.word	0x08002b81
 8002bb0:	08002c05 	.word	0x08002c05
 8002bb4:	08002b81 	.word	0x08002b81
 8002bb8:	08002b81 	.word	0x08002b81
 8002bbc:	08002b81 	.word	0x08002b81
 8002bc0:	08002b81 	.word	0x08002b81
 8002bc4:	08002d13 	.word	0x08002d13
 8002bc8:	08002c35 	.word	0x08002c35
 8002bcc:	08002cf5 	.word	0x08002cf5
 8002bd0:	08002b81 	.word	0x08002b81
 8002bd4:	08002b81 	.word	0x08002b81
 8002bd8:	08002d35 	.word	0x08002d35
 8002bdc:	08002b81 	.word	0x08002b81
 8002be0:	08002c35 	.word	0x08002c35
 8002be4:	08002b81 	.word	0x08002b81
 8002be8:	08002b81 	.word	0x08002b81
 8002bec:	08002cfd 	.word	0x08002cfd
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	1d1a      	adds	r2, r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	602a      	str	r2, [r5, #0]
 8002bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0a4      	b.n	8002d4e <_printf_i+0x1f6>
 8002c04:	6820      	ldr	r0, [r4, #0]
 8002c06:	6829      	ldr	r1, [r5, #0]
 8002c08:	0606      	lsls	r6, r0, #24
 8002c0a:	f101 0304 	add.w	r3, r1, #4
 8002c0e:	d50a      	bpl.n	8002c26 <_printf_i+0xce>
 8002c10:	680e      	ldr	r6, [r1, #0]
 8002c12:	602b      	str	r3, [r5, #0]
 8002c14:	2e00      	cmp	r6, #0
 8002c16:	da03      	bge.n	8002c20 <_printf_i+0xc8>
 8002c18:	232d      	movs	r3, #45	; 0x2d
 8002c1a:	4276      	negs	r6, r6
 8002c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c20:	230a      	movs	r3, #10
 8002c22:	485e      	ldr	r0, [pc, #376]	; (8002d9c <_printf_i+0x244>)
 8002c24:	e019      	b.n	8002c5a <_printf_i+0x102>
 8002c26:	680e      	ldr	r6, [r1, #0]
 8002c28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c2c:	602b      	str	r3, [r5, #0]
 8002c2e:	bf18      	it	ne
 8002c30:	b236      	sxthne	r6, r6
 8002c32:	e7ef      	b.n	8002c14 <_printf_i+0xbc>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	6820      	ldr	r0, [r4, #0]
 8002c38:	1d19      	adds	r1, r3, #4
 8002c3a:	6029      	str	r1, [r5, #0]
 8002c3c:	0601      	lsls	r1, r0, #24
 8002c3e:	d501      	bpl.n	8002c44 <_printf_i+0xec>
 8002c40:	681e      	ldr	r6, [r3, #0]
 8002c42:	e002      	b.n	8002c4a <_printf_i+0xf2>
 8002c44:	0646      	lsls	r6, r0, #25
 8002c46:	d5fb      	bpl.n	8002c40 <_printf_i+0xe8>
 8002c48:	881e      	ldrh	r6, [r3, #0]
 8002c4a:	2f6f      	cmp	r7, #111	; 0x6f
 8002c4c:	bf0c      	ite	eq
 8002c4e:	2308      	moveq	r3, #8
 8002c50:	230a      	movne	r3, #10
 8002c52:	4852      	ldr	r0, [pc, #328]	; (8002d9c <_printf_i+0x244>)
 8002c54:	2100      	movs	r1, #0
 8002c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c5a:	6865      	ldr	r5, [r4, #4]
 8002c5c:	2d00      	cmp	r5, #0
 8002c5e:	bfa8      	it	ge
 8002c60:	6821      	ldrge	r1, [r4, #0]
 8002c62:	60a5      	str	r5, [r4, #8]
 8002c64:	bfa4      	itt	ge
 8002c66:	f021 0104 	bicge.w	r1, r1, #4
 8002c6a:	6021      	strge	r1, [r4, #0]
 8002c6c:	b90e      	cbnz	r6, 8002c72 <_printf_i+0x11a>
 8002c6e:	2d00      	cmp	r5, #0
 8002c70:	d04d      	beq.n	8002d0e <_printf_i+0x1b6>
 8002c72:	4615      	mov	r5, r2
 8002c74:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c78:	fb03 6711 	mls	r7, r3, r1, r6
 8002c7c:	5dc7      	ldrb	r7, [r0, r7]
 8002c7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c82:	4637      	mov	r7, r6
 8002c84:	42bb      	cmp	r3, r7
 8002c86:	460e      	mov	r6, r1
 8002c88:	d9f4      	bls.n	8002c74 <_printf_i+0x11c>
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d10b      	bne.n	8002ca6 <_printf_i+0x14e>
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	07de      	lsls	r6, r3, #31
 8002c92:	d508      	bpl.n	8002ca6 <_printf_i+0x14e>
 8002c94:	6923      	ldr	r3, [r4, #16]
 8002c96:	6861      	ldr	r1, [r4, #4]
 8002c98:	4299      	cmp	r1, r3
 8002c9a:	bfde      	ittt	le
 8002c9c:	2330      	movle	r3, #48	; 0x30
 8002c9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ca2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ca6:	1b52      	subs	r2, r2, r5
 8002ca8:	6122      	str	r2, [r4, #16]
 8002caa:	464b      	mov	r3, r9
 8002cac:	4621      	mov	r1, r4
 8002cae:	4640      	mov	r0, r8
 8002cb0:	f8cd a000 	str.w	sl, [sp]
 8002cb4:	aa03      	add	r2, sp, #12
 8002cb6:	f7ff fedf 	bl	8002a78 <_printf_common>
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d14c      	bne.n	8002d58 <_printf_i+0x200>
 8002cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc2:	b004      	add	sp, #16
 8002cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc8:	4834      	ldr	r0, [pc, #208]	; (8002d9c <_printf_i+0x244>)
 8002cca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002cce:	6829      	ldr	r1, [r5, #0]
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cd6:	6029      	str	r1, [r5, #0]
 8002cd8:	061d      	lsls	r5, r3, #24
 8002cda:	d514      	bpl.n	8002d06 <_printf_i+0x1ae>
 8002cdc:	07df      	lsls	r7, r3, #31
 8002cde:	bf44      	itt	mi
 8002ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8002ce4:	6023      	strmi	r3, [r4, #0]
 8002ce6:	b91e      	cbnz	r6, 8002cf0 <_printf_i+0x198>
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	f023 0320 	bic.w	r3, r3, #32
 8002cee:	6023      	str	r3, [r4, #0]
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	e7af      	b.n	8002c54 <_printf_i+0xfc>
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	f043 0320 	orr.w	r3, r3, #32
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	2378      	movs	r3, #120	; 0x78
 8002cfe:	4828      	ldr	r0, [pc, #160]	; (8002da0 <_printf_i+0x248>)
 8002d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d04:	e7e3      	b.n	8002cce <_printf_i+0x176>
 8002d06:	0659      	lsls	r1, r3, #25
 8002d08:	bf48      	it	mi
 8002d0a:	b2b6      	uxthmi	r6, r6
 8002d0c:	e7e6      	b.n	8002cdc <_printf_i+0x184>
 8002d0e:	4615      	mov	r5, r2
 8002d10:	e7bb      	b.n	8002c8a <_printf_i+0x132>
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	6826      	ldr	r6, [r4, #0]
 8002d16:	1d18      	adds	r0, r3, #4
 8002d18:	6961      	ldr	r1, [r4, #20]
 8002d1a:	6028      	str	r0, [r5, #0]
 8002d1c:	0635      	lsls	r5, r6, #24
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	d501      	bpl.n	8002d26 <_printf_i+0x1ce>
 8002d22:	6019      	str	r1, [r3, #0]
 8002d24:	e002      	b.n	8002d2c <_printf_i+0x1d4>
 8002d26:	0670      	lsls	r0, r6, #25
 8002d28:	d5fb      	bpl.n	8002d22 <_printf_i+0x1ca>
 8002d2a:	8019      	strh	r1, [r3, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	4615      	mov	r5, r2
 8002d30:	6123      	str	r3, [r4, #16]
 8002d32:	e7ba      	b.n	8002caa <_printf_i+0x152>
 8002d34:	682b      	ldr	r3, [r5, #0]
 8002d36:	2100      	movs	r1, #0
 8002d38:	1d1a      	adds	r2, r3, #4
 8002d3a:	602a      	str	r2, [r5, #0]
 8002d3c:	681d      	ldr	r5, [r3, #0]
 8002d3e:	6862      	ldr	r2, [r4, #4]
 8002d40:	4628      	mov	r0, r5
 8002d42:	f000 f82f 	bl	8002da4 <memchr>
 8002d46:	b108      	cbz	r0, 8002d4c <_printf_i+0x1f4>
 8002d48:	1b40      	subs	r0, r0, r5
 8002d4a:	6060      	str	r0, [r4, #4]
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	6123      	str	r3, [r4, #16]
 8002d50:	2300      	movs	r3, #0
 8002d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d56:	e7a8      	b.n	8002caa <_printf_i+0x152>
 8002d58:	462a      	mov	r2, r5
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	4640      	mov	r0, r8
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	47d0      	blx	sl
 8002d62:	3001      	adds	r0, #1
 8002d64:	d0ab      	beq.n	8002cbe <_printf_i+0x166>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	079b      	lsls	r3, r3, #30
 8002d6a:	d413      	bmi.n	8002d94 <_printf_i+0x23c>
 8002d6c:	68e0      	ldr	r0, [r4, #12]
 8002d6e:	9b03      	ldr	r3, [sp, #12]
 8002d70:	4298      	cmp	r0, r3
 8002d72:	bfb8      	it	lt
 8002d74:	4618      	movlt	r0, r3
 8002d76:	e7a4      	b.n	8002cc2 <_printf_i+0x16a>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	4632      	mov	r2, r6
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	4640      	mov	r0, r8
 8002d80:	47d0      	blx	sl
 8002d82:	3001      	adds	r0, #1
 8002d84:	d09b      	beq.n	8002cbe <_printf_i+0x166>
 8002d86:	3501      	adds	r5, #1
 8002d88:	68e3      	ldr	r3, [r4, #12]
 8002d8a:	9903      	ldr	r1, [sp, #12]
 8002d8c:	1a5b      	subs	r3, r3, r1
 8002d8e:	42ab      	cmp	r3, r5
 8002d90:	dcf2      	bgt.n	8002d78 <_printf_i+0x220>
 8002d92:	e7eb      	b.n	8002d6c <_printf_i+0x214>
 8002d94:	2500      	movs	r5, #0
 8002d96:	f104 0619 	add.w	r6, r4, #25
 8002d9a:	e7f5      	b.n	8002d88 <_printf_i+0x230>
 8002d9c:	080030f9 	.word	0x080030f9
 8002da0:	0800310a 	.word	0x0800310a

08002da4 <memchr>:
 8002da4:	4603      	mov	r3, r0
 8002da6:	b510      	push	{r4, lr}
 8002da8:	b2c9      	uxtb	r1, r1
 8002daa:	4402      	add	r2, r0
 8002dac:	4293      	cmp	r3, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	d101      	bne.n	8002db6 <memchr+0x12>
 8002db2:	2000      	movs	r0, #0
 8002db4:	e003      	b.n	8002dbe <memchr+0x1a>
 8002db6:	7804      	ldrb	r4, [r0, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	428c      	cmp	r4, r1
 8002dbc:	d1f6      	bne.n	8002dac <memchr+0x8>
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <memmove>:
 8002dc0:	4288      	cmp	r0, r1
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	eb01 0402 	add.w	r4, r1, r2
 8002dc8:	d902      	bls.n	8002dd0 <memmove+0x10>
 8002dca:	4284      	cmp	r4, r0
 8002dcc:	4623      	mov	r3, r4
 8002dce:	d807      	bhi.n	8002de0 <memmove+0x20>
 8002dd0:	1e43      	subs	r3, r0, #1
 8002dd2:	42a1      	cmp	r1, r4
 8002dd4:	d008      	beq.n	8002de8 <memmove+0x28>
 8002dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dde:	e7f8      	b.n	8002dd2 <memmove+0x12>
 8002de0:	4601      	mov	r1, r0
 8002de2:	4402      	add	r2, r0
 8002de4:	428a      	cmp	r2, r1
 8002de6:	d100      	bne.n	8002dea <memmove+0x2a>
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002df2:	e7f7      	b.n	8002de4 <memmove+0x24>

08002df4 <_free_r>:
 8002df4:	b538      	push	{r3, r4, r5, lr}
 8002df6:	4605      	mov	r5, r0
 8002df8:	2900      	cmp	r1, #0
 8002dfa:	d040      	beq.n	8002e7e <_free_r+0x8a>
 8002dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e00:	1f0c      	subs	r4, r1, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bfb8      	it	lt
 8002e06:	18e4      	addlt	r4, r4, r3
 8002e08:	f000 f910 	bl	800302c <__malloc_lock>
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <_free_r+0x8c>)
 8002e0e:	6813      	ldr	r3, [r2, #0]
 8002e10:	b933      	cbnz	r3, 8002e20 <_free_r+0x2c>
 8002e12:	6063      	str	r3, [r4, #4]
 8002e14:	6014      	str	r4, [r2, #0]
 8002e16:	4628      	mov	r0, r5
 8002e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e1c:	f000 b90c 	b.w	8003038 <__malloc_unlock>
 8002e20:	42a3      	cmp	r3, r4
 8002e22:	d908      	bls.n	8002e36 <_free_r+0x42>
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	1821      	adds	r1, r4, r0
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	bf01      	itttt	eq
 8002e2c:	6819      	ldreq	r1, [r3, #0]
 8002e2e:	685b      	ldreq	r3, [r3, #4]
 8002e30:	1809      	addeq	r1, r1, r0
 8002e32:	6021      	streq	r1, [r4, #0]
 8002e34:	e7ed      	b.n	8002e12 <_free_r+0x1e>
 8002e36:	461a      	mov	r2, r3
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	b10b      	cbz	r3, 8002e40 <_free_r+0x4c>
 8002e3c:	42a3      	cmp	r3, r4
 8002e3e:	d9fa      	bls.n	8002e36 <_free_r+0x42>
 8002e40:	6811      	ldr	r1, [r2, #0]
 8002e42:	1850      	adds	r0, r2, r1
 8002e44:	42a0      	cmp	r0, r4
 8002e46:	d10b      	bne.n	8002e60 <_free_r+0x6c>
 8002e48:	6820      	ldr	r0, [r4, #0]
 8002e4a:	4401      	add	r1, r0
 8002e4c:	1850      	adds	r0, r2, r1
 8002e4e:	4283      	cmp	r3, r0
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	d1e0      	bne.n	8002e16 <_free_r+0x22>
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4401      	add	r1, r0
 8002e5a:	6011      	str	r1, [r2, #0]
 8002e5c:	6053      	str	r3, [r2, #4]
 8002e5e:	e7da      	b.n	8002e16 <_free_r+0x22>
 8002e60:	d902      	bls.n	8002e68 <_free_r+0x74>
 8002e62:	230c      	movs	r3, #12
 8002e64:	602b      	str	r3, [r5, #0]
 8002e66:	e7d6      	b.n	8002e16 <_free_r+0x22>
 8002e68:	6820      	ldr	r0, [r4, #0]
 8002e6a:	1821      	adds	r1, r4, r0
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	bf01      	itttt	eq
 8002e70:	6819      	ldreq	r1, [r3, #0]
 8002e72:	685b      	ldreq	r3, [r3, #4]
 8002e74:	1809      	addeq	r1, r1, r0
 8002e76:	6021      	streq	r1, [r4, #0]
 8002e78:	6063      	str	r3, [r4, #4]
 8002e7a:	6054      	str	r4, [r2, #4]
 8002e7c:	e7cb      	b.n	8002e16 <_free_r+0x22>
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	2000012c 	.word	0x2000012c

08002e84 <sbrk_aligned>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	4e0e      	ldr	r6, [pc, #56]	; (8002ec0 <sbrk_aligned+0x3c>)
 8002e88:	460c      	mov	r4, r1
 8002e8a:	6831      	ldr	r1, [r6, #0]
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	b911      	cbnz	r1, 8002e96 <sbrk_aligned+0x12>
 8002e90:	f000 f8bc 	bl	800300c <_sbrk_r>
 8002e94:	6030      	str	r0, [r6, #0]
 8002e96:	4621      	mov	r1, r4
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f000 f8b7 	bl	800300c <_sbrk_r>
 8002e9e:	1c43      	adds	r3, r0, #1
 8002ea0:	d00a      	beq.n	8002eb8 <sbrk_aligned+0x34>
 8002ea2:	1cc4      	adds	r4, r0, #3
 8002ea4:	f024 0403 	bic.w	r4, r4, #3
 8002ea8:	42a0      	cmp	r0, r4
 8002eaa:	d007      	beq.n	8002ebc <sbrk_aligned+0x38>
 8002eac:	1a21      	subs	r1, r4, r0
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f000 f8ac 	bl	800300c <_sbrk_r>
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d101      	bne.n	8002ebc <sbrk_aligned+0x38>
 8002eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	20000130 	.word	0x20000130

08002ec4 <_malloc_r>:
 8002ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec8:	1ccd      	adds	r5, r1, #3
 8002eca:	f025 0503 	bic.w	r5, r5, #3
 8002ece:	3508      	adds	r5, #8
 8002ed0:	2d0c      	cmp	r5, #12
 8002ed2:	bf38      	it	cc
 8002ed4:	250c      	movcc	r5, #12
 8002ed6:	2d00      	cmp	r5, #0
 8002ed8:	4607      	mov	r7, r0
 8002eda:	db01      	blt.n	8002ee0 <_malloc_r+0x1c>
 8002edc:	42a9      	cmp	r1, r5
 8002ede:	d905      	bls.n	8002eec <_malloc_r+0x28>
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	2600      	movs	r6, #0
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eec:	4e2e      	ldr	r6, [pc, #184]	; (8002fa8 <_malloc_r+0xe4>)
 8002eee:	f000 f89d 	bl	800302c <__malloc_lock>
 8002ef2:	6833      	ldr	r3, [r6, #0]
 8002ef4:	461c      	mov	r4, r3
 8002ef6:	bb34      	cbnz	r4, 8002f46 <_malloc_r+0x82>
 8002ef8:	4629      	mov	r1, r5
 8002efa:	4638      	mov	r0, r7
 8002efc:	f7ff ffc2 	bl	8002e84 <sbrk_aligned>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	4604      	mov	r4, r0
 8002f04:	d14d      	bne.n	8002fa2 <_malloc_r+0xde>
 8002f06:	6834      	ldr	r4, [r6, #0]
 8002f08:	4626      	mov	r6, r4
 8002f0a:	2e00      	cmp	r6, #0
 8002f0c:	d140      	bne.n	8002f90 <_malloc_r+0xcc>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	4631      	mov	r1, r6
 8002f12:	4638      	mov	r0, r7
 8002f14:	eb04 0803 	add.w	r8, r4, r3
 8002f18:	f000 f878 	bl	800300c <_sbrk_r>
 8002f1c:	4580      	cmp	r8, r0
 8002f1e:	d13a      	bne.n	8002f96 <_malloc_r+0xd2>
 8002f20:	6821      	ldr	r1, [r4, #0]
 8002f22:	3503      	adds	r5, #3
 8002f24:	1a6d      	subs	r5, r5, r1
 8002f26:	f025 0503 	bic.w	r5, r5, #3
 8002f2a:	3508      	adds	r5, #8
 8002f2c:	2d0c      	cmp	r5, #12
 8002f2e:	bf38      	it	cc
 8002f30:	250c      	movcc	r5, #12
 8002f32:	4638      	mov	r0, r7
 8002f34:	4629      	mov	r1, r5
 8002f36:	f7ff ffa5 	bl	8002e84 <sbrk_aligned>
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	d02b      	beq.n	8002f96 <_malloc_r+0xd2>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	442b      	add	r3, r5
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	e00e      	b.n	8002f64 <_malloc_r+0xa0>
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	1b52      	subs	r2, r2, r5
 8002f4a:	d41e      	bmi.n	8002f8a <_malloc_r+0xc6>
 8002f4c:	2a0b      	cmp	r2, #11
 8002f4e:	d916      	bls.n	8002f7e <_malloc_r+0xba>
 8002f50:	1961      	adds	r1, r4, r5
 8002f52:	42a3      	cmp	r3, r4
 8002f54:	6025      	str	r5, [r4, #0]
 8002f56:	bf18      	it	ne
 8002f58:	6059      	strne	r1, [r3, #4]
 8002f5a:	6863      	ldr	r3, [r4, #4]
 8002f5c:	bf08      	it	eq
 8002f5e:	6031      	streq	r1, [r6, #0]
 8002f60:	5162      	str	r2, [r4, r5]
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	4638      	mov	r0, r7
 8002f66:	f104 060b 	add.w	r6, r4, #11
 8002f6a:	f000 f865 	bl	8003038 <__malloc_unlock>
 8002f6e:	f026 0607 	bic.w	r6, r6, #7
 8002f72:	1d23      	adds	r3, r4, #4
 8002f74:	1af2      	subs	r2, r6, r3
 8002f76:	d0b6      	beq.n	8002ee6 <_malloc_r+0x22>
 8002f78:	1b9b      	subs	r3, r3, r6
 8002f7a:	50a3      	str	r3, [r4, r2]
 8002f7c:	e7b3      	b.n	8002ee6 <_malloc_r+0x22>
 8002f7e:	6862      	ldr	r2, [r4, #4]
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	bf0c      	ite	eq
 8002f84:	6032      	streq	r2, [r6, #0]
 8002f86:	605a      	strne	r2, [r3, #4]
 8002f88:	e7ec      	b.n	8002f64 <_malloc_r+0xa0>
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	6864      	ldr	r4, [r4, #4]
 8002f8e:	e7b2      	b.n	8002ef6 <_malloc_r+0x32>
 8002f90:	4634      	mov	r4, r6
 8002f92:	6876      	ldr	r6, [r6, #4]
 8002f94:	e7b9      	b.n	8002f0a <_malloc_r+0x46>
 8002f96:	230c      	movs	r3, #12
 8002f98:	4638      	mov	r0, r7
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	f000 f84c 	bl	8003038 <__malloc_unlock>
 8002fa0:	e7a1      	b.n	8002ee6 <_malloc_r+0x22>
 8002fa2:	6025      	str	r5, [r4, #0]
 8002fa4:	e7de      	b.n	8002f64 <_malloc_r+0xa0>
 8002fa6:	bf00      	nop
 8002fa8:	2000012c 	.word	0x2000012c

08002fac <_realloc_r>:
 8002fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb0:	4680      	mov	r8, r0
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	460e      	mov	r6, r1
 8002fb6:	b921      	cbnz	r1, 8002fc2 <_realloc_r+0x16>
 8002fb8:	4611      	mov	r1, r2
 8002fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fbe:	f7ff bf81 	b.w	8002ec4 <_malloc_r>
 8002fc2:	b92a      	cbnz	r2, 8002fd0 <_realloc_r+0x24>
 8002fc4:	f7ff ff16 	bl	8002df4 <_free_r>
 8002fc8:	4625      	mov	r5, r4
 8002fca:	4628      	mov	r0, r5
 8002fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd0:	f000 f838 	bl	8003044 <_malloc_usable_size_r>
 8002fd4:	4284      	cmp	r4, r0
 8002fd6:	4607      	mov	r7, r0
 8002fd8:	d802      	bhi.n	8002fe0 <_realloc_r+0x34>
 8002fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fde:	d812      	bhi.n	8003006 <_realloc_r+0x5a>
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	4640      	mov	r0, r8
 8002fe4:	f7ff ff6e 	bl	8002ec4 <_malloc_r>
 8002fe8:	4605      	mov	r5, r0
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d0ed      	beq.n	8002fca <_realloc_r+0x1e>
 8002fee:	42bc      	cmp	r4, r7
 8002ff0:	4622      	mov	r2, r4
 8002ff2:	4631      	mov	r1, r6
 8002ff4:	bf28      	it	cs
 8002ff6:	463a      	movcs	r2, r7
 8002ff8:	f7ff fbac 	bl	8002754 <memcpy>
 8002ffc:	4631      	mov	r1, r6
 8002ffe:	4640      	mov	r0, r8
 8003000:	f7ff fef8 	bl	8002df4 <_free_r>
 8003004:	e7e1      	b.n	8002fca <_realloc_r+0x1e>
 8003006:	4635      	mov	r5, r6
 8003008:	e7df      	b.n	8002fca <_realloc_r+0x1e>
	...

0800300c <_sbrk_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	2300      	movs	r3, #0
 8003010:	4d05      	ldr	r5, [pc, #20]	; (8003028 <_sbrk_r+0x1c>)
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	602b      	str	r3, [r5, #0]
 8003018:	f7fd fc20 	bl	800085c <_sbrk>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d102      	bne.n	8003026 <_sbrk_r+0x1a>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	b103      	cbz	r3, 8003026 <_sbrk_r+0x1a>
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	20000134 	.word	0x20000134

0800302c <__malloc_lock>:
 800302c:	4801      	ldr	r0, [pc, #4]	; (8003034 <__malloc_lock+0x8>)
 800302e:	f000 b811 	b.w	8003054 <__retarget_lock_acquire_recursive>
 8003032:	bf00      	nop
 8003034:	20000138 	.word	0x20000138

08003038 <__malloc_unlock>:
 8003038:	4801      	ldr	r0, [pc, #4]	; (8003040 <__malloc_unlock+0x8>)
 800303a:	f000 b80c 	b.w	8003056 <__retarget_lock_release_recursive>
 800303e:	bf00      	nop
 8003040:	20000138 	.word	0x20000138

08003044 <_malloc_usable_size_r>:
 8003044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003048:	1f18      	subs	r0, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	bfbc      	itt	lt
 800304e:	580b      	ldrlt	r3, [r1, r0]
 8003050:	18c0      	addlt	r0, r0, r3
 8003052:	4770      	bx	lr

08003054 <__retarget_lock_acquire_recursive>:
 8003054:	4770      	bx	lr

08003056 <__retarget_lock_release_recursive>:
 8003056:	4770      	bx	lr

08003058 <_init>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr

08003064 <_fini>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr
